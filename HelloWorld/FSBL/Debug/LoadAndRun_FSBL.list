
HelloWorld_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010104  3418074c  3418074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  34190850  34190850  00010850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  341908d0  341908d0  00011980  2**0
                  CONTENTS
  4 .ARM          00000008  341908d0  341908d0  000108d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  341908d8  341908d8  00011980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  341908d8  341908d8  000108d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  341908dc  341908dc  000108dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  341c0000  341908e0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000000  341c0068  341c0068  00011980  2**0
                  CONTENTS
 10 .gnu.sgstubs  00000020  34190960  34190960  00011960  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          000004a0  341c0068  341c0068  00012068  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  341c0508  341c0508  00012068  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  00011980  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002484f  00000000  00000000  000119ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003505  00000000  00000000  00036209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c38  00000000  00000000  00039710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000158e  00000000  00000000  0003b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000545ca  00000000  00000000  0003c8d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c918  00000000  00000000  00090ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0020fb0a  00000000  00000000  000ad7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002bd2c2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007c58  00000000  00000000  002bd308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004a  00000000  00000000  002c4f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

3418074c <__do_global_dtors_aux>:
3418074c:	b510      	push	{r4, lr}
3418074e:	4c05      	ldr	r4, [pc, #20]	@ (34180764 <__do_global_dtors_aux+0x18>)
34180750:	7823      	ldrb	r3, [r4, #0]
34180752:	b933      	cbnz	r3, 34180762 <__do_global_dtors_aux+0x16>
34180754:	4b04      	ldr	r3, [pc, #16]	@ (34180768 <__do_global_dtors_aux+0x1c>)
34180756:	b113      	cbz	r3, 3418075e <__do_global_dtors_aux+0x12>
34180758:	4804      	ldr	r0, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x20>)
3418075a:	f3af 8000 	nop.w
3418075e:	2301      	movs	r3, #1
34180760:	7023      	strb	r3, [r4, #0]
34180762:	bd10      	pop	{r4, pc}
34180764:	341c0068 	.word	0x341c0068
34180768:	00000000 	.word	0x00000000
3418076c:	34190838 	.word	0x34190838

34180770 <frame_dummy>:
34180770:	b508      	push	{r3, lr}
34180772:	4b03      	ldr	r3, [pc, #12]	@ (34180780 <frame_dummy+0x10>)
34180774:	b11b      	cbz	r3, 3418077e <frame_dummy+0xe>
34180776:	4903      	ldr	r1, [pc, #12]	@ (34180784 <frame_dummy+0x14>)
34180778:	4803      	ldr	r0, [pc, #12]	@ (34180788 <frame_dummy+0x18>)
3418077a:	f3af 8000 	nop.w
3418077e:	bd08      	pop	{r3, pc}
34180780:	00000000 	.word	0x00000000
34180784:	341c006c 	.word	0x341c006c
34180788:	34190838 	.word	0x34190838

3418078c <__aeabi_uldivmod>:
3418078c:	b953      	cbnz	r3, 341807a4 <__aeabi_uldivmod+0x18>
3418078e:	b94a      	cbnz	r2, 341807a4 <__aeabi_uldivmod+0x18>
34180790:	2900      	cmp	r1, #0
34180792:	bf08      	it	eq
34180794:	2800      	cmpeq	r0, #0
34180796:	bf1c      	itt	ne
34180798:	f04f 31ff 	movne.w	r1, #4294967295
3418079c:	f04f 30ff 	movne.w	r0, #4294967295
341807a0:	f000 b97e 	b.w	34180aa0 <__aeabi_idiv0>
341807a4:	f1ad 0c08 	sub.w	ip, sp, #8
341807a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
341807ac:	f000 f806 	bl	341807bc <__udivmoddi4>
341807b0:	f8dd e004 	ldr.w	lr, [sp, #4]
341807b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
341807b8:	b004      	add	sp, #16
341807ba:	4770      	bx	lr

341807bc <__udivmoddi4>:
341807bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
341807c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
341807c2:	460c      	mov	r4, r1
341807c4:	2b00      	cmp	r3, #0
341807c6:	d14d      	bne.n	34180864 <__udivmoddi4+0xa8>
341807c8:	428a      	cmp	r2, r1
341807ca:	460f      	mov	r7, r1
341807cc:	4684      	mov	ip, r0
341807ce:	4696      	mov	lr, r2
341807d0:	fab2 f382 	clz	r3, r2
341807d4:	d960      	bls.n	34180898 <__udivmoddi4+0xdc>
341807d6:	b14b      	cbz	r3, 341807ec <__udivmoddi4+0x30>
341807d8:	fa02 fe03 	lsl.w	lr, r2, r3
341807dc:	f1c3 0220 	rsb	r2, r3, #32
341807e0:	409f      	lsls	r7, r3
341807e2:	fa00 fc03 	lsl.w	ip, r0, r3
341807e6:	fa20 f202 	lsr.w	r2, r0, r2
341807ea:	4317      	orrs	r7, r2
341807ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
341807f0:	fa1f f48e 	uxth.w	r4, lr
341807f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
341807f8:	fbb7 f1f6 	udiv	r1, r7, r6
341807fc:	fb06 7711 	mls	r7, r6, r1, r7
34180800:	fb01 f004 	mul.w	r0, r1, r4
34180804:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
34180808:	4290      	cmp	r0, r2
3418080a:	d908      	bls.n	3418081e <__udivmoddi4+0x62>
3418080c:	eb1e 0202 	adds.w	r2, lr, r2
34180810:	f101 37ff 	add.w	r7, r1, #4294967295
34180814:	d202      	bcs.n	3418081c <__udivmoddi4+0x60>
34180816:	4290      	cmp	r0, r2
34180818:	f200 812d 	bhi.w	34180a76 <__udivmoddi4+0x2ba>
3418081c:	4639      	mov	r1, r7
3418081e:	1a12      	subs	r2, r2, r0
34180820:	fa1f fc8c 	uxth.w	ip, ip
34180824:	fbb2 f0f6 	udiv	r0, r2, r6
34180828:	fb06 2210 	mls	r2, r6, r0, r2
3418082c:	fb00 f404 	mul.w	r4, r0, r4
34180830:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
34180834:	4564      	cmp	r4, ip
34180836:	d908      	bls.n	3418084a <__udivmoddi4+0x8e>
34180838:	eb1e 0c0c 	adds.w	ip, lr, ip
3418083c:	f100 32ff 	add.w	r2, r0, #4294967295
34180840:	d202      	bcs.n	34180848 <__udivmoddi4+0x8c>
34180842:	4564      	cmp	r4, ip
34180844:	f200 811a 	bhi.w	34180a7c <__udivmoddi4+0x2c0>
34180848:	4610      	mov	r0, r2
3418084a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
3418084e:	ebac 0c04 	sub.w	ip, ip, r4
34180852:	2100      	movs	r1, #0
34180854:	b125      	cbz	r5, 34180860 <__udivmoddi4+0xa4>
34180856:	fa2c f303 	lsr.w	r3, ip, r3
3418085a:	2200      	movs	r2, #0
3418085c:	e9c5 3200 	strd	r3, r2, [r5]
34180860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34180864:	428b      	cmp	r3, r1
34180866:	d905      	bls.n	34180874 <__udivmoddi4+0xb8>
34180868:	b10d      	cbz	r5, 3418086e <__udivmoddi4+0xb2>
3418086a:	e9c5 0100 	strd	r0, r1, [r5]
3418086e:	2100      	movs	r1, #0
34180870:	4608      	mov	r0, r1
34180872:	e7f5      	b.n	34180860 <__udivmoddi4+0xa4>
34180874:	fab3 f183 	clz	r1, r3
34180878:	2900      	cmp	r1, #0
3418087a:	d14d      	bne.n	34180918 <__udivmoddi4+0x15c>
3418087c:	42a3      	cmp	r3, r4
3418087e:	f0c0 80f2 	bcc.w	34180a66 <__udivmoddi4+0x2aa>
34180882:	4290      	cmp	r0, r2
34180884:	f080 80ef 	bcs.w	34180a66 <__udivmoddi4+0x2aa>
34180888:	4606      	mov	r6, r0
3418088a:	4623      	mov	r3, r4
3418088c:	4608      	mov	r0, r1
3418088e:	2d00      	cmp	r5, #0
34180890:	d0e6      	beq.n	34180860 <__udivmoddi4+0xa4>
34180892:	e9c5 6300 	strd	r6, r3, [r5]
34180896:	e7e3      	b.n	34180860 <__udivmoddi4+0xa4>
34180898:	2b00      	cmp	r3, #0
3418089a:	f040 80a2 	bne.w	341809e2 <__udivmoddi4+0x226>
3418089e:	1a8a      	subs	r2, r1, r2
341808a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
341808a4:	fa1f f68e 	uxth.w	r6, lr
341808a8:	2101      	movs	r1, #1
341808aa:	fbb2 f4f7 	udiv	r4, r2, r7
341808ae:	fb07 2014 	mls	r0, r7, r4, r2
341808b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
341808b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
341808ba:	fb06 f004 	mul.w	r0, r6, r4
341808be:	4290      	cmp	r0, r2
341808c0:	d90f      	bls.n	341808e2 <__udivmoddi4+0x126>
341808c2:	eb1e 0202 	adds.w	r2, lr, r2
341808c6:	f104 38ff 	add.w	r8, r4, #4294967295
341808ca:	bf2c      	ite	cs
341808cc:	f04f 0901 	movcs.w	r9, #1
341808d0:	f04f 0900 	movcc.w	r9, #0
341808d4:	4290      	cmp	r0, r2
341808d6:	d903      	bls.n	341808e0 <__udivmoddi4+0x124>
341808d8:	f1b9 0f00 	cmp.w	r9, #0
341808dc:	f000 80c8 	beq.w	34180a70 <__udivmoddi4+0x2b4>
341808e0:	4644      	mov	r4, r8
341808e2:	1a12      	subs	r2, r2, r0
341808e4:	fa1f fc8c 	uxth.w	ip, ip
341808e8:	fbb2 f0f7 	udiv	r0, r2, r7
341808ec:	fb07 2210 	mls	r2, r7, r0, r2
341808f0:	fb00 f606 	mul.w	r6, r0, r6
341808f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
341808f8:	4566      	cmp	r6, ip
341808fa:	d908      	bls.n	3418090e <__udivmoddi4+0x152>
341808fc:	eb1e 0c0c 	adds.w	ip, lr, ip
34180900:	f100 32ff 	add.w	r2, r0, #4294967295
34180904:	d202      	bcs.n	3418090c <__udivmoddi4+0x150>
34180906:	4566      	cmp	r6, ip
34180908:	f200 80bb 	bhi.w	34180a82 <__udivmoddi4+0x2c6>
3418090c:	4610      	mov	r0, r2
3418090e:	ebac 0c06 	sub.w	ip, ip, r6
34180912:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
34180916:	e79d      	b.n	34180854 <__udivmoddi4+0x98>
34180918:	f1c1 0620 	rsb	r6, r1, #32
3418091c:	408b      	lsls	r3, r1
3418091e:	fa04 fe01 	lsl.w	lr, r4, r1
34180922:	fa22 f706 	lsr.w	r7, r2, r6
34180926:	fa20 fc06 	lsr.w	ip, r0, r6
3418092a:	40f4      	lsrs	r4, r6
3418092c:	408a      	lsls	r2, r1
3418092e:	431f      	orrs	r7, r3
34180930:	ea4e 030c 	orr.w	r3, lr, ip
34180934:	fa00 fe01 	lsl.w	lr, r0, r1
34180938:	ea4f 4817 	mov.w	r8, r7, lsr #16
3418093c:	ea4f 4913 	mov.w	r9, r3, lsr #16
34180940:	fa1f fc87 	uxth.w	ip, r7
34180944:	fbb4 f0f8 	udiv	r0, r4, r8
34180948:	fb08 4410 	mls	r4, r8, r0, r4
3418094c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
34180950:	fb00 f90c 	mul.w	r9, r0, ip
34180954:	45a1      	cmp	r9, r4
34180956:	d90e      	bls.n	34180976 <__udivmoddi4+0x1ba>
34180958:	193c      	adds	r4, r7, r4
3418095a:	f100 3aff 	add.w	sl, r0, #4294967295
3418095e:	bf2c      	ite	cs
34180960:	f04f 0b01 	movcs.w	fp, #1
34180964:	f04f 0b00 	movcc.w	fp, #0
34180968:	45a1      	cmp	r9, r4
3418096a:	d903      	bls.n	34180974 <__udivmoddi4+0x1b8>
3418096c:	f1bb 0f00 	cmp.w	fp, #0
34180970:	f000 8093 	beq.w	34180a9a <__udivmoddi4+0x2de>
34180974:	4650      	mov	r0, sl
34180976:	eba4 0409 	sub.w	r4, r4, r9
3418097a:	fa1f f983 	uxth.w	r9, r3
3418097e:	fbb4 f3f8 	udiv	r3, r4, r8
34180982:	fb08 4413 	mls	r4, r8, r3, r4
34180986:	fb03 fc0c 	mul.w	ip, r3, ip
3418098a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
3418098e:	45a4      	cmp	ip, r4
34180990:	d906      	bls.n	341809a0 <__udivmoddi4+0x1e4>
34180992:	193c      	adds	r4, r7, r4
34180994:	f103 38ff 	add.w	r8, r3, #4294967295
34180998:	d201      	bcs.n	3418099e <__udivmoddi4+0x1e2>
3418099a:	45a4      	cmp	ip, r4
3418099c:	d87a      	bhi.n	34180a94 <__udivmoddi4+0x2d8>
3418099e:	4643      	mov	r3, r8
341809a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
341809a4:	eba4 040c 	sub.w	r4, r4, ip
341809a8:	fba0 9802 	umull	r9, r8, r0, r2
341809ac:	4544      	cmp	r4, r8
341809ae:	46cc      	mov	ip, r9
341809b0:	4643      	mov	r3, r8
341809b2:	d302      	bcc.n	341809ba <__udivmoddi4+0x1fe>
341809b4:	d106      	bne.n	341809c4 <__udivmoddi4+0x208>
341809b6:	45ce      	cmp	lr, r9
341809b8:	d204      	bcs.n	341809c4 <__udivmoddi4+0x208>
341809ba:	3801      	subs	r0, #1
341809bc:	ebb9 0c02 	subs.w	ip, r9, r2
341809c0:	eb68 0307 	sbc.w	r3, r8, r7
341809c4:	b15d      	cbz	r5, 341809de <__udivmoddi4+0x222>
341809c6:	ebbe 020c 	subs.w	r2, lr, ip
341809ca:	eb64 0403 	sbc.w	r4, r4, r3
341809ce:	fa04 f606 	lsl.w	r6, r4, r6
341809d2:	fa22 f301 	lsr.w	r3, r2, r1
341809d6:	40cc      	lsrs	r4, r1
341809d8:	431e      	orrs	r6, r3
341809da:	e9c5 6400 	strd	r6, r4, [r5]
341809de:	2100      	movs	r1, #0
341809e0:	e73e      	b.n	34180860 <__udivmoddi4+0xa4>
341809e2:	fa02 fe03 	lsl.w	lr, r2, r3
341809e6:	f1c3 0120 	rsb	r1, r3, #32
341809ea:	fa04 f203 	lsl.w	r2, r4, r3
341809ee:	fa00 fc03 	lsl.w	ip, r0, r3
341809f2:	40cc      	lsrs	r4, r1
341809f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
341809f8:	fa20 f101 	lsr.w	r1, r0, r1
341809fc:	fa1f f68e 	uxth.w	r6, lr
34180a00:	fbb4 f0f7 	udiv	r0, r4, r7
34180a04:	430a      	orrs	r2, r1
34180a06:	fb07 4410 	mls	r4, r7, r0, r4
34180a0a:	0c11      	lsrs	r1, r2, #16
34180a0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
34180a10:	fb00 f406 	mul.w	r4, r0, r6
34180a14:	428c      	cmp	r4, r1
34180a16:	d90e      	bls.n	34180a36 <__udivmoddi4+0x27a>
34180a18:	eb1e 0101 	adds.w	r1, lr, r1
34180a1c:	f100 38ff 	add.w	r8, r0, #4294967295
34180a20:	bf2c      	ite	cs
34180a22:	f04f 0901 	movcs.w	r9, #1
34180a26:	f04f 0900 	movcc.w	r9, #0
34180a2a:	428c      	cmp	r4, r1
34180a2c:	d902      	bls.n	34180a34 <__udivmoddi4+0x278>
34180a2e:	f1b9 0f00 	cmp.w	r9, #0
34180a32:	d02c      	beq.n	34180a8e <__udivmoddi4+0x2d2>
34180a34:	4640      	mov	r0, r8
34180a36:	1b09      	subs	r1, r1, r4
34180a38:	b292      	uxth	r2, r2
34180a3a:	fbb1 f4f7 	udiv	r4, r1, r7
34180a3e:	fb07 1114 	mls	r1, r7, r4, r1
34180a42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34180a46:	fb04 f106 	mul.w	r1, r4, r6
34180a4a:	4291      	cmp	r1, r2
34180a4c:	d907      	bls.n	34180a5e <__udivmoddi4+0x2a2>
34180a4e:	eb1e 0202 	adds.w	r2, lr, r2
34180a52:	f104 38ff 	add.w	r8, r4, #4294967295
34180a56:	d201      	bcs.n	34180a5c <__udivmoddi4+0x2a0>
34180a58:	4291      	cmp	r1, r2
34180a5a:	d815      	bhi.n	34180a88 <__udivmoddi4+0x2cc>
34180a5c:	4644      	mov	r4, r8
34180a5e:	1a52      	subs	r2, r2, r1
34180a60:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
34180a64:	e721      	b.n	341808aa <__udivmoddi4+0xee>
34180a66:	1a86      	subs	r6, r0, r2
34180a68:	eb64 0303 	sbc.w	r3, r4, r3
34180a6c:	2001      	movs	r0, #1
34180a6e:	e70e      	b.n	3418088e <__udivmoddi4+0xd2>
34180a70:	3c02      	subs	r4, #2
34180a72:	4472      	add	r2, lr
34180a74:	e735      	b.n	341808e2 <__udivmoddi4+0x126>
34180a76:	3902      	subs	r1, #2
34180a78:	4472      	add	r2, lr
34180a7a:	e6d0      	b.n	3418081e <__udivmoddi4+0x62>
34180a7c:	44f4      	add	ip, lr
34180a7e:	3802      	subs	r0, #2
34180a80:	e6e3      	b.n	3418084a <__udivmoddi4+0x8e>
34180a82:	44f4      	add	ip, lr
34180a84:	3802      	subs	r0, #2
34180a86:	e742      	b.n	3418090e <__udivmoddi4+0x152>
34180a88:	3c02      	subs	r4, #2
34180a8a:	4472      	add	r2, lr
34180a8c:	e7e7      	b.n	34180a5e <__udivmoddi4+0x2a2>
34180a8e:	3802      	subs	r0, #2
34180a90:	4471      	add	r1, lr
34180a92:	e7d0      	b.n	34180a36 <__udivmoddi4+0x27a>
34180a94:	3b02      	subs	r3, #2
34180a96:	443c      	add	r4, r7
34180a98:	e782      	b.n	341809a0 <__udivmoddi4+0x1e4>
34180a9a:	3802      	subs	r0, #2
34180a9c:	443c      	add	r4, r7
34180a9e:	e76a      	b.n	34180976 <__udivmoddi4+0x1ba>

34180aa0 <__aeabi_idiv0>:
34180aa0:	4770      	bx	lr
34180aa2:	bf00      	nop

34180aa4 <MX_EXTMEM_MANAGER_Init>:
/**
  * Init External memory manager
  * @retval None
  */
void MX_EXTMEM_MANAGER_Init(void)
{
34180aa4:	b580      	push	{r7, lr}
34180aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_EXTMEM_Init_PreTreatment */

  /* USER CODE END MX_EXTMEM_Init_PreTreatment */

  /* Initialization of the memory parameters */
  memset(extmem_list_config, 0x0, sizeof(extmem_list_config));
34180aa8:	22ac      	movs	r2, #172	@ 0xac
34180aaa:	2100      	movs	r1, #0
34180aac:	480c      	ldr	r0, [pc, #48]	@ (34180ae0 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180aae:	f00f fc03 	bl	341902b8 <memset>

  /* EXTMEMORY_1 */
  extmem_list_config[0].MemType = EXTMEM_NOR_SFDP;
34180ab2:	4b0b      	ldr	r3, [pc, #44]	@ (34180ae0 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180ab4:	2200      	movs	r2, #0
34180ab6:	701a      	strb	r2, [r3, #0]
  extmem_list_config[0].Handle = (void*)&hxspi2;
34180ab8:	4b09      	ldr	r3, [pc, #36]	@ (34180ae0 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180aba:	4a0a      	ldr	r2, [pc, #40]	@ (34180ae4 <MX_EXTMEM_MANAGER_Init+0x40>)
34180abc:	605a      	str	r2, [r3, #4]
  extmem_list_config[0].ConfigType = EXTMEM_LINK_CONFIG_8LINES;
34180abe:	4b08      	ldr	r3, [pc, #32]	@ (34180ae0 <MX_EXTMEM_MANAGER_Init+0x3c>)
34180ac0:	2203      	movs	r2, #3
34180ac2:	721a      	strb	r2, [r3, #8]

  EXTMEM_Init(EXTMEMORY_1, HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_XSPI2));
34180ac4:	f04f 0000 	mov.w	r0, #0
34180ac8:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
34180acc:	f006 fcf4 	bl	341874b8 <HAL_RCCEx_GetPeriphCLKFreq>
34180ad0:	4603      	mov	r3, r0
34180ad2:	4619      	mov	r1, r3
34180ad4:	2000      	movs	r0, #0
34180ad6:	f00c fda7 	bl	3418d628 <EXTMEM_Init>

  /* USER CODE BEGIN MX_EXTMEM_Init_PostTreatment */

  /* USER CODE END MX_EXTMEM_Init_PostTreatment */
}
34180ada:	bf00      	nop
34180adc:	bd80      	pop	{r7, pc}
34180ade:	bf00      	nop
34180ae0:	341c0188 	.word	0x341c0188
34180ae4:	341c0118 	.word	0x341c0118

34180ae8 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34180ae8:	b480      	push	{r7}
34180aea:	b085      	sub	sp, #20
34180aec:	af00      	add	r7, sp, #0
34180aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180af0:	4a07      	ldr	r2, [pc, #28]	@ (34180b10 <LL_AHB4_GRP1_EnableClock+0x28>)
34180af2:	687b      	ldr	r3, [r7, #4]
34180af4:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34180af8:	4b05      	ldr	r3, [pc, #20]	@ (34180b10 <LL_AHB4_GRP1_EnableClock+0x28>)
34180afa:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180afe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180b00:	68fb      	ldr	r3, [r7, #12]
}
34180b02:	bf00      	nop
34180b04:	3714      	adds	r7, #20
34180b06:	46bd      	mov	sp, r7
34180b08:	f85d 7b04 	ldr.w	r7, [sp], #4
34180b0c:	4770      	bx	lr
34180b0e:	bf00      	nop
34180b10:	56028000 	.word	0x56028000

34180b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
34180b14:	b580      	push	{r7, lr}
34180b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
34180b18:	f000 fe1b 	bl	34181752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
34180b1c:	f000 f818 	bl	34180b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
34180b20:	f000 f950 	bl	34180dc4 <MX_GPIO_Init>
  MX_XSPI2_Init();
34180b24:	f000 f8f2 	bl	34180d0c <MX_XSPI2_Init>
  MX_USART1_UART_Init();
34180b28:	f000 f8a4 	bl	34180c74 <MX_USART1_UART_Init>
  MX_EXTMEM_MANAGER_Init();
34180b2c:	f7ff ffba 	bl	34180aa4 <MX_EXTMEM_MANAGER_Init>
  /* USER CODE BEGIN 2 */
  printf("FSBL with printf\r\n");
34180b30:	4806      	ldr	r0, [pc, #24]	@ (34180b4c <main+0x38>)
34180b32:	f00f fae1 	bl	341900f8 <puts>
  /* USER CODE END 2 */

  /* Launch the application */
  if (BOOT_OK != BOOT_Application())
34180b36:	f00c fc2f 	bl	3418d398 <BOOT_Application>
34180b3a:	4603      	mov	r3, r0
34180b3c:	2b00      	cmp	r3, #0
34180b3e:	d002      	beq.n	34180b46 <main+0x32>
  {
    Error_Handler();
34180b40:	f000 f94b 	bl	34180dda <Error_Handler>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
34180b44:	bf00      	nop
34180b46:	bf00      	nop
34180b48:	e7fd      	b.n	34180b46 <main+0x32>
34180b4a:	bf00      	nop
34180b4c:	34190850 	.word	0x34190850

34180b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
34180b50:	b580      	push	{r7, lr}
34180b52:	b0b6      	sub	sp, #216	@ 0xd8
34180b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34180b56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180b5a:	2298      	movs	r2, #152	@ 0x98
34180b5c:	2100      	movs	r1, #0
34180b5e:	4618      	mov	r0, r3
34180b60:	f00f fbaa 	bl	341902b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34180b64:	463b      	mov	r3, r7
34180b66:	2240      	movs	r2, #64	@ 0x40
34180b68:	2100      	movs	r1, #0
34180b6a:	4618      	mov	r0, r3
34180b6c:	f00f fba4 	bl	341902b8 <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
34180b70:	2000      	movs	r0, #0
34180b72:	f001 f9a1 	bl	34181eb8 <HAL_PWREx_ConfigSupply>
34180b76:	4603      	mov	r3, r0
34180b78:	2b00      	cmp	r3, #0
34180b7a:	d001      	beq.n	34180b80 <SystemClock_Config+0x30>
  {
    Error_Handler();
34180b7c:	f000 f92d 	bl	34180dda <Error_Handler>
  }

  /* Enable HSI */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34180b80:	2302      	movs	r3, #2
34180b82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
34180b84:	2308      	movs	r3, #8
34180b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34180b88:	2300      	movs	r3, #0
34180b8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34180b8c:	2300      	movs	r3, #0
34180b8e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34180b90:	2300      	movs	r3, #0
34180b92:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180b94:	2300      	movs	r3, #0
34180b96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180b9a:	2300      	movs	r3, #0
34180b9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180ba0:	2300      	movs	r3, #0
34180ba2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180ba6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180baa:	4618      	mov	r0, r3
34180bac:	f001 fc46 	bl	3418243c <HAL_RCC_OscConfig>
34180bb0:	4603      	mov	r3, r0
34180bb2:	2b00      	cmp	r3, #0
34180bb4:	d001      	beq.n	34180bba <SystemClock_Config+0x6a>
  {
    Error_Handler();
34180bb6:	f000 f910 	bl	34180dda <Error_Handler>
  }

  /** Get current CPU/System buses clocks configuration and if necessary switch
 to intermediate HSI clock to ensure target clock can be set
  */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34180bba:	463b      	mov	r3, r7
34180bbc:	4618      	mov	r0, r3
34180bbe:	f002 fb1d 	bl	341831fc <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180bc2:	687b      	ldr	r3, [r7, #4]
34180bc4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34180bc8:	d003      	beq.n	34180bd2 <SystemClock_Config+0x82>
     (RCC_ClkInitStruct.SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11))
34180bca:	68bb      	ldr	r3, [r7, #8]
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180bcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34180bd0:	d10e      	bne.n	34180bf0 <SystemClock_Config+0xa0>
  {
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK);
34180bd2:	2303      	movs	r3, #3
34180bd4:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180bd6:	2300      	movs	r3, #0
34180bd8:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180bda:	2300      	movs	r3, #0
34180bdc:	60bb      	str	r3, [r7, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180bde:	463b      	mov	r3, r7
34180be0:	4618      	mov	r0, r3
34180be2:	f002 f80b 	bl	34182bfc <HAL_RCC_ClockConfig>
34180be6:	4603      	mov	r3, r0
34180be8:	2b00      	cmp	r3, #0
34180bea:	d001      	beq.n	34180bf0 <SystemClock_Config+0xa0>
    {
      /* Initialization Error */
      Error_Handler();
34180bec:	f000 f8f5 	bl	34180dda <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
34180bf0:	2300      	movs	r3, #0
34180bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_ON;
34180bf4:	2302      	movs	r3, #2
34180bf6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180bf8:	2300      	movs	r3, #0
34180bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL1.PLLM = 1;
34180bfc:	2301      	movs	r3, #1
34180bfe:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL1.PLLN = 25;
34180c00:	2319      	movs	r3, #25
34180c02:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34180c04:	2300      	movs	r3, #0
34180c06:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP1 = 1;
34180c08:	2301      	movs	r3, #1
34180c0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34180c0c:	2301      	movs	r3, #1
34180c0e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180c12:	2300      	movs	r3, #0
34180c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180c18:	2300      	movs	r3, #0
34180c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180c1e:	2300      	movs	r3, #0
34180c20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180c24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
34180c28:	4618      	mov	r0, r3
34180c2a:	f001 fc07 	bl	3418243c <HAL_RCC_OscConfig>
34180c2e:	4603      	mov	r3, r0
34180c30:	2b00      	cmp	r3, #0
34180c32:	d001      	beq.n	34180c38 <SystemClock_Config+0xe8>
  {
    Error_Handler();
34180c34:	f000 f8d1 	bl	34180dda <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_CPUCLK|RCC_CLOCKTYPE_HCLK
34180c38:	237f      	movs	r3, #127	@ 0x7f
34180c3a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2|RCC_CLOCKTYPE_PCLK5
                              |RCC_CLOCKTYPE_PCLK4;
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180c3c:	2300      	movs	r3, #0
34180c3e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180c40:	2300      	movs	r3, #0
34180c42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34180c44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34180c48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
34180c4a:	2300      	movs	r3, #0
34180c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34180c4e:	2300      	movs	r3, #0
34180c50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
34180c52:	2300      	movs	r3, #0
34180c54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34180c56:	2300      	movs	r3, #0
34180c58:	61fb      	str	r3, [r7, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180c5a:	463b      	mov	r3, r7
34180c5c:	4618      	mov	r0, r3
34180c5e:	f001 ffcd 	bl	34182bfc <HAL_RCC_ClockConfig>
34180c62:	4603      	mov	r3, r0
34180c64:	2b00      	cmp	r3, #0
34180c66:	d001      	beq.n	34180c6c <SystemClock_Config+0x11c>
  {
    Error_Handler();
34180c68:	f000 f8b7 	bl	34180dda <Error_Handler>
  }
}
34180c6c:	bf00      	nop
34180c6e:	37d8      	adds	r7, #216	@ 0xd8
34180c70:	46bd      	mov	sp, r7
34180c72:	bd80      	pop	{r7, pc}

34180c74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
34180c74:	b580      	push	{r7, lr}
34180c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
34180c78:	4b22      	ldr	r3, [pc, #136]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180c7a:	4a23      	ldr	r2, [pc, #140]	@ (34180d08 <MX_USART1_UART_Init+0x94>)
34180c7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
34180c7e:	4b21      	ldr	r3, [pc, #132]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
34180c84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
34180c86:	4b1f      	ldr	r3, [pc, #124]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180c88:	2200      	movs	r2, #0
34180c8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
34180c8c:	4b1d      	ldr	r3, [pc, #116]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180c8e:	2200      	movs	r2, #0
34180c90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
34180c92:	4b1c      	ldr	r3, [pc, #112]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180c94:	2200      	movs	r2, #0
34180c96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
34180c98:	4b1a      	ldr	r3, [pc, #104]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180c9a:	220c      	movs	r2, #12
34180c9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
34180c9e:	4b19      	ldr	r3, [pc, #100]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180ca0:	2200      	movs	r2, #0
34180ca2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
34180ca4:	4b17      	ldr	r3, [pc, #92]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180ca6:	2200      	movs	r2, #0
34180ca8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
34180caa:	4b16      	ldr	r3, [pc, #88]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180cac:	2200      	movs	r2, #0
34180cae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
34180cb0:	4b14      	ldr	r3, [pc, #80]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180cb2:	2200      	movs	r2, #0
34180cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
34180cb6:	4b13      	ldr	r3, [pc, #76]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180cb8:	2200      	movs	r2, #0
34180cba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
34180cbc:	4811      	ldr	r0, [pc, #68]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180cbe:	f00a fdc3 	bl	3418b848 <HAL_UART_Init>
34180cc2:	4603      	mov	r3, r0
34180cc4:	2b00      	cmp	r3, #0
34180cc6:	d001      	beq.n	34180ccc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
34180cc8:	f000 f887 	bl	34180dda <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
34180ccc:	2100      	movs	r1, #0
34180cce:	480d      	ldr	r0, [pc, #52]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180cd0:	f00b fadc 	bl	3418c28c <HAL_UARTEx_SetTxFifoThreshold>
34180cd4:	4603      	mov	r3, r0
34180cd6:	2b00      	cmp	r3, #0
34180cd8:	d001      	beq.n	34180cde <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
34180cda:	f000 f87e 	bl	34180dda <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
34180cde:	2100      	movs	r1, #0
34180ce0:	4808      	ldr	r0, [pc, #32]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180ce2:	f00b fb11 	bl	3418c308 <HAL_UARTEx_SetRxFifoThreshold>
34180ce6:	4603      	mov	r3, r0
34180ce8:	2b00      	cmp	r3, #0
34180cea:	d001      	beq.n	34180cf0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
34180cec:	f000 f875 	bl	34180dda <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
34180cf0:	4804      	ldr	r0, [pc, #16]	@ (34180d04 <MX_USART1_UART_Init+0x90>)
34180cf2:	f00b fa92 	bl	3418c21a <HAL_UARTEx_DisableFifoMode>
34180cf6:	4603      	mov	r3, r0
34180cf8:	2b00      	cmp	r3, #0
34180cfa:	d001      	beq.n	34180d00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
34180cfc:	f000 f86d 	bl	34180dda <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
34180d00:	bf00      	nop
34180d02:	bd80      	pop	{r7, pc}
34180d04:	341c0084 	.word	0x341c0084
34180d08:	52001000 	.word	0x52001000

34180d0c <MX_XSPI2_Init>:
  * @brief XSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_XSPI2_Init(void)
{
34180d0c:	b580      	push	{r7, lr}
34180d0e:	b084      	sub	sp, #16
34180d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN XSPI2_Init 0 */

  /* USER CODE END XSPI2_Init 0 */

  XSPIM_CfgTypeDef sXspiManagerCfg = {0};
34180d12:	1d3b      	adds	r3, r7, #4
34180d14:	2200      	movs	r2, #0
34180d16:	601a      	str	r2, [r3, #0]
34180d18:	605a      	str	r2, [r3, #4]
34180d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN XSPI2_Init 1 */

  /* USER CODE END XSPI2_Init 1 */
  /* XSPI2 parameter configuration*/
  hxspi2.Instance = XSPI2;
34180d1c:	4b27      	ldr	r3, [pc, #156]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d1e:	4a28      	ldr	r2, [pc, #160]	@ (34180dc0 <MX_XSPI2_Init+0xb4>)
34180d20:	601a      	str	r2, [r3, #0]
  hxspi2.Init.FifoThresholdByte = 4;
34180d22:	4b26      	ldr	r3, [pc, #152]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d24:	2204      	movs	r2, #4
34180d26:	605a      	str	r2, [r3, #4]
  hxspi2.Init.MemoryMode = HAL_XSPI_SINGLE_MEM;
34180d28:	4b24      	ldr	r3, [pc, #144]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d2a:	2200      	movs	r2, #0
34180d2c:	609a      	str	r2, [r3, #8]
  hxspi2.Init.MemoryType = HAL_XSPI_MEMTYPE_MACRONIX;
34180d2e:	4b23      	ldr	r3, [pc, #140]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
34180d34:	60da      	str	r2, [r3, #12]
  hxspi2.Init.MemorySize = HAL_XSPI_SIZE_1GB;
34180d36:	4b21      	ldr	r3, [pc, #132]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d38:	221a      	movs	r2, #26
34180d3a:	611a      	str	r2, [r3, #16]
  hxspi2.Init.ChipSelectHighTimeCycle = 1;
34180d3c:	4b1f      	ldr	r3, [pc, #124]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d3e:	2201      	movs	r2, #1
34180d40:	615a      	str	r2, [r3, #20]
  hxspi2.Init.FreeRunningClock = HAL_XSPI_FREERUNCLK_DISABLE;
34180d42:	4b1e      	ldr	r3, [pc, #120]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d44:	2200      	movs	r2, #0
34180d46:	619a      	str	r2, [r3, #24]
  hxspi2.Init.ClockMode = HAL_XSPI_CLOCK_MODE_0;
34180d48:	4b1c      	ldr	r3, [pc, #112]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d4a:	2200      	movs	r2, #0
34180d4c:	61da      	str	r2, [r3, #28]
  hxspi2.Init.WrapSize = HAL_XSPI_WRAP_NOT_SUPPORTED;
34180d4e:	4b1b      	ldr	r3, [pc, #108]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d50:	2200      	movs	r2, #0
34180d52:	621a      	str	r2, [r3, #32]
  hxspi2.Init.ClockPrescaler = 0;
34180d54:	4b19      	ldr	r3, [pc, #100]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d56:	2200      	movs	r2, #0
34180d58:	625a      	str	r2, [r3, #36]	@ 0x24
  hxspi2.Init.SampleShifting = HAL_XSPI_SAMPLE_SHIFT_NONE;
34180d5a:	4b18      	ldr	r3, [pc, #96]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d5c:	2200      	movs	r2, #0
34180d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hxspi2.Init.DelayHoldQuarterCycle = HAL_XSPI_DHQC_ENABLE;
34180d60:	4b16      	ldr	r3, [pc, #88]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
34180d66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hxspi2.Init.ChipSelectBoundary = HAL_XSPI_BONDARYOF_NONE;
34180d68:	4b14      	ldr	r3, [pc, #80]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d6a:	2200      	movs	r2, #0
34180d6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hxspi2.Init.MaxTran = 0;
34180d6e:	4b13      	ldr	r3, [pc, #76]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d70:	2200      	movs	r2, #0
34180d72:	635a      	str	r2, [r3, #52]	@ 0x34
  hxspi2.Init.Refresh = 0;
34180d74:	4b11      	ldr	r3, [pc, #68]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d76:	2200      	movs	r2, #0
34180d78:	639a      	str	r2, [r3, #56]	@ 0x38
  hxspi2.Init.MemorySelect = HAL_XSPI_CSSEL_NCS1;
34180d7a:	4b10      	ldr	r3, [pc, #64]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d7c:	2200      	movs	r2, #0
34180d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_XSPI_Init(&hxspi2) != HAL_OK)
34180d80:	480e      	ldr	r0, [pc, #56]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180d82:	f00b fb65 	bl	3418c450 <HAL_XSPI_Init>
34180d86:	4603      	mov	r3, r0
34180d88:	2b00      	cmp	r3, #0
34180d8a:	d001      	beq.n	34180d90 <MX_XSPI2_Init+0x84>
  {
    Error_Handler();
34180d8c:	f000 f825 	bl	34180dda <Error_Handler>
  }
  sXspiManagerCfg.nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
34180d90:	2310      	movs	r3, #16
34180d92:	607b      	str	r3, [r7, #4]
  sXspiManagerCfg.IOPort = HAL_XSPIM_IOPORT_2;
34180d94:	2301      	movs	r3, #1
34180d96:	60bb      	str	r3, [r7, #8]
  sXspiManagerCfg.Req2AckTime = 1;
34180d98:	2301      	movs	r3, #1
34180d9a:	60fb      	str	r3, [r7, #12]
  if (HAL_XSPIM_Config(&hxspi2, &sXspiManagerCfg, HAL_XSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
34180d9c:	1d3b      	adds	r3, r7, #4
34180d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
34180da2:	4619      	mov	r1, r3
34180da4:	4805      	ldr	r0, [pc, #20]	@ (34180dbc <MX_XSPI2_Init+0xb0>)
34180da6:	f00b ff97 	bl	3418ccd8 <HAL_XSPIM_Config>
34180daa:	4603      	mov	r3, r0
34180dac:	2b00      	cmp	r3, #0
34180dae:	d001      	beq.n	34180db4 <MX_XSPI2_Init+0xa8>
  {
    Error_Handler();
34180db0:	f000 f813 	bl	34180dda <Error_Handler>
  }
  /* USER CODE BEGIN XSPI2_Init 2 */

  /* USER CODE END XSPI2_Init 2 */

}
34180db4:	bf00      	nop
34180db6:	3710      	adds	r7, #16
34180db8:	46bd      	mov	sp, r7
34180dba:	bd80      	pop	{r7, pc}
34180dbc:	341c0118 	.word	0x341c0118
34180dc0:	5802a000 	.word	0x5802a000

34180dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
34180dc4:	b580      	push	{r7, lr}
34180dc6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
34180dc8:	2010      	movs	r0, #16
34180dca:	f7ff fe8d 	bl	34180ae8 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPION_CLK_ENABLE();
34180dce:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180dd2:	f7ff fe89 	bl	34180ae8 <LL_AHB4_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
34180dd6:	bf00      	nop
34180dd8:	bd80      	pop	{r7, pc}

34180dda <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34180dda:	b480      	push	{r7}
34180ddc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
34180dde:	b672      	cpsid	i
}
34180de0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
34180de2:	bf00      	nop
34180de4:	e7fd      	b.n	34180de2 <Error_Handler+0x8>
	...

34180de8 <LL_AHB4_GRP1_EnableClock>:
{
34180de8:	b480      	push	{r7}
34180dea:	b085      	sub	sp, #20
34180dec:	af00      	add	r7, sp, #0
34180dee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180df0:	4a07      	ldr	r2, [pc, #28]	@ (34180e10 <LL_AHB4_GRP1_EnableClock+0x28>)
34180df2:	687b      	ldr	r3, [r7, #4]
34180df4:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34180df8:	4b05      	ldr	r3, [pc, #20]	@ (34180e10 <LL_AHB4_GRP1_EnableClock+0x28>)
34180dfa:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180dfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180e00:	68fb      	ldr	r3, [r7, #12]
}
34180e02:	bf00      	nop
34180e04:	3714      	adds	r7, #20
34180e06:	46bd      	mov	sp, r7
34180e08:	f85d 7b04 	ldr.w	r7, [sp], #4
34180e0c:	4770      	bx	lr
34180e0e:	bf00      	nop
34180e10:	56028000 	.word	0x56028000

34180e14 <LL_AHB5_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB5_GRP1_EnableClock(uint32_t Periphs)
{
34180e14:	b480      	push	{r7}
34180e16:	b085      	sub	sp, #20
34180e18:	af00      	add	r7, sp, #0
34180e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB5ENSR, Periphs);
34180e1c:	4a07      	ldr	r2, [pc, #28]	@ (34180e3c <LL_AHB5_GRP1_EnableClock+0x28>)
34180e1e:	687b      	ldr	r3, [r7, #4]
34180e20:	f8c2 3a60 	str.w	r3, [r2, #2656]	@ 0xa60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB5ENR);
34180e24:	4b05      	ldr	r3, [pc, #20]	@ (34180e3c <LL_AHB5_GRP1_EnableClock+0x28>)
34180e26:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
34180e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180e2c:	68fb      	ldr	r3, [r7, #12]
}
34180e2e:	bf00      	nop
34180e30:	3714      	adds	r7, #20
34180e32:	46bd      	mov	sp, r7
34180e34:	f85d 7b04 	ldr.w	r7, [sp], #4
34180e38:	4770      	bx	lr
34180e3a:	bf00      	nop
34180e3c:	56028000 	.word	0x56028000

34180e40 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34180e40:	b480      	push	{r7}
34180e42:	b085      	sub	sp, #20
34180e44:	af00      	add	r7, sp, #0
34180e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34180e48:	4a07      	ldr	r2, [pc, #28]	@ (34180e68 <LL_APB2_GRP1_EnableClock+0x28>)
34180e4a:	687b      	ldr	r3, [r7, #4]
34180e4c:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34180e50:	4b05      	ldr	r3, [pc, #20]	@ (34180e68 <LL_APB2_GRP1_EnableClock+0x28>)
34180e52:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34180e56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34180e58:	68fb      	ldr	r3, [r7, #12]
}
34180e5a:	bf00      	nop
34180e5c:	3714      	adds	r7, #20
34180e5e:	46bd      	mov	sp, r7
34180e60:	f85d 7b04 	ldr.w	r7, [sp], #4
34180e64:	4770      	bx	lr
34180e66:	bf00      	nop
34180e68:	56028000 	.word	0x56028000

34180e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
34180e6c:	b580      	push	{r7, lr}
34180e6e:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
34180e70:	f001 f84a 	bl	34181f08 <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
34180e74:	f001 f858 	bl	34181f28 <HAL_PWREx_EnableVddIO3>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34180e78:	bf00      	nop
34180e7a:	bd80      	pop	{r7, pc}

34180e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
34180e7c:	b580      	push	{r7, lr}
34180e7e:	b0ec      	sub	sp, #432	@ 0x1b0
34180e80:	af00      	add	r7, sp, #0
34180e82:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180e86:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180e8a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34180e8c:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180e90:	2200      	movs	r2, #0
34180e92:	601a      	str	r2, [r3, #0]
34180e94:	605a      	str	r2, [r3, #4]
34180e96:	609a      	str	r2, [r3, #8]
34180e98:	60da      	str	r2, [r3, #12]
34180e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34180e9c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180ea0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180ea4:	4618      	mov	r0, r3
34180ea6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34180eaa:	461a      	mov	r2, r3
34180eac:	2100      	movs	r1, #0
34180eae:	f00f fa03 	bl	341902b8 <memset>
  if(huart->Instance==USART1)
34180eb2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180eb6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180eba:	681b      	ldr	r3, [r3, #0]
34180ebc:	681b      	ldr	r3, [r3, #0]
34180ebe:	4a1f      	ldr	r2, [pc, #124]	@ (34180f3c <HAL_UART_MspInit+0xc0>)
34180ec0:	4293      	cmp	r3, r2
34180ec2:	d135      	bne.n	34180f30 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
34180ec4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180ec8:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34180ecc:	f04f 0200 	mov.w	r2, #0
34180ed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
34180ed4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
34180ed8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180edc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180ee0:	4a17      	ldr	r2, [pc, #92]	@ (34180f40 <HAL_UART_MspInit+0xc4>)
34180ee2:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34180ee6:	f107 0308 	add.w	r3, r7, #8
34180eea:	4618      	mov	r0, r3
34180eec:	f004 f800 	bl	34184ef0 <HAL_RCCEx_PeriphCLKConfig>
34180ef0:	4603      	mov	r3, r0
34180ef2:	2b00      	cmp	r3, #0
34180ef4:	d001      	beq.n	34180efa <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
34180ef6:	f7ff ff70 	bl	34180dda <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
34180efa:	2010      	movs	r0, #16
34180efc:	f7ff ffa0 	bl	34180e40 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
34180f00:	2010      	movs	r0, #16
34180f02:	f7ff ff71 	bl	34180de8 <LL_AHB4_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PE5     ------> USART1_TX
    PE6     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
34180f06:	2360      	movs	r3, #96	@ 0x60
34180f08:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34180f0c:	2302      	movs	r3, #2
34180f0e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34180f12:	2300      	movs	r3, #0
34180f14:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34180f18:	2300      	movs	r3, #0
34180f1a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
34180f1e:	2307      	movs	r3, #7
34180f20:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
34180f24:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180f28:	4619      	mov	r1, r3
34180f2a:	4806      	ldr	r0, [pc, #24]	@ (34180f44 <HAL_UART_MspInit+0xc8>)
34180f2c:	f000 fe12 	bl	34181b54 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
34180f30:	bf00      	nop
34180f32:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34180f36:	46bd      	mov	sp, r7
34180f38:	bd80      	pop	{r7, pc}
34180f3a:	bf00      	nop
34180f3c:	52001000 	.word	0x52001000
34180f40:	07000030 	.word	0x07000030
34180f44:	56021000 	.word	0x56021000

34180f48 <HAL_XSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hxspi: XSPI handle pointer
* @retval None
*/
void HAL_XSPI_MspInit(XSPI_HandleTypeDef* hxspi)
{
34180f48:	b580      	push	{r7, lr}
34180f4a:	b0ec      	sub	sp, #432	@ 0x1b0
34180f4c:	af00      	add	r7, sp, #0
34180f4e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180f52:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180f56:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34180f58:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34180f5c:	2200      	movs	r2, #0
34180f5e:	601a      	str	r2, [r3, #0]
34180f60:	605a      	str	r2, [r3, #4]
34180f62:	609a      	str	r2, [r3, #8]
34180f64:	60da      	str	r2, [r3, #12]
34180f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34180f68:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180f6c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180f70:	4618      	mov	r0, r3
34180f72:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34180f76:	461a      	mov	r2, r3
34180f78:	2100      	movs	r1, #0
34180f7a:	f00f f99d 	bl	341902b8 <memset>
  if(hxspi->Instance==XSPI2)
34180f7e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180f82:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34180f86:	681b      	ldr	r3, [r3, #0]
34180f88:	681b      	ldr	r3, [r3, #0]
34180f8a:	4a28      	ldr	r2, [pc, #160]	@ (3418102c <HAL_XSPI_MspInit+0xe4>)
34180f8c:	4293      	cmp	r3, r2
34180f8e:	d148      	bne.n	34181022 <HAL_XSPI_MspInit+0xda>

  /* USER CODE END XSPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_XSPI2;
34180f90:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180f94:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34180f98:	f04f 0200 	mov.w	r2, #0
34180f9c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
34180fa0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Xspi2ClockSelection = RCC_XSPI2CLKSOURCE_IC3;
34180fa4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180fa8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180fac:	4a20      	ldr	r2, [pc, #128]	@ (34181030 <HAL_XSPI_MspInit+0xe8>)
34180fae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    PeriphClkInitStruct.ICSelection[RCC_IC3].ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180fb2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180fb6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180fba:	2200      	movs	r2, #0
34180fbc:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.ICSelection[RCC_IC3].ClockDivider = 32;
34180fbe:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34180fc2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34180fc6:	2220      	movs	r2, #32
34180fc8:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34180fca:	f107 0308 	add.w	r3, r7, #8
34180fce:	4618      	mov	r0, r3
34180fd0:	f003 ff8e 	bl	34184ef0 <HAL_RCCEx_PeriphCLKConfig>
34180fd4:	4603      	mov	r3, r0
34180fd6:	2b00      	cmp	r3, #0
34180fd8:	d001      	beq.n	34180fde <HAL_XSPI_MspInit+0x96>
    {
      Error_Handler();
34180fda:	f7ff fefe 	bl	34180dda <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_XSPIM_CLK_ENABLE();
34180fde:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180fe2:	f7ff ff17 	bl	34180e14 <LL_AHB5_GRP1_EnableClock>
    __HAL_RCC_XSPI2_CLK_ENABLE();
34180fe6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
34180fea:	f7ff ff13 	bl	34180e14 <LL_AHB5_GRP1_EnableClock>

    __HAL_RCC_GPION_CLK_ENABLE();
34180fee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
34180ff2:	f7ff fef9 	bl	34180de8 <LL_AHB4_GRP1_EnableClock>
    PN9     ------> XSPIM_P2_IO5
    PN2     ------> XSPIM_P2_IO0
    PN10     ------> XSPIM_P2_IO6
    PN11     ------> XSPIM_P2_IO7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_0
34180ff6:	f640 737f 	movw	r3, #3967	@ 0xf7f
34180ffa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_1|GPIO_PIN_9
                          |GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34180ffe:	2302      	movs	r3, #2
34181000:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34181004:	2300      	movs	r3, #0
34181006:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
3418100a:	2303      	movs	r3, #3
3418100c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF9_XSPIM_P2;
34181010:	2309      	movs	r3, #9
34181012:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPION, &GPIO_InitStruct);
34181016:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
3418101a:	4619      	mov	r1, r3
3418101c:	4805      	ldr	r0, [pc, #20]	@ (34181034 <HAL_XSPI_MspInit+0xec>)
3418101e:	f000 fd99 	bl	34181b54 <HAL_GPIO_Init>

  /* USER CODE END XSPI2_MspInit 1 */

  }

}
34181022:	bf00      	nop
34181024:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34181028:	46bd      	mov	sp, r7
3418102a:	bd80      	pop	{r7, pc}
3418102c:	5802a000 	.word	0x5802a000
34181030:	03020414 	.word	0x03020414
34181034:	56023400 	.word	0x56023400

34181038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
34181038:	b480      	push	{r7}
3418103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
3418103c:	bf00      	nop
3418103e:	e7fd      	b.n	3418103c <NMI_Handler+0x4>

34181040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
34181040:	b480      	push	{r7}
34181042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
34181044:	bf00      	nop
34181046:	e7fd      	b.n	34181044 <HardFault_Handler+0x4>

34181048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
34181048:	b480      	push	{r7}
3418104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
3418104c:	bf00      	nop
3418104e:	e7fd      	b.n	3418104c <MemManage_Handler+0x4>

34181050 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
34181050:	b480      	push	{r7}
34181052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
34181054:	bf00      	nop
34181056:	e7fd      	b.n	34181054 <BusFault_Handler+0x4>

34181058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
34181058:	b480      	push	{r7}
3418105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
3418105c:	bf00      	nop
3418105e:	e7fd      	b.n	3418105c <UsageFault_Handler+0x4>

34181060 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
34181060:	b480      	push	{r7}
34181062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
34181064:	bf00      	nop
34181066:	e7fd      	b.n	34181064 <SecureFault_Handler+0x4>

34181068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
34181068:	b480      	push	{r7}
3418106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
3418106c:	bf00      	nop
3418106e:	46bd      	mov	sp, r7
34181070:	f85d 7b04 	ldr.w	r7, [sp], #4
34181074:	4770      	bx	lr

34181076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
34181076:	b480      	push	{r7}
34181078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
3418107a:	bf00      	nop
3418107c:	46bd      	mov	sp, r7
3418107e:	f85d 7b04 	ldr.w	r7, [sp], #4
34181082:	4770      	bx	lr

34181084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
34181084:	b480      	push	{r7}
34181086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
34181088:	bf00      	nop
3418108a:	46bd      	mov	sp, r7
3418108c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181090:	4770      	bx	lr

34181092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
34181092:	b580      	push	{r7, lr}
34181094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
34181096:	f000 fba7 	bl	341817e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
3418109a:	bf00      	nop
3418109c:	bd80      	pop	{r7, pc}

3418109e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
3418109e:	b580      	push	{r7, lr}
341810a0:	b086      	sub	sp, #24
341810a2:	af00      	add	r7, sp, #0
341810a4:	60f8      	str	r0, [r7, #12]
341810a6:	60b9      	str	r1, [r7, #8]
341810a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
341810aa:	2300      	movs	r3, #0
341810ac:	617b      	str	r3, [r7, #20]
341810ae:	e00a      	b.n	341810c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
341810b0:	f3af 8000 	nop.w
341810b4:	4601      	mov	r1, r0
341810b6:	68bb      	ldr	r3, [r7, #8]
341810b8:	1c5a      	adds	r2, r3, #1
341810ba:	60ba      	str	r2, [r7, #8]
341810bc:	b2ca      	uxtb	r2, r1
341810be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
341810c0:	697b      	ldr	r3, [r7, #20]
341810c2:	3301      	adds	r3, #1
341810c4:	617b      	str	r3, [r7, #20]
341810c6:	697a      	ldr	r2, [r7, #20]
341810c8:	687b      	ldr	r3, [r7, #4]
341810ca:	429a      	cmp	r2, r3
341810cc:	dbf0      	blt.n	341810b0 <_read+0x12>
  }

  return len;
341810ce:	687b      	ldr	r3, [r7, #4]
}
341810d0:	4618      	mov	r0, r3
341810d2:	3718      	adds	r7, #24
341810d4:	46bd      	mov	sp, r7
341810d6:	bd80      	pop	{r7, pc}

341810d8 <_close>:
  }
  return len;
}

int _close(int file)
{
341810d8:	b480      	push	{r7}
341810da:	b083      	sub	sp, #12
341810dc:	af00      	add	r7, sp, #0
341810de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
341810e0:	f04f 33ff 	mov.w	r3, #4294967295
}
341810e4:	4618      	mov	r0, r3
341810e6:	370c      	adds	r7, #12
341810e8:	46bd      	mov	sp, r7
341810ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341810ee:	4770      	bx	lr

341810f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
341810f0:	b480      	push	{r7}
341810f2:	b083      	sub	sp, #12
341810f4:	af00      	add	r7, sp, #0
341810f6:	6078      	str	r0, [r7, #4]
341810f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
341810fa:	683b      	ldr	r3, [r7, #0]
341810fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34181100:	605a      	str	r2, [r3, #4]
  return 0;
34181102:	2300      	movs	r3, #0
}
34181104:	4618      	mov	r0, r3
34181106:	370c      	adds	r7, #12
34181108:	46bd      	mov	sp, r7
3418110a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418110e:	4770      	bx	lr

34181110 <_isatty>:

int _isatty(int file)
{
34181110:	b480      	push	{r7}
34181112:	b083      	sub	sp, #12
34181114:	af00      	add	r7, sp, #0
34181116:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
34181118:	2301      	movs	r3, #1
}
3418111a:	4618      	mov	r0, r3
3418111c:	370c      	adds	r7, #12
3418111e:	46bd      	mov	sp, r7
34181120:	f85d 7b04 	ldr.w	r7, [sp], #4
34181124:	4770      	bx	lr

34181126 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
34181126:	b480      	push	{r7}
34181128:	b085      	sub	sp, #20
3418112a:	af00      	add	r7, sp, #0
3418112c:	60f8      	str	r0, [r7, #12]
3418112e:	60b9      	str	r1, [r7, #8]
34181130:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
34181132:	2300      	movs	r3, #0
}
34181134:	4618      	mov	r0, r3
34181136:	3714      	adds	r7, #20
34181138:	46bd      	mov	sp, r7
3418113a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418113e:	4770      	bx	lr

34181140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
34181140:	b580      	push	{r7, lr}
34181142:	b086      	sub	sp, #24
34181144:	af00      	add	r7, sp, #0
34181146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
34181148:	4a14      	ldr	r2, [pc, #80]	@ (3418119c <_sbrk+0x5c>)
3418114a:	4b15      	ldr	r3, [pc, #84]	@ (341811a0 <_sbrk+0x60>)
3418114c:	1ad3      	subs	r3, r2, r3
3418114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
34181150:	697b      	ldr	r3, [r7, #20]
34181152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
34181154:	4b13      	ldr	r3, [pc, #76]	@ (341811a4 <_sbrk+0x64>)
34181156:	681b      	ldr	r3, [r3, #0]
34181158:	2b00      	cmp	r3, #0
3418115a:	d102      	bne.n	34181162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
3418115c:	4b11      	ldr	r3, [pc, #68]	@ (341811a4 <_sbrk+0x64>)
3418115e:	4a12      	ldr	r2, [pc, #72]	@ (341811a8 <_sbrk+0x68>)
34181160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
34181162:	4b10      	ldr	r3, [pc, #64]	@ (341811a4 <_sbrk+0x64>)
34181164:	681a      	ldr	r2, [r3, #0]
34181166:	687b      	ldr	r3, [r7, #4]
34181168:	4413      	add	r3, r2
3418116a:	693a      	ldr	r2, [r7, #16]
3418116c:	429a      	cmp	r2, r3
3418116e:	d207      	bcs.n	34181180 <_sbrk+0x40>
  {
    errno = ENOMEM;
34181170:	f00f f8f0 	bl	34190354 <__errno>
34181174:	4603      	mov	r3, r0
34181176:	220c      	movs	r2, #12
34181178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
3418117a:	f04f 33ff 	mov.w	r3, #4294967295
3418117e:	e009      	b.n	34181194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
34181180:	4b08      	ldr	r3, [pc, #32]	@ (341811a4 <_sbrk+0x64>)
34181182:	681b      	ldr	r3, [r3, #0]
34181184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
34181186:	4b07      	ldr	r3, [pc, #28]	@ (341811a4 <_sbrk+0x64>)
34181188:	681a      	ldr	r2, [r3, #0]
3418118a:	687b      	ldr	r3, [r7, #4]
3418118c:	4413      	add	r3, r2
3418118e:	4a05      	ldr	r2, [pc, #20]	@ (341811a4 <_sbrk+0x64>)
34181190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
34181192:	68fb      	ldr	r3, [r7, #12]
}
34181194:	4618      	mov	r0, r3
34181196:	3718      	adds	r7, #24
34181198:	46bd      	mov	sp, r7
3418119a:	bd80      	pop	{r7, pc}
3418119c:	34200000 	.word	0x34200000
341811a0:	00000800 	.word	0x00000800
341811a4:	341c017c 	.word	0x341c017c
341811a8:	341c0508 	.word	0x341c0508

341811ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
341811ac:	b480      	push	{r7}
341811ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
341811b0:	4b6a      	ldr	r3, [pc, #424]	@ (3418135c <SystemInit+0x1b0>)
341811b2:	4a6b      	ldr	r2, [pc, #428]	@ (34181360 <SystemInit+0x1b4>)
341811b4:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
341811b6:	4b6b      	ldr	r3, [pc, #428]	@ (34181364 <SystemInit+0x1b8>)
341811b8:	2201      	movs	r2, #1
341811ba:	f8c3 2a18 	str.w	r2, [r3, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
341811be:	4b69      	ldr	r3, [pc, #420]	@ (34181364 <SystemInit+0x1b8>)
341811c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341811c4:	461a      	mov	r2, r3
341811c6:	2301      	movs	r3, #1
341811c8:	f8c2 3218 	str.w	r3, [r2, #536]	@ 0x218
  /* Deactivate RNG clock */
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
341811cc:	4b65      	ldr	r3, [pc, #404]	@ (34181364 <SystemInit+0x1b8>)
341811ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341811d2:	461a      	mov	r2, r3
341811d4:	2301      	movs	r3, #1
341811d6:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258

  /* Clear SAU regions */
  SAU->RNR = 0;
341811da:	4b63      	ldr	r3, [pc, #396]	@ (34181368 <SystemInit+0x1bc>)
341811dc:	2200      	movs	r2, #0
341811de:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341811e0:	4b61      	ldr	r3, [pc, #388]	@ (34181368 <SystemInit+0x1bc>)
341811e2:	2200      	movs	r2, #0
341811e4:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341811e6:	4b60      	ldr	r3, [pc, #384]	@ (34181368 <SystemInit+0x1bc>)
341811e8:	2200      	movs	r2, #0
341811ea:	611a      	str	r2, [r3, #16]
  SAU->RNR = 1;
341811ec:	4b5e      	ldr	r3, [pc, #376]	@ (34181368 <SystemInit+0x1bc>)
341811ee:	2201      	movs	r2, #1
341811f0:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
341811f2:	4b5d      	ldr	r3, [pc, #372]	@ (34181368 <SystemInit+0x1bc>)
341811f4:	2200      	movs	r2, #0
341811f6:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
341811f8:	4b5b      	ldr	r3, [pc, #364]	@ (34181368 <SystemInit+0x1bc>)
341811fa:	2200      	movs	r2, #0
341811fc:	611a      	str	r2, [r3, #16]
  SAU->RNR = 2;
341811fe:	4b5a      	ldr	r3, [pc, #360]	@ (34181368 <SystemInit+0x1bc>)
34181200:	2202      	movs	r2, #2
34181202:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181204:	4b58      	ldr	r3, [pc, #352]	@ (34181368 <SystemInit+0x1bc>)
34181206:	2200      	movs	r2, #0
34181208:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418120a:	4b57      	ldr	r3, [pc, #348]	@ (34181368 <SystemInit+0x1bc>)
3418120c:	2200      	movs	r2, #0
3418120e:	611a      	str	r2, [r3, #16]
  SAU->RNR = 3;
34181210:	4b55      	ldr	r3, [pc, #340]	@ (34181368 <SystemInit+0x1bc>)
34181212:	2203      	movs	r2, #3
34181214:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181216:	4b54      	ldr	r3, [pc, #336]	@ (34181368 <SystemInit+0x1bc>)
34181218:	2200      	movs	r2, #0
3418121a:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418121c:	4b52      	ldr	r3, [pc, #328]	@ (34181368 <SystemInit+0x1bc>)
3418121e:	2200      	movs	r2, #0
34181220:	611a      	str	r2, [r3, #16]
  SAU->RNR = 4;
34181222:	4b51      	ldr	r3, [pc, #324]	@ (34181368 <SystemInit+0x1bc>)
34181224:	2204      	movs	r2, #4
34181226:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
34181228:	4b4f      	ldr	r3, [pc, #316]	@ (34181368 <SystemInit+0x1bc>)
3418122a:	2200      	movs	r2, #0
3418122c:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
3418122e:	4b4e      	ldr	r3, [pc, #312]	@ (34181368 <SystemInit+0x1bc>)
34181230:	2200      	movs	r2, #0
34181232:	611a      	str	r2, [r3, #16]
  SAU->RNR = 5;
34181234:	4b4c      	ldr	r3, [pc, #304]	@ (34181368 <SystemInit+0x1bc>)
34181236:	2205      	movs	r2, #5
34181238:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418123a:	4b4b      	ldr	r3, [pc, #300]	@ (34181368 <SystemInit+0x1bc>)
3418123c:	2200      	movs	r2, #0
3418123e:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181240:	4b49      	ldr	r3, [pc, #292]	@ (34181368 <SystemInit+0x1bc>)
34181242:	2200      	movs	r2, #0
34181244:	611a      	str	r2, [r3, #16]
  SAU->RNR = 6;
34181246:	4b48      	ldr	r3, [pc, #288]	@ (34181368 <SystemInit+0x1bc>)
34181248:	2206      	movs	r2, #6
3418124a:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418124c:	4b46      	ldr	r3, [pc, #280]	@ (34181368 <SystemInit+0x1bc>)
3418124e:	2200      	movs	r2, #0
34181250:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181252:	4b45      	ldr	r3, [pc, #276]	@ (34181368 <SystemInit+0x1bc>)
34181254:	2200      	movs	r2, #0
34181256:	611a      	str	r2, [r3, #16]
  SAU->RNR = 7;
34181258:	4b43      	ldr	r3, [pc, #268]	@ (34181368 <SystemInit+0x1bc>)
3418125a:	2207      	movs	r2, #7
3418125c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
3418125e:	4b42      	ldr	r3, [pc, #264]	@ (34181368 <SystemInit+0x1bc>)
34181260:	2200      	movs	r2, #0
34181262:	60da      	str	r2, [r3, #12]
  SAU->RLAR = 0;
34181264:	4b40      	ldr	r3, [pc, #256]	@ (34181368 <SystemInit+0x1bc>)
34181266:	2200      	movs	r2, #0
34181268:	611a      	str	r2, [r3, #16]

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
3418126a:	4b3e      	ldr	r3, [pc, #248]	@ (34181364 <SystemInit+0x1b8>)
3418126c:	2201      	movs	r2, #1
3418126e:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
34181272:	4b3c      	ldr	r3, [pc, #240]	@ (34181364 <SystemInit+0x1b8>)
34181274:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34181278:	4b38      	ldr	r3, [pc, #224]	@ (3418135c <SystemInit+0x1b0>)
3418127a:	4a3c      	ldr	r2, [pc, #240]	@ (3418136c <SystemInit+0x1c0>)
3418127c:	689b      	ldr	r3, [r3, #8]
3418127e:	6113      	str	r3, [r2, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
34181280:	4b3b      	ldr	r3, [pc, #236]	@ (34181370 <SystemInit+0x1c4>)
34181282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181284:	4a3a      	ldr	r2, [pc, #232]	@ (34181370 <SystemInit+0x1c4>)
34181286:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
3418128a:	63d3      	str	r3, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
3418128c:	4b38      	ldr	r3, [pc, #224]	@ (34181370 <SystemInit+0x1c4>)
3418128e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181290:	4a37      	ldr	r2, [pc, #220]	@ (34181370 <SystemInit+0x1c4>)
34181292:	f043 0310 	orr.w	r3, r3, #16
34181296:	63d3      	str	r3, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
34181298:	4b35      	ldr	r3, [pc, #212]	@ (34181370 <SystemInit+0x1c4>)
3418129a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
3418129c:	4b31      	ldr	r3, [pc, #196]	@ (34181364 <SystemInit+0x1b8>)
3418129e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
341812a2:	4a30      	ldr	r2, [pc, #192]	@ (34181364 <SystemInit+0x1b8>)
341812a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341812a8:	f8c2 3274 	str.w	r3, [r2, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
341812ac:	4b2d      	ldr	r3, [pc, #180]	@ (34181364 <SystemInit+0x1b8>)
341812ae:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
341812b2:	4a2c      	ldr	r2, [pc, #176]	@ (34181364 <SystemInit+0x1b8>)
341812b4:	f043 0310 	orr.w	r3, r3, #16
341812b8:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  (void) RCC->APB4ENR2;
341812bc:	4b29      	ldr	r3, [pc, #164]	@ (34181364 <SystemInit+0x1b8>)
341812be:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
341812c2:	4b28      	ldr	r3, [pc, #160]	@ (34181364 <SystemInit+0x1b8>)
341812c4:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
341812c8:	4a26      	ldr	r2, [pc, #152]	@ (34181364 <SystemInit+0x1b8>)
341812ca:	f023 0310 	bic.w	r3, r3, #16
341812ce:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
341812d2:	4b24      	ldr	r3, [pc, #144]	@ (34181364 <SystemInit+0x1b8>)
341812d4:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
341812d8:	f8c3 2a20 	str.w	r2, [r3, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
341812dc:	4b21      	ldr	r3, [pc, #132]	@ (34181364 <SystemInit+0x1b8>)
341812de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341812e2:	461a      	mov	r2, r3
341812e4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
341812e8:	f8c2 3220 	str.w	r3, [r2, #544]	@ 0x220

  /* TIM2 reset */
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
341812ec:	4b1d      	ldr	r3, [pc, #116]	@ (34181364 <SystemInit+0x1b8>)
341812ee:	2201      	movs	r2, #1
341812f0:	f8c3 2a24 	str.w	r2, [r3, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
341812f4:	4b1b      	ldr	r3, [pc, #108]	@ (34181364 <SystemInit+0x1b8>)
341812f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341812fa:	461a      	mov	r2, r3
341812fc:	2301      	movs	r3, #1
341812fe:	f8c2 3224 	str.w	r3, [r2, #548]	@ 0x224
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
34181302:	4b18      	ldr	r3, [pc, #96]	@ (34181364 <SystemInit+0x1b8>)
34181304:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181308:	461a      	mov	r2, r3
3418130a:	2301      	movs	r3, #1
3418130c:	f8c2 3264 	str.w	r3, [r2, #612]	@ 0x264

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34181310:	4b14      	ldr	r3, [pc, #80]	@ (34181364 <SystemInit+0x1b8>)
34181312:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181316:	461a      	mov	r2, r3
34181318:	2340      	movs	r3, #64	@ 0x40
3418131a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
3418131e:	4b13      	ldr	r3, [pc, #76]	@ (3418136c <SystemInit+0x1c0>)
34181320:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34181322:	4b10      	ldr	r3, [pc, #64]	@ (34181364 <SystemInit+0x1b8>)
34181324:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181328:	461a      	mov	r2, r3
3418132a:	2301      	movs	r3, #1
3418132c:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34181330:	4b0a      	ldr	r3, [pc, #40]	@ (3418135c <SystemInit+0x1b0>)
34181332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34181336:	4a09      	ldr	r2, [pc, #36]	@ (3418135c <SystemInit+0x1b0>)
34181338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3418133c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34181340:	4b0c      	ldr	r3, [pc, #48]	@ (34181374 <SystemInit+0x1c8>)
34181342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34181346:	4a0b      	ldr	r2, [pc, #44]	@ (34181374 <SystemInit+0x1c8>)
34181348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3418134c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34181350:	bf00      	nop
34181352:	46bd      	mov	sp, r7
34181354:	f85d 7b04 	ldr.w	r7, [sp], #4
34181358:	4770      	bx	lr
3418135a:	bf00      	nop
3418135c:	e000ed00 	.word	0xe000ed00
34181360:	34180400 	.word	0x34180400
34181364:	56028000 	.word	0x56028000
34181368:	e000edd0 	.word	0xe000edd0
3418136c:	56008000 	.word	0x56008000
34181370:	56024800 	.word	0x56024800
34181374:	e002ed00 	.word	0xe002ed00

34181378 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
34181378:	b480      	push	{r7}
3418137a:	b08d      	sub	sp, #52	@ 0x34
3418137c:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
3418137e:	2300      	movs	r3, #0
34181380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
34181382:	2300      	movs	r3, #0
34181384:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
34181386:	2300      	movs	r3, #0
34181388:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
3418138a:	2300      	movs	r3, #0
3418138c:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
3418138e:	2300      	movs	r3, #0
34181390:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
34181392:	2300      	movs	r3, #0
34181394:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34181396:	4b9b      	ldr	r3, [pc, #620]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
34181398:	6a1b      	ldr	r3, [r3, #32]
3418139a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
3418139e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341813a2:	d029      	beq.n	341813f8 <SystemCoreClockUpdate+0x80>
341813a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
341813a8:	f200 8180 	bhi.w	341816ac <SystemCoreClockUpdate+0x334>
341813ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341813b0:	d01f      	beq.n	341813f2 <SystemCoreClockUpdate+0x7a>
341813b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341813b6:	f200 8179 	bhi.w	341816ac <SystemCoreClockUpdate+0x334>
341813ba:	2b00      	cmp	r3, #0
341813bc:	d003      	beq.n	341813c6 <SystemCoreClockUpdate+0x4e>
341813be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341813c2:	d00a      	beq.n	341813da <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
341813c4:	e172      	b.n	341816ac <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
341813c6:	4b8f      	ldr	r3, [pc, #572]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
341813c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341813ca:	09db      	lsrs	r3, r3, #7
341813cc:	f003 0303 	and.w	r3, r3, #3
341813d0:	4a8d      	ldr	r2, [pc, #564]	@ (34181608 <SystemCoreClockUpdate+0x290>)
341813d2:	fa22 f303 	lsr.w	r3, r2, r3
341813d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341813d8:	e169      	b.n	341816ae <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
341813da:	4b8a      	ldr	r3, [pc, #552]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
341813dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341813de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341813e2:	2b00      	cmp	r3, #0
341813e4:	d102      	bne.n	341813ec <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
341813e6:	4b89      	ldr	r3, [pc, #548]	@ (3418160c <SystemCoreClockUpdate+0x294>)
341813e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341813ea:	e160      	b.n	341816ae <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
341813ec:	4b88      	ldr	r3, [pc, #544]	@ (34181610 <SystemCoreClockUpdate+0x298>)
341813ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341813f0:	e15d      	b.n	341816ae <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
341813f2:	4b88      	ldr	r3, [pc, #544]	@ (34181614 <SystemCoreClockUpdate+0x29c>)
341813f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341813f6:	e15a      	b.n	341816ae <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
341813f8:	4b82      	ldr	r3, [pc, #520]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
341813fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341813fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34181402:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181406:	d066      	beq.n	341814d6 <SystemCoreClockUpdate+0x15e>
34181408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418140c:	f200 8091 	bhi.w	34181532 <SystemCoreClockUpdate+0x1ba>
34181410:	2b00      	cmp	r3, #0
34181412:	d003      	beq.n	3418141c <SystemCoreClockUpdate+0xa4>
34181414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34181418:	d02f      	beq.n	3418147a <SystemCoreClockUpdate+0x102>
3418141a:	e08a      	b.n	34181532 <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
3418141c:	4b79      	ldr	r3, [pc, #484]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
3418141e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34181422:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
34181424:	68fb      	ldr	r3, [r7, #12]
34181426:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3418142a:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
3418142c:	68fb      	ldr	r3, [r7, #12]
3418142e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181432:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34181434:	693b      	ldr	r3, [r7, #16]
34181436:	2b00      	cmp	r3, #0
34181438:	f040 80a9 	bne.w	3418158e <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
3418143c:	68fb      	ldr	r3, [r7, #12]
3418143e:	0d1b      	lsrs	r3, r3, #20
34181440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34181444:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
34181446:	68fb      	ldr	r3, [r7, #12]
34181448:	0a1b      	lsrs	r3, r3, #8
3418144a:	f3c3 030b 	ubfx	r3, r3, #0, #12
3418144e:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34181450:	4b6c      	ldr	r3, [pc, #432]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
34181452:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34181456:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3418145a:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
3418145c:	4b69      	ldr	r3, [pc, #420]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
3418145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34181462:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
34181464:	68fb      	ldr	r3, [r7, #12]
34181466:	0edb      	lsrs	r3, r3, #27
34181468:	f003 0307 	and.w	r3, r3, #7
3418146c:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
3418146e:	68fb      	ldr	r3, [r7, #12]
34181470:	0e1b      	lsrs	r3, r3, #24
34181472:	f003 0307 	and.w	r3, r3, #7
34181476:	61bb      	str	r3, [r7, #24]
      break;
34181478:	e089      	b.n	3418158e <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3418147a:	4b62      	ldr	r3, [pc, #392]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
3418147c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34181480:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34181482:	68fb      	ldr	r3, [r7, #12]
34181484:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34181488:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
3418148a:	68fb      	ldr	r3, [r7, #12]
3418148c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181490:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34181492:	693b      	ldr	r3, [r7, #16]
34181494:	2b00      	cmp	r3, #0
34181496:	d17c      	bne.n	34181592 <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
34181498:	68fb      	ldr	r3, [r7, #12]
3418149a:	0d1b      	lsrs	r3, r3, #20
3418149c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341814a0:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
341814a2:	68fb      	ldr	r3, [r7, #12]
341814a4:	0a1b      	lsrs	r3, r3, #8
341814a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
341814aa:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
341814ac:	4b55      	ldr	r3, [pc, #340]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
341814ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
341814b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341814b6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
341814b8:	4b52      	ldr	r3, [pc, #328]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
341814ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341814be:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
341814c0:	68fb      	ldr	r3, [r7, #12]
341814c2:	0edb      	lsrs	r3, r3, #27
341814c4:	f003 0307 	and.w	r3, r3, #7
341814c8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
341814ca:	68fb      	ldr	r3, [r7, #12]
341814cc:	0e1b      	lsrs	r3, r3, #24
341814ce:	f003 0307 	and.w	r3, r3, #7
341814d2:	61bb      	str	r3, [r7, #24]
      break;
341814d4:	e05d      	b.n	34181592 <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
341814d6:	4b4b      	ldr	r3, [pc, #300]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
341814d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341814dc:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
341814de:	68fb      	ldr	r3, [r7, #12]
341814e0:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
341814e4:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
341814e6:	68fb      	ldr	r3, [r7, #12]
341814e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341814ec:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
341814ee:	693b      	ldr	r3, [r7, #16]
341814f0:	2b00      	cmp	r3, #0
341814f2:	d150      	bne.n	34181596 <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
341814f4:	68fb      	ldr	r3, [r7, #12]
341814f6:	0d1b      	lsrs	r3, r3, #20
341814f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
341814fc:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
341814fe:	68fb      	ldr	r3, [r7, #12]
34181500:	0a1b      	lsrs	r3, r3, #8
34181502:	f3c3 030b 	ubfx	r3, r3, #0, #12
34181506:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
34181508:	4b3e      	ldr	r3, [pc, #248]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
3418150a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418150e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34181512:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34181514:	4b3b      	ldr	r3, [pc, #236]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
34181516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418151a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
3418151c:	68fb      	ldr	r3, [r7, #12]
3418151e:	0edb      	lsrs	r3, r3, #27
34181520:	f003 0307 	and.w	r3, r3, #7
34181524:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
34181526:	68fb      	ldr	r3, [r7, #12]
34181528:	0e1b      	lsrs	r3, r3, #24
3418152a:	f003 0307 	and.w	r3, r3, #7
3418152e:	61bb      	str	r3, [r7, #24]
      break;
34181530:	e031      	b.n	34181596 <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34181532:	4b34      	ldr	r3, [pc, #208]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
34181534:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34181538:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3418153a:	68fb      	ldr	r3, [r7, #12]
3418153c:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34181540:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34181542:	68fb      	ldr	r3, [r7, #12]
34181544:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34181548:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3418154a:	693b      	ldr	r3, [r7, #16]
3418154c:	2b00      	cmp	r3, #0
3418154e:	d124      	bne.n	3418159a <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34181550:	68fb      	ldr	r3, [r7, #12]
34181552:	0d1b      	lsrs	r3, r3, #20
34181554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34181558:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
3418155a:	68fb      	ldr	r3, [r7, #12]
3418155c:	0a1b      	lsrs	r3, r3, #8
3418155e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34181562:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34181564:	4b27      	ldr	r3, [pc, #156]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
34181566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418156a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3418156e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34181570:	4b24      	ldr	r3, [pc, #144]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
34181572:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34181576:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
34181578:	68fb      	ldr	r3, [r7, #12]
3418157a:	0edb      	lsrs	r3, r3, #27
3418157c:	f003 0307 	and.w	r3, r3, #7
34181580:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34181582:	68fb      	ldr	r3, [r7, #12]
34181584:	0e1b      	lsrs	r3, r3, #24
34181586:	f003 0307 	and.w	r3, r3, #7
3418158a:	61bb      	str	r3, [r7, #24]
      break;
3418158c:	e005      	b.n	3418159a <SystemCoreClockUpdate+0x222>
      break;
3418158e:	bf00      	nop
34181590:	e004      	b.n	3418159c <SystemCoreClockUpdate+0x224>
      break;
34181592:	bf00      	nop
34181594:	e002      	b.n	3418159c <SystemCoreClockUpdate+0x224>
      break;
34181596:	bf00      	nop
34181598:	e000      	b.n	3418159c <SystemCoreClockUpdate+0x224>
      break;
3418159a:	bf00      	nop
3418159c:	697b      	ldr	r3, [r7, #20]
3418159e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341815a2:	d02c      	beq.n	341815fe <SystemCoreClockUpdate+0x286>
341815a4:	697b      	ldr	r3, [r7, #20]
341815a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341815aa:	d839      	bhi.n	34181620 <SystemCoreClockUpdate+0x2a8>
341815ac:	697b      	ldr	r3, [r7, #20]
341815ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341815b2:	d021      	beq.n	341815f8 <SystemCoreClockUpdate+0x280>
341815b4:	697b      	ldr	r3, [r7, #20]
341815b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341815ba:	d831      	bhi.n	34181620 <SystemCoreClockUpdate+0x2a8>
341815bc:	697b      	ldr	r3, [r7, #20]
341815be:	2b00      	cmp	r3, #0
341815c0:	d004      	beq.n	341815cc <SystemCoreClockUpdate+0x254>
341815c2:	697b      	ldr	r3, [r7, #20]
341815c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341815c8:	d00a      	beq.n	341815e0 <SystemCoreClockUpdate+0x268>
      break;
341815ca:	e029      	b.n	34181620 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
341815cc:	4b0d      	ldr	r3, [pc, #52]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
341815ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341815d0:	09db      	lsrs	r3, r3, #7
341815d2:	f003 0303 	and.w	r3, r3, #3
341815d6:	4a0c      	ldr	r2, [pc, #48]	@ (34181608 <SystemCoreClockUpdate+0x290>)
341815d8:	fa22 f303 	lsr.w	r3, r2, r3
341815dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
341815de:	e020      	b.n	34181622 <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
341815e0:	4b08      	ldr	r3, [pc, #32]	@ (34181604 <SystemCoreClockUpdate+0x28c>)
341815e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341815e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341815e8:	2b00      	cmp	r3, #0
341815ea:	d102      	bne.n	341815f2 <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
341815ec:	4b07      	ldr	r3, [pc, #28]	@ (3418160c <SystemCoreClockUpdate+0x294>)
341815ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
341815f0:	e017      	b.n	34181622 <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
341815f2:	4b07      	ldr	r3, [pc, #28]	@ (34181610 <SystemCoreClockUpdate+0x298>)
341815f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
341815f6:	e014      	b.n	34181622 <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
341815f8:	4b06      	ldr	r3, [pc, #24]	@ (34181614 <SystemCoreClockUpdate+0x29c>)
341815fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
341815fc:	e011      	b.n	34181622 <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
341815fe:	4b06      	ldr	r3, [pc, #24]	@ (34181618 <SystemCoreClockUpdate+0x2a0>)
34181600:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
34181602:	e00e      	b.n	34181622 <SystemCoreClockUpdate+0x2aa>
34181604:	56028000 	.word	0x56028000
34181608:	03d09000 	.word	0x03d09000
3418160c:	003d0900 	.word	0x003d0900
34181610:	00f42400 	.word	0x00f42400
34181614:	02dc6c00 	.word	0x02dc6c00
34181618:	00bb8000 	.word	0x00bb8000
3418161c:	4b800000 	.word	0x4b800000
      break;
34181620:	bf00      	nop
    if (pllbypass == 0U)
34181622:	693b      	ldr	r3, [r7, #16]
34181624:	2b00      	cmp	r3, #0
34181626:	d134      	bne.n	34181692 <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
34181628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418162a:	ee07 3a90 	vmov	s15, r3
3418162e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34181632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34181634:	ee07 3a90 	vmov	s15, r3
34181638:	eef8 6a67 	vcvt.f32.u32	s13, s15
3418163c:	6a3b      	ldr	r3, [r7, #32]
3418163e:	ee07 3a90 	vmov	s15, r3
34181642:	eeb8 6a67 	vcvt.f32.u32	s12, s15
34181646:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 3418161c <SystemCoreClockUpdate+0x2a4>
3418164a:	eec6 7a25 	vdiv.f32	s15, s12, s11
3418164e:	ee76 7aa7 	vadd.f32	s15, s13, s15
34181652:	ee67 6a27 	vmul.f32	s13, s14, s15
34181656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34181658:	ee07 3a90 	vmov	s15, r3
3418165c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34181660:	eec6 7a87 	vdiv.f32	s15, s13, s14
34181664:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
34181668:	69fb      	ldr	r3, [r7, #28]
3418166a:	ee07 3a90 	vmov	s15, r3
3418166e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34181672:	69bb      	ldr	r3, [r7, #24]
34181674:	ee07 3a90 	vmov	s15, r3
34181678:	eef8 7a67 	vcvt.f32.u32	s15, s15
3418167c:	ee27 7a27 	vmul.f32	s14, s14, s15
34181680:	edd7 6a02 	vldr	s13, [r7, #8]
34181684:	eec6 7a87 	vdiv.f32	s15, s13, s14
34181688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
3418168c:	ee17 3a90 	vmov	r3, s15
34181690:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34181692:	4b0b      	ldr	r3, [pc, #44]	@ (341816c0 <SystemCoreClockUpdate+0x348>)
34181694:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34181698:	0c1b      	lsrs	r3, r3, #16
3418169a:	b2db      	uxtb	r3, r3
3418169c:	3301      	adds	r3, #1
3418169e:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
341816a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
341816a2:	687b      	ldr	r3, [r7, #4]
341816a4:	fbb2 f3f3 	udiv	r3, r2, r3
341816a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
341816aa:	e000      	b.n	341816ae <SystemCoreClockUpdate+0x336>
    break;
341816ac:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
341816ae:	4a05      	ldr	r2, [pc, #20]	@ (341816c4 <SystemCoreClockUpdate+0x34c>)
341816b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
341816b2:	6013      	str	r3, [r2, #0]
}
341816b4:	bf00      	nop
341816b6:	3734      	adds	r7, #52	@ 0x34
341816b8:	46bd      	mov	sp, r7
341816ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341816be:	4770      	bx	lr
341816c0:	56028000 	.word	0x56028000
341816c4:	341c0000 	.word	0x341c0000

341816c8 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
341816c8:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
341816cc:	b588      	push	{r3, r7, lr}
341816ce:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
341816d0:	f7ff fe52 	bl	34181378 <SystemCoreClockUpdate>

  return SystemCoreClock;
341816d4:	4b06      	ldr	r3, [pc, #24]	@ (341816f0 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
341816d6:	681b      	ldr	r3, [r3, #0]
}
341816d8:	4618      	mov	r0, r3
341816da:	46bd      	mov	sp, r7
341816dc:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
341816e0:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
341816e4:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
341816e8:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
341816ec:	4774      	bxns	lr
341816ee:	bf00      	nop
341816f0:	341c0000 	.word	0x341c0000

341816f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
341816f4:	480f      	ldr	r0, [pc, #60]	@ (34181734 <LoopForever+0x4>)
  msr   MSPLIM, r0
341816f6:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
341816fa:	480f      	ldr	r0, [pc, #60]	@ (34181738 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
341816fc:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
341816fe:	f7ff fd55 	bl	341811ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
34181702:	480e      	ldr	r0, [pc, #56]	@ (3418173c <LoopForever+0xc>)
  ldr r1, =_edata
34181704:	490e      	ldr	r1, [pc, #56]	@ (34181740 <LoopForever+0x10>)
  ldr r2, =_sidata
34181706:	4a0f      	ldr	r2, [pc, #60]	@ (34181744 <LoopForever+0x14>)
  movs r3, #0
34181708:	2300      	movs	r3, #0
  b LoopCopyDataInit
3418170a:	e002      	b.n	34181712 <LoopCopyDataInit>

3418170c <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
3418170c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
3418170e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
34181710:	3304      	adds	r3, #4

34181712 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
34181712:	18c4      	adds	r4, r0, r3
  cmp r4, r1
34181714:	428c      	cmp	r4, r1
  bcc CopyDataInit
34181716:	d3f9      	bcc.n	3418170c <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
34181718:	4a0b      	ldr	r2, [pc, #44]	@ (34181748 <LoopForever+0x18>)
  ldr r4, =_ebss
3418171a:	4c0c      	ldr	r4, [pc, #48]	@ (3418174c <LoopForever+0x1c>)
  movs r3, #0
3418171c:	2300      	movs	r3, #0
  b LoopFillZerobss
3418171e:	e001      	b.n	34181724 <LoopFillZerobss>

34181720 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
34181720:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
34181722:	3204      	adds	r2, #4

34181724 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
34181724:	42a2      	cmp	r2, r4
  bcc FillZerobss
34181726:	d3fb      	bcc.n	34181720 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
34181728:	f00e fe1a 	bl	34190360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
3418172c:	f7ff f9f2 	bl	34180b14 <main>

34181730 <LoopForever>:

LoopForever:
  b LoopForever
34181730:	e7fe      	b.n	34181730 <LoopForever>
34181732:	0000      	.short	0x0000
  ldr   r0, =_sstack
34181734:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
34181738:	34200000 	.word	0x34200000
  ldr r0, =_sdata
3418173c:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
34181740:	341c0068 	.word	0x341c0068
  ldr r2, =_sidata
34181744:	341908e0 	.word	0x341908e0
  ldr r2, =_sbss
34181748:	341c0068 	.word	0x341c0068
  ldr r4, =_ebss
3418174c:	341c0508 	.word	0x341c0508

34181750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34181750:	e7fe      	b.n	34181750 <ADC1_2_IRQHandler>

34181752 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34181752:	b580      	push	{r7, lr}
34181754:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
34181756:	2003      	movs	r0, #3
34181758:	f000 f94c 	bl	341819f4 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
3418175c:	f7ff fe0c 	bl	34181378 <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34181760:	200f      	movs	r0, #15
34181762:	f000 f80b 	bl	3418177c <HAL_InitTick>
34181766:	4603      	mov	r3, r0
34181768:	2b00      	cmp	r3, #0
3418176a:	d001      	beq.n	34181770 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
3418176c:	2301      	movs	r3, #1
3418176e:	e002      	b.n	34181776 <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
34181770:	f7ff fb7c 	bl	34180e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34181774:	2300      	movs	r3, #0
}
34181776:	4618      	mov	r0, r3
34181778:	bd80      	pop	{r7, pc}
	...

3418177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
3418177c:	b580      	push	{r7, lr}
3418177e:	b082      	sub	sp, #8
34181780:	af00      	add	r7, sp, #0
34181782:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34181784:	4b15      	ldr	r3, [pc, #84]	@ (341817dc <HAL_InitTick+0x60>)
34181786:	781b      	ldrb	r3, [r3, #0]
34181788:	2b00      	cmp	r3, #0
3418178a:	d101      	bne.n	34181790 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
3418178c:	2301      	movs	r3, #1
3418178e:	e021      	b.n	341817d4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34181790:	4b13      	ldr	r3, [pc, #76]	@ (341817e0 <HAL_InitTick+0x64>)
34181792:	681a      	ldr	r2, [r3, #0]
34181794:	4b11      	ldr	r3, [pc, #68]	@ (341817dc <HAL_InitTick+0x60>)
34181796:	781b      	ldrb	r3, [r3, #0]
34181798:	4619      	mov	r1, r3
3418179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
3418179e:	fbb3 f3f1 	udiv	r3, r3, r1
341817a2:	fbb2 f3f3 	udiv	r3, r2, r3
341817a6:	4618      	mov	r0, r3
341817a8:	f000 f94c 	bl	34181a44 <HAL_SYSTICK_Config>
341817ac:	4603      	mov	r3, r0
341817ae:	2b00      	cmp	r3, #0
341817b0:	d001      	beq.n	341817b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
341817b2:	2301      	movs	r3, #1
341817b4:	e00e      	b.n	341817d4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
341817b6:	687b      	ldr	r3, [r7, #4]
341817b8:	2b0f      	cmp	r3, #15
341817ba:	d80a      	bhi.n	341817d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
341817bc:	2200      	movs	r2, #0
341817be:	6879      	ldr	r1, [r7, #4]
341817c0:	f04f 30ff 	mov.w	r0, #4294967295
341817c4:	f000 f921 	bl	34181a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
341817c8:	4a06      	ldr	r2, [pc, #24]	@ (341817e4 <HAL_InitTick+0x68>)
341817ca:	687b      	ldr	r3, [r7, #4]
341817cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
341817ce:	2300      	movs	r3, #0
341817d0:	e000      	b.n	341817d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
341817d2:	2301      	movs	r3, #1
}
341817d4:	4618      	mov	r0, r3
341817d6:	3708      	adds	r7, #8
341817d8:	46bd      	mov	sp, r7
341817da:	bd80      	pop	{r7, pc}
341817dc:	341c0008 	.word	0x341c0008
341817e0:	341c0000 	.word	0x341c0000
341817e4:	341c0004 	.word	0x341c0004

341817e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
341817e8:	b480      	push	{r7}
341817ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
341817ec:	4b06      	ldr	r3, [pc, #24]	@ (34181808 <HAL_IncTick+0x20>)
341817ee:	781b      	ldrb	r3, [r3, #0]
341817f0:	461a      	mov	r2, r3
341817f2:	4b06      	ldr	r3, [pc, #24]	@ (3418180c <HAL_IncTick+0x24>)
341817f4:	681b      	ldr	r3, [r3, #0]
341817f6:	4413      	add	r3, r2
341817f8:	4a04      	ldr	r2, [pc, #16]	@ (3418180c <HAL_IncTick+0x24>)
341817fa:	6013      	str	r3, [r2, #0]
}
341817fc:	bf00      	nop
341817fe:	46bd      	mov	sp, r7
34181800:	f85d 7b04 	ldr.w	r7, [sp], #4
34181804:	4770      	bx	lr
34181806:	bf00      	nop
34181808:	341c0008 	.word	0x341c0008
3418180c:	341c0180 	.word	0x341c0180

34181810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
34181810:	b480      	push	{r7}
34181812:	af00      	add	r7, sp, #0
  return uwTick;
34181814:	4b03      	ldr	r3, [pc, #12]	@ (34181824 <HAL_GetTick+0x14>)
34181816:	681b      	ldr	r3, [r3, #0]
}
34181818:	4618      	mov	r0, r3
3418181a:	46bd      	mov	sp, r7
3418181c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181820:	4770      	bx	lr
34181822:	bf00      	nop
34181824:	341c0180 	.word	0x341c0180

34181828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
34181828:	b580      	push	{r7, lr}
3418182a:	b084      	sub	sp, #16
3418182c:	af00      	add	r7, sp, #0
3418182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34181830:	f7ff ffee 	bl	34181810 <HAL_GetTick>
34181834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
34181836:	687b      	ldr	r3, [r7, #4]
34181838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
3418183a:	68fb      	ldr	r3, [r7, #12]
3418183c:	f1b3 3fff 	cmp.w	r3, #4294967295
34181840:	d005      	beq.n	3418184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34181842:	4b0a      	ldr	r3, [pc, #40]	@ (3418186c <HAL_Delay+0x44>)
34181844:	781b      	ldrb	r3, [r3, #0]
34181846:	461a      	mov	r2, r3
34181848:	68fb      	ldr	r3, [r7, #12]
3418184a:	4413      	add	r3, r2
3418184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
3418184e:	bf00      	nop
34181850:	f7ff ffde 	bl	34181810 <HAL_GetTick>
34181854:	4602      	mov	r2, r0
34181856:	68bb      	ldr	r3, [r7, #8]
34181858:	1ad3      	subs	r3, r2, r3
3418185a:	68fa      	ldr	r2, [r7, #12]
3418185c:	429a      	cmp	r2, r3
3418185e:	d8f7      	bhi.n	34181850 <HAL_Delay+0x28>
  {
  }
}
34181860:	bf00      	nop
34181862:	bf00      	nop
34181864:	3710      	adds	r7, #16
34181866:	46bd      	mov	sp, r7
34181868:	bd80      	pop	{r7, pc}
3418186a:	bf00      	nop
3418186c:	341c0008 	.word	0x341c0008

34181870 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
34181870:	b480      	push	{r7}
34181872:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
34181874:	4b05      	ldr	r3, [pc, #20]	@ (3418188c <HAL_SuspendTick+0x1c>)
34181876:	681b      	ldr	r3, [r3, #0]
34181878:	4a04      	ldr	r2, [pc, #16]	@ (3418188c <HAL_SuspendTick+0x1c>)
3418187a:	f023 0302 	bic.w	r3, r3, #2
3418187e:	6013      	str	r3, [r2, #0]
}
34181880:	bf00      	nop
34181882:	46bd      	mov	sp, r7
34181884:	f85d 7b04 	ldr.w	r7, [sp], #4
34181888:	4770      	bx	lr
3418188a:	bf00      	nop
3418188c:	e000e010 	.word	0xe000e010

34181890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34181890:	b480      	push	{r7}
34181892:	b085      	sub	sp, #20
34181894:	af00      	add	r7, sp, #0
34181896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
34181898:	687b      	ldr	r3, [r7, #4]
3418189a:	f003 0307 	and.w	r3, r3, #7
3418189e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
341818a0:	4b0c      	ldr	r3, [pc, #48]	@ (341818d4 <__NVIC_SetPriorityGrouping+0x44>)
341818a2:	68db      	ldr	r3, [r3, #12]
341818a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
341818a6:	68ba      	ldr	r2, [r7, #8]
341818a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
341818ac:	4013      	ands	r3, r2
341818ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
341818b0:	68fb      	ldr	r3, [r7, #12]
341818b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
341818b4:	68bb      	ldr	r3, [r7, #8]
341818b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
341818b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
341818bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
341818c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
341818c2:	4a04      	ldr	r2, [pc, #16]	@ (341818d4 <__NVIC_SetPriorityGrouping+0x44>)
341818c4:	68bb      	ldr	r3, [r7, #8]
341818c6:	60d3      	str	r3, [r2, #12]
}
341818c8:	bf00      	nop
341818ca:	3714      	adds	r7, #20
341818cc:	46bd      	mov	sp, r7
341818ce:	f85d 7b04 	ldr.w	r7, [sp], #4
341818d2:	4770      	bx	lr
341818d4:	e000ed00 	.word	0xe000ed00

341818d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
341818d8:	b480      	push	{r7}
341818da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
341818dc:	4b04      	ldr	r3, [pc, #16]	@ (341818f0 <__NVIC_GetPriorityGrouping+0x18>)
341818de:	68db      	ldr	r3, [r3, #12]
341818e0:	0a1b      	lsrs	r3, r3, #8
341818e2:	f003 0307 	and.w	r3, r3, #7
}
341818e6:	4618      	mov	r0, r3
341818e8:	46bd      	mov	sp, r7
341818ea:	f85d 7b04 	ldr.w	r7, [sp], #4
341818ee:	4770      	bx	lr
341818f0:	e000ed00 	.word	0xe000ed00

341818f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
341818f4:	b480      	push	{r7}
341818f6:	b083      	sub	sp, #12
341818f8:	af00      	add	r7, sp, #0
341818fa:	4603      	mov	r3, r0
341818fc:	6039      	str	r1, [r7, #0]
341818fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
34181900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34181904:	2b00      	cmp	r3, #0
34181906:	db0a      	blt.n	3418191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34181908:	683b      	ldr	r3, [r7, #0]
3418190a:	b2da      	uxtb	r2, r3
3418190c:	490c      	ldr	r1, [pc, #48]	@ (34181940 <__NVIC_SetPriority+0x4c>)
3418190e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
34181912:	0112      	lsls	r2, r2, #4
34181914:	b2d2      	uxtb	r2, r2
34181916:	440b      	add	r3, r1
34181918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
3418191c:	e00a      	b.n	34181934 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3418191e:	683b      	ldr	r3, [r7, #0]
34181920:	b2da      	uxtb	r2, r3
34181922:	4908      	ldr	r1, [pc, #32]	@ (34181944 <__NVIC_SetPriority+0x50>)
34181924:	88fb      	ldrh	r3, [r7, #6]
34181926:	f003 030f 	and.w	r3, r3, #15
3418192a:	3b04      	subs	r3, #4
3418192c:	0112      	lsls	r2, r2, #4
3418192e:	b2d2      	uxtb	r2, r2
34181930:	440b      	add	r3, r1
34181932:	761a      	strb	r2, [r3, #24]
}
34181934:	bf00      	nop
34181936:	370c      	adds	r7, #12
34181938:	46bd      	mov	sp, r7
3418193a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418193e:	4770      	bx	lr
34181940:	e000e100 	.word	0xe000e100
34181944:	e000ed00 	.word	0xe000ed00

34181948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
34181948:	b480      	push	{r7}
3418194a:	b089      	sub	sp, #36	@ 0x24
3418194c:	af00      	add	r7, sp, #0
3418194e:	60f8      	str	r0, [r7, #12]
34181950:	60b9      	str	r1, [r7, #8]
34181952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34181954:	68fb      	ldr	r3, [r7, #12]
34181956:	f003 0307 	and.w	r3, r3, #7
3418195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
3418195c:	69fb      	ldr	r3, [r7, #28]
3418195e:	f1c3 0307 	rsb	r3, r3, #7
34181962:	2b04      	cmp	r3, #4
34181964:	bf28      	it	cs
34181966:	2304      	movcs	r3, #4
34181968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3418196a:	69fb      	ldr	r3, [r7, #28]
3418196c:	3304      	adds	r3, #4
3418196e:	2b06      	cmp	r3, #6
34181970:	d902      	bls.n	34181978 <NVIC_EncodePriority+0x30>
34181972:	69fb      	ldr	r3, [r7, #28]
34181974:	3b03      	subs	r3, #3
34181976:	e000      	b.n	3418197a <NVIC_EncodePriority+0x32>
34181978:	2300      	movs	r3, #0
3418197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3418197c:	f04f 32ff 	mov.w	r2, #4294967295
34181980:	69bb      	ldr	r3, [r7, #24]
34181982:	fa02 f303 	lsl.w	r3, r2, r3
34181986:	43da      	mvns	r2, r3
34181988:	68bb      	ldr	r3, [r7, #8]
3418198a:	401a      	ands	r2, r3
3418198c:	697b      	ldr	r3, [r7, #20]
3418198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34181990:	f04f 31ff 	mov.w	r1, #4294967295
34181994:	697b      	ldr	r3, [r7, #20]
34181996:	fa01 f303 	lsl.w	r3, r1, r3
3418199a:	43d9      	mvns	r1, r3
3418199c:	687b      	ldr	r3, [r7, #4]
3418199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
341819a0:	4313      	orrs	r3, r2
         );
}
341819a2:	4618      	mov	r0, r3
341819a4:	3724      	adds	r7, #36	@ 0x24
341819a6:	46bd      	mov	sp, r7
341819a8:	f85d 7b04 	ldr.w	r7, [sp], #4
341819ac:	4770      	bx	lr
	...

341819b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
341819b0:	b580      	push	{r7, lr}
341819b2:	b082      	sub	sp, #8
341819b4:	af00      	add	r7, sp, #0
341819b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
341819b8:	687b      	ldr	r3, [r7, #4]
341819ba:	3b01      	subs	r3, #1
341819bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341819c0:	d301      	bcc.n	341819c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
341819c2:	2301      	movs	r3, #1
341819c4:	e00f      	b.n	341819e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
341819c6:	4a0a      	ldr	r2, [pc, #40]	@ (341819f0 <SysTick_Config+0x40>)
341819c8:	687b      	ldr	r3, [r7, #4]
341819ca:	3b01      	subs	r3, #1
341819cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
341819ce:	210f      	movs	r1, #15
341819d0:	f04f 30ff 	mov.w	r0, #4294967295
341819d4:	f7ff ff8e 	bl	341818f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
341819d8:	4b05      	ldr	r3, [pc, #20]	@ (341819f0 <SysTick_Config+0x40>)
341819da:	2200      	movs	r2, #0
341819dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
341819de:	4b04      	ldr	r3, [pc, #16]	@ (341819f0 <SysTick_Config+0x40>)
341819e0:	2207      	movs	r2, #7
341819e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
341819e4:	2300      	movs	r3, #0
}
341819e6:	4618      	mov	r0, r3
341819e8:	3708      	adds	r7, #8
341819ea:	46bd      	mov	sp, r7
341819ec:	bd80      	pop	{r7, pc}
341819ee:	bf00      	nop
341819f0:	e000e010 	.word	0xe000e010

341819f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
341819f4:	b580      	push	{r7, lr}
341819f6:	b082      	sub	sp, #8
341819f8:	af00      	add	r7, sp, #0
341819fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
341819fc:	6878      	ldr	r0, [r7, #4]
341819fe:	f7ff ff47 	bl	34181890 <__NVIC_SetPriorityGrouping>
}
34181a02:	bf00      	nop
34181a04:	3708      	adds	r7, #8
34181a06:	46bd      	mov	sp, r7
34181a08:	bd80      	pop	{r7, pc}

34181a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
34181a0a:	b580      	push	{r7, lr}
34181a0c:	b086      	sub	sp, #24
34181a0e:	af00      	add	r7, sp, #0
34181a10:	4603      	mov	r3, r0
34181a12:	60b9      	str	r1, [r7, #8]
34181a14:	607a      	str	r2, [r7, #4]
34181a16:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
34181a18:	f7ff ff5e 	bl	341818d8 <__NVIC_GetPriorityGrouping>
34181a1c:	4603      	mov	r3, r0
34181a1e:	f003 0307 	and.w	r3, r3, #7
34181a22:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
34181a24:	687a      	ldr	r2, [r7, #4]
34181a26:	68b9      	ldr	r1, [r7, #8]
34181a28:	6978      	ldr	r0, [r7, #20]
34181a2a:	f7ff ff8d 	bl	34181948 <NVIC_EncodePriority>
34181a2e:	4602      	mov	r2, r0
34181a30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
34181a34:	4611      	mov	r1, r2
34181a36:	4618      	mov	r0, r3
34181a38:	f7ff ff5c 	bl	341818f4 <__NVIC_SetPriority>
}
34181a3c:	bf00      	nop
34181a3e:	3718      	adds	r7, #24
34181a40:	46bd      	mov	sp, r7
34181a42:	bd80      	pop	{r7, pc}

34181a44 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
34181a44:	b580      	push	{r7, lr}
34181a46:	b082      	sub	sp, #8
34181a48:	af00      	add	r7, sp, #0
34181a4a:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34181a4c:	6878      	ldr	r0, [r7, #4]
34181a4e:	f7ff ffaf 	bl	341819b0 <SysTick_Config>
34181a52:	4603      	mov	r3, r0
}
34181a54:	4618      	mov	r0, r3
34181a56:	3708      	adds	r7, #8
34181a58:	46bd      	mov	sp, r7
34181a5a:	bd80      	pop	{r7, pc}

34181a5c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
34181a5c:	b580      	push	{r7, lr}
34181a5e:	b084      	sub	sp, #16
34181a60:	af00      	add	r7, sp, #0
34181a62:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
34181a64:	f7ff fed4 	bl	34181810 <HAL_GetTick>
34181a68:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
34181a6a:	687b      	ldr	r3, [r7, #4]
34181a6c:	2b00      	cmp	r3, #0
34181a6e:	d101      	bne.n	34181a74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
34181a70:	2301      	movs	r3, #1
34181a72:	e06b      	b.n	34181b4c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
34181a74:	687b      	ldr	r3, [r7, #4]
34181a76:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
34181a7a:	b2db      	uxtb	r3, r3
34181a7c:	2b02      	cmp	r3, #2
34181a7e:	d008      	beq.n	34181a92 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
34181a80:	687b      	ldr	r3, [r7, #4]
34181a82:	2220      	movs	r2, #32
34181a84:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34181a86:	687b      	ldr	r3, [r7, #4]
34181a88:	2200      	movs	r2, #0
34181a8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
34181a8e:	2301      	movs	r3, #1
34181a90:	e05c      	b.n	34181b4c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
34181a92:	687b      	ldr	r3, [r7, #4]
34181a94:	681b      	ldr	r3, [r3, #0]
34181a96:	695a      	ldr	r2, [r3, #20]
34181a98:	687b      	ldr	r3, [r7, #4]
34181a9a:	681b      	ldr	r3, [r3, #0]
34181a9c:	f042 0204 	orr.w	r2, r2, #4
34181aa0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
34181aa2:	687b      	ldr	r3, [r7, #4]
34181aa4:	2205      	movs	r2, #5
34181aa6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
34181aaa:	e020      	b.n	34181aee <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
34181aac:	f7ff feb0 	bl	34181810 <HAL_GetTick>
34181ab0:	4602      	mov	r2, r0
34181ab2:	68fb      	ldr	r3, [r7, #12]
34181ab4:	1ad3      	subs	r3, r2, r3
34181ab6:	2b05      	cmp	r3, #5
34181ab8:	d919      	bls.n	34181aee <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
34181aba:	687b      	ldr	r3, [r7, #4]
34181abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
34181abe:	f043 0210 	orr.w	r2, r3, #16
34181ac2:	687b      	ldr	r3, [r7, #4]
34181ac4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
34181ac6:	687b      	ldr	r3, [r7, #4]
34181ac8:	2203      	movs	r2, #3
34181aca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34181ace:	687b      	ldr	r3, [r7, #4]
34181ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34181ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34181ad6:	2b00      	cmp	r3, #0
34181ad8:	d003      	beq.n	34181ae2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34181ada:	687b      	ldr	r3, [r7, #4]
34181adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34181ade:	2201      	movs	r2, #1
34181ae0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
34181ae2:	687b      	ldr	r3, [r7, #4]
34181ae4:	2200      	movs	r2, #0
34181ae6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
34181aea:	2301      	movs	r3, #1
34181aec:	e02e      	b.n	34181b4c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
34181aee:	687b      	ldr	r3, [r7, #4]
34181af0:	681b      	ldr	r3, [r3, #0]
34181af2:	691b      	ldr	r3, [r3, #16]
34181af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34181af8:	2b00      	cmp	r3, #0
34181afa:	d0d7      	beq.n	34181aac <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
34181afc:	687b      	ldr	r3, [r7, #4]
34181afe:	681b      	ldr	r3, [r3, #0]
34181b00:	695a      	ldr	r2, [r3, #20]
34181b02:	687b      	ldr	r3, [r7, #4]
34181b04:	681b      	ldr	r3, [r3, #0]
34181b06:	f042 0202 	orr.w	r2, r2, #2
34181b0a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
34181b0c:	687b      	ldr	r3, [r7, #4]
34181b0e:	2204      	movs	r2, #4
34181b10:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
34181b14:	687b      	ldr	r3, [r7, #4]
34181b16:	681b      	ldr	r3, [r3, #0]
34181b18:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
34181b1c:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
34181b1e:	687b      	ldr	r3, [r7, #4]
34181b20:	2201      	movs	r2, #1
34181b22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
34181b26:	687b      	ldr	r3, [r7, #4]
34181b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
34181b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34181b2e:	2b00      	cmp	r3, #0
34181b30:	d007      	beq.n	34181b42 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
34181b32:	687b      	ldr	r3, [r7, #4]
34181b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34181b36:	2201      	movs	r2, #1
34181b38:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
34181b3a:	687b      	ldr	r3, [r7, #4]
34181b3c:	681b      	ldr	r3, [r3, #0]
34181b3e:	2200      	movs	r2, #0
34181b40:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
34181b42:	687b      	ldr	r3, [r7, #4]
34181b44:	2200      	movs	r2, #0
34181b46:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
34181b4a:	2300      	movs	r3, #0
}
34181b4c:	4618      	mov	r0, r3
34181b4e:	3710      	adds	r7, #16
34181b50:	46bd      	mov	sp, r7
34181b52:	bd80      	pop	{r7, pc}

34181b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34181b54:	b480      	push	{r7}
34181b56:	b087      	sub	sp, #28
34181b58:	af00      	add	r7, sp, #0
34181b5a:	6078      	str	r0, [r7, #4]
34181b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
34181b5e:	2300      	movs	r3, #0
34181b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34181b62:	e180      	b.n	34181e66 <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34181b64:	683b      	ldr	r3, [r7, #0]
34181b66:	681a      	ldr	r2, [r3, #0]
34181b68:	2101      	movs	r1, #1
34181b6a:	697b      	ldr	r3, [r7, #20]
34181b6c:	fa01 f303 	lsl.w	r3, r1, r3
34181b70:	4013      	ands	r3, r2
34181b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34181b74:	68fb      	ldr	r3, [r7, #12]
34181b76:	2b00      	cmp	r3, #0
34181b78:	f000 8172 	beq.w	34181e60 <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34181b7c:	683b      	ldr	r3, [r7, #0]
34181b7e:	685b      	ldr	r3, [r3, #4]
34181b80:	f003 0303 	and.w	r3, r3, #3
34181b84:	2b01      	cmp	r3, #1
34181b86:	d005      	beq.n	34181b94 <HAL_GPIO_Init+0x40>
34181b88:	683b      	ldr	r3, [r7, #0]
34181b8a:	685b      	ldr	r3, [r3, #4]
34181b8c:	f003 0303 	and.w	r3, r3, #3
34181b90:	2b02      	cmp	r3, #2
34181b92:	d130      	bne.n	34181bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34181b94:	687b      	ldr	r3, [r7, #4]
34181b96:	689b      	ldr	r3, [r3, #8]
34181b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34181b9a:	697b      	ldr	r3, [r7, #20]
34181b9c:	005b      	lsls	r3, r3, #1
34181b9e:	2203      	movs	r2, #3
34181ba0:	fa02 f303 	lsl.w	r3, r2, r3
34181ba4:	43db      	mvns	r3, r3
34181ba6:	693a      	ldr	r2, [r7, #16]
34181ba8:	4013      	ands	r3, r2
34181baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34181bac:	683b      	ldr	r3, [r7, #0]
34181bae:	68da      	ldr	r2, [r3, #12]
34181bb0:	697b      	ldr	r3, [r7, #20]
34181bb2:	005b      	lsls	r3, r3, #1
34181bb4:	fa02 f303 	lsl.w	r3, r2, r3
34181bb8:	693a      	ldr	r2, [r7, #16]
34181bba:	4313      	orrs	r3, r2
34181bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
34181bbe:	687b      	ldr	r3, [r7, #4]
34181bc0:	693a      	ldr	r2, [r7, #16]
34181bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34181bc4:	687b      	ldr	r3, [r7, #4]
34181bc6:	685b      	ldr	r3, [r3, #4]
34181bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34181bca:	2201      	movs	r2, #1
34181bcc:	697b      	ldr	r3, [r7, #20]
34181bce:	fa02 f303 	lsl.w	r3, r2, r3
34181bd2:	43db      	mvns	r3, r3
34181bd4:	693a      	ldr	r2, [r7, #16]
34181bd6:	4013      	ands	r3, r2
34181bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34181bda:	683b      	ldr	r3, [r7, #0]
34181bdc:	685b      	ldr	r3, [r3, #4]
34181bde:	091b      	lsrs	r3, r3, #4
34181be0:	f003 0201 	and.w	r2, r3, #1
34181be4:	697b      	ldr	r3, [r7, #20]
34181be6:	fa02 f303 	lsl.w	r3, r2, r3
34181bea:	693a      	ldr	r2, [r7, #16]
34181bec:	4313      	orrs	r3, r2
34181bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
34181bf0:	687b      	ldr	r3, [r7, #4]
34181bf2:	693a      	ldr	r2, [r7, #16]
34181bf4:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34181bf6:	683b      	ldr	r3, [r7, #0]
34181bf8:	685b      	ldr	r3, [r3, #4]
34181bfa:	f003 0303 	and.w	r3, r3, #3
34181bfe:	2b03      	cmp	r3, #3
34181c00:	d109      	bne.n	34181c16 <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34181c02:	683b      	ldr	r3, [r7, #0]
34181c04:	685b      	ldr	r3, [r3, #4]
34181c06:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34181c0a:	2b03      	cmp	r3, #3
34181c0c:	d11b      	bne.n	34181c46 <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
34181c0e:	683b      	ldr	r3, [r7, #0]
34181c10:	689b      	ldr	r3, [r3, #8]
34181c12:	2b01      	cmp	r3, #1
34181c14:	d017      	beq.n	34181c46 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
34181c16:	687b      	ldr	r3, [r7, #4]
34181c18:	68db      	ldr	r3, [r3, #12]
34181c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
34181c1c:	697b      	ldr	r3, [r7, #20]
34181c1e:	005b      	lsls	r3, r3, #1
34181c20:	2203      	movs	r2, #3
34181c22:	fa02 f303 	lsl.w	r3, r2, r3
34181c26:	43db      	mvns	r3, r3
34181c28:	693a      	ldr	r2, [r7, #16]
34181c2a:	4013      	ands	r3, r2
34181c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
34181c2e:	683b      	ldr	r3, [r7, #0]
34181c30:	689a      	ldr	r2, [r3, #8]
34181c32:	697b      	ldr	r3, [r7, #20]
34181c34:	005b      	lsls	r3, r3, #1
34181c36:	fa02 f303 	lsl.w	r3, r2, r3
34181c3a:	693a      	ldr	r2, [r7, #16]
34181c3c:	4313      	orrs	r3, r2
34181c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
34181c40:	687b      	ldr	r3, [r7, #4]
34181c42:	693a      	ldr	r2, [r7, #16]
34181c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34181c46:	683b      	ldr	r3, [r7, #0]
34181c48:	685b      	ldr	r3, [r3, #4]
34181c4a:	f003 0303 	and.w	r3, r3, #3
34181c4e:	2b02      	cmp	r3, #2
34181c50:	d123      	bne.n	34181c9a <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34181c52:	697b      	ldr	r3, [r7, #20]
34181c54:	08da      	lsrs	r2, r3, #3
34181c56:	687b      	ldr	r3, [r7, #4]
34181c58:	3208      	adds	r2, #8
34181c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34181c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181c60:	697b      	ldr	r3, [r7, #20]
34181c62:	f003 0307 	and.w	r3, r3, #7
34181c66:	009b      	lsls	r3, r3, #2
34181c68:	220f      	movs	r2, #15
34181c6a:	fa02 f303 	lsl.w	r3, r2, r3
34181c6e:	43db      	mvns	r3, r3
34181c70:	693a      	ldr	r2, [r7, #16]
34181c72:	4013      	ands	r3, r2
34181c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181c76:	683b      	ldr	r3, [r7, #0]
34181c78:	691a      	ldr	r2, [r3, #16]
34181c7a:	697b      	ldr	r3, [r7, #20]
34181c7c:	f003 0307 	and.w	r3, r3, #7
34181c80:	009b      	lsls	r3, r3, #2
34181c82:	fa02 f303 	lsl.w	r3, r2, r3
34181c86:	693a      	ldr	r2, [r7, #16]
34181c88:	4313      	orrs	r3, r2
34181c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34181c8c:	697b      	ldr	r3, [r7, #20]
34181c8e:	08da      	lsrs	r2, r3, #3
34181c90:	687b      	ldr	r3, [r7, #4]
34181c92:	3208      	adds	r2, #8
34181c94:	6939      	ldr	r1, [r7, #16]
34181c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34181c9a:	687b      	ldr	r3, [r7, #4]
34181c9c:	681b      	ldr	r3, [r3, #0]
34181c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34181ca0:	697b      	ldr	r3, [r7, #20]
34181ca2:	005b      	lsls	r3, r3, #1
34181ca4:	2203      	movs	r2, #3
34181ca6:	fa02 f303 	lsl.w	r3, r2, r3
34181caa:	43db      	mvns	r3, r3
34181cac:	693a      	ldr	r2, [r7, #16]
34181cae:	4013      	ands	r3, r2
34181cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34181cb2:	683b      	ldr	r3, [r7, #0]
34181cb4:	685b      	ldr	r3, [r3, #4]
34181cb6:	f003 0203 	and.w	r2, r3, #3
34181cba:	697b      	ldr	r3, [r7, #20]
34181cbc:	005b      	lsls	r3, r3, #1
34181cbe:	fa02 f303 	lsl.w	r3, r2, r3
34181cc2:	693a      	ldr	r2, [r7, #16]
34181cc4:	4313      	orrs	r3, r2
34181cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34181cc8:	687b      	ldr	r3, [r7, #4]
34181cca:	693a      	ldr	r2, [r7, #16]
34181ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34181cce:	683b      	ldr	r3, [r7, #0]
34181cd0:	685b      	ldr	r3, [r3, #4]
34181cd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34181cd6:	2b00      	cmp	r3, #0
34181cd8:	f000 80c2 	beq.w	34181e60 <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34181cdc:	4a69      	ldr	r2, [pc, #420]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181cde:	697b      	ldr	r3, [r7, #20]
34181ce0:	089b      	lsrs	r3, r3, #2
34181ce2:	3318      	adds	r3, #24
34181ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34181ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181cea:	697b      	ldr	r3, [r7, #20]
34181cec:	f003 0303 	and.w	r3, r3, #3
34181cf0:	00db      	lsls	r3, r3, #3
34181cf2:	220f      	movs	r2, #15
34181cf4:	fa02 f303 	lsl.w	r3, r2, r3
34181cf8:	43db      	mvns	r3, r3
34181cfa:	693a      	ldr	r2, [r7, #16]
34181cfc:	4013      	ands	r3, r2
34181cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181d00:	687b      	ldr	r3, [r7, #4]
34181d02:	4a61      	ldr	r2, [pc, #388]	@ (34181e88 <HAL_GPIO_Init+0x334>)
34181d04:	4293      	cmp	r3, r2
34181d06:	d043      	beq.n	34181d90 <HAL_GPIO_Init+0x23c>
34181d08:	687b      	ldr	r3, [r7, #4]
34181d0a:	4a60      	ldr	r2, [pc, #384]	@ (34181e8c <HAL_GPIO_Init+0x338>)
34181d0c:	4293      	cmp	r3, r2
34181d0e:	d03d      	beq.n	34181d8c <HAL_GPIO_Init+0x238>
34181d10:	687b      	ldr	r3, [r7, #4]
34181d12:	4a5f      	ldr	r2, [pc, #380]	@ (34181e90 <HAL_GPIO_Init+0x33c>)
34181d14:	4293      	cmp	r3, r2
34181d16:	d037      	beq.n	34181d88 <HAL_GPIO_Init+0x234>
34181d18:	687b      	ldr	r3, [r7, #4]
34181d1a:	4a5e      	ldr	r2, [pc, #376]	@ (34181e94 <HAL_GPIO_Init+0x340>)
34181d1c:	4293      	cmp	r3, r2
34181d1e:	d031      	beq.n	34181d84 <HAL_GPIO_Init+0x230>
34181d20:	687b      	ldr	r3, [r7, #4]
34181d22:	4a5d      	ldr	r2, [pc, #372]	@ (34181e98 <HAL_GPIO_Init+0x344>)
34181d24:	4293      	cmp	r3, r2
34181d26:	d02b      	beq.n	34181d80 <HAL_GPIO_Init+0x22c>
34181d28:	687b      	ldr	r3, [r7, #4]
34181d2a:	4a5c      	ldr	r2, [pc, #368]	@ (34181e9c <HAL_GPIO_Init+0x348>)
34181d2c:	4293      	cmp	r3, r2
34181d2e:	d025      	beq.n	34181d7c <HAL_GPIO_Init+0x228>
34181d30:	687b      	ldr	r3, [r7, #4]
34181d32:	4a5b      	ldr	r2, [pc, #364]	@ (34181ea0 <HAL_GPIO_Init+0x34c>)
34181d34:	4293      	cmp	r3, r2
34181d36:	d01f      	beq.n	34181d78 <HAL_GPIO_Init+0x224>
34181d38:	687b      	ldr	r3, [r7, #4]
34181d3a:	4a5a      	ldr	r2, [pc, #360]	@ (34181ea4 <HAL_GPIO_Init+0x350>)
34181d3c:	4293      	cmp	r3, r2
34181d3e:	d019      	beq.n	34181d74 <HAL_GPIO_Init+0x220>
34181d40:	687b      	ldr	r3, [r7, #4]
34181d42:	4a59      	ldr	r2, [pc, #356]	@ (34181ea8 <HAL_GPIO_Init+0x354>)
34181d44:	4293      	cmp	r3, r2
34181d46:	d013      	beq.n	34181d70 <HAL_GPIO_Init+0x21c>
34181d48:	687b      	ldr	r3, [r7, #4]
34181d4a:	4a58      	ldr	r2, [pc, #352]	@ (34181eac <HAL_GPIO_Init+0x358>)
34181d4c:	4293      	cmp	r3, r2
34181d4e:	d00d      	beq.n	34181d6c <HAL_GPIO_Init+0x218>
34181d50:	687b      	ldr	r3, [r7, #4]
34181d52:	4a57      	ldr	r2, [pc, #348]	@ (34181eb0 <HAL_GPIO_Init+0x35c>)
34181d54:	4293      	cmp	r3, r2
34181d56:	d007      	beq.n	34181d68 <HAL_GPIO_Init+0x214>
34181d58:	687b      	ldr	r3, [r7, #4]
34181d5a:	4a56      	ldr	r2, [pc, #344]	@ (34181eb4 <HAL_GPIO_Init+0x360>)
34181d5c:	4293      	cmp	r3, r2
34181d5e:	d101      	bne.n	34181d64 <HAL_GPIO_Init+0x210>
34181d60:	230b      	movs	r3, #11
34181d62:	e016      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d64:	2310      	movs	r3, #16
34181d66:	e014      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d68:	230a      	movs	r3, #10
34181d6a:	e012      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d6c:	2309      	movs	r3, #9
34181d6e:	e010      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d70:	2308      	movs	r3, #8
34181d72:	e00e      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d74:	2307      	movs	r3, #7
34181d76:	e00c      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d78:	2306      	movs	r3, #6
34181d7a:	e00a      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d7c:	2305      	movs	r3, #5
34181d7e:	e008      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d80:	2304      	movs	r3, #4
34181d82:	e006      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d84:	2303      	movs	r3, #3
34181d86:	e004      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d88:	2302      	movs	r3, #2
34181d8a:	e002      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d8c:	2301      	movs	r3, #1
34181d8e:	e000      	b.n	34181d92 <HAL_GPIO_Init+0x23e>
34181d90:	2300      	movs	r3, #0
34181d92:	697a      	ldr	r2, [r7, #20]
34181d94:	f002 0203 	and.w	r2, r2, #3
34181d98:	00d2      	lsls	r2, r2, #3
34181d9a:	4093      	lsls	r3, r2
34181d9c:	693a      	ldr	r2, [r7, #16]
34181d9e:	4313      	orrs	r3, r2
34181da0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34181da2:	4938      	ldr	r1, [pc, #224]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181da4:	697b      	ldr	r3, [r7, #20]
34181da6:	089b      	lsrs	r3, r3, #2
34181da8:	3318      	adds	r3, #24
34181daa:	693a      	ldr	r2, [r7, #16]
34181dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34181db0:	4b34      	ldr	r3, [pc, #208]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34181db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181db8:	68fb      	ldr	r3, [r7, #12]
34181dba:	43db      	mvns	r3, r3
34181dbc:	693a      	ldr	r2, [r7, #16]
34181dbe:	4013      	ands	r3, r2
34181dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34181dc2:	683b      	ldr	r3, [r7, #0]
34181dc4:	685b      	ldr	r3, [r3, #4]
34181dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34181dca:	2b00      	cmp	r3, #0
34181dcc:	d003      	beq.n	34181dd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
34181dce:	693a      	ldr	r2, [r7, #16]
34181dd0:	68fb      	ldr	r3, [r7, #12]
34181dd2:	4313      	orrs	r3, r2
34181dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34181dd6:	4a2b      	ldr	r2, [pc, #172]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181dd8:	693b      	ldr	r3, [r7, #16]
34181dda:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34181dde:	4b29      	ldr	r3, [pc, #164]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34181de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181de6:	68fb      	ldr	r3, [r7, #12]
34181de8:	43db      	mvns	r3, r3
34181dea:	693a      	ldr	r2, [r7, #16]
34181dec:	4013      	ands	r3, r2
34181dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34181df0:	683b      	ldr	r3, [r7, #0]
34181df2:	685b      	ldr	r3, [r3, #4]
34181df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34181df8:	2b00      	cmp	r3, #0
34181dfa:	d003      	beq.n	34181e04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
34181dfc:	693a      	ldr	r2, [r7, #16]
34181dfe:	68fb      	ldr	r3, [r7, #12]
34181e00:	4313      	orrs	r3, r2
34181e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34181e04:	4a1f      	ldr	r2, [pc, #124]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181e06:	693b      	ldr	r3, [r7, #16]
34181e08:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34181e0c:	4b1d      	ldr	r3, [pc, #116]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181e0e:	681b      	ldr	r3, [r3, #0]
34181e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181e12:	68fb      	ldr	r3, [r7, #12]
34181e14:	43db      	mvns	r3, r3
34181e16:	693a      	ldr	r2, [r7, #16]
34181e18:	4013      	ands	r3, r2
34181e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34181e1c:	683b      	ldr	r3, [r7, #0]
34181e1e:	685b      	ldr	r3, [r3, #4]
34181e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34181e24:	2b00      	cmp	r3, #0
34181e26:	d003      	beq.n	34181e30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
34181e28:	693a      	ldr	r2, [r7, #16]
34181e2a:	68fb      	ldr	r3, [r7, #12]
34181e2c:	4313      	orrs	r3, r2
34181e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34181e30:	4a14      	ldr	r2, [pc, #80]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181e32:	693b      	ldr	r3, [r7, #16]
34181e34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34181e36:	4b13      	ldr	r3, [pc, #76]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181e38:	685b      	ldr	r3, [r3, #4]
34181e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34181e3c:	68fb      	ldr	r3, [r7, #12]
34181e3e:	43db      	mvns	r3, r3
34181e40:	693a      	ldr	r2, [r7, #16]
34181e42:	4013      	ands	r3, r2
34181e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34181e46:	683b      	ldr	r3, [r7, #0]
34181e48:	685b      	ldr	r3, [r3, #4]
34181e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34181e4e:	2b00      	cmp	r3, #0
34181e50:	d003      	beq.n	34181e5a <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
34181e52:	693a      	ldr	r2, [r7, #16]
34181e54:	68fb      	ldr	r3, [r7, #12]
34181e56:	4313      	orrs	r3, r2
34181e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34181e5a:	4a0a      	ldr	r2, [pc, #40]	@ (34181e84 <HAL_GPIO_Init+0x330>)
34181e5c:	693b      	ldr	r3, [r7, #16]
34181e5e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34181e60:	697b      	ldr	r3, [r7, #20]
34181e62:	3301      	adds	r3, #1
34181e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34181e66:	683b      	ldr	r3, [r7, #0]
34181e68:	681a      	ldr	r2, [r3, #0]
34181e6a:	697b      	ldr	r3, [r7, #20]
34181e6c:	fa22 f303 	lsr.w	r3, r2, r3
34181e70:	2b00      	cmp	r3, #0
34181e72:	f47f ae77 	bne.w	34181b64 <HAL_GPIO_Init+0x10>
  }
}
34181e76:	bf00      	nop
34181e78:	bf00      	nop
34181e7a:	371c      	adds	r7, #28
34181e7c:	46bd      	mov	sp, r7
34181e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
34181e82:	4770      	bx	lr
34181e84:	56025000 	.word	0x56025000
34181e88:	56020000 	.word	0x56020000
34181e8c:	56020400 	.word	0x56020400
34181e90:	56020800 	.word	0x56020800
34181e94:	56020c00 	.word	0x56020c00
34181e98:	56021000 	.word	0x56021000
34181e9c:	56021400 	.word	0x56021400
34181ea0:	56021800 	.word	0x56021800
34181ea4:	56021c00 	.word	0x56021c00
34181ea8:	56023400 	.word	0x56023400
34181eac:	56023800 	.word	0x56023800
34181eb0:	56023c00 	.word	0x56023c00
34181eb4:	56024000 	.word	0x56024000

34181eb8 <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
34181eb8:	b580      	push	{r7, lr}
34181eba:	b084      	sub	sp, #16
34181ebc:	af00      	add	r7, sp, #0
34181ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
34181ec0:	4b10      	ldr	r3, [pc, #64]	@ (34181f04 <HAL_PWREx_ConfigSupply+0x4c>)
34181ec2:	681b      	ldr	r3, [r3, #0]
34181ec4:	f023 0204 	bic.w	r2, r3, #4
34181ec8:	490e      	ldr	r1, [pc, #56]	@ (34181f04 <HAL_PWREx_ConfigSupply+0x4c>)
34181eca:	687b      	ldr	r3, [r7, #4]
34181ecc:	4313      	orrs	r3, r2
34181ece:	600b      	str	r3, [r1, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34181ed0:	f7ff fc9e 	bl	34181810 <HAL_GetTick>
34181ed4:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34181ed6:	e009      	b.n	34181eec <HAL_PWREx_ConfigSupply+0x34>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
34181ed8:	f7ff fc9a 	bl	34181810 <HAL_GetTick>
34181edc:	4602      	mov	r2, r0
34181ede:	68fb      	ldr	r3, [r7, #12]
34181ee0:	1ad3      	subs	r3, r2, r3
34181ee2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
34181ee6:	d901      	bls.n	34181eec <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_ERROR;
34181ee8:	2301      	movs	r3, #1
34181eea:	e006      	b.n	34181efa <HAL_PWREx_ConfigSupply+0x42>
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34181eec:	4b05      	ldr	r3, [pc, #20]	@ (34181f04 <HAL_PWREx_ConfigSupply+0x4c>)
34181eee:	6a1b      	ldr	r3, [r3, #32]
34181ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34181ef4:	2b00      	cmp	r3, #0
34181ef6:	d0ef      	beq.n	34181ed8 <HAL_PWREx_ConfigSupply+0x20>
    }
  }

  return HAL_OK;
34181ef8:	2300      	movs	r3, #0
}
34181efa:	4618      	mov	r0, r3
34181efc:	3710      	adds	r7, #16
34181efe:	46bd      	mov	sp, r7
34181f00:	bd80      	pop	{r7, pc}
34181f02:	bf00      	nop
34181f04:	56024800 	.word	0x56024800

34181f08 <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
34181f08:	b480      	push	{r7}
34181f0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34181f0c:	4b05      	ldr	r3, [pc, #20]	@ (34181f24 <HAL_PWREx_EnableVddIO2+0x1c>)
34181f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181f10:	4a04      	ldr	r2, [pc, #16]	@ (34181f24 <HAL_PWREx_EnableVddIO2+0x1c>)
34181f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34181f16:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34181f18:	bf00      	nop
34181f1a:	46bd      	mov	sp, r7
34181f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f20:	4770      	bx	lr
34181f22:	bf00      	nop
34181f24:	56024800 	.word	0x56024800

34181f28 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34181f28:	b480      	push	{r7}
34181f2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34181f2c:	4b05      	ldr	r3, [pc, #20]	@ (34181f44 <HAL_PWREx_EnableVddIO3+0x1c>)
34181f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34181f30:	4a04      	ldr	r2, [pc, #16]	@ (34181f44 <HAL_PWREx_EnableVddIO3+0x1c>)
34181f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34181f36:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34181f38:	bf00      	nop
34181f3a:	46bd      	mov	sp, r7
34181f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f40:	4770      	bx	lr
34181f42:	bf00      	nop
34181f44:	56024800 	.word	0x56024800

34181f48 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll SR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
34181f48:	b480      	push	{r7}
34181f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34181f4c:	4b06      	ldr	r3, [pc, #24]	@ (34181f68 <LL_RCC_HSE_IsReady+0x20>)
34181f4e:	685b      	ldr	r3, [r3, #4]
34181f50:	f003 0310 	and.w	r3, r3, #16
34181f54:	2b00      	cmp	r3, #0
34181f56:	d001      	beq.n	34181f5c <LL_RCC_HSE_IsReady+0x14>
34181f58:	2301      	movs	r3, #1
34181f5a:	e000      	b.n	34181f5e <LL_RCC_HSE_IsReady+0x16>
34181f5c:	2300      	movs	r3, #0
}
34181f5e:	4618      	mov	r0, r3
34181f60:	46bd      	mov	sp, r7
34181f62:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f66:	4770      	bx	lr
34181f68:	56028000 	.word	0x56028000

34181f6c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CSR          HSIONS        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
34181f6c:	b480      	push	{r7}
34181f6e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
34181f70:	4b04      	ldr	r3, [pc, #16]	@ (34181f84 <LL_RCC_HSI_Enable+0x18>)
34181f72:	2208      	movs	r2, #8
34181f74:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34181f78:	bf00      	nop
34181f7a:	46bd      	mov	sp, r7
34181f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181f80:	4770      	bx	lr
34181f82:	bf00      	nop
34181f84:	56028000 	.word	0x56028000

34181f88 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CCR          HSIONC        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
34181f88:	b480      	push	{r7}
34181f8a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34181f8c:	4b05      	ldr	r3, [pc, #20]	@ (34181fa4 <LL_RCC_HSI_Disable+0x1c>)
34181f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34181f92:	461a      	mov	r2, r3
34181f94:	2308      	movs	r3, #8
34181f96:	6013      	str	r3, [r2, #0]
}
34181f98:	bf00      	nop
34181f9a:	46bd      	mov	sp, r7
34181f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34181fa0:	4770      	bx	lr
34181fa2:	bf00      	nop
34181fa4:	56028000 	.word	0x56028000

34181fa8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
34181fa8:	b480      	push	{r7}
34181faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34181fac:	4b06      	ldr	r3, [pc, #24]	@ (34181fc8 <LL_RCC_HSI_IsReady+0x20>)
34181fae:	685b      	ldr	r3, [r3, #4]
34181fb0:	f003 0308 	and.w	r3, r3, #8
34181fb4:	2b00      	cmp	r3, #0
34181fb6:	d001      	beq.n	34181fbc <LL_RCC_HSI_IsReady+0x14>
34181fb8:	2301      	movs	r3, #1
34181fba:	e000      	b.n	34181fbe <LL_RCC_HSI_IsReady+0x16>
34181fbc:	2300      	movs	r3, #0
}
34181fbe:	4618      	mov	r0, r3
34181fc0:	46bd      	mov	sp, r7
34181fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
34181fc6:	4770      	bx	lr
34181fc8:	56028000 	.word	0x56028000

34181fcc <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
34181fcc:	b480      	push	{r7}
34181fce:	b083      	sub	sp, #12
34181fd0:	af00      	add	r7, sp, #0
34181fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
34181fd4:	4b06      	ldr	r3, [pc, #24]	@ (34181ff0 <LL_RCC_HSI_SetDivider+0x24>)
34181fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181fd8:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
34181fdc:	4904      	ldr	r1, [pc, #16]	@ (34181ff0 <LL_RCC_HSI_SetDivider+0x24>)
34181fde:	687b      	ldr	r3, [r7, #4]
34181fe0:	4313      	orrs	r3, r2
34181fe2:	648b      	str	r3, [r1, #72]	@ 0x48
}
34181fe4:	bf00      	nop
34181fe6:	370c      	adds	r7, #12
34181fe8:	46bd      	mov	sp, r7
34181fea:	f85d 7b04 	ldr.w	r7, [sp], #4
34181fee:	4770      	bx	lr
34181ff0:	56028000 	.word	0x56028000

34181ff4 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34181ff4:	b480      	push	{r7}
34181ff6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34181ff8:	4b04      	ldr	r3, [pc, #16]	@ (3418200c <LL_RCC_HSI_GetDivider+0x18>)
34181ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34181ffc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34182000:	4618      	mov	r0, r3
34182002:	46bd      	mov	sp, r7
34182004:	f85d 7b04 	ldr.w	r7, [sp], #4
34182008:	4770      	bx	lr
3418200a:	bf00      	nop
3418200c:	56028000 	.word	0x56028000

34182010 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR      HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value This parameter can be a value between 0 and 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
34182010:	b480      	push	{r7}
34182012:	b083      	sub	sp, #12
34182014:	af00      	add	r7, sp, #0
34182016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
34182018:	4b07      	ldr	r3, [pc, #28]	@ (34182038 <LL_RCC_HSI_SetCalibTrimming+0x28>)
3418201a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418201c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
34182020:	687b      	ldr	r3, [r7, #4]
34182022:	041b      	lsls	r3, r3, #16
34182024:	4904      	ldr	r1, [pc, #16]	@ (34182038 <LL_RCC_HSI_SetCalibTrimming+0x28>)
34182026:	4313      	orrs	r3, r2
34182028:	648b      	str	r3, [r1, #72]	@ 0x48
}
3418202a:	bf00      	nop
3418202c:	370c      	adds	r7, #12
3418202e:	46bd      	mov	sp, r7
34182030:	f85d 7b04 	ldr.w	r7, [sp], #4
34182034:	4770      	bx	lr
34182036:	bf00      	nop
34182038:	56028000 	.word	0x56028000

3418203c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CSR          MSIONS        LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
3418203c:	b480      	push	{r7}
3418203e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34182040:	4b04      	ldr	r3, [pc, #16]	@ (34182054 <LL_RCC_MSI_Enable+0x18>)
34182042:	2204      	movs	r2, #4
34182044:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
34182048:	bf00      	nop
3418204a:	46bd      	mov	sp, r7
3418204c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182050:	4770      	bx	lr
34182052:	bf00      	nop
34182054:	56028000 	.word	0x56028000

34182058 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CCR          MSIONC        LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
34182058:	b480      	push	{r7}
3418205a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
3418205c:	4b05      	ldr	r3, [pc, #20]	@ (34182074 <LL_RCC_MSI_Disable+0x1c>)
3418205e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182062:	461a      	mov	r2, r3
34182064:	2304      	movs	r3, #4
34182066:	6013      	str	r3, [r2, #0]
}
34182068:	bf00      	nop
3418206a:	46bd      	mov	sp, r7
3418206c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182070:	4770      	bx	lr
34182072:	bf00      	nop
34182074:	56028000 	.word	0x56028000

34182078 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI clock is ready
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
34182078:	b480      	push	{r7}
3418207a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
3418207c:	4b06      	ldr	r3, [pc, #24]	@ (34182098 <LL_RCC_MSI_IsReady+0x20>)
3418207e:	685b      	ldr	r3, [r3, #4]
34182080:	f003 0304 	and.w	r3, r3, #4
34182084:	2b00      	cmp	r3, #0
34182086:	d001      	beq.n	3418208c <LL_RCC_MSI_IsReady+0x14>
34182088:	2301      	movs	r3, #1
3418208a:	e000      	b.n	3418208e <LL_RCC_MSI_IsReady+0x16>
3418208c:	2300      	movs	r3, #0
}
3418208e:	4618      	mov	r0, r3
34182090:	46bd      	mov	sp, r7
34182092:	f85d 7b04 	ldr.w	r7, [sp], #4
34182096:	4770      	bx	lr
34182098:	56028000 	.word	0x56028000

3418209c <LL_RCC_MSI_SetFrequency>:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_MSI_SetFrequency(uint32_t Value)
{
3418209c:	b480      	push	{r7}
3418209e:	b083      	sub	sp, #12
341820a0:	af00      	add	r7, sp, #0
341820a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
341820a4:	4b06      	ldr	r3, [pc, #24]	@ (341820c0 <LL_RCC_MSI_SetFrequency+0x24>)
341820a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341820a8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
341820ac:	4904      	ldr	r1, [pc, #16]	@ (341820c0 <LL_RCC_MSI_SetFrequency+0x24>)
341820ae:	687b      	ldr	r3, [r7, #4]
341820b0:	4313      	orrs	r3, r2
341820b2:	644b      	str	r3, [r1, #68]	@ 0x44
}
341820b4:	bf00      	nop
341820b6:	370c      	adds	r7, #12
341820b8:	46bd      	mov	sp, r7
341820ba:	f85d 7b04 	ldr.w	r7, [sp], #4
341820be:	4770      	bx	lr
341820c0:	56028000 	.word	0x56028000

341820c4 <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
341820c4:	b480      	push	{r7}
341820c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
341820c8:	4b04      	ldr	r3, [pc, #16]	@ (341820dc <LL_RCC_MSI_GetFrequency+0x18>)
341820ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341820cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
341820d0:	4618      	mov	r0, r3
341820d2:	46bd      	mov	sp, r7
341820d4:	f85d 7b04 	ldr.w	r7, [sp], #4
341820d8:	4770      	bx	lr
341820da:	bf00      	nop
341820dc:	56028000 	.word	0x56028000

341820e0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll MSICFGR      MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
341820e0:	b480      	push	{r7}
341820e2:	b083      	sub	sp, #12
341820e4:	af00      	add	r7, sp, #0
341820e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
341820e8:	4b07      	ldr	r3, [pc, #28]	@ (34182108 <LL_RCC_MSI_SetCalibTrimming+0x28>)
341820ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341820ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
341820f0:	687b      	ldr	r3, [r7, #4]
341820f2:	041b      	lsls	r3, r3, #16
341820f4:	4904      	ldr	r1, [pc, #16]	@ (34182108 <LL_RCC_MSI_SetCalibTrimming+0x28>)
341820f6:	4313      	orrs	r3, r2
341820f8:	644b      	str	r3, [r1, #68]	@ 0x44
}
341820fa:	bf00      	nop
341820fc:	370c      	adds	r7, #12
341820fe:	46bd      	mov	sp, r7
34182100:	f85d 7b04 	ldr.w	r7, [sp], #4
34182104:	4770      	bx	lr
34182106:	bf00      	nop
34182108:	56028000 	.word	0x56028000

3418210c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll SR           LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
3418210c:	b480      	push	{r7}
3418210e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34182110:	4b06      	ldr	r3, [pc, #24]	@ (3418212c <LL_RCC_LSE_IsReady+0x20>)
34182112:	685b      	ldr	r3, [r3, #4]
34182114:	f003 0302 	and.w	r3, r3, #2
34182118:	2b00      	cmp	r3, #0
3418211a:	d001      	beq.n	34182120 <LL_RCC_LSE_IsReady+0x14>
3418211c:	2301      	movs	r3, #1
3418211e:	e000      	b.n	34182122 <LL_RCC_LSE_IsReady+0x16>
34182120:	2300      	movs	r3, #0
}
34182122:	4618      	mov	r0, r3
34182124:	46bd      	mov	sp, r7
34182126:	f85d 7b04 	ldr.w	r7, [sp], #4
3418212a:	4770      	bx	lr
3418212c:	56028000 	.word	0x56028000

34182130 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSIONS        LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
34182130:	b480      	push	{r7}
34182132:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
34182134:	4b04      	ldr	r3, [pc, #16]	@ (34182148 <LL_RCC_LSI_Enable+0x18>)
34182136:	2201      	movs	r2, #1
34182138:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
3418213c:	bf00      	nop
3418213e:	46bd      	mov	sp, r7
34182140:	f85d 7b04 	ldr.w	r7, [sp], #4
34182144:	4770      	bx	lr
34182146:	bf00      	nop
34182148:	56028000 	.word	0x56028000

3418214c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CCR          LSIONC        LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
3418214c:	b480      	push	{r7}
3418214e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
34182150:	4b05      	ldr	r3, [pc, #20]	@ (34182168 <LL_RCC_LSI_Disable+0x1c>)
34182152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182156:	461a      	mov	r2, r3
34182158:	2301      	movs	r3, #1
3418215a:	6013      	str	r3, [r2, #0]
}
3418215c:	bf00      	nop
3418215e:	46bd      	mov	sp, r7
34182160:	f85d 7b04 	ldr.w	r7, [sp], #4
34182164:	4770      	bx	lr
34182166:	bf00      	nop
34182168:	56028000 	.word	0x56028000

3418216c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll SR           LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
3418216c:	b480      	push	{r7}
3418216e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34182170:	4b04      	ldr	r3, [pc, #16]	@ (34182184 <LL_RCC_LSI_IsReady+0x18>)
34182172:	685b      	ldr	r3, [r3, #4]
34182174:	f003 0301 	and.w	r3, r3, #1
}
34182178:	4618      	mov	r0, r3
3418217a:	46bd      	mov	sp, r7
3418217c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182180:	4770      	bx	lr
34182182:	bf00      	nop
34182184:	56028000 	.word	0x56028000

34182188 <LL_RCC_GetCpuClkSource>:
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_CPU_CLKSOURCE_STATUS_IC1
  */
__STATIC_INLINE uint32_t LL_RCC_GetCpuClkSource(void)
{
34182188:	b480      	push	{r7}
3418218a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
3418218c:	4b04      	ldr	r3, [pc, #16]	@ (341821a0 <LL_RCC_GetCpuClkSource+0x18>)
3418218e:	6a1b      	ldr	r3, [r3, #32]
34182190:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34182194:	4618      	mov	r0, r3
34182196:	46bd      	mov	sp, r7
34182198:	f85d 7b04 	ldr.w	r7, [sp], #4
3418219c:	4770      	bx	lr
3418219e:	bf00      	nop
341821a0:	56028000 	.word	0x56028000

341821a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
341821a4:	b480      	push	{r7}
341821a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
341821a8:	4b04      	ldr	r3, [pc, #16]	@ (341821bc <LL_RCC_GetSysClkSource+0x18>)
341821aa:	6a1b      	ldr	r3, [r3, #32]
341821ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341821b0:	4618      	mov	r0, r3
341821b2:	46bd      	mov	sp, r7
341821b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341821b8:	4770      	bx	lr
341821ba:	bf00      	nop
341821bc:	56028000 	.word	0x56028000

341821c0 <LL_RCC_PLL1_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetSource(void)
{
341821c0:	b480      	push	{r7}
341821c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
341821c4:	4b04      	ldr	r3, [pc, #16]	@ (341821d8 <LL_RCC_PLL1_GetSource+0x18>)
341821c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341821ca:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341821ce:	4618      	mov	r0, r3
341821d0:	46bd      	mov	sp, r7
341821d2:	f85d 7b04 	ldr.w	r7, [sp], #4
341821d6:	4770      	bx	lr
341821d8:	56028000 	.word	0x56028000

341821dc <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
341821dc:	b480      	push	{r7}
341821de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
341821e0:	4b07      	ldr	r3, [pc, #28]	@ (34182200 <LL_RCC_PLL1_IsReady+0x24>)
341821e2:	685b      	ldr	r3, [r3, #4]
341821e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341821e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341821ec:	d101      	bne.n	341821f2 <LL_RCC_PLL1_IsReady+0x16>
341821ee:	2301      	movs	r3, #1
341821f0:	e000      	b.n	341821f4 <LL_RCC_PLL1_IsReady+0x18>
341821f2:	2300      	movs	r3, #0
}
341821f4:	4618      	mov	r0, r3
341821f6:	46bd      	mov	sp, r7
341821f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341821fc:	4770      	bx	lr
341821fe:	bf00      	nop
34182200:	56028000 	.word	0x56028000

34182204 <LL_RCC_PLL1_IsEnabledBypass>:
  * @brief  Check if PLL1 bypass is enabled
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
34182204:	b480      	push	{r7}
34182206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34182208:	4b07      	ldr	r3, [pc, #28]	@ (34182228 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
3418220a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418220e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34182216:	d101      	bne.n	3418221c <LL_RCC_PLL1_IsEnabledBypass+0x18>
34182218:	2301      	movs	r3, #1
3418221a:	e000      	b.n	3418221e <LL_RCC_PLL1_IsEnabledBypass+0x1a>
3418221c:	2300      	movs	r3, #0
}
3418221e:	4618      	mov	r0, r3
34182220:	46bd      	mov	sp, r7
34182222:	f85d 7b04 	ldr.w	r7, [sp], #4
34182226:	4770      	bx	lr
34182228:	56028000 	.word	0x56028000

3418222c <LL_RCC_PLL2_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetSource(void)
{
3418222c:	b480      	push	{r7}
3418222e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34182230:	4b04      	ldr	r3, [pc, #16]	@ (34182244 <LL_RCC_PLL2_GetSource+0x18>)
34182232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34182236:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418223a:	4618      	mov	r0, r3
3418223c:	46bd      	mov	sp, r7
3418223e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182242:	4770      	bx	lr
34182244:	56028000 	.word	0x56028000

34182248 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll SR           PLL2RDY         LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
34182248:	b480      	push	{r7}
3418224a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3418224c:	4b07      	ldr	r3, [pc, #28]	@ (3418226c <LL_RCC_PLL2_IsReady+0x24>)
3418224e:	685b      	ldr	r3, [r3, #4]
34182250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34182258:	d101      	bne.n	3418225e <LL_RCC_PLL2_IsReady+0x16>
3418225a:	2301      	movs	r3, #1
3418225c:	e000      	b.n	34182260 <LL_RCC_PLL2_IsReady+0x18>
3418225e:	2300      	movs	r3, #0
}
34182260:	4618      	mov	r0, r3
34182262:	46bd      	mov	sp, r7
34182264:	f85d 7b04 	ldr.w	r7, [sp], #4
34182268:	4770      	bx	lr
3418226a:	bf00      	nop
3418226c:	56028000 	.word	0x56028000

34182270 <LL_RCC_PLL2_IsEnabledBypass>:
  * @brief  Check if PLL2 bypass is enabled
  * @rmtoll PLL2CFGR1    PLL2BYP         LL_RCC_PLL2_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsEnabledBypass(void)
{
34182270:	b480      	push	{r7}
34182272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34182274:	4b07      	ldr	r3, [pc, #28]	@ (34182294 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34182276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418227a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418227e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34182282:	d101      	bne.n	34182288 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34182284:	2301      	movs	r3, #1
34182286:	e000      	b.n	3418228a <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34182288:	2300      	movs	r3, #0
}
3418228a:	4618      	mov	r0, r3
3418228c:	46bd      	mov	sp, r7
3418228e:	f85d 7b04 	ldr.w	r7, [sp], #4
34182292:	4770      	bx	lr
34182294:	56028000 	.word	0x56028000

34182298 <LL_RCC_PLL3_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetSource(void)
{
34182298:	b480      	push	{r7}
3418229a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
3418229c:	4b04      	ldr	r3, [pc, #16]	@ (341822b0 <LL_RCC_PLL3_GetSource+0x18>)
3418229e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341822a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341822a6:	4618      	mov	r0, r3
341822a8:	46bd      	mov	sp, r7
341822aa:	f85d 7b04 	ldr.w	r7, [sp], #4
341822ae:	4770      	bx	lr
341822b0:	56028000 	.word	0x56028000

341822b4 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll SR           PLL3RDY         LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
341822b4:	b480      	push	{r7}
341822b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
341822b8:	4b07      	ldr	r3, [pc, #28]	@ (341822d8 <LL_RCC_PLL3_IsReady+0x24>)
341822ba:	685b      	ldr	r3, [r3, #4]
341822bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341822c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
341822c4:	d101      	bne.n	341822ca <LL_RCC_PLL3_IsReady+0x16>
341822c6:	2301      	movs	r3, #1
341822c8:	e000      	b.n	341822cc <LL_RCC_PLL3_IsReady+0x18>
341822ca:	2300      	movs	r3, #0
}
341822cc:	4618      	mov	r0, r3
341822ce:	46bd      	mov	sp, r7
341822d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341822d4:	4770      	bx	lr
341822d6:	bf00      	nop
341822d8:	56028000 	.word	0x56028000

341822dc <LL_RCC_PLL3_IsEnabledBypass>:
  * @brief  Check if PLL3 bypass is enabled
  * @rmtoll PLL3CFGR1    PLL3BYP         LL_RCC_PLL3_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsEnabledBypass(void)
{
341822dc:	b480      	push	{r7}
341822de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
341822e0:	4b07      	ldr	r3, [pc, #28]	@ (34182300 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
341822e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341822e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341822ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341822ee:	d101      	bne.n	341822f4 <LL_RCC_PLL3_IsEnabledBypass+0x18>
341822f0:	2301      	movs	r3, #1
341822f2:	e000      	b.n	341822f6 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
341822f4:	2300      	movs	r3, #0
}
341822f6:	4618      	mov	r0, r3
341822f8:	46bd      	mov	sp, r7
341822fa:	f85d 7b04 	ldr.w	r7, [sp], #4
341822fe:	4770      	bx	lr
34182300:	56028000 	.word	0x56028000

34182304 <LL_RCC_PLL4_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_I2S_CKIN
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_GetSource(void)
{
34182304:	b480      	push	{r7}
34182306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34182308:	4b04      	ldr	r3, [pc, #16]	@ (3418231c <LL_RCC_PLL4_GetSource+0x18>)
3418230a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418230e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34182312:	4618      	mov	r0, r3
34182314:	46bd      	mov	sp, r7
34182316:	f85d 7b04 	ldr.w	r7, [sp], #4
3418231a:	4770      	bx	lr
3418231c:	56028000 	.word	0x56028000

34182320 <LL_RCC_PLL4_IsReady>:
  * @brief  Check if PLL4 Ready
  * @rmtoll SR           PLL4RDY         LL_RCC_PLL4_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsReady(void)
{
34182320:	b480      	push	{r7}
34182322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34182324:	4b07      	ldr	r3, [pc, #28]	@ (34182344 <LL_RCC_PLL4_IsReady+0x24>)
34182326:	685b      	ldr	r3, [r3, #4]
34182328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418232c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34182330:	d101      	bne.n	34182336 <LL_RCC_PLL4_IsReady+0x16>
34182332:	2301      	movs	r3, #1
34182334:	e000      	b.n	34182338 <LL_RCC_PLL4_IsReady+0x18>
34182336:	2300      	movs	r3, #0
}
34182338:	4618      	mov	r0, r3
3418233a:	46bd      	mov	sp, r7
3418233c:	f85d 7b04 	ldr.w	r7, [sp], #4
34182340:	4770      	bx	lr
34182342:	bf00      	nop
34182344:	56028000 	.word	0x56028000

34182348 <LL_RCC_PLL4_IsEnabledBypass>:
  * @brief  Check if PLL4 bypass is enabled
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
34182348:	b480      	push	{r7}
3418234a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
3418234c:	4b07      	ldr	r3, [pc, #28]	@ (3418236c <LL_RCC_PLL4_IsEnabledBypass+0x24>)
3418234e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34182352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34182356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418235a:	d101      	bne.n	34182360 <LL_RCC_PLL4_IsEnabledBypass+0x18>
3418235c:	2301      	movs	r3, #1
3418235e:	e000      	b.n	34182362 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34182360:	2300      	movs	r3, #0
}
34182362:	4618      	mov	r0, r3
34182364:	46bd      	mov	sp, r7
34182366:	f85d 7b04 	ldr.w	r7, [sp], #4
3418236a:	4770      	bx	lr
3418236c:	56028000 	.word	0x56028000

34182370 <LL_RCC_IC1_Enable>:
  * @brief  Enable IC1
  * @rmtoll DIVENSR      IC1ENS        LL_RCC_IC1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC1_Enable(void)
{
34182370:	b480      	push	{r7}
34182372:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34182374:	4b04      	ldr	r3, [pc, #16]	@ (34182388 <LL_RCC_IC1_Enable+0x18>)
34182376:	2201      	movs	r2, #1
34182378:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418237c:	bf00      	nop
3418237e:	46bd      	mov	sp, r7
34182380:	f85d 7b04 	ldr.w	r7, [sp], #4
34182384:	4770      	bx	lr
34182386:	bf00      	nop
34182388:	56028000 	.word	0x56028000

3418238c <LL_RCC_IC1_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
3418238c:	b480      	push	{r7}
3418238e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34182390:	4b04      	ldr	r3, [pc, #16]	@ (341823a4 <LL_RCC_IC1_GetSource+0x18>)
34182392:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34182396:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418239a:	4618      	mov	r0, r3
3418239c:	46bd      	mov	sp, r7
3418239e:	f85d 7b04 	ldr.w	r7, [sp], #4
341823a2:	4770      	bx	lr
341823a4:	56028000 	.word	0x56028000

341823a8 <LL_RCC_IC1_GetDivider>:
  * @brief  Get IC1 divider
  * @rmtoll IC1CFGR      IC1INT        LL_RCC_IC1_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetDivider(void)
{
341823a8:	b480      	push	{r7}
341823aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
341823ac:	4b05      	ldr	r3, [pc, #20]	@ (341823c4 <LL_RCC_IC1_GetDivider+0x1c>)
341823ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341823b2:	0c1b      	lsrs	r3, r3, #16
341823b4:	b2db      	uxtb	r3, r3
341823b6:	3301      	adds	r3, #1
}
341823b8:	4618      	mov	r0, r3
341823ba:	46bd      	mov	sp, r7
341823bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341823c0:	4770      	bx	lr
341823c2:	bf00      	nop
341823c4:	56028000 	.word	0x56028000

341823c8 <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
341823c8:	b480      	push	{r7}
341823ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
341823cc:	4b04      	ldr	r3, [pc, #16]	@ (341823e0 <LL_RCC_IC2_GetSource+0x18>)
341823ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341823d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341823d6:	4618      	mov	r0, r3
341823d8:	46bd      	mov	sp, r7
341823da:	f85d 7b04 	ldr.w	r7, [sp], #4
341823de:	4770      	bx	lr
341823e0:	56028000 	.word	0x56028000

341823e4 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
341823e4:	b480      	push	{r7}
341823e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
341823e8:	4b05      	ldr	r3, [pc, #20]	@ (34182400 <LL_RCC_IC2_GetDivider+0x1c>)
341823ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341823ee:	0c1b      	lsrs	r3, r3, #16
341823f0:	b2db      	uxtb	r3, r3
341823f2:	3301      	adds	r3, #1
}
341823f4:	4618      	mov	r0, r3
341823f6:	46bd      	mov	sp, r7
341823f8:	f85d 7b04 	ldr.w	r7, [sp], #4
341823fc:	4770      	bx	lr
341823fe:	bf00      	nop
34182400:	56028000 	.word	0x56028000

34182404 <LL_RCC_IC6_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
34182404:	b480      	push	{r7}
34182406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34182408:	4b04      	ldr	r3, [pc, #16]	@ (3418241c <LL_RCC_IC6_GetSource+0x18>)
3418240a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418240e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34182412:	4618      	mov	r0, r3
34182414:	46bd      	mov	sp, r7
34182416:	f85d 7b04 	ldr.w	r7, [sp], #4
3418241a:	4770      	bx	lr
3418241c:	56028000 	.word	0x56028000

34182420 <LL_RCC_IC11_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
34182420:	b480      	push	{r7}
34182422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34182424:	4b04      	ldr	r3, [pc, #16]	@ (34182438 <LL_RCC_IC11_GetSource+0x18>)
34182426:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418242a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418242e:	4618      	mov	r0, r3
34182430:	46bd      	mov	sp, r7
34182432:	f85d 7b04 	ldr.w	r7, [sp], #4
34182436:	4770      	bx	lr
34182438:	56028000 	.word	0x56028000

3418243c <HAL_RCC_OscConfig>:
  * @note   This function does not protect the MCOxSEL, the PERSEL and the PPPSEL glitch-free muxes
  *         (Mux selection cannot be changed if selected input clock is inactive).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
3418243c:	b580      	push	{r7, lr}
3418243e:	b0a2      	sub	sp, #136	@ 0x88
34182440:	af00      	add	r7, sp, #0
34182442:	6078      	str	r0, [r7, #4]
  uint32_t pll3src;
  uint32_t pll4src;
  uint32_t rccsr;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
34182444:	687b      	ldr	r3, [r7, #4]
34182446:	2b00      	cmp	r3, #0
34182448:	d101      	bne.n	3418244e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
3418244a:	2301      	movs	r3, #1
3418244c:	e3d1      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  cpuclksrc = LL_RCC_GetCpuClkSource();
3418244e:	f7ff fe9b 	bl	34182188 <LL_RCC_GetCpuClkSource>
34182452:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  sysclksrc = LL_RCC_GetSysClkSource();
34182456:	f7ff fea5 	bl	341821a4 <LL_RCC_GetSysClkSource>
3418245a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  pll1src = LL_RCC_PLL1_GetSource();
3418245e:	f7ff feaf 	bl	341821c0 <LL_RCC_PLL1_GetSource>
34182462:	67f8      	str	r0, [r7, #124]	@ 0x7c
  pll2src = LL_RCC_PLL2_GetSource();
34182464:	f7ff fee2 	bl	3418222c <LL_RCC_PLL2_GetSource>
34182468:	67b8      	str	r0, [r7, #120]	@ 0x78
  pll3src = LL_RCC_PLL3_GetSource();
3418246a:	f7ff ff15 	bl	34182298 <LL_RCC_PLL3_GetSource>
3418246e:	6778      	str	r0, [r7, #116]	@ 0x74
  pll4src = LL_RCC_PLL4_GetSource();
34182470:	f7ff ff48 	bl	34182304 <LL_RCC_PLL4_GetSource>
34182474:	6738      	str	r0, [r7, #112]	@ 0x70
  rccsr = RCC->SR;
34182476:	4b91      	ldr	r3, [pc, #580]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182478:	685b      	ldr	r3, [r3, #4]
3418247a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
3418247c:	687b      	ldr	r3, [r7, #4]
3418247e:	681b      	ldr	r3, [r3, #0]
34182480:	f003 0301 	and.w	r3, r3, #1
34182484:	2b00      	cmp	r3, #0
34182486:	f000 80a8 	beq.w	341825da <HAL_RCC_OscConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
3418248a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
3418248e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34182492:	d028      	beq.n	341824e6 <HAL_RCC_OscConfig+0xaa>
34182494:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182498:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418249c:	d023      	beq.n	341824e6 <HAL_RCC_OscConfig+0xaa>
3418249e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
341824a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341824a4:	d104      	bne.n	341824b0 <HAL_RCC_OscConfig+0x74>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341824a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341824a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341824ac:	2b00      	cmp	r3, #0
341824ae:	d11a      	bne.n	341824e6 <HAL_RCC_OscConfig+0xaa>
341824b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
341824b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341824b6:	d104      	bne.n	341824c2 <HAL_RCC_OscConfig+0x86>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
341824b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341824ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341824be:	2b00      	cmp	r3, #0
341824c0:	d111      	bne.n	341824e6 <HAL_RCC_OscConfig+0xaa>
341824c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
341824c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341824c8:	d104      	bne.n	341824d4 <HAL_RCC_OscConfig+0x98>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341824ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341824cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
341824d0:	2b00      	cmp	r3, #0
341824d2:	d108      	bne.n	341824e6 <HAL_RCC_OscConfig+0xaa>
341824d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
341824d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341824da:	d10a      	bne.n	341824f2 <HAL_RCC_OscConfig+0xb6>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341824dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341824de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341824e2:	2b00      	cmp	r3, #0
341824e4:	d005      	beq.n	341824f2 <HAL_RCC_OscConfig+0xb6>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
341824e6:	687b      	ldr	r3, [r7, #4]
341824e8:	685b      	ldr	r3, [r3, #4]
341824ea:	2b00      	cmp	r3, #0
341824ec:	d175      	bne.n	341825da <HAL_RCC_OscConfig+0x19e>
      {
        return HAL_ERROR;
341824ee:	2301      	movs	r3, #1
341824f0:	e37f      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      /* HSE ON , nothing to do */
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
341824f2:	687b      	ldr	r3, [r7, #4]
341824f4:	685b      	ldr	r3, [r3, #4]
341824f6:	2b10      	cmp	r3, #16
341824f8:	d104      	bne.n	34182504 <HAL_RCC_OscConfig+0xc8>
341824fa:	4b70      	ldr	r3, [pc, #448]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
341824fc:	2210      	movs	r2, #16
341824fe:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182502:	e043      	b.n	3418258c <HAL_RCC_OscConfig+0x150>
34182504:	687b      	ldr	r3, [r7, #4]
34182506:	685b      	ldr	r3, [r3, #4]
34182508:	2b00      	cmp	r3, #0
3418250a:	d10c      	bne.n	34182526 <HAL_RCC_OscConfig+0xea>
3418250c:	4b6b      	ldr	r3, [pc, #428]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
3418250e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182512:	461a      	mov	r2, r3
34182514:	2310      	movs	r3, #16
34182516:	6013      	str	r3, [r2, #0]
34182518:	4b68      	ldr	r3, [pc, #416]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
3418251a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418251c:	4a67      	ldr	r2, [pc, #412]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
3418251e:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
34182522:	6553      	str	r3, [r2, #84]	@ 0x54
34182524:	e032      	b.n	3418258c <HAL_RCC_OscConfig+0x150>
34182526:	687b      	ldr	r3, [r7, #4]
34182528:	685b      	ldr	r3, [r3, #4]
3418252a:	f248 0210 	movw	r2, #32784	@ 0x8010
3418252e:	4293      	cmp	r3, r2
34182530:	d110      	bne.n	34182554 <HAL_RCC_OscConfig+0x118>
34182532:	4b62      	ldr	r3, [pc, #392]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182536:	4a61      	ldr	r2, [pc, #388]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
3418253c:	6553      	str	r3, [r2, #84]	@ 0x54
3418253e:	4b5f      	ldr	r3, [pc, #380]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182542:	4a5e      	ldr	r2, [pc, #376]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182544:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182548:	6553      	str	r3, [r2, #84]	@ 0x54
3418254a:	4b5c      	ldr	r3, [pc, #368]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
3418254c:	2210      	movs	r2, #16
3418254e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182552:	e01b      	b.n	3418258c <HAL_RCC_OscConfig+0x150>
34182554:	687b      	ldr	r3, [r7, #4]
34182556:	685b      	ldr	r3, [r3, #4]
34182558:	4a59      	ldr	r2, [pc, #356]	@ (341826c0 <HAL_RCC_OscConfig+0x284>)
3418255a:	4293      	cmp	r3, r2
3418255c:	d10a      	bne.n	34182574 <HAL_RCC_OscConfig+0x138>
3418255e:	4b57      	ldr	r3, [pc, #348]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182562:	4a56      	ldr	r2, [pc, #344]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182564:	f443 33c0 	orr.w	r3, r3, #98304	@ 0x18000
34182568:	6553      	str	r3, [r2, #84]	@ 0x54
3418256a:	4b54      	ldr	r3, [pc, #336]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
3418256c:	2210      	movs	r2, #16
3418256e:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182572:	e00b      	b.n	3418258c <HAL_RCC_OscConfig+0x150>
34182574:	4b51      	ldr	r3, [pc, #324]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3418257a:	461a      	mov	r2, r3
3418257c:	2310      	movs	r3, #16
3418257e:	6013      	str	r3, [r2, #0]
34182580:	4b4e      	ldr	r3, [pc, #312]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34182584:	4a4d      	ldr	r2, [pc, #308]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
34182586:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
3418258a:	6553      	str	r3, [r2, #84]	@ 0x54

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418258c:	f7ff f940 	bl	34181810 <HAL_GetTick>
34182590:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34182592:	687b      	ldr	r3, [r7, #4]
34182594:	685b      	ldr	r3, [r3, #4]
34182596:	2b00      	cmp	r3, #0
34182598:	d019      	beq.n	341825ce <HAL_RCC_OscConfig+0x192>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
3418259a:	e008      	b.n	341825ae <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
3418259c:	f7ff f938 	bl	34181810 <HAL_GetTick>
341825a0:	4602      	mov	r2, r0
341825a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341825a4:	1ad3      	subs	r3, r2, r3
341825a6:	2b64      	cmp	r3, #100	@ 0x64
341825a8:	d901      	bls.n	341825ae <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
341825aa:	2303      	movs	r3, #3
341825ac:	e321      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
341825ae:	4b43      	ldr	r3, [pc, #268]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
341825b0:	685b      	ldr	r3, [r3, #4]
341825b2:	f003 0310 	and.w	r3, r3, #16
341825b6:	2b00      	cmp	r3, #0
341825b8:	d0f0      	beq.n	3418259c <HAL_RCC_OscConfig+0x160>
341825ba:	e00e      	b.n	341825da <HAL_RCC_OscConfig+0x19e>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
341825bc:	f7ff f928 	bl	34181810 <HAL_GetTick>
341825c0:	4602      	mov	r2, r0
341825c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341825c4:	1ad3      	subs	r3, r2, r3
341825c6:	2b64      	cmp	r3, #100	@ 0x64
341825c8:	d901      	bls.n	341825ce <HAL_RCC_OscConfig+0x192>
          {
            return HAL_TIMEOUT;
341825ca:	2303      	movs	r3, #3
341825cc:	e311      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
341825ce:	4b3b      	ldr	r3, [pc, #236]	@ (341826bc <HAL_RCC_OscConfig+0x280>)
341825d0:	685b      	ldr	r3, [r3, #4]
341825d2:	f003 0310 	and.w	r3, r3, #16
341825d6:	2b00      	cmp	r3, #0
341825d8:	d1f0      	bne.n	341825bc <HAL_RCC_OscConfig+0x180>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
341825da:	687b      	ldr	r3, [r7, #4]
341825dc:	681b      	ldr	r3, [r3, #0]
341825de:	f003 0302 	and.w	r3, r3, #2
341825e2:	2b00      	cmp	r3, #0
341825e4:	d073      	beq.n	341826ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));

    /* When the HSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
341825e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341825ea:	2b00      	cmp	r3, #0
341825ec:	d023      	beq.n	34182636 <HAL_RCC_OscConfig+0x1fa>
341825ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341825f2:	2b00      	cmp	r3, #0
341825f4:	d01f      	beq.n	34182636 <HAL_RCC_OscConfig+0x1fa>
341825f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
341825f8:	2b00      	cmp	r3, #0
341825fa:	d104      	bne.n	34182606 <HAL_RCC_OscConfig+0x1ca>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341825fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341825fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34182602:	2b00      	cmp	r3, #0
34182604:	d117      	bne.n	34182636 <HAL_RCC_OscConfig+0x1fa>
34182606:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34182608:	2b00      	cmp	r3, #0
3418260a:	d104      	bne.n	34182616 <HAL_RCC_OscConfig+0x1da>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
3418260c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418260e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34182612:	2b00      	cmp	r3, #0
34182614:	d10f      	bne.n	34182636 <HAL_RCC_OscConfig+0x1fa>
34182616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34182618:	2b00      	cmp	r3, #0
3418261a:	d104      	bne.n	34182626 <HAL_RCC_OscConfig+0x1ea>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418261c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418261e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34182622:	2b00      	cmp	r3, #0
34182624:	d107      	bne.n	34182636 <HAL_RCC_OscConfig+0x1fa>
34182626:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34182628:	2b00      	cmp	r3, #0
3418262a:	d115      	bne.n	34182658 <HAL_RCC_OscConfig+0x21c>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418262c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418262e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34182632:	2b00      	cmp	r3, #0
34182634:	d010      	beq.n	34182658 <HAL_RCC_OscConfig+0x21c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34182636:	687b      	ldr	r3, [r7, #4]
34182638:	68db      	ldr	r3, [r3, #12]
3418263a:	2b00      	cmp	r3, #0
3418263c:	d101      	bne.n	34182642 <HAL_RCC_OscConfig+0x206>
      {
        return HAL_ERROR;
3418263e:	2301      	movs	r3, #1
34182640:	e2d7      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34182642:	687b      	ldr	r3, [r7, #4]
34182644:	691b      	ldr	r3, [r3, #16]
34182646:	4618      	mov	r0, r3
34182648:	f7ff fcc0 	bl	34181fcc <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
3418264c:	687b      	ldr	r3, [r7, #4]
3418264e:	695b      	ldr	r3, [r3, #20]
34182650:	4618      	mov	r0, r3
34182652:	f7ff fcdd 	bl	34182010 <LL_RCC_HSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
34182656:	e03a      	b.n	341826ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34182658:	687b      	ldr	r3, [r7, #4]
3418265a:	68db      	ldr	r3, [r3, #12]
3418265c:	2b00      	cmp	r3, #0
3418265e:	d01e      	beq.n	3418269e <HAL_RCC_OscConfig+0x262>
        /* Check the parameters */
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
34182660:	f7ff fc84 	bl	34181f6c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34182664:	f7ff f8d4 	bl	34181810 <HAL_GetTick>
34182668:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
3418266a:	e008      	b.n	3418267e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
3418266c:	f7ff f8d0 	bl	34181810 <HAL_GetTick>
34182670:	4602      	mov	r2, r0
34182672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182674:	1ad3      	subs	r3, r2, r3
34182676:	2b01      	cmp	r3, #1
34182678:	d901      	bls.n	3418267e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
3418267a:	2303      	movs	r3, #3
3418267c:	e2b9      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_HSI_IsReady() == 0U)
3418267e:	f7ff fc93 	bl	34181fa8 <LL_RCC_HSI_IsReady>
34182682:	4603      	mov	r3, r0
34182684:	2b00      	cmp	r3, #0
34182686:	d0f1      	beq.n	3418266c <HAL_RCC_OscConfig+0x230>
          }
        }

        /* Set the HSI Divider */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pRCC_OscInitStruct->HSIDiv);
34182688:	687b      	ldr	r3, [r7, #4]
3418268a:	691b      	ldr	r3, [r3, #16]
3418268c:	4618      	mov	r0, r3
3418268e:	f7ff fc9d 	bl	34181fcc <LL_RCC_HSI_SetDivider>
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
34182692:	687b      	ldr	r3, [r7, #4]
34182694:	695b      	ldr	r3, [r3, #20]
34182696:	4618      	mov	r0, r3
34182698:	f7ff fcba 	bl	34182010 <LL_RCC_HSI_SetCalibTrimming>
3418269c:	e017      	b.n	341826ce <HAL_RCC_OscConfig+0x292>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
3418269e:	f7ff fc73 	bl	34181f88 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
341826a2:	f7ff f8b5 	bl	34181810 <HAL_GetTick>
341826a6:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
341826a8:	e00c      	b.n	341826c4 <HAL_RCC_OscConfig+0x288>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
341826aa:	f7ff f8b1 	bl	34181810 <HAL_GetTick>
341826ae:	4602      	mov	r2, r0
341826b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341826b2:	1ad3      	subs	r3, r2, r3
341826b4:	2b01      	cmp	r3, #1
341826b6:	d905      	bls.n	341826c4 <HAL_RCC_OscConfig+0x288>
          {
            return HAL_TIMEOUT;
341826b8:	2303      	movs	r3, #3
341826ba:	e29a      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
341826bc:	56028000 	.word	0x56028000
341826c0:	00018010 	.word	0x00018010
        while (LL_RCC_HSI_IsReady() != 0U)
341826c4:	f7ff fc70 	bl	34181fa8 <LL_RCC_HSI_IsReady>
341826c8:	4603      	mov	r3, r0
341826ca:	2b00      	cmp	r3, #0
341826cc:	d1ed      	bne.n	341826aa <HAL_RCC_OscConfig+0x26e>
      }
    }
  }

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
341826ce:	687b      	ldr	r3, [r7, #4]
341826d0:	681b      	ldr	r3, [r3, #0]
341826d2:	f003 0310 	and.w	r3, r3, #16
341826d6:	2b00      	cmp	r3, #0
341826d8:	d070      	beq.n	341827bc <HAL_RCC_OscConfig+0x380>
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));

    /* When the MSI is used as cpu/system bus clock or clock source for any PLL, it is not allowed to be disabled */
    /* but just to update the MSI calibration value */
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
341826da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
341826de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
341826e2:	d028      	beq.n	34182736 <HAL_RCC_OscConfig+0x2fa>
341826e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
341826e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341826ec:	d023      	beq.n	34182736 <HAL_RCC_OscConfig+0x2fa>
341826ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
341826f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341826f4:	d104      	bne.n	34182700 <HAL_RCC_OscConfig+0x2c4>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341826f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
341826f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
341826fc:	2b00      	cmp	r3, #0
341826fe:	d11a      	bne.n	34182736 <HAL_RCC_OscConfig+0x2fa>
34182700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
34182702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182706:	d104      	bne.n	34182712 <HAL_RCC_OscConfig+0x2d6>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34182708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418270a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418270e:	2b00      	cmp	r3, #0
34182710:	d111      	bne.n	34182736 <HAL_RCC_OscConfig+0x2fa>
34182712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
34182714:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182718:	d104      	bne.n	34182724 <HAL_RCC_OscConfig+0x2e8>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418271a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418271c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34182720:	2b00      	cmp	r3, #0
34182722:	d108      	bne.n	34182736 <HAL_RCC_OscConfig+0x2fa>
34182724:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
34182726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418272a:	d110      	bne.n	3418274e <HAL_RCC_OscConfig+0x312>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418272c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
3418272e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34182732:	2b00      	cmp	r3, #0
34182734:	d00b      	beq.n	3418274e <HAL_RCC_OscConfig+0x312>
    {
      /* When MSI is used as system clock it will not disabled */
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34182736:	687b      	ldr	r3, [r7, #4]
34182738:	69db      	ldr	r3, [r3, #28]
3418273a:	2b00      	cmp	r3, #0
3418273c:	d101      	bne.n	34182742 <HAL_RCC_OscConfig+0x306>
      {
        return HAL_ERROR;
3418273e:	2301      	movs	r3, #1
34182740:	e257      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Check the parameters */
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34182742:	687b      	ldr	r3, [r7, #4]
34182744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182746:	4618      	mov	r0, r3
34182748:	f7ff fcca 	bl	341820e0 <LL_RCC_MSI_SetCalibTrimming>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
3418274c:	e036      	b.n	341827bc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Check the MSI State */
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
3418274e:	687b      	ldr	r3, [r7, #4]
34182750:	69db      	ldr	r3, [r3, #28]
34182752:	2b00      	cmp	r3, #0
34182754:	d01e      	beq.n	34182794 <HAL_RCC_OscConfig+0x358>
        /* Check the parameters */
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

        /* Set the frequency */
        __HAL_RCC_MSI_FREQUENCY_CONFIG(pRCC_OscInitStruct->MSIFrequency);
34182756:	687b      	ldr	r3, [r7, #4]
34182758:	6a1b      	ldr	r3, [r3, #32]
3418275a:	4618      	mov	r0, r3
3418275c:	f7ff fc9e 	bl	3418209c <LL_RCC_MSI_SetFrequency>

        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
34182760:	f7ff fc6c 	bl	3418203c <LL_RCC_MSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34182764:	f7ff f854 	bl	34181810 <HAL_GetTick>
34182768:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
3418276a:	e008      	b.n	3418277e <HAL_RCC_OscConfig+0x342>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3418276c:	f7ff f850 	bl	34181810 <HAL_GetTick>
34182770:	4602      	mov	r2, r0
34182772:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182774:	1ad3      	subs	r3, r2, r3
34182776:	2b01      	cmp	r3, #1
34182778:	d901      	bls.n	3418277e <HAL_RCC_OscConfig+0x342>
          {
            return HAL_TIMEOUT;
3418277a:	2303      	movs	r3, #3
3418277c:	e239      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() == 0U)
3418277e:	f7ff fc7b 	bl	34182078 <LL_RCC_MSI_IsReady>
34182782:	4603      	mov	r3, r0
34182784:	2b00      	cmp	r3, #0
34182786:	d0f1      	beq.n	3418276c <HAL_RCC_OscConfig+0x330>
          }
        }

        /* Adjusts the Internal High Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->MSICalibrationValue);
34182788:	687b      	ldr	r3, [r7, #4]
3418278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418278c:	4618      	mov	r0, r3
3418278e:	f7ff fca7 	bl	341820e0 <LL_RCC_MSI_SetCalibTrimming>
34182792:	e013      	b.n	341827bc <HAL_RCC_OscConfig+0x380>
      }
      else
      {
        /* Ignore MSI frequency and calibration values in disable case */
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
34182794:	f7ff fc60 	bl	34182058 <LL_RCC_MSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34182798:	f7ff f83a 	bl	34181810 <HAL_GetTick>
3418279c:	66b8      	str	r0, [r7, #104]	@ 0x68

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
3418279e:	e008      	b.n	341827b2 <HAL_RCC_OscConfig+0x376>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
341827a0:	f7ff f836 	bl	34181810 <HAL_GetTick>
341827a4:	4602      	mov	r2, r0
341827a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341827a8:	1ad3      	subs	r3, r2, r3
341827aa:	2b01      	cmp	r3, #1
341827ac:	d901      	bls.n	341827b2 <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
341827ae:	2303      	movs	r3, #3
341827b0:	e21f      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
        while (LL_RCC_MSI_IsReady() != 0U)
341827b2:	f7ff fc61 	bl	34182078 <LL_RCC_MSI_IsReady>
341827b6:	4603      	mov	r3, r0
341827b8:	2b00      	cmp	r3, #0
341827ba:	d1f1      	bne.n	341827a0 <HAL_RCC_OscConfig+0x364>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
341827bc:	687b      	ldr	r3, [r7, #4]
341827be:	681b      	ldr	r3, [r3, #0]
341827c0:	f003 0308 	and.w	r3, r3, #8
341827c4:	2b00      	cmp	r3, #0
341827c6:	d02c      	beq.n	34182822 <HAL_RCC_OscConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
341827c8:	687b      	ldr	r3, [r7, #4]
341827ca:	699b      	ldr	r3, [r3, #24]
341827cc:	2b00      	cmp	r3, #0
341827ce:	d014      	beq.n	341827fa <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
341827d0:	f7ff fcae 	bl	34182130 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341827d4:	f7ff f81c 	bl	34181810 <HAL_GetTick>
341827d8:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
341827da:	e008      	b.n	341827ee <HAL_RCC_OscConfig+0x3b2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
341827dc:	f7ff f818 	bl	34181810 <HAL_GetTick>
341827e0:	4602      	mov	r2, r0
341827e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
341827e4:	1ad3      	subs	r3, r2, r3
341827e6:	2b01      	cmp	r3, #1
341827e8:	d901      	bls.n	341827ee <HAL_RCC_OscConfig+0x3b2>
        {
          return HAL_TIMEOUT;
341827ea:	2303      	movs	r3, #3
341827ec:	e201      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() == 0U)
341827ee:	f7ff fcbd 	bl	3418216c <LL_RCC_LSI_IsReady>
341827f2:	4603      	mov	r3, r0
341827f4:	2b00      	cmp	r3, #0
341827f6:	d0f1      	beq.n	341827dc <HAL_RCC_OscConfig+0x3a0>
341827f8:	e013      	b.n	34182822 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
341827fa:	f7ff fca7 	bl	3418214c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341827fe:	f7ff f807 	bl	34181810 <HAL_GetTick>
34182802:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() != 0U)
34182804:	e008      	b.n	34182818 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34182806:	f7ff f803 	bl	34181810 <HAL_GetTick>
3418280a:	4602      	mov	r2, r0
3418280c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418280e:	1ad3      	subs	r3, r2, r3
34182810:	2b01      	cmp	r3, #1
34182812:	d901      	bls.n	34182818 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
34182814:	2303      	movs	r3, #3
34182816:	e1ec      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSI_IsReady() != 0U)
34182818:	f7ff fca8 	bl	3418216c <LL_RCC_LSI_IsReady>
3418281c:	4603      	mov	r3, r0
3418281e:	2b00      	cmp	r3, #0
34182820:	d1f1      	bne.n	34182806 <HAL_RCC_OscConfig+0x3ca>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34182822:	687b      	ldr	r3, [r7, #4]
34182824:	681b      	ldr	r3, [r3, #0]
34182826:	f003 0304 	and.w	r3, r3, #4
3418282a:	2b00      	cmp	r3, #0
3418282c:	f000 808c 	beq.w	34182948 <HAL_RCC_OscConfig+0x50c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34182830:	687b      	ldr	r3, [r7, #4]
34182832:	689b      	ldr	r3, [r3, #8]
34182834:	2b02      	cmp	r3, #2
34182836:	d104      	bne.n	34182842 <HAL_RCC_OscConfig+0x406>
34182838:	4b96      	ldr	r3, [pc, #600]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
3418283a:	2202      	movs	r2, #2
3418283c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
34182840:	e055      	b.n	341828ee <HAL_RCC_OscConfig+0x4b2>
34182842:	687b      	ldr	r3, [r7, #4]
34182844:	689b      	ldr	r3, [r3, #8]
34182846:	2b00      	cmp	r3, #0
34182848:	d112      	bne.n	34182870 <HAL_RCC_OscConfig+0x434>
3418284a:	4b92      	ldr	r3, [pc, #584]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
3418284c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
34182850:	461a      	mov	r2, r3
34182852:	2302      	movs	r3, #2
34182854:	6013      	str	r3, [r2, #0]
34182856:	4b8f      	ldr	r3, [pc, #572]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
34182858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418285a:	4a8e      	ldr	r2, [pc, #568]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
3418285c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182860:	6413      	str	r3, [r2, #64]	@ 0x40
34182862:	4b8c      	ldr	r3, [pc, #560]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
34182864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34182866:	4a8b      	ldr	r2, [pc, #556]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
34182868:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3418286c:	6413      	str	r3, [r2, #64]	@ 0x40
3418286e:	e03e      	b.n	341828ee <HAL_RCC_OscConfig+0x4b2>
34182870:	687b      	ldr	r3, [r7, #4]
34182872:	689b      	ldr	r3, [r3, #8]
34182874:	f248 0202 	movw	r2, #32770	@ 0x8002
34182878:	4293      	cmp	r3, r2
3418287a:	d110      	bne.n	3418289e <HAL_RCC_OscConfig+0x462>
3418287c:	4b85      	ldr	r3, [pc, #532]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
3418287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
34182880:	4a84      	ldr	r2, [pc, #528]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
34182882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34182886:	6413      	str	r3, [r2, #64]	@ 0x40
34182888:	4b82      	ldr	r3, [pc, #520]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
3418288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418288c:	4a81      	ldr	r2, [pc, #516]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
3418288e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182892:	6413      	str	r3, [r2, #64]	@ 0x40
34182894:	4b7f      	ldr	r3, [pc, #508]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
34182896:	2202      	movs	r2, #2
34182898:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
3418289c:	e027      	b.n	341828ee <HAL_RCC_OscConfig+0x4b2>
3418289e:	687b      	ldr	r3, [r7, #4]
341828a0:	689b      	ldr	r3, [r3, #8]
341828a2:	4a7d      	ldr	r2, [pc, #500]	@ (34182a98 <HAL_RCC_OscConfig+0x65c>)
341828a4:	4293      	cmp	r3, r2
341828a6:	d110      	bne.n	341828ca <HAL_RCC_OscConfig+0x48e>
341828a8:	4b7a      	ldr	r3, [pc, #488]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341828ac:	4a79      	ldr	r2, [pc, #484]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
341828b2:	6413      	str	r3, [r2, #64]	@ 0x40
341828b4:	4b77      	ldr	r3, [pc, #476]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341828b8:	4a76      	ldr	r2, [pc, #472]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
341828be:	6413      	str	r3, [r2, #64]	@ 0x40
341828c0:	4b74      	ldr	r3, [pc, #464]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828c2:	2202      	movs	r2, #2
341828c4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
341828c8:	e011      	b.n	341828ee <HAL_RCC_OscConfig+0x4b2>
341828ca:	4b72      	ldr	r3, [pc, #456]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
341828d0:	461a      	mov	r2, r3
341828d2:	2302      	movs	r3, #2
341828d4:	6013      	str	r3, [r2, #0]
341828d6:	4b6f      	ldr	r3, [pc, #444]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341828da:	4a6e      	ldr	r2, [pc, #440]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
341828e0:	6413      	str	r3, [r2, #64]	@ 0x40
341828e2:	4b6c      	ldr	r3, [pc, #432]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
341828e6:	4a6b      	ldr	r2, [pc, #428]	@ (34182a94 <HAL_RCC_OscConfig+0x658>)
341828e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341828ec:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Check the LSE State */
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
341828ee:	687b      	ldr	r3, [r7, #4]
341828f0:	689b      	ldr	r3, [r3, #8]
341828f2:	2b00      	cmp	r3, #0
341828f4:	d014      	beq.n	34182920 <HAL_RCC_OscConfig+0x4e4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
341828f6:	f7fe ff8b 	bl	34181810 <HAL_GetTick>
341828fa:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
341828fc:	e00a      	b.n	34182914 <HAL_RCC_OscConfig+0x4d8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341828fe:	f7fe ff87 	bl	34181810 <HAL_GetTick>
34182902:	4602      	mov	r2, r0
34182904:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182906:	1ad3      	subs	r3, r2, r3
34182908:	f241 3288 	movw	r2, #5000	@ 0x1388
3418290c:	4293      	cmp	r3, r2
3418290e:	d901      	bls.n	34182914 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
34182910:	2303      	movs	r3, #3
34182912:	e16e      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() == 0U)
34182914:	f7ff fbfa 	bl	3418210c <LL_RCC_LSE_IsReady>
34182918:	4603      	mov	r3, r0
3418291a:	2b00      	cmp	r3, #0
3418291c:	d0ef      	beq.n	341828fe <HAL_RCC_OscConfig+0x4c2>
3418291e:	e013      	b.n	34182948 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
34182920:	f7fe ff76 	bl	34181810 <HAL_GetTick>
34182924:	66b8      	str	r0, [r7, #104]	@ 0x68

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
34182926:	e00a      	b.n	3418293e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34182928:	f7fe ff72 	bl	34181810 <HAL_GetTick>
3418292c:	4602      	mov	r2, r0
3418292e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
34182930:	1ad3      	subs	r3, r2, r3
34182932:	f241 3288 	movw	r2, #5000	@ 0x1388
34182936:	4293      	cmp	r3, r2
34182938:	d901      	bls.n	3418293e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
3418293a:	2303      	movs	r3, #3
3418293c:	e159      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      while (LL_RCC_LSE_IsReady() != 0U)
3418293e:	f7ff fbe5 	bl	3418210c <LL_RCC_LSE_IsReady>
34182942:	4603      	mov	r3, r0
34182944:	2b00      	cmp	r3, #0
34182946:	d1ef      	bne.n	34182928 <HAL_RCC_OscConfig+0x4ec>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));

  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
34182948:	687b      	ldr	r3, [r7, #4]
3418294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418294c:	2b00      	cmp	r3, #0
3418294e:	d04c      	beq.n	341829ea <HAL_RCC_OscConfig+0x5ae>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34182950:	687b      	ldr	r3, [r7, #4]
34182952:	3328      	adds	r3, #40	@ 0x28
34182954:	4619      	mov	r1, r3
34182956:	2000      	movs	r0, #0
34182958:	f000 fe22 	bl	341835a0 <RCC_PLL_IsNewConfig>
3418295c:	6678      	str	r0, [r7, #100]	@ 0x64
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
3418295e:	f7ff fc3d 	bl	341821dc <LL_RCC_PLL1_IsReady>
34182962:	6638      	str	r0, [r7, #96]	@ 0x60
    if (new_pll_config == 1U)
34182964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
34182966:	2b01      	cmp	r3, #1
34182968:	d130      	bne.n	341829cc <HAL_RCC_OscConfig+0x590>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
3418296a:	f7ff fd0f 	bl	3418238c <LL_RCC_IC1_GetSource>
3418296e:	65f8      	str	r0, [r7, #92]	@ 0x5c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34182970:	f7ff fd2a 	bl	341823c8 <LL_RCC_IC2_GetSource>
34182974:	65b8      	str	r0, [r7, #88]	@ 0x58
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34182976:	f7ff fd45 	bl	34182404 <LL_RCC_IC6_GetSource>
3418297a:	6578      	str	r0, [r7, #84]	@ 0x54
      uint32_t ic11src = LL_RCC_IC11_GetSource();
3418297c:	f7ff fd50 	bl	34182420 <LL_RCC_IC11_GetSource>
34182980:	6538      	str	r0, [r7, #80]	@ 0x50
      /* PLL1 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
34182982:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182986:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418298a:	d104      	bne.n	34182996 <HAL_RCC_OscConfig+0x55a>
3418298c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
3418298e:	2b00      	cmp	r3, #0
34182990:	d101      	bne.n	34182996 <HAL_RCC_OscConfig+0x55a>
      {
        return HAL_ERROR;
34182992:	2301      	movs	r3, #1
34182994:	e12d      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL1 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
34182996:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
3418299a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418299e:	d10a      	bne.n	341829b6 <HAL_RCC_OscConfig+0x57a>
341829a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
341829a2:	2b00      	cmp	r3, #0
341829a4:	d005      	beq.n	341829b2 <HAL_RCC_OscConfig+0x576>
341829a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
341829a8:	2b00      	cmp	r3, #0
341829aa:	d002      	beq.n	341829b2 <HAL_RCC_OscConfig+0x576>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
341829ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
341829ae:	2b00      	cmp	r3, #0
341829b0:	d101      	bne.n	341829b6 <HAL_RCC_OscConfig+0x57a>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL1)))
      {
        return HAL_ERROR;
341829b2:	2301      	movs	r3, #1
341829b4:	e11d      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL1 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
341829b6:	687b      	ldr	r3, [r7, #4]
341829b8:	3328      	adds	r3, #40	@ 0x28
341829ba:	4619      	mov	r1, r3
341829bc:	2000      	movs	r0, #0
341829be:	f000 fc93 	bl	341832e8 <RCC_PLL_Config>
341829c2:	4603      	mov	r3, r0
341829c4:	2b00      	cmp	r3, #0
341829c6:	d010      	beq.n	341829ea <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
341829c8:	2301      	movs	r3, #1
341829ca:	e112      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
341829cc:	687b      	ldr	r3, [r7, #4]
341829ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
341829d0:	2b02      	cmp	r3, #2
341829d2:	d10a      	bne.n	341829ea <HAL_RCC_OscConfig+0x5ae>
341829d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
341829d6:	2b00      	cmp	r3, #0
341829d8:	d107      	bne.n	341829ea <HAL_RCC_OscConfig+0x5ae>
    {
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
341829da:	2000      	movs	r0, #0
341829dc:	f000 fdb4 	bl	34183548 <RCC_PLL_Enable>
341829e0:	4603      	mov	r3, r0
341829e2:	2b00      	cmp	r3, #0
341829e4:	d001      	beq.n	341829ea <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
341829e6:	2301      	movs	r3, #1
341829e8:	e103      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));

  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
341829ea:	687b      	ldr	r3, [r7, #4]
341829ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341829ee:	2b00      	cmp	r3, #0
341829f0:	d054      	beq.n	34182a9c <HAL_RCC_OscConfig+0x660>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
341829f2:	687b      	ldr	r3, [r7, #4]
341829f4:	3344      	adds	r3, #68	@ 0x44
341829f6:	4619      	mov	r1, r3
341829f8:	2001      	movs	r0, #1
341829fa:	f000 fdd1 	bl	341835a0 <RCC_PLL_IsNewConfig>
341829fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
    uint32_t pll2_ready = LL_RCC_PLL2_IsReady();
34182a00:	f7ff fc22 	bl	34182248 <LL_RCC_PLL2_IsReady>
34182a04:	64b8      	str	r0, [r7, #72]	@ 0x48
    if (new_pll_config == 1U)
34182a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
34182a08:	2b01      	cmp	r3, #1
34182a0a:	d134      	bne.n	34182a76 <HAL_RCC_OscConfig+0x63a>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34182a0c:	f7ff fcbe 	bl	3418238c <LL_RCC_IC1_GetSource>
34182a10:	6478      	str	r0, [r7, #68]	@ 0x44
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34182a12:	f7ff fcd9 	bl	341823c8 <LL_RCC_IC2_GetSource>
34182a16:	6438      	str	r0, [r7, #64]	@ 0x40
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34182a18:	f7ff fcf4 	bl	34182404 <LL_RCC_IC6_GetSource>
34182a1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34182a1e:	f7ff fcff 	bl	34182420 <LL_RCC_IC11_GetSource>
34182a22:	63b8      	str	r0, [r7, #56]	@ 0x38
      /* PLL2 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
34182a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182a28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182a2c:	d105      	bne.n	34182a3a <HAL_RCC_OscConfig+0x5fe>
34182a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
34182a30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182a34:	d101      	bne.n	34182a3a <HAL_RCC_OscConfig+0x5fe>
      {
        return HAL_ERROR;
34182a36:	2301      	movs	r3, #1
34182a38:	e0db      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }

      /* PLL2 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
34182a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182a3e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182a42:	d10d      	bne.n	34182a60 <HAL_RCC_OscConfig+0x624>
34182a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34182a46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182a4a:	d007      	beq.n	34182a5c <HAL_RCC_OscConfig+0x620>
34182a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
34182a4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182a52:	d003      	beq.n	34182a5c <HAL_RCC_OscConfig+0x620>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
34182a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
34182a56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182a5a:	d101      	bne.n	34182a60 <HAL_RCC_OscConfig+0x624>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL2)))
      {
        return HAL_ERROR;
34182a5c:	2301      	movs	r3, #1
34182a5e:	e0c8      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL2 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34182a60:	687b      	ldr	r3, [r7, #4]
34182a62:	3344      	adds	r3, #68	@ 0x44
34182a64:	4619      	mov	r1, r3
34182a66:	2001      	movs	r0, #1
34182a68:	f000 fc3e 	bl	341832e8 <RCC_PLL_Config>
34182a6c:	4603      	mov	r3, r0
34182a6e:	2b00      	cmp	r3, #0
34182a70:	d014      	beq.n	34182a9c <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34182a72:	2301      	movs	r3, #1
34182a74:	e0bd      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34182a76:	687b      	ldr	r3, [r7, #4]
34182a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182a7a:	2b02      	cmp	r3, #2
34182a7c:	d10e      	bne.n	34182a9c <HAL_RCC_OscConfig+0x660>
34182a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
34182a80:	2b00      	cmp	r3, #0
34182a82:	d10b      	bne.n	34182a9c <HAL_RCC_OscConfig+0x660>
    {
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34182a84:	2001      	movs	r0, #1
34182a86:	f000 fd5f 	bl	34183548 <RCC_PLL_Enable>
34182a8a:	4603      	mov	r3, r0
34182a8c:	2b00      	cmp	r3, #0
34182a8e:	d005      	beq.n	34182a9c <HAL_RCC_OscConfig+0x660>
      {
        return HAL_ERROR;
34182a90:	2301      	movs	r3, #1
34182a92:	e0ae      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
34182a94:	56028000 	.word	0x56028000
34182a98:	00018002 	.word	0x00018002

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));

  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
34182a9c:	687b      	ldr	r3, [r7, #4]
34182a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34182aa0:	2b00      	cmp	r3, #0
34182aa2:	d050      	beq.n	34182b46 <HAL_RCC_OscConfig+0x70a>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34182aa4:	687b      	ldr	r3, [r7, #4]
34182aa6:	3360      	adds	r3, #96	@ 0x60
34182aa8:	4619      	mov	r1, r3
34182aaa:	2002      	movs	r0, #2
34182aac:	f000 fd78 	bl	341835a0 <RCC_PLL_IsNewConfig>
34182ab0:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
34182ab2:	f7ff fb93 	bl	341821dc <LL_RCC_PLL1_IsReady>
34182ab6:	6338      	str	r0, [r7, #48]	@ 0x30
    if (new_pll_config == 1U)
34182ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
34182aba:	2b01      	cmp	r3, #1
34182abc:	d134      	bne.n	34182b28 <HAL_RCC_OscConfig+0x6ec>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34182abe:	f7ff fc65 	bl	3418238c <LL_RCC_IC1_GetSource>
34182ac2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34182ac4:	f7ff fc80 	bl	341823c8 <LL_RCC_IC2_GetSource>
34182ac8:	62b8      	str	r0, [r7, #40]	@ 0x28
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34182aca:	f7ff fc9b 	bl	34182404 <LL_RCC_IC6_GetSource>
34182ace:	6278      	str	r0, [r7, #36]	@ 0x24
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34182ad0:	f7ff fca6 	bl	34182420 <LL_RCC_IC11_GetSource>
34182ad4:	6238      	str	r0, [r7, #32]
      /* PLL3 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
34182ad6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182ada:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182ade:	d105      	bne.n	34182aec <HAL_RCC_OscConfig+0x6b0>
34182ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34182ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182ae6:	d101      	bne.n	34182aec <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
34182ae8:	2301      	movs	r3, #1
34182aea:	e082      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
34182aec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182af0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182af4:	d10d      	bne.n	34182b12 <HAL_RCC_OscConfig+0x6d6>
34182af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
34182af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182afc:	d007      	beq.n	34182b0e <HAL_RCC_OscConfig+0x6d2>
34182afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34182b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182b04:	d003      	beq.n	34182b0e <HAL_RCC_OscConfig+0x6d2>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
34182b06:	6a3b      	ldr	r3, [r7, #32]
34182b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34182b0c:	d101      	bne.n	34182b12 <HAL_RCC_OscConfig+0x6d6>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL3)))
      {
        return HAL_ERROR;
34182b0e:	2301      	movs	r3, #1
34182b10:	e06f      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL3 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
34182b12:	687b      	ldr	r3, [r7, #4]
34182b14:	3360      	adds	r3, #96	@ 0x60
34182b16:	4619      	mov	r1, r3
34182b18:	2002      	movs	r0, #2
34182b1a:	f000 fbe5 	bl	341832e8 <RCC_PLL_Config>
34182b1e:	4603      	mov	r3, r0
34182b20:	2b00      	cmp	r3, #0
34182b22:	d010      	beq.n	34182b46 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34182b24:	2301      	movs	r3, #1
34182b26:	e064      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34182b28:	687b      	ldr	r3, [r7, #4]
34182b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
34182b2c:	2b02      	cmp	r3, #2
34182b2e:	d10a      	bne.n	34182b46 <HAL_RCC_OscConfig+0x70a>
34182b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
34182b32:	2b00      	cmp	r3, #0
34182b34:	d107      	bne.n	34182b46 <HAL_RCC_OscConfig+0x70a>
    {
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34182b36:	2002      	movs	r0, #2
34182b38:	f000 fd06 	bl	34183548 <RCC_PLL_Enable>
34182b3c:	4603      	mov	r3, r0
34182b3e:	2b00      	cmp	r3, #0
34182b40:	d001      	beq.n	34182b46 <HAL_RCC_OscConfig+0x70a>
      {
        return HAL_ERROR;
34182b42:	2301      	movs	r3, #1
34182b44:	e055      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>

  /*-------------------------------- PLL4 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));

  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
34182b46:	687b      	ldr	r3, [r7, #4]
34182b48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34182b4a:	2b00      	cmp	r3, #0
34182b4c:	d050      	beq.n	34182bf0 <HAL_RCC_OscConfig+0x7b4>
  {
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
34182b4e:	687b      	ldr	r3, [r7, #4]
34182b50:	337c      	adds	r3, #124	@ 0x7c
34182b52:	4619      	mov	r1, r3
34182b54:	2003      	movs	r0, #3
34182b56:	f000 fd23 	bl	341835a0 <RCC_PLL_IsNewConfig>
34182b5a:	61f8      	str	r0, [r7, #28]
    uint32_t pll4_ready = LL_RCC_PLL4_IsReady();
34182b5c:	f7ff fbe0 	bl	34182320 <LL_RCC_PLL4_IsReady>
34182b60:	61b8      	str	r0, [r7, #24]

    if (new_pll_config == 1U)
34182b62:	69fb      	ldr	r3, [r7, #28]
34182b64:	2b01      	cmp	r3, #1
34182b66:	d134      	bne.n	34182bd2 <HAL_RCC_OscConfig+0x796>
    {
      uint32_t ic1src = LL_RCC_IC1_GetSource();
34182b68:	f7ff fc10 	bl	3418238c <LL_RCC_IC1_GetSource>
34182b6c:	6178      	str	r0, [r7, #20]
      uint32_t ic2src = LL_RCC_IC2_GetSource();
34182b6e:	f7ff fc2b 	bl	341823c8 <LL_RCC_IC2_GetSource>
34182b72:	6138      	str	r0, [r7, #16]
      uint32_t ic6src = LL_RCC_IC6_GetSource();
34182b74:	f7ff fc46 	bl	34182404 <LL_RCC_IC6_GetSource>
34182b78:	60f8      	str	r0, [r7, #12]
      uint32_t ic11src = LL_RCC_IC11_GetSource();
34182b7a:	f7ff fc51 	bl	34182420 <LL_RCC_IC11_GetSource>
34182b7e:	60b8      	str	r0, [r7, #8]
      /* PLL4 should not be disabled / reconfigured if used for IC1 (cpuclksrc) - return HAL_ERROR */
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
34182b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
34182b84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34182b88:	d105      	bne.n	34182b96 <HAL_RCC_OscConfig+0x75a>
34182b8a:	697b      	ldr	r3, [r7, #20]
34182b8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b90:	d101      	bne.n	34182b96 <HAL_RCC_OscConfig+0x75a>
      {
        return HAL_ERROR;
34182b92:	2301      	movs	r3, #1
34182b94:	e02d      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 should not be disabled / reconfigured if used for IC2, IC6 or IC11 (sysclksrc) - return HAL_ERROR  */
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34182b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
34182b9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182b9e:	d10d      	bne.n	34182bbc <HAL_RCC_OscConfig+0x780>
34182ba0:	693b      	ldr	r3, [r7, #16]
34182ba2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182ba6:	d007      	beq.n	34182bb8 <HAL_RCC_OscConfig+0x77c>
34182ba8:	68fb      	ldr	r3, [r7, #12]
34182baa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182bae:	d003      	beq.n	34182bb8 <HAL_RCC_OscConfig+0x77c>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34182bb0:	68bb      	ldr	r3, [r7, #8]
34182bb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182bb6:	d101      	bne.n	34182bbc <HAL_RCC_OscConfig+0x780>
                                                                  (ic11src == LL_RCC_ICCLKSOURCE_PLL4)))
      {
        return HAL_ERROR;
34182bb8:	2301      	movs	r3, #1
34182bba:	e01a      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
      /* PLL4 is not used, it can be configured */
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
34182bbc:	687b      	ldr	r3, [r7, #4]
34182bbe:	337c      	adds	r3, #124	@ 0x7c
34182bc0:	4619      	mov	r1, r3
34182bc2:	2003      	movs	r0, #3
34182bc4:	f000 fb90 	bl	341832e8 <RCC_PLL_Config>
34182bc8:	4603      	mov	r3, r0
34182bca:	2b00      	cmp	r3, #0
34182bcc:	d010      	beq.n	34182bf0 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34182bce:	2301      	movs	r3, #1
34182bd0:	e00f      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
      }
    }
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34182bd2:	687b      	ldr	r3, [r7, #4]
34182bd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34182bd6:	2b02      	cmp	r3, #2
34182bd8:	d10a      	bne.n	34182bf0 <HAL_RCC_OscConfig+0x7b4>
34182bda:	69bb      	ldr	r3, [r7, #24]
34182bdc:	2b00      	cmp	r3, #0
34182bde:	d107      	bne.n	34182bf0 <HAL_RCC_OscConfig+0x7b4>
    {
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34182be0:	2003      	movs	r0, #3
34182be2:	f000 fcb1 	bl	34183548 <RCC_PLL_Enable>
34182be6:	4603      	mov	r3, r0
34182be8:	2b00      	cmp	r3, #0
34182bea:	d001      	beq.n	34182bf0 <HAL_RCC_OscConfig+0x7b4>
      {
        return HAL_ERROR;
34182bec:	2301      	movs	r3, #1
34182bee:	e000      	b.n	34182bf2 <HAL_RCC_OscConfig+0x7b6>
    {
      /* Nothing to do */
    }
  }

  return HAL_OK;
34182bf0:	2300      	movs	r3, #0
}
34182bf2:	4618      	mov	r0, r3
34182bf4:	3788      	adds	r7, #136	@ 0x88
34182bf6:	46bd      	mov	sp, r7
34182bf8:	bd80      	pop	{r7, pc}
34182bfa:	bf00      	nop

34182bfc <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
34182bfc:	b580      	push	{r7, lr}
34182bfe:	b084      	sub	sp, #16
34182c00:	af00      	add	r7, sp, #0
34182c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
34182c04:	687b      	ldr	r3, [r7, #4]
34182c06:	2b00      	cmp	r3, #0
34182c08:	d101      	bne.n	34182c0e <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
34182c0a:	2301      	movs	r3, #1
34182c0c:	e1f2      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34182c0e:	687b      	ldr	r3, [r7, #4]
34182c10:	681b      	ldr	r3, [r3, #0]
34182c12:	f003 0308 	and.w	r3, r3, #8
34182c16:	2b00      	cmp	r3, #0
34182c18:	d010      	beq.n	34182c3c <HAL_RCC_ClockConfig+0x40>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34182c1a:	687b      	ldr	r3, [r7, #4]
34182c1c:	691a      	ldr	r2, [r3, #16]
34182c1e:	4ba3      	ldr	r3, [pc, #652]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c22:	f003 0307 	and.w	r3, r3, #7
34182c26:	429a      	cmp	r2, r3
34182c28:	d908      	bls.n	34182c3c <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34182c2a:	4ba0      	ldr	r3, [pc, #640]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c2e:	f023 0207 	bic.w	r2, r3, #7
34182c32:	687b      	ldr	r3, [r7, #4]
34182c34:	691b      	ldr	r3, [r3, #16]
34182c36:	499d      	ldr	r1, [pc, #628]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c38:	4313      	orrs	r3, r2
34182c3a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34182c3c:	687b      	ldr	r3, [r7, #4]
34182c3e:	681b      	ldr	r3, [r3, #0]
34182c40:	f003 0310 	and.w	r3, r3, #16
34182c44:	2b00      	cmp	r3, #0
34182c46:	d010      	beq.n	34182c6a <HAL_RCC_ClockConfig+0x6e>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34182c48:	687b      	ldr	r3, [r7, #4]
34182c4a:	695a      	ldr	r2, [r3, #20]
34182c4c:	4b97      	ldr	r3, [pc, #604]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34182c54:	429a      	cmp	r2, r3
34182c56:	d908      	bls.n	34182c6a <HAL_RCC_ClockConfig+0x6e>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34182c58:	4b94      	ldr	r3, [pc, #592]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34182c60:	687b      	ldr	r3, [r7, #4]
34182c62:	695b      	ldr	r3, [r3, #20]
34182c64:	4991      	ldr	r1, [pc, #580]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c66:	4313      	orrs	r3, r2
34182c68:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34182c6a:	687b      	ldr	r3, [r7, #4]
34182c6c:	681b      	ldr	r3, [r3, #0]
34182c6e:	f003 0320 	and.w	r3, r3, #32
34182c72:	2b00      	cmp	r3, #0
34182c74:	d010      	beq.n	34182c98 <HAL_RCC_ClockConfig+0x9c>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34182c76:	687b      	ldr	r3, [r7, #4]
34182c78:	699a      	ldr	r2, [r3, #24]
34182c7a:	4b8c      	ldr	r3, [pc, #560]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c7e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34182c82:	429a      	cmp	r2, r3
34182c84:	d908      	bls.n	34182c98 <HAL_RCC_ClockConfig+0x9c>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34182c86:	4b89      	ldr	r3, [pc, #548]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182c8a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34182c8e:	687b      	ldr	r3, [r7, #4]
34182c90:	699b      	ldr	r3, [r3, #24]
34182c92:	4986      	ldr	r1, [pc, #536]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182c94:	4313      	orrs	r3, r2
34182c96:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34182c98:	687b      	ldr	r3, [r7, #4]
34182c9a:	681b      	ldr	r3, [r3, #0]
34182c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34182ca0:	2b00      	cmp	r3, #0
34182ca2:	d010      	beq.n	34182cc6 <HAL_RCC_ClockConfig+0xca>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34182ca4:	687b      	ldr	r3, [r7, #4]
34182ca6:	69da      	ldr	r2, [r3, #28]
34182ca8:	4b80      	ldr	r3, [pc, #512]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182cac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34182cb0:	429a      	cmp	r2, r3
34182cb2:	d908      	bls.n	34182cc6 <HAL_RCC_ClockConfig+0xca>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34182cb4:	4b7d      	ldr	r3, [pc, #500]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182cb8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34182cbc:	687b      	ldr	r3, [r7, #4]
34182cbe:	69db      	ldr	r3, [r3, #28]
34182cc0:	497a      	ldr	r1, [pc, #488]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182cc2:	4313      	orrs	r3, r2
34182cc4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34182cc6:	687b      	ldr	r3, [r7, #4]
34182cc8:	681b      	ldr	r3, [r3, #0]
34182cca:	f003 0304 	and.w	r3, r3, #4
34182cce:	2b00      	cmp	r3, #0
34182cd0:	d010      	beq.n	34182cf4 <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
34182cd2:	687b      	ldr	r3, [r7, #4]
34182cd4:	68da      	ldr	r2, [r3, #12]
34182cd6:	4b75      	ldr	r3, [pc, #468]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182cda:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34182cde:	429a      	cmp	r2, r3
34182ce0:	d908      	bls.n	34182cf4 <HAL_RCC_ClockConfig+0xf8>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34182ce2:	4b72      	ldr	r3, [pc, #456]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182ce6:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34182cea:	687b      	ldr	r3, [r7, #4]
34182cec:	68db      	ldr	r3, [r3, #12]
34182cee:	496f      	ldr	r1, [pc, #444]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182cf0:	4313      	orrs	r3, r2
34182cf2:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*------------------------- CPUCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
34182cf4:	687b      	ldr	r3, [r7, #4]
34182cf6:	681b      	ldr	r3, [r3, #0]
34182cf8:	f003 0301 	and.w	r3, r3, #1
34182cfc:	2b00      	cmp	r3, #0
34182cfe:	d063      	beq.n	34182dc8 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));

    /* HSE is selected as CPU Clock Source */
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
34182d00:	687b      	ldr	r3, [r7, #4]
34182d02:	685b      	ldr	r3, [r3, #4]
34182d04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34182d08:	d106      	bne.n	34182d18 <HAL_RCC_ClockConfig+0x11c>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34182d0a:	f7ff f91d 	bl	34181f48 <LL_RCC_HSE_IsReady>
34182d0e:	4603      	mov	r3, r0
34182d10:	2b00      	cmp	r3, #0
34182d12:	d134      	bne.n	34182d7e <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34182d14:	2301      	movs	r3, #1
34182d16:	e16d      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34182d18:	687b      	ldr	r3, [r7, #4]
34182d1a:	685b      	ldr	r3, [r3, #4]
34182d1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34182d20:	d11a      	bne.n	34182d58 <HAL_RCC_ClockConfig+0x15c>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC1 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34182d22:	f7ff fb33 	bl	3418238c <LL_RCC_IC1_GetSource>
34182d26:	4602      	mov	r2, r0
34182d28:	687b      	ldr	r3, [r7, #4]
34182d2a:	6a1b      	ldr	r3, [r3, #32]
34182d2c:	4619      	mov	r1, r3
34182d2e:	4610      	mov	r0, r2
34182d30:	f000 fcea 	bl	34183708 <RCC_IC_CheckPLLSources>
34182d34:	4603      	mov	r3, r0
34182d36:	2b01      	cmp	r3, #1
34182d38:	d001      	beq.n	34182d3e <HAL_RCC_ClockConfig+0x142>
      {
        return HAL_ERROR;
34182d3a:	2301      	movs	r3, #1
34182d3c:	e15a      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC1 source and divider */
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34182d3e:	687b      	ldr	r3, [r7, #4]
34182d40:	6a1a      	ldr	r2, [r3, #32]
34182d42:	687b      	ldr	r3, [r7, #4]
34182d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182d46:	3b01      	subs	r3, #1
34182d48:	041b      	lsls	r3, r3, #16
34182d4a:	4958      	ldr	r1, [pc, #352]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182d4c:	4313      	orrs	r3, r2
34182d4e:	f8c1 30c4 	str.w	r3, [r1, #196]	@ 0xc4
                ((pRCC_ClkInitStruct->IC1Selection.ClockDivider - 1U) << RCC_IC1CFGR_IC1INT_Pos));

      /* Enable IC1 */
      LL_RCC_IC1_Enable();
34182d52:	f7ff fb0d 	bl	34182370 <LL_RCC_IC1_Enable>
34182d56:	e012      	b.n	34182d7e <HAL_RCC_ClockConfig+0x182>
    }
    /* MSI is selected as CPU Clock Source */
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34182d58:	687b      	ldr	r3, [r7, #4]
34182d5a:	685b      	ldr	r3, [r3, #4]
34182d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34182d60:	d106      	bne.n	34182d70 <HAL_RCC_ClockConfig+0x174>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34182d62:	f7ff f989 	bl	34182078 <LL_RCC_MSI_IsReady>
34182d66:	4603      	mov	r3, r0
34182d68:	2b00      	cmp	r3, #0
34182d6a:	d108      	bne.n	34182d7e <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34182d6c:	2301      	movs	r3, #1
34182d6e:	e141      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
    }
    /* HSI is selected as CPU Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34182d70:	f7ff f91a 	bl	34181fa8 <LL_RCC_HSI_IsReady>
34182d74:	4603      	mov	r3, r0
34182d76:	2b00      	cmp	r3, #0
34182d78:	d101      	bne.n	34182d7e <HAL_RCC_ClockConfig+0x182>
      {
        return HAL_ERROR;
34182d7a:	2301      	movs	r3, #1
34182d7c:	e13a      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the CPU clock */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
34182d7e:	4b4b      	ldr	r3, [pc, #300]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182d80:	6a1b      	ldr	r3, [r3, #32]
34182d82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
34182d86:	687b      	ldr	r3, [r7, #4]
34182d88:	685b      	ldr	r3, [r3, #4]
34182d8a:	4948      	ldr	r1, [pc, #288]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182d8c:	4313      	orrs	r3, r2
34182d8e:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34182d90:	f7fe fd3e 	bl	34181810 <HAL_GetTick>
34182d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34182d96:	e00a      	b.n	34182dae <HAL_RCC_ClockConfig+0x1b2>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34182d98:	f7fe fd3a 	bl	34181810 <HAL_GetTick>
34182d9c:	4602      	mov	r2, r0
34182d9e:	68fb      	ldr	r3, [r7, #12]
34182da0:	1ad3      	subs	r3, r2, r3
34182da2:	f241 3288 	movw	r2, #5000	@ 0x1388
34182da6:	4293      	cmp	r3, r2
34182da8:	d901      	bls.n	34182dae <HAL_RCC_ClockConfig+0x1b2>
      {
        return HAL_TIMEOUT;
34182daa:	2303      	movs	r3, #3
34182dac:	e122      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34182dae:	f7ff f9eb 	bl	34182188 <LL_RCC_GetCpuClkSource>
34182db2:	4602      	mov	r2, r0
34182db4:	687b      	ldr	r3, [r7, #4]
34182db6:	685b      	ldr	r3, [r3, #4]
34182db8:	011b      	lsls	r3, r3, #4
34182dba:	429a      	cmp	r2, r3
34182dbc:	d1ec      	bne.n	34182d98 <HAL_RCC_ClockConfig+0x19c>
      }
    }

    /* Update the SystemCoreClock global variable with CPU clock */
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34182dbe:	f000 f921 	bl	34183004 <HAL_RCC_GetCpuClockFreq>
34182dc2:	4603      	mov	r3, r0
34182dc4:	4a3a      	ldr	r2, [pc, #232]	@ (34182eb0 <HAL_RCC_ClockConfig+0x2b4>)
34182dc6:	6013      	str	r3, [r2, #0]

  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34182dc8:	687b      	ldr	r3, [r7, #4]
34182dca:	681b      	ldr	r3, [r3, #0]
34182dcc:	f003 0302 	and.w	r3, r3, #2
34182dd0:	2b00      	cmp	r3, #0
34182dd2:	f000 8096 	beq.w	34182f02 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System bus clock source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34182dd6:	687b      	ldr	r3, [r7, #4]
34182dd8:	689b      	ldr	r3, [r3, #8]
34182dda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34182dde:	d106      	bne.n	34182dee <HAL_RCC_ClockConfig+0x1f2>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
34182de0:	f7ff f8b2 	bl	34181f48 <LL_RCC_HSE_IsReady>
34182de4:	4603      	mov	r3, r0
34182de6:	2b00      	cmp	r3, #0
34182de8:	d16b      	bne.n	34182ec2 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34182dea:	2301      	movs	r3, #1
34182dec:	e102      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
      }
    }
    /* PLL output is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34182dee:	687b      	ldr	r3, [r7, #4]
34182df0:	689b      	ldr	r3, [r3, #8]
34182df2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34182df6:	d14d      	bne.n	34182e94 <HAL_RCC_ClockConfig+0x298>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));

      /* ICx clock switch requires both origin and destination clock source to be active */
      /* Check IC2/IC6/IC11 origin and target clock sources availability */
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34182df8:	f7ff fae6 	bl	341823c8 <LL_RCC_IC2_GetSource>
34182dfc:	4602      	mov	r2, r0
34182dfe:	687b      	ldr	r3, [r7, #4]
34182e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34182e02:	4619      	mov	r1, r3
34182e04:	4610      	mov	r0, r2
34182e06:	f000 fc7f 	bl	34183708 <RCC_IC_CheckPLLSources>
34182e0a:	4603      	mov	r3, r0
34182e0c:	2b01      	cmp	r3, #1
34182e0e:	d001      	beq.n	34182e14 <HAL_RCC_ClockConfig+0x218>
      {
        return HAL_ERROR;
34182e10:	2301      	movs	r3, #1
34182e12:	e0ef      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34182e14:	f7ff faf6 	bl	34182404 <LL_RCC_IC6_GetSource>
34182e18:	4602      	mov	r2, r0
34182e1a:	687b      	ldr	r3, [r7, #4]
34182e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34182e1e:	4619      	mov	r1, r3
34182e20:	4610      	mov	r0, r2
34182e22:	f000 fc71 	bl	34183708 <RCC_IC_CheckPLLSources>
34182e26:	4603      	mov	r3, r0
34182e28:	2b01      	cmp	r3, #1
34182e2a:	d001      	beq.n	34182e30 <HAL_RCC_ClockConfig+0x234>
      {
        return HAL_ERROR;
34182e2c:	2301      	movs	r3, #1
34182e2e:	e0e1      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
      }
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34182e30:	f7ff faf6 	bl	34182420 <LL_RCC_IC11_GetSource>
34182e34:	4602      	mov	r2, r0
34182e36:	687b      	ldr	r3, [r7, #4]
34182e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
34182e3a:	4619      	mov	r1, r3
34182e3c:	4610      	mov	r0, r2
34182e3e:	f000 fc63 	bl	34183708 <RCC_IC_CheckPLLSources>
34182e42:	4603      	mov	r3, r0
34182e44:	2b01      	cmp	r3, #1
34182e46:	d001      	beq.n	34182e4c <HAL_RCC_ClockConfig+0x250>
      {
        return HAL_ERROR;
34182e48:	2301      	movs	r3, #1
34182e4a:	e0d3      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
      }

      /* Configure IC2, IC6 and IC11 sources and dividers */
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34182e4c:	687b      	ldr	r3, [r7, #4]
34182e4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34182e50:	687b      	ldr	r3, [r7, #4]
34182e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34182e54:	3b01      	subs	r3, #1
34182e56:	041b      	lsls	r3, r3, #16
34182e58:	4914      	ldr	r1, [pc, #80]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182e5a:	4313      	orrs	r3, r2
34182e5c:	f8c1 30c8 	str.w	r3, [r1, #200]	@ 0xc8
                ((pRCC_ClkInitStruct->IC2Selection.ClockDivider - 1U) << RCC_IC2CFGR_IC2INT_Pos));
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34182e60:	687b      	ldr	r3, [r7, #4]
34182e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
34182e64:	687b      	ldr	r3, [r7, #4]
34182e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34182e68:	3b01      	subs	r3, #1
34182e6a:	041b      	lsls	r3, r3, #16
34182e6c:	490f      	ldr	r1, [pc, #60]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182e6e:	4313      	orrs	r3, r2
34182e70:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
                ((pRCC_ClkInitStruct->IC6Selection.ClockDivider - 1U) << RCC_IC6CFGR_IC6INT_Pos));
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34182e74:	687b      	ldr	r3, [r7, #4]
34182e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34182e78:	687b      	ldr	r3, [r7, #4]
34182e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34182e7c:	3b01      	subs	r3, #1
34182e7e:	041b      	lsls	r3, r3, #16
34182e80:	490a      	ldr	r1, [pc, #40]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182e82:	4313      	orrs	r3, r2
34182e84:	f8c1 30ec 	str.w	r3, [r1, #236]	@ 0xec
                ((pRCC_ClkInitStruct->IC11Selection.ClockDivider - 1U) << RCC_IC11CFGR_IC11INT_Pos));

      /* Require to have IC2, IC6 and IC11 outputs enabled */
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34182e88:	4b08      	ldr	r3, [pc, #32]	@ (34182eac <HAL_RCC_ClockConfig+0x2b0>)
34182e8a:	f240 4222 	movw	r2, #1058	@ 0x422
34182e8e:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
34182e92:	e016      	b.n	34182ec2 <HAL_RCC_ClockConfig+0x2c6>
    }
    /* HSI is selected as System bus clock source */
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34182e94:	687b      	ldr	r3, [r7, #4]
34182e96:	689b      	ldr	r3, [r3, #8]
34182e98:	2b00      	cmp	r3, #0
34182e9a:	d10b      	bne.n	34182eb4 <HAL_RCC_ClockConfig+0x2b8>
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
34182e9c:	f7ff f884 	bl	34181fa8 <LL_RCC_HSI_IsReady>
34182ea0:	4603      	mov	r3, r0
34182ea2:	2b00      	cmp	r3, #0
34182ea4:	d10d      	bne.n	34182ec2 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34182ea6:	2301      	movs	r3, #1
34182ea8:	e0a4      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
34182eaa:	bf00      	nop
34182eac:	56028000 	.word	0x56028000
34182eb0:	341c0000 	.word	0x341c0000
    }
    /* MSI is selected as System bus clock source */
    else
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
34182eb4:	f7ff f8e0 	bl	34182078 <LL_RCC_MSI_IsReady>
34182eb8:	4603      	mov	r3, r0
34182eba:	2b00      	cmp	r3, #0
34182ebc:	d101      	bne.n	34182ec2 <HAL_RCC_ClockConfig+0x2c6>
      {
        return HAL_ERROR;
34182ebe:	2301      	movs	r3, #1
34182ec0:	e098      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
      }
    }

    /* Switch the system bus clocks */
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34182ec2:	4b4e      	ldr	r3, [pc, #312]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182ec4:	6a1b      	ldr	r3, [r3, #32]
34182ec6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34182eca:	687b      	ldr	r3, [r7, #4]
34182ecc:	689b      	ldr	r3, [r3, #8]
34182ece:	494b      	ldr	r1, [pc, #300]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182ed0:	4313      	orrs	r3, r2
34182ed2:	620b      	str	r3, [r1, #32]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34182ed4:	f7fe fc9c 	bl	34181810 <HAL_GetTick>
34182ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34182eda:	e00a      	b.n	34182ef2 <HAL_RCC_ClockConfig+0x2f6>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34182edc:	f7fe fc98 	bl	34181810 <HAL_GetTick>
34182ee0:	4602      	mov	r2, r0
34182ee2:	68fb      	ldr	r3, [r7, #12]
34182ee4:	1ad3      	subs	r3, r2, r3
34182ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
34182eea:	4293      	cmp	r3, r2
34182eec:	d901      	bls.n	34182ef2 <HAL_RCC_ClockConfig+0x2f6>
      {
        return HAL_TIMEOUT;
34182eee:	2303      	movs	r3, #3
34182ef0:	e080      	b.n	34182ff4 <HAL_RCC_ClockConfig+0x3f8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34182ef2:	f7ff f957 	bl	341821a4 <LL_RCC_GetSysClkSource>
34182ef6:	4602      	mov	r2, r0
34182ef8:	687b      	ldr	r3, [r7, #4]
34182efa:	689b      	ldr	r3, [r3, #8]
34182efc:	011b      	lsls	r3, r3, #4
34182efe:	429a      	cmp	r2, r3
34182f00:	d1ec      	bne.n	34182edc <HAL_RCC_ClockConfig+0x2e0>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34182f02:	687b      	ldr	r3, [r7, #4]
34182f04:	681b      	ldr	r3, [r3, #0]
34182f06:	f003 0304 	and.w	r3, r3, #4
34182f0a:	2b00      	cmp	r3, #0
34182f0c:	d010      	beq.n	34182f30 <HAL_RCC_ClockConfig+0x334>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34182f0e:	687b      	ldr	r3, [r7, #4]
34182f10:	68da      	ldr	r2, [r3, #12]
34182f12:	4b3a      	ldr	r3, [pc, #232]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f16:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34182f1a:	429a      	cmp	r2, r3
34182f1c:	d208      	bcs.n	34182f30 <HAL_RCC_ClockConfig+0x334>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34182f1e:	4b37      	ldr	r3, [pc, #220]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f22:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
34182f26:	687b      	ldr	r3, [r7, #4]
34182f28:	68db      	ldr	r3, [r3, #12]
34182f2a:	4934      	ldr	r1, [pc, #208]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f2c:	4313      	orrs	r3, r2
34182f2e:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34182f30:	687b      	ldr	r3, [r7, #4]
34182f32:	681b      	ldr	r3, [r3, #0]
34182f34:	f003 0308 	and.w	r3, r3, #8
34182f38:	2b00      	cmp	r3, #0
34182f3a:	d010      	beq.n	34182f5e <HAL_RCC_ClockConfig+0x362>
  {
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34182f3c:	687b      	ldr	r3, [r7, #4]
34182f3e:	691a      	ldr	r2, [r3, #16]
34182f40:	4b2e      	ldr	r3, [pc, #184]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f44:	f003 0307 	and.w	r3, r3, #7
34182f48:	429a      	cmp	r2, r3
34182f4a:	d208      	bcs.n	34182f5e <HAL_RCC_ClockConfig+0x362>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34182f4c:	4b2b      	ldr	r3, [pc, #172]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f50:	f023 0207 	bic.w	r2, r3, #7
34182f54:	687b      	ldr	r3, [r7, #4]
34182f56:	691b      	ldr	r3, [r3, #16]
34182f58:	4928      	ldr	r1, [pc, #160]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f5a:	4313      	orrs	r3, r2
34182f5c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34182f5e:	687b      	ldr	r3, [r7, #4]
34182f60:	681b      	ldr	r3, [r3, #0]
34182f62:	f003 0310 	and.w	r3, r3, #16
34182f66:	2b00      	cmp	r3, #0
34182f68:	d010      	beq.n	34182f8c <HAL_RCC_ClockConfig+0x390>
  {
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34182f6a:	687b      	ldr	r3, [r7, #4]
34182f6c:	695a      	ldr	r2, [r3, #20]
34182f6e:	4b23      	ldr	r3, [pc, #140]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34182f76:	429a      	cmp	r2, r3
34182f78:	d208      	bcs.n	34182f8c <HAL_RCC_ClockConfig+0x390>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34182f7a:	4b20      	ldr	r3, [pc, #128]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182f7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
34182f82:	687b      	ldr	r3, [r7, #4]
34182f84:	695b      	ldr	r3, [r3, #20]
34182f86:	491d      	ldr	r1, [pc, #116]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f88:	4313      	orrs	r3, r2
34182f8a:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34182f8c:	687b      	ldr	r3, [r7, #4]
34182f8e:	681b      	ldr	r3, [r3, #0]
34182f90:	f003 0320 	and.w	r3, r3, #32
34182f94:	2b00      	cmp	r3, #0
34182f96:	d010      	beq.n	34182fba <HAL_RCC_ClockConfig+0x3be>
  {
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34182f98:	687b      	ldr	r3, [r7, #4]
34182f9a:	699a      	ldr	r2, [r3, #24]
34182f9c:	4b17      	ldr	r3, [pc, #92]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182fa0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34182fa4:	429a      	cmp	r2, r3
34182fa6:	d208      	bcs.n	34182fba <HAL_RCC_ClockConfig+0x3be>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34182fa8:	4b14      	ldr	r3, [pc, #80]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182fac:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
34182fb0:	687b      	ldr	r3, [r7, #4]
34182fb2:	699b      	ldr	r3, [r3, #24]
34182fb4:	4911      	ldr	r1, [pc, #68]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182fb6:	4313      	orrs	r3, r2
34182fb8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34182fba:	687b      	ldr	r3, [r7, #4]
34182fbc:	681b      	ldr	r3, [r3, #0]
34182fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34182fc2:	2b00      	cmp	r3, #0
34182fc4:	d010      	beq.n	34182fe8 <HAL_RCC_ClockConfig+0x3ec>
  {
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34182fc6:	687b      	ldr	r3, [r7, #4]
34182fc8:	69da      	ldr	r2, [r3, #28]
34182fca:	4b0c      	ldr	r3, [pc, #48]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182fce:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34182fd2:	429a      	cmp	r2, r3
34182fd4:	d208      	bcs.n	34182fe8 <HAL_RCC_ClockConfig+0x3ec>
    {
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34182fd6:	4b09      	ldr	r3, [pc, #36]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34182fda:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34182fde:	687b      	ldr	r3, [r7, #4]
34182fe0:	69db      	ldr	r3, [r3, #28]
34182fe2:	4906      	ldr	r1, [pc, #24]	@ (34182ffc <HAL_RCC_ClockConfig+0x400>)
34182fe4:	4313      	orrs	r3, r2
34182fe6:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
34182fe8:	4b05      	ldr	r3, [pc, #20]	@ (34183000 <HAL_RCC_ClockConfig+0x404>)
34182fea:	681b      	ldr	r3, [r3, #0]
34182fec:	4618      	mov	r0, r3
34182fee:	f7fe fbc5 	bl	3418177c <HAL_InitTick>
34182ff2:	4603      	mov	r3, r0
}
34182ff4:	4618      	mov	r0, r3
34182ff6:	3710      	adds	r7, #16
34182ff8:	46bd      	mov	sp, r7
34182ffa:	bd80      	pop	{r7, pc}
34182ffc:	56028000 	.word	0x56028000
34183000:	341c0004 	.word	0x341c0004

34183004 <HAL_RCC_GetCpuClockFreq>:
  *         will be incorrect.
  *
  * @retval CPUCLK frequency
  */
uint32_t HAL_RCC_GetCpuClockFreq(void)
{
34183004:	b580      	push	{r7, lr}
34183006:	b082      	sub	sp, #8
34183008:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
3418300a:	2300      	movs	r3, #0
3418300c:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetCpuClkSource())
3418300e:	f7ff f8bb 	bl	34182188 <LL_RCC_GetCpuClkSource>
34183012:	4603      	mov	r3, r0
34183014:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34183018:	d025      	beq.n	34183066 <HAL_RCC_GetCpuClockFreq+0x62>
3418301a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3418301e:	d860      	bhi.n	341830e2 <HAL_RCC_GetCpuClockFreq+0xde>
34183020:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34183024:	d01c      	beq.n	34183060 <HAL_RCC_GetCpuClockFreq+0x5c>
34183026:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418302a:	d85a      	bhi.n	341830e2 <HAL_RCC_GetCpuClockFreq+0xde>
3418302c:	2b00      	cmp	r3, #0
3418302e:	d003      	beq.n	34183038 <HAL_RCC_GetCpuClockFreq+0x34>
34183030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34183034:	d009      	beq.n	3418304a <HAL_RCC_GetCpuClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34183036:	e054      	b.n	341830e2 <HAL_RCC_GetCpuClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34183038:	f7fe ffdc 	bl	34181ff4 <LL_RCC_HSI_GetDivider>
3418303c:	4603      	mov	r3, r0
3418303e:	09db      	lsrs	r3, r3, #7
34183040:	4a2b      	ldr	r2, [pc, #172]	@ (341830f0 <HAL_RCC_GetCpuClockFreq+0xec>)
34183042:	fa22 f303 	lsr.w	r3, r2, r3
34183046:	607b      	str	r3, [r7, #4]
      break;
34183048:	e04c      	b.n	341830e4 <HAL_RCC_GetCpuClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418304a:	f7ff f83b 	bl	341820c4 <LL_RCC_MSI_GetFrequency>
3418304e:	4603      	mov	r3, r0
34183050:	2b00      	cmp	r3, #0
34183052:	d102      	bne.n	3418305a <HAL_RCC_GetCpuClockFreq+0x56>
        frequency = MSI_VALUE;
34183054:	4b27      	ldr	r3, [pc, #156]	@ (341830f4 <HAL_RCC_GetCpuClockFreq+0xf0>)
34183056:	607b      	str	r3, [r7, #4]
      break;
34183058:	e044      	b.n	341830e4 <HAL_RCC_GetCpuClockFreq+0xe0>
        frequency = 16000000UL;
3418305a:	4b27      	ldr	r3, [pc, #156]	@ (341830f8 <HAL_RCC_GetCpuClockFreq+0xf4>)
3418305c:	607b      	str	r3, [r7, #4]
      break;
3418305e:	e041      	b.n	341830e4 <HAL_RCC_GetCpuClockFreq+0xe0>
      frequency = HSE_VALUE;
34183060:	4b26      	ldr	r3, [pc, #152]	@ (341830fc <HAL_RCC_GetCpuClockFreq+0xf8>)
34183062:	607b      	str	r3, [r7, #4]
      break;
34183064:	e03e      	b.n	341830e4 <HAL_RCC_GetCpuClockFreq+0xe0>
      ic_divider = LL_RCC_IC1_GetDivider();
34183066:	f7ff f99f 	bl	341823a8 <LL_RCC_IC1_GetDivider>
3418306a:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC1_GetSource())
3418306c:	f7ff f98e 	bl	3418238c <LL_RCC_IC1_GetSource>
34183070:	4603      	mov	r3, r0
34183072:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183076:	d029      	beq.n	341830cc <HAL_RCC_GetCpuClockFreq+0xc8>
34183078:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418307c:	d82f      	bhi.n	341830de <HAL_RCC_GetCpuClockFreq+0xda>
3418307e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183082:	d01a      	beq.n	341830ba <HAL_RCC_GetCpuClockFreq+0xb6>
34183084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183088:	d829      	bhi.n	341830de <HAL_RCC_GetCpuClockFreq+0xda>
3418308a:	2b00      	cmp	r3, #0
3418308c:	d003      	beq.n	34183096 <HAL_RCC_GetCpuClockFreq+0x92>
3418308e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183092:	d009      	beq.n	341830a8 <HAL_RCC_GetCpuClockFreq+0xa4>
          break;
34183094:	e023      	b.n	341830de <HAL_RCC_GetCpuClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34183096:	f004 feab 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418309a:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
3418309c:	687a      	ldr	r2, [r7, #4]
3418309e:	683b      	ldr	r3, [r7, #0]
341830a0:	fbb2 f3f3 	udiv	r3, r2, r3
341830a4:	607b      	str	r3, [r7, #4]
          break;
341830a6:	e01b      	b.n	341830e0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
341830a8:	f004 fee8 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341830ac:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
341830ae:	687a      	ldr	r2, [r7, #4]
341830b0:	683b      	ldr	r3, [r7, #0]
341830b2:	fbb2 f3f3 	udiv	r3, r2, r3
341830b6:	607b      	str	r3, [r7, #4]
          break;
341830b8:	e012      	b.n	341830e0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
341830ba:	f004 ff25 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
341830be:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
341830c0:	687a      	ldr	r2, [r7, #4]
341830c2:	683b      	ldr	r3, [r7, #0]
341830c4:	fbb2 f3f3 	udiv	r3, r2, r3
341830c8:	607b      	str	r3, [r7, #4]
          break;
341830ca:	e009      	b.n	341830e0 <HAL_RCC_GetCpuClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
341830cc:	f004 ff62 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
341830d0:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
341830d2:	687a      	ldr	r2, [r7, #4]
341830d4:	683b      	ldr	r3, [r7, #0]
341830d6:	fbb2 f3f3 	udiv	r3, r2, r3
341830da:	607b      	str	r3, [r7, #4]
          break;
341830dc:	e000      	b.n	341830e0 <HAL_RCC_GetCpuClockFreq+0xdc>
          break;
341830de:	bf00      	nop
      break;
341830e0:	e000      	b.n	341830e4 <HAL_RCC_GetCpuClockFreq+0xe0>
      break;
341830e2:	bf00      	nop
  }

  return frequency;
341830e4:	687b      	ldr	r3, [r7, #4]
}
341830e6:	4618      	mov	r0, r3
341830e8:	3708      	adds	r7, #8
341830ea:	46bd      	mov	sp, r7
341830ec:	bd80      	pop	{r7, pc}
341830ee:	bf00      	nop
341830f0:	03d09000 	.word	0x03d09000
341830f4:	003d0900 	.word	0x003d0900
341830f8:	00f42400 	.word	0x00f42400
341830fc:	02dc6c00 	.word	0x02dc6c00

34183100 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34183100:	b580      	push	{r7, lr}
34183102:	b082      	sub	sp, #8
34183104:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34183106:	2300      	movs	r3, #0
34183108:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
3418310a:	f7ff f84b 	bl	341821a4 <LL_RCC_GetSysClkSource>
3418310e:	4603      	mov	r3, r0
34183110:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183114:	d025      	beq.n	34183162 <HAL_RCC_GetSysClockFreq+0x62>
34183116:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418311a:	d860      	bhi.n	341831de <HAL_RCC_GetSysClockFreq+0xde>
3418311c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183120:	d01c      	beq.n	3418315c <HAL_RCC_GetSysClockFreq+0x5c>
34183122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183126:	d85a      	bhi.n	341831de <HAL_RCC_GetSysClockFreq+0xde>
34183128:	2b00      	cmp	r3, #0
3418312a:	d003      	beq.n	34183134 <HAL_RCC_GetSysClockFreq+0x34>
3418312c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183130:	d009      	beq.n	34183146 <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34183132:	e054      	b.n	341831de <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34183134:	f7fe ff5e 	bl	34181ff4 <LL_RCC_HSI_GetDivider>
34183138:	4603      	mov	r3, r0
3418313a:	09db      	lsrs	r3, r3, #7
3418313c:	4a2b      	ldr	r2, [pc, #172]	@ (341831ec <HAL_RCC_GetSysClockFreq+0xec>)
3418313e:	fa22 f303 	lsr.w	r3, r2, r3
34183142:	607b      	str	r3, [r7, #4]
      break;
34183144:	e04c      	b.n	341831e0 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34183146:	f7fe ffbd 	bl	341820c4 <LL_RCC_MSI_GetFrequency>
3418314a:	4603      	mov	r3, r0
3418314c:	2b00      	cmp	r3, #0
3418314e:	d102      	bne.n	34183156 <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34183150:	4b27      	ldr	r3, [pc, #156]	@ (341831f0 <HAL_RCC_GetSysClockFreq+0xf0>)
34183152:	607b      	str	r3, [r7, #4]
      break;
34183154:	e044      	b.n	341831e0 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34183156:	4b27      	ldr	r3, [pc, #156]	@ (341831f4 <HAL_RCC_GetSysClockFreq+0xf4>)
34183158:	607b      	str	r3, [r7, #4]
      break;
3418315a:	e041      	b.n	341831e0 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
3418315c:	4b26      	ldr	r3, [pc, #152]	@ (341831f8 <HAL_RCC_GetSysClockFreq+0xf8>)
3418315e:	607b      	str	r3, [r7, #4]
      break;
34183160:	e03e      	b.n	341831e0 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34183162:	f7ff f93f 	bl	341823e4 <LL_RCC_IC2_GetDivider>
34183166:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34183168:	f7ff f92e 	bl	341823c8 <LL_RCC_IC2_GetSource>
3418316c:	4603      	mov	r3, r0
3418316e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183172:	d029      	beq.n	341831c8 <HAL_RCC_GetSysClockFreq+0xc8>
34183174:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183178:	d82f      	bhi.n	341831da <HAL_RCC_GetSysClockFreq+0xda>
3418317a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418317e:	d01a      	beq.n	341831b6 <HAL_RCC_GetSysClockFreq+0xb6>
34183180:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183184:	d829      	bhi.n	341831da <HAL_RCC_GetSysClockFreq+0xda>
34183186:	2b00      	cmp	r3, #0
34183188:	d003      	beq.n	34183192 <HAL_RCC_GetSysClockFreq+0x92>
3418318a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418318e:	d009      	beq.n	341831a4 <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34183190:	e023      	b.n	341831da <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34183192:	f004 fe2d 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34183196:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34183198:	687a      	ldr	r2, [r7, #4]
3418319a:	683b      	ldr	r3, [r7, #0]
3418319c:	fbb2 f3f3 	udiv	r3, r2, r3
341831a0:	607b      	str	r3, [r7, #4]
          break;
341831a2:	e01b      	b.n	341831dc <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
341831a4:	f004 fe6a 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341831a8:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
341831aa:	687a      	ldr	r2, [r7, #4]
341831ac:	683b      	ldr	r3, [r7, #0]
341831ae:	fbb2 f3f3 	udiv	r3, r2, r3
341831b2:	607b      	str	r3, [r7, #4]
          break;
341831b4:	e012      	b.n	341831dc <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
341831b6:	f004 fea7 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
341831ba:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
341831bc:	687a      	ldr	r2, [r7, #4]
341831be:	683b      	ldr	r3, [r7, #0]
341831c0:	fbb2 f3f3 	udiv	r3, r2, r3
341831c4:	607b      	str	r3, [r7, #4]
          break;
341831c6:	e009      	b.n	341831dc <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
341831c8:	f004 fee4 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
341831cc:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
341831ce:	687a      	ldr	r2, [r7, #4]
341831d0:	683b      	ldr	r3, [r7, #0]
341831d2:	fbb2 f3f3 	udiv	r3, r2, r3
341831d6:	607b      	str	r3, [r7, #4]
          break;
341831d8:	e000      	b.n	341831dc <HAL_RCC_GetSysClockFreq+0xdc>
          break;
341831da:	bf00      	nop
      break;
341831dc:	e000      	b.n	341831e0 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
341831de:	bf00      	nop
  }

  return frequency;
341831e0:	687b      	ldr	r3, [r7, #4]
}
341831e2:	4618      	mov	r0, r3
341831e4:	3708      	adds	r7, #8
341831e6:	46bd      	mov	sp, r7
341831e8:	bd80      	pop	{r7, pc}
341831ea:	bf00      	nop
341831ec:	03d09000 	.word	0x03d09000
341831f0:	003d0900 	.word	0x003d0900
341831f4:	00f42400 	.word	0x00f42400
341831f8:	02dc6c00 	.word	0x02dc6c00

341831fc <HAL_RCC_GetClockConfig>:
  * @param  pRCC_ClkInitStruct  Pointer to an RCC_ClkInitTypeDef structure that
  *         will return the configuration.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct)
{
341831fc:	b480      	push	{r7}
341831fe:	b085      	sub	sp, #20
34183200:	af00      	add	r7, sp, #0
34183202:	6078      	str	r0, [r7, #4]
  uint32_t cfgr_value;

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
34183204:	687b      	ldr	r3, [r7, #4]
34183206:	227f      	movs	r2, #127	@ 0x7f
34183208:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK   | \
                                  RCC_CLOCKTYPE_PCLK1  | RCC_CLOCKTYPE_PCLK2 | \
                                  RCC_CLOCKTYPE_PCLK4  | RCC_CLOCKTYPE_PCLK5;

  /* Get the configuration register 1 value */
  cfgr_value = RCC->CFGR1;
3418320a:	4b36      	ldr	r3, [pc, #216]	@ (341832e4 <HAL_RCC_GetClockConfig+0xe8>)
3418320c:	6a1b      	ldr	r3, [r3, #32]
3418320e:	60fb      	str	r3, [r7, #12]

  /* Get the active CPU source -----------------------------------------------*/
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
34183210:	68fb      	ldr	r3, [r7, #12]
34183212:	091b      	lsrs	r3, r3, #4
34183214:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
34183218:	687b      	ldr	r3, [r7, #4]
3418321a:	605a      	str	r2, [r3, #4]

  /* Get the active SYSCLK bus source ----------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
3418321c:	68fb      	ldr	r3, [r7, #12]
3418321e:	091b      	lsrs	r3, r3, #4
34183220:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
34183224:	687b      	ldr	r3, [r7, #4]
34183226:	609a      	str	r2, [r3, #8]

  /* Get the configuration register 2 value */
  cfgr_value = RCC->CFGR2;
34183228:	4b2e      	ldr	r3, [pc, #184]	@ (341832e4 <HAL_RCC_GetClockConfig+0xe8>)
3418322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418322c:	60fb      	str	r3, [r7, #12]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
3418322e:	68fb      	ldr	r3, [r7, #12]
34183230:	f403 02e0 	and.w	r2, r3, #7340032	@ 0x700000
34183234:	687b      	ldr	r3, [r7, #4]
34183236:	60da      	str	r2, [r3, #12]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
34183238:	68fb      	ldr	r3, [r7, #12]
3418323a:	f003 0207 	and.w	r2, r3, #7
3418323e:	687b      	ldr	r3, [r7, #4]
34183240:	611a      	str	r2, [r3, #16]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
34183242:	68fb      	ldr	r3, [r7, #12]
34183244:	f003 0270 	and.w	r2, r3, #112	@ 0x70
34183248:	687b      	ldr	r3, [r7, #4]
3418324a:	615a      	str	r2, [r3, #20]

  /* Get the APB4 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
3418324c:	68fb      	ldr	r3, [r7, #12]
3418324e:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
34183252:	687b      	ldr	r3, [r7, #4]
34183254:	619a      	str	r2, [r3, #24]

  /* Get the APB5 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34183256:	68fb      	ldr	r3, [r7, #12]
34183258:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
3418325c:	687b      	ldr	r3, [r7, #4]
3418325e:	61da      	str	r2, [r3, #28]

  /* Get the IC1 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC1CFGR;
34183260:	4b20      	ldr	r3, [pc, #128]	@ (341832e4 <HAL_RCC_GetClockConfig+0xe8>)
34183262:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34183266:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34183268:	68fb      	ldr	r3, [r7, #12]
3418326a:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418326e:	687b      	ldr	r3, [r7, #4]
34183270:	621a      	str	r2, [r3, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
34183272:	68fb      	ldr	r3, [r7, #12]
34183274:	0c1b      	lsrs	r3, r3, #16
34183276:	b2db      	uxtb	r3, r3
34183278:	1c5a      	adds	r2, r3, #1
3418327a:	687b      	ldr	r3, [r7, #4]
3418327c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Get the IC2 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC2CFGR;
3418327e:	4b19      	ldr	r3, [pc, #100]	@ (341832e4 <HAL_RCC_GetClockConfig+0xe8>)
34183280:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34183284:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34183286:	68fb      	ldr	r3, [r7, #12]
34183288:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
3418328c:	687b      	ldr	r3, [r7, #4]
3418328e:	629a      	str	r2, [r3, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34183290:	68fb      	ldr	r3, [r7, #12]
34183292:	0c1b      	lsrs	r3, r3, #16
34183294:	b2db      	uxtb	r3, r3
34183296:	1c5a      	adds	r2, r3, #1
34183298:	687b      	ldr	r3, [r7, #4]
3418329a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the IC6 configuration -----------------------------------------------*/
  cfgr_value = RCC->IC6CFGR;
3418329c:	4b11      	ldr	r3, [pc, #68]	@ (341832e4 <HAL_RCC_GetClockConfig+0xe8>)
3418329e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
341832a2:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
341832a4:	68fb      	ldr	r3, [r7, #12]
341832a6:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
341832aa:	687b      	ldr	r3, [r7, #4]
341832ac:	631a      	str	r2, [r3, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
341832ae:	68fb      	ldr	r3, [r7, #12]
341832b0:	0c1b      	lsrs	r3, r3, #16
341832b2:	b2db      	uxtb	r3, r3
341832b4:	1c5a      	adds	r2, r3, #1
341832b6:	687b      	ldr	r3, [r7, #4]
341832b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the IC11 configuration ----------------------------------------------*/
  cfgr_value = RCC->IC11CFGR;
341832ba:	4b0a      	ldr	r3, [pc, #40]	@ (341832e4 <HAL_RCC_GetClockConfig+0xe8>)
341832bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
341832c0:	60fb      	str	r3, [r7, #12]
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
341832c2:	68fb      	ldr	r3, [r7, #12]
341832c4:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
341832c8:	687b      	ldr	r3, [r7, #4]
341832ca:	639a      	str	r2, [r3, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
341832cc:	68fb      	ldr	r3, [r7, #12]
341832ce:	0c1b      	lsrs	r3, r3, #16
341832d0:	b2db      	uxtb	r3, r3
341832d2:	1c5a      	adds	r2, r3, #1
341832d4:	687b      	ldr	r3, [r7, #4]
341832d6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
341832d8:	bf00      	nop
341832da:	3714      	adds	r7, #20
341832dc:	46bd      	mov	sp, r7
341832de:	f85d 7b04 	ldr.w	r7, [sp], #4
341832e2:	4770      	bx	lr
341832e4:	56028000 	.word	0x56028000

341832e8 <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
341832e8:	b580      	push	{r7, lr}
341832ea:	b088      	sub	sp, #32
341832ec:	af00      	add	r7, sp, #0
341832ee:	6078      	str	r0, [r7, #4]
341832f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_cfgr1_reg;
  __IO uint32_t *p_rcc_pll_cfgr2_reg;
  __IO uint32_t *p_rcc_pll_cfgr3_reg;
  HAL_StatusTypeDef ret = HAL_OK;
341832f2:	2300      	movs	r3, #0
341832f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
341832f6:	687b      	ldr	r3, [r7, #4]
341832f8:	011a      	lsls	r2, r3, #4
341832fa:	4b8e      	ldr	r3, [pc, #568]	@ (34183534 <RCC_PLL_Config+0x24c>)
341832fc:	4413      	add	r3, r2
341832fe:	61bb      	str	r3, [r7, #24]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34183300:	687b      	ldr	r3, [r7, #4]
34183302:	011a      	lsls	r2, r3, #4
34183304:	4b8c      	ldr	r3, [pc, #560]	@ (34183538 <RCC_PLL_Config+0x250>)
34183306:	4413      	add	r3, r2
34183308:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
3418330a:	687b      	ldr	r3, [r7, #4]
3418330c:	011a      	lsls	r2, r3, #4
3418330e:	4b8b      	ldr	r3, [pc, #556]	@ (3418353c <RCC_PLL_Config+0x254>)
34183310:	4413      	add	r3, r2
34183312:	613b      	str	r3, [r7, #16]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */
  if (pPLLInit->PLLState == RCC_PLL_ON)
34183314:	683b      	ldr	r3, [r7, #0]
34183316:	681b      	ldr	r3, [r3, #0]
34183318:	2b02      	cmp	r3, #2
3418331a:	f040 8091 	bne.w	34183440 <RCC_PLL_Config+0x158>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
3418331e:	4a88      	ldr	r2, [pc, #544]	@ (34183540 <RCC_PLL_Config+0x258>)
34183320:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183324:	687b      	ldr	r3, [r7, #4]
34183326:	fa01 f303 	lsl.w	r3, r1, r3
3418332a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
3418332e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34183330:	f7fe fa6e 	bl	34181810 <HAL_GetTick>
34183334:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183336:	e008      	b.n	3418334a <RCC_PLL_Config+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183338:	f7fe fa6a 	bl	34181810 <HAL_GetTick>
3418333c:	4602      	mov	r2, r0
3418333e:	68fb      	ldr	r3, [r7, #12]
34183340:	1ad3      	subs	r3, r2, r3
34183342:	2b01      	cmp	r3, #1
34183344:	d901      	bls.n	3418334a <RCC_PLL_Config+0x62>
      {
        return HAL_TIMEOUT;
34183346:	2303      	movs	r3, #3
34183348:	e0f0      	b.n	3418352c <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418334a:	4b7d      	ldr	r3, [pc, #500]	@ (34183540 <RCC_PLL_Config+0x258>)
3418334c:	685a      	ldr	r2, [r3, #4]
3418334e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183352:	687b      	ldr	r3, [r7, #4]
34183354:	fa01 f303 	lsl.w	r3, r1, r3
34183358:	401a      	ands	r2, r3
3418335a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418335e:	687b      	ldr	r3, [r7, #4]
34183360:	fa01 f303 	lsl.w	r3, r1, r3
34183364:	429a      	cmp	r2, r3
34183366:	d0e7      	beq.n	34183338 <RCC_PLL_Config+0x50>
      }
    }

    /* Ensure PLLxMODSSDIS='1' */
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34183368:	693b      	ldr	r3, [r7, #16]
3418336a:	681b      	ldr	r3, [r3, #0]
3418336c:	f043 0204 	orr.w	r2, r3, #4
34183370:	693b      	ldr	r3, [r7, #16]
34183372:	601a      	str	r2, [r3, #0]

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34183374:	69bb      	ldr	r3, [r7, #24]
34183376:	681b      	ldr	r3, [r3, #0]
34183378:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
3418337c:	69bb      	ldr	r3, [r7, #24]
3418337e:	601a      	str	r2, [r3, #0]

    /* Configure the PLLx clock source, multiplication and division factors. */
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34183380:	69bb      	ldr	r3, [r7, #24]
34183382:	681a      	ldr	r2, [r3, #0]
34183384:	4b6f      	ldr	r3, [pc, #444]	@ (34183544 <RCC_PLL_Config+0x25c>)
34183386:	4013      	ands	r3, r2
34183388:	683a      	ldr	r2, [r7, #0]
3418338a:	6851      	ldr	r1, [r2, #4]
3418338c:	683a      	ldr	r2, [r7, #0]
3418338e:	6892      	ldr	r2, [r2, #8]
34183390:	0512      	lsls	r2, r2, #20
34183392:	4311      	orrs	r1, r2
34183394:	683a      	ldr	r2, [r7, #0]
34183396:	6912      	ldr	r2, [r2, #16]
34183398:	0212      	lsls	r2, r2, #8
3418339a:	430a      	orrs	r2, r1
3418339c:	431a      	orrs	r2, r3
3418339e:	69bb      	ldr	r3, [r7, #24]
341833a0:	601a      	str	r2, [r3, #0]
               (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
                | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)));
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
341833a2:	693b      	ldr	r3, [r7, #16]
341833a4:	681b      	ldr	r3, [r3, #0]
341833a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
341833aa:	683b      	ldr	r3, [r7, #0]
341833ac:	695b      	ldr	r3, [r3, #20]
341833ae:	06d9      	lsls	r1, r3, #27
341833b0:	683b      	ldr	r3, [r7, #0]
341833b2:	699b      	ldr	r3, [r3, #24]
341833b4:	061b      	lsls	r3, r3, #24
341833b6:	430b      	orrs	r3, r1
341833b8:	431a      	orrs	r2, r3
341833ba:	693b      	ldr	r3, [r7, #16]
341833bc:	601a      	str	r2, [r3, #0]
               ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)));

    /* Configure PLLx DIVNFRAC */
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
341833be:	697b      	ldr	r3, [r7, #20]
341833c0:	681b      	ldr	r3, [r3, #0]
341833c2:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
341833c6:	683b      	ldr	r3, [r7, #0]
341833c8:	68db      	ldr	r3, [r3, #12]
341833ca:	431a      	orrs	r2, r3
341833cc:	697b      	ldr	r3, [r7, #20]
341833ce:	601a      	str	r2, [r3, #0]
               pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);

    /* Clear PLLxMODDSEN (Also clear in Fractional Mode to ensure the latch of updated FRAC value when set again) */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
341833d0:	693b      	ldr	r3, [r7, #16]
341833d2:	681b      	ldr	r3, [r3, #0]
341833d4:	f023 0208 	bic.w	r2, r3, #8
341833d8:	693b      	ldr	r3, [r7, #16]
341833da:	601a      	str	r2, [r3, #0]

    /* Fractional Mode specificities Management */
    if (pPLLInit->PLLFractional != 0U)
341833dc:	683b      	ldr	r3, [r7, #0]
341833de:	68db      	ldr	r3, [r3, #12]
341833e0:	2b00      	cmp	r3, #0
341833e2:	d005      	beq.n	341833f0 <RCC_PLL_Config+0x108>
    {
      /* Set PLLxMODDSEN and DACEN */
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
341833e4:	693b      	ldr	r3, [r7, #16]
341833e6:	681b      	ldr	r3, [r3, #0]
341833e8:	f043 020a 	orr.w	r2, r3, #10
341833ec:	693b      	ldr	r3, [r7, #16]
341833ee:	601a      	str	r2, [r3, #0]
    }

    /* Ensure PLLxMODSSRST='1' and Enable PLLx post divider output */
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
341833f0:	693b      	ldr	r3, [r7, #16]
341833f2:	681b      	ldr	r3, [r3, #0]
341833f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
341833f8:	f043 0301 	orr.w	r3, r3, #1
341833fc:	693a      	ldr	r2, [r7, #16]
341833fe:	6013      	str	r3, [r2, #0]

    /* Enable the PLLx */
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34183400:	4a4f      	ldr	r2, [pc, #316]	@ (34183540 <RCC_PLL_Config+0x258>)
34183402:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183406:	687b      	ldr	r3, [r7, #4]
34183408:	fa01 f303 	lsl.w	r3, r1, r3
3418340c:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
34183410:	f7fe f9fe 	bl	34181810 <HAL_GetTick>
34183414:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34183416:	e008      	b.n	3418342a <RCC_PLL_Config+0x142>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183418:	f7fe f9fa 	bl	34181810 <HAL_GetTick>
3418341c:	4602      	mov	r2, r0
3418341e:	68fb      	ldr	r3, [r7, #12]
34183420:	1ad3      	subs	r3, r2, r3
34183422:	2b01      	cmp	r3, #1
34183424:	d901      	bls.n	3418342a <RCC_PLL_Config+0x142>
      {
        return HAL_TIMEOUT;
34183426:	2303      	movs	r3, #3
34183428:	e080      	b.n	3418352c <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418342a:	4b45      	ldr	r3, [pc, #276]	@ (34183540 <RCC_PLL_Config+0x258>)
3418342c:	685a      	ldr	r2, [r3, #4]
3418342e:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183432:	687b      	ldr	r3, [r7, #4]
34183434:	fa01 f303 	lsl.w	r3, r1, r3
34183438:	4013      	ands	r3, r2
3418343a:	2b00      	cmp	r3, #0
3418343c:	d0ec      	beq.n	34183418 <RCC_PLL_Config+0x130>
3418343e:	e074      	b.n	3418352a <RCC_PLL_Config+0x242>
      }
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34183440:	683b      	ldr	r3, [r7, #0]
34183442:	681b      	ldr	r3, [r3, #0]
34183444:	2b03      	cmp	r3, #3
34183446:	d13b      	bne.n	341834c0 <RCC_PLL_Config+0x1d8>
  {
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));

    /* Check selected source is ready */
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34183448:	683b      	ldr	r3, [r7, #0]
3418344a:	685b      	ldr	r3, [r3, #4]
3418344c:	4618      	mov	r0, r3
3418344e:	f000 f921 	bl	34183694 <RCC_PLL_Source_IsReady>
34183452:	4603      	mov	r3, r0
34183454:	2b01      	cmp	r3, #1
34183456:	d130      	bne.n	341834ba <RCC_PLL_Config+0x1d2>
    {
      /* Ensure PLLx is disabled */
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34183458:	4a39      	ldr	r2, [pc, #228]	@ (34183540 <RCC_PLL_Config+0x258>)
3418345a:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418345e:	687b      	ldr	r3, [r7, #4]
34183460:	fa01 f303 	lsl.w	r3, r1, r3
34183464:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
34183468:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
3418346a:	f7fe f9d1 	bl	34181810 <HAL_GetTick>
3418346e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLLx is disabled */
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183470:	e008      	b.n	34183484 <RCC_PLL_Config+0x19c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34183472:	f7fe f9cd 	bl	34181810 <HAL_GetTick>
34183476:	4602      	mov	r2, r0
34183478:	68fb      	ldr	r3, [r7, #12]
3418347a:	1ad3      	subs	r3, r2, r3
3418347c:	2b01      	cmp	r3, #1
3418347e:	d901      	bls.n	34183484 <RCC_PLL_Config+0x19c>
        {
          return HAL_TIMEOUT;
34183480:	2303      	movs	r3, #3
34183482:	e053      	b.n	3418352c <RCC_PLL_Config+0x244>
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183484:	4b2e      	ldr	r3, [pc, #184]	@ (34183540 <RCC_PLL_Config+0x258>)
34183486:	685a      	ldr	r2, [r3, #4]
34183488:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418348c:	687b      	ldr	r3, [r7, #4]
3418348e:	fa01 f303 	lsl.w	r3, r1, r3
34183492:	401a      	ands	r2, r3
34183494:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183498:	687b      	ldr	r3, [r7, #4]
3418349a:	fa01 f303 	lsl.w	r3, r1, r3
3418349e:	429a      	cmp	r2, r3
341834a0:	d0e7      	beq.n	34183472 <RCC_PLL_Config+0x18a>
        }
      }

      /* Set bypass mode with selected source */
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
341834a2:	69bb      	ldr	r3, [r7, #24]
341834a4:	681b      	ldr	r3, [r3, #0]
341834a6:	f023 42f0 	bic.w	r2, r3, #2013265920	@ 0x78000000
341834aa:	683b      	ldr	r3, [r7, #0]
341834ac:	685b      	ldr	r3, [r3, #4]
341834ae:	4313      	orrs	r3, r2
341834b0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
341834b4:	69bb      	ldr	r3, [r7, #24]
341834b6:	601a      	str	r2, [r3, #0]
341834b8:	e037      	b.n	3418352a <RCC_PLL_Config+0x242>
                 (RCC_PLL1CFGR1_PLL1BYP | pPLLInit->PLLSource));
    }
    else
    {
      ret = HAL_ERROR;
341834ba:	2301      	movs	r3, #1
341834bc:	77fb      	strb	r3, [r7, #31]
341834be:	e034      	b.n	3418352a <RCC_PLL_Config+0x242>
    }
  }
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
341834c0:	683b      	ldr	r3, [r7, #0]
341834c2:	681b      	ldr	r3, [r3, #0]
341834c4:	2b01      	cmp	r3, #1
341834c6:	d130      	bne.n	3418352a <RCC_PLL_Config+0x242>
  {
    /* Disable PLLx post divider output */
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
341834c8:	693b      	ldr	r3, [r7, #16]
341834ca:	681b      	ldr	r3, [r3, #0]
341834cc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
341834d0:	693b      	ldr	r3, [r7, #16]
341834d2:	601a      	str	r2, [r3, #0]

    /* Ensure PLLx is disabled */
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
341834d4:	4a1a      	ldr	r2, [pc, #104]	@ (34183540 <RCC_PLL_Config+0x258>)
341834d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
341834da:	687b      	ldr	r3, [r7, #4]
341834dc:	fa01 f303 	lsl.w	r3, r1, r3
341834e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
341834e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
341834e6:	f7fe f993 	bl	34181810 <HAL_GetTick>
341834ea:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLx is disabled */
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
341834ec:	e008      	b.n	34183500 <RCC_PLL_Config+0x218>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
341834ee:	f7fe f98f 	bl	34181810 <HAL_GetTick>
341834f2:	4602      	mov	r2, r0
341834f4:	68fb      	ldr	r3, [r7, #12]
341834f6:	1ad3      	subs	r3, r2, r3
341834f8:	2b01      	cmp	r3, #1
341834fa:	d901      	bls.n	34183500 <RCC_PLL_Config+0x218>
      {
        return HAL_TIMEOUT;
341834fc:	2303      	movs	r3, #3
341834fe:	e015      	b.n	3418352c <RCC_PLL_Config+0x244>
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34183500:	4b0f      	ldr	r3, [pc, #60]	@ (34183540 <RCC_PLL_Config+0x258>)
34183502:	685a      	ldr	r2, [r3, #4]
34183504:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183508:	687b      	ldr	r3, [r7, #4]
3418350a:	fa01 f303 	lsl.w	r3, r1, r3
3418350e:	401a      	ands	r2, r3
34183510:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183514:	687b      	ldr	r3, [r7, #4]
34183516:	fa01 f303 	lsl.w	r3, r1, r3
3418351a:	429a      	cmp	r2, r3
3418351c:	d0e7      	beq.n	341834ee <RCC_PLL_Config+0x206>
      }
    }

    /* Clear bypass mode */
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
3418351e:	69bb      	ldr	r3, [r7, #24]
34183520:	681b      	ldr	r3, [r3, #0]
34183522:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
34183526:	69bb      	ldr	r3, [r7, #24]
34183528:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  return ret;
3418352a:	7ffb      	ldrb	r3, [r7, #31]
}
3418352c:	4618      	mov	r0, r3
3418352e:	3720      	adds	r7, #32
34183530:	46bd      	mov	sp, r7
34183532:	bd80      	pop	{r7, pc}
34183534:	56028080 	.word	0x56028080
34183538:	56028084 	.word	0x56028084
3418353c:	56028088 	.word	0x56028088
34183540:	56028000 	.word	0x56028000
34183544:	8c0000ff 	.word	0x8c0000ff

34183548 <RCC_PLL_Enable>:
  * @param  PLLnumber PLL number to enable
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Enable(uint32_t PLLnumber)
{
34183548:	b580      	push	{r7, lr}
3418354a:	b084      	sub	sp, #16
3418354c:	af00      	add	r7, sp, #0
3418354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
34183550:	2300      	movs	r3, #0
34183552:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Enable the PLLx */
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34183554:	4a11      	ldr	r2, [pc, #68]	@ (3418359c <RCC_PLL_Enable+0x54>)
34183556:	f44f 7180 	mov.w	r1, #256	@ 0x100
3418355a:	687b      	ldr	r3, [r7, #4]
3418355c:	fa01 f303 	lsl.w	r3, r1, r3
34183560:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
34183564:	f7fe f954 	bl	34181810 <HAL_GetTick>
34183568:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLx is ready */
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418356a:	e008      	b.n	3418357e <RCC_PLL_Enable+0x36>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
3418356c:	f7fe f950 	bl	34181810 <HAL_GetTick>
34183570:	4602      	mov	r2, r0
34183572:	68bb      	ldr	r3, [r7, #8]
34183574:	1ad3      	subs	r3, r2, r3
34183576:	2b01      	cmp	r3, #1
34183578:	d901      	bls.n	3418357e <RCC_PLL_Enable+0x36>
    {
      return HAL_TIMEOUT;
3418357a:	2303      	movs	r3, #3
3418357c:	e00a      	b.n	34183594 <RCC_PLL_Enable+0x4c>
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
3418357e:	4b07      	ldr	r3, [pc, #28]	@ (3418359c <RCC_PLL_Enable+0x54>)
34183580:	685a      	ldr	r2, [r3, #4]
34183582:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183586:	687b      	ldr	r3, [r7, #4]
34183588:	fa01 f303 	lsl.w	r3, r1, r3
3418358c:	4013      	ands	r3, r2
3418358e:	2b00      	cmp	r3, #0
34183590:	d0ec      	beq.n	3418356c <RCC_PLL_Enable+0x24>
    }
  }

  return ret;
34183592:	7bfb      	ldrb	r3, [r7, #15]
}
34183594:	4618      	mov	r0, r3
34183596:	3710      	adds	r7, #16
34183598:	46bd      	mov	sp, r7
3418359a:	bd80      	pop	{r7, pc}
3418359c:	56028000 	.word	0x56028000

341835a0 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
341835a0:	b480      	push	{r7}
341835a2:	b089      	sub	sp, #36	@ 0x24
341835a4:	af00      	add	r7, sp, #0
341835a6:	6078      	str	r0, [r7, #4]
341835a8:	6039      	str	r1, [r7, #0]
  __IO const uint32_t *p_rcc_pll_cfgr1_reg, *p_rcc_pll_cfgr2_reg, *p_rcc_pll_cfgr3_reg;
  uint32_t ret = 0U;
341835aa:	2300      	movs	r3, #0
341835ac:	61fb      	str	r3, [r7, #28]

  /* No assert since done in calling function */

  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
341835ae:	687b      	ldr	r3, [r7, #4]
341835b0:	011a      	lsls	r2, r3, #4
341835b2:	4b34      	ldr	r3, [pc, #208]	@ (34183684 <RCC_PLL_IsNewConfig+0xe4>)
341835b4:	4413      	add	r3, r2
341835b6:	617b      	str	r3, [r7, #20]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
341835b8:	687b      	ldr	r3, [r7, #4]
341835ba:	011a      	lsls	r2, r3, #4
341835bc:	4b32      	ldr	r3, [pc, #200]	@ (34183688 <RCC_PLL_IsNewConfig+0xe8>)
341835be:	4413      	add	r3, r2
341835c0:	613b      	str	r3, [r7, #16]
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
341835c2:	687b      	ldr	r3, [r7, #4]
341835c4:	011a      	lsls	r2, r3, #4
341835c6:	4b31      	ldr	r3, [pc, #196]	@ (3418368c <RCC_PLL_IsNewConfig+0xec>)
341835c8:	4413      	add	r3, r2
341835ca:	60fb      	str	r3, [r7, #12]

  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
341835cc:	697b      	ldr	r3, [r7, #20]
341835ce:	681b      	ldr	r3, [r3, #0]
341835d0:	f023 430c 	bic.w	r3, r3, #2348810240	@ 0x8c000000
341835d4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
341835d8:	683a      	ldr	r2, [r7, #0]
341835da:	6851      	ldr	r1, [r2, #4]
341835dc:	683a      	ldr	r2, [r7, #0]
341835de:	6892      	ldr	r2, [r2, #8]
341835e0:	0512      	lsls	r2, r2, #20
341835e2:	4311      	orrs	r1, r2
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
341835e4:	683a      	ldr	r2, [r7, #0]
341835e6:	6912      	ldr	r2, [r2, #16]
341835e8:	0212      	lsls	r2, r2, #8
341835ea:	430a      	orrs	r2, r1
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
341835ec:	4293      	cmp	r3, r2
341835ee:	d002      	beq.n	341835f6 <RCC_PLL_IsNewConfig+0x56>
  {
    ret = 1U; /* New PLL configuration */
341835f0:	2301      	movs	r3, #1
341835f2:	61fb      	str	r3, [r7, #28]
341835f4:	e03e      	b.n	34183674 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
341835f6:	693b      	ldr	r3, [r7, #16]
341835f8:	681b      	ldr	r3, [r3, #0]
341835fa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
341835fe:	683b      	ldr	r3, [r7, #0]
34183600:	68db      	ldr	r3, [r3, #12]
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34183602:	429a      	cmp	r2, r3
34183604:	d002      	beq.n	3418360c <RCC_PLL_IsNewConfig+0x6c>
  {
    ret = 1U; /* New PLL configuration */
34183606:	2301      	movs	r3, #1
34183608:	61fb      	str	r3, [r7, #28]
3418360a:	e033      	b.n	34183674 <RCC_PLL_IsNewConfig+0xd4>
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
3418360c:	68fb      	ldr	r3, [r7, #12]
3418360e:	681b      	ldr	r3, [r3, #0]
34183610:	f003 527c 	and.w	r2, r3, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34183614:	683b      	ldr	r3, [r7, #0]
34183616:	695b      	ldr	r3, [r3, #20]
34183618:	06d9      	lsls	r1, r3, #27
3418361a:	683b      	ldr	r3, [r7, #0]
3418361c:	699b      	ldr	r3, [r3, #24]
3418361e:	061b      	lsls	r3, r3, #24
34183620:	430b      	orrs	r3, r1
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34183622:	429a      	cmp	r2, r3
34183624:	d002      	beq.n	3418362c <RCC_PLL_IsNewConfig+0x8c>
  {
    ret = 1U; /* New PLL configuration */
34183626:	2301      	movs	r3, #1
34183628:	61fb      	str	r3, [r7, #28]
3418362a:	e023      	b.n	34183674 <RCC_PLL_IsNewConfig+0xd4>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
3418362c:	4b18      	ldr	r3, [pc, #96]	@ (34183690 <RCC_PLL_IsNewConfig+0xf0>)
3418362e:	685a      	ldr	r2, [r3, #4]
34183630:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183634:	687b      	ldr	r3, [r7, #4]
34183636:	fa01 f303 	lsl.w	r3, r1, r3
3418363a:	401a      	ands	r2, r3
3418363c:	f44f 7180 	mov.w	r1, #256	@ 0x100
34183640:	687b      	ldr	r3, [r7, #4]
34183642:	fa01 f303 	lsl.w	r3, r1, r3
34183646:	429a      	cmp	r2, r3
34183648:	d102      	bne.n	34183650 <RCC_PLL_IsNewConfig+0xb0>
    {
      pllState = RCC_PLL_ON;
3418364a:	2302      	movs	r3, #2
3418364c:	61bb      	str	r3, [r7, #24]
3418364e:	e00a      	b.n	34183666 <RCC_PLL_IsNewConfig+0xc6>
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34183650:	697b      	ldr	r3, [r7, #20]
34183652:	681b      	ldr	r3, [r3, #0]
34183654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34183658:	2b00      	cmp	r3, #0
3418365a:	d002      	beq.n	34183662 <RCC_PLL_IsNewConfig+0xc2>
      {
        pllState = RCC_PLL_BYPASS;
3418365c:	2303      	movs	r3, #3
3418365e:	61bb      	str	r3, [r7, #24]
34183660:	e001      	b.n	34183666 <RCC_PLL_IsNewConfig+0xc6>
      }
      else
      {
        pllState = RCC_PLL_OFF;
34183662:	2301      	movs	r3, #1
34183664:	61bb      	str	r3, [r7, #24]
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34183666:	683b      	ldr	r3, [r7, #0]
34183668:	681b      	ldr	r3, [r3, #0]
3418366a:	69ba      	ldr	r2, [r7, #24]
3418366c:	429a      	cmp	r2, r3
3418366e:	d001      	beq.n	34183674 <RCC_PLL_IsNewConfig+0xd4>
    {
      ret = 1U; /* New PLL configuration */
34183670:	2301      	movs	r3, #1
34183672:	61fb      	str	r3, [r7, #28]
    }
  }

  return ret;
34183674:	69fb      	ldr	r3, [r7, #28]
}
34183676:	4618      	mov	r0, r3
34183678:	3724      	adds	r7, #36	@ 0x24
3418367a:	46bd      	mov	sp, r7
3418367c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183680:	4770      	bx	lr
34183682:	bf00      	nop
34183684:	56028080 	.word	0x56028080
34183688:	56028084 	.word	0x56028084
3418368c:	56028088 	.word	0x56028088
34183690:	56028000 	.word	0x56028000

34183694 <RCC_PLL_Source_IsReady>:
  * @brief  Check whether the PLL source is ready
  * @param  PLLSource PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_Source_IsReady(uint32_t PLLSource)
{
34183694:	b580      	push	{r7, lr}
34183696:	b084      	sub	sp, #16
34183698:	af00      	add	r7, sp, #0
3418369a:	6078      	str	r0, [r7, #4]
  uint32_t ret = 1U;
3418369c:	2301      	movs	r3, #1
3418369e:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  switch (PLLSource)
341836a0:	687b      	ldr	r3, [r7, #4]
341836a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341836a6:	d01b      	beq.n	341836e0 <RCC_PLL_Source_IsReady+0x4c>
341836a8:	687b      	ldr	r3, [r7, #4]
341836aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341836ae:	d81f      	bhi.n	341836f0 <RCC_PLL_Source_IsReady+0x5c>
341836b0:	687b      	ldr	r3, [r7, #4]
341836b2:	2b00      	cmp	r3, #0
341836b4:	d004      	beq.n	341836c0 <RCC_PLL_Source_IsReady+0x2c>
341836b6:	687b      	ldr	r3, [r7, #4]
341836b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341836bc:	d008      	beq.n	341836d0 <RCC_PLL_Source_IsReady+0x3c>
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_PIN:
    default:
      break;
341836be:	e017      	b.n	341836f0 <RCC_PLL_Source_IsReady+0x5c>
      if (LL_RCC_HSI_IsReady() == 0U)
341836c0:	f7fe fc72 	bl	34181fa8 <LL_RCC_HSI_IsReady>
341836c4:	4603      	mov	r3, r0
341836c6:	2b00      	cmp	r3, #0
341836c8:	d114      	bne.n	341836f4 <RCC_PLL_Source_IsReady+0x60>
        ret = 0U;
341836ca:	2300      	movs	r3, #0
341836cc:	60fb      	str	r3, [r7, #12]
      break;
341836ce:	e011      	b.n	341836f4 <RCC_PLL_Source_IsReady+0x60>
      if (LL_RCC_MSI_IsReady() == 0U)
341836d0:	f7fe fcd2 	bl	34182078 <LL_RCC_MSI_IsReady>
341836d4:	4603      	mov	r3, r0
341836d6:	2b00      	cmp	r3, #0
341836d8:	d10e      	bne.n	341836f8 <RCC_PLL_Source_IsReady+0x64>
        ret = 0U;
341836da:	2300      	movs	r3, #0
341836dc:	60fb      	str	r3, [r7, #12]
      break;
341836de:	e00b      	b.n	341836f8 <RCC_PLL_Source_IsReady+0x64>
      if (LL_RCC_HSE_IsReady() == 0U)
341836e0:	f7fe fc32 	bl	34181f48 <LL_RCC_HSE_IsReady>
341836e4:	4603      	mov	r3, r0
341836e6:	2b00      	cmp	r3, #0
341836e8:	d108      	bne.n	341836fc <RCC_PLL_Source_IsReady+0x68>
        ret = 0U;
341836ea:	2300      	movs	r3, #0
341836ec:	60fb      	str	r3, [r7, #12]
      break;
341836ee:	e005      	b.n	341836fc <RCC_PLL_Source_IsReady+0x68>
      break;
341836f0:	bf00      	nop
341836f2:	e004      	b.n	341836fe <RCC_PLL_Source_IsReady+0x6a>
      break;
341836f4:	bf00      	nop
341836f6:	e002      	b.n	341836fe <RCC_PLL_Source_IsReady+0x6a>
      break;
341836f8:	bf00      	nop
341836fa:	e000      	b.n	341836fe <RCC_PLL_Source_IsReady+0x6a>
      break;
341836fc:	bf00      	nop
  }

  return ret;
341836fe:	68fb      	ldr	r3, [r7, #12]
}
34183700:	4618      	mov	r0, r3
34183702:	3710      	adds	r7, #16
34183704:	46bd      	mov	sp, r7
34183706:	bd80      	pop	{r7, pc}

34183708 <RCC_IC_CheckPLLSources>:
  * @param  PLLSource1 First PLL source
  * @param  PLLSource2 Second PLL source
  * @retval 1 if success else 0
  */
static uint32_t RCC_IC_CheckPLLSources(uint32_t PLLSource1, uint32_t PLLSource2)
{
34183708:	b580      	push	{r7, lr}
3418370a:	b084      	sub	sp, #16
3418370c:	af00      	add	r7, sp, #0
3418370e:	6078      	str	r0, [r7, #4]
34183710:	6039      	str	r1, [r7, #0]
  uint32_t ret = 1U;
34183712:	2301      	movs	r3, #1
34183714:	60fb      	str	r3, [r7, #12]

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34183716:	687b      	ldr	r3, [r7, #4]
34183718:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418371c:	d03a      	beq.n	34183794 <RCC_IC_CheckPLLSources+0x8c>
3418371e:	687b      	ldr	r3, [r7, #4]
34183720:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34183724:	d843      	bhi.n	341837ae <RCC_IC_CheckPLLSources+0xa6>
34183726:	687b      	ldr	r3, [r7, #4]
34183728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418372c:	d025      	beq.n	3418377a <RCC_IC_CheckPLLSources+0x72>
3418372e:	687b      	ldr	r3, [r7, #4]
34183730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34183734:	d83b      	bhi.n	341837ae <RCC_IC_CheckPLLSources+0xa6>
34183736:	687b      	ldr	r3, [r7, #4]
34183738:	2b00      	cmp	r3, #0
3418373a:	d004      	beq.n	34183746 <RCC_IC_CheckPLLSources+0x3e>
3418373c:	687b      	ldr	r3, [r7, #4]
3418373e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34183742:	d00d      	beq.n	34183760 <RCC_IC_CheckPLLSources+0x58>
34183744:	e033      	b.n	341837ae <RCC_IC_CheckPLLSources+0xa6>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34183746:	f7fe fd49 	bl	341821dc <LL_RCC_PLL1_IsReady>
3418374a:	4603      	mov	r3, r0
3418374c:	2b00      	cmp	r3, #0
3418374e:	d131      	bne.n	341837b4 <RCC_IC_CheckPLLSources+0xac>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
34183750:	f7fe fd58 	bl	34182204 <LL_RCC_PLL1_IsEnabledBypass>
34183754:	4603      	mov	r3, r0
34183756:	2b00      	cmp	r3, #0
34183758:	d12c      	bne.n	341837b4 <RCC_IC_CheckPLLSources+0xac>
        {
          ret = 0U;
3418375a:	2300      	movs	r3, #0
3418375c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418375e:	e029      	b.n	341837b4 <RCC_IC_CheckPLLSources+0xac>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
34183760:	f7fe fd72 	bl	34182248 <LL_RCC_PLL2_IsReady>
34183764:	4603      	mov	r3, r0
34183766:	2b00      	cmp	r3, #0
34183768:	d126      	bne.n	341837b8 <RCC_IC_CheckPLLSources+0xb0>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
3418376a:	f7fe fd81 	bl	34182270 <LL_RCC_PLL2_IsEnabledBypass>
3418376e:	4603      	mov	r3, r0
34183770:	2b00      	cmp	r3, #0
34183772:	d121      	bne.n	341837b8 <RCC_IC_CheckPLLSources+0xb0>
        {
          ret = 0U;
34183774:	2300      	movs	r3, #0
34183776:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183778:	e01e      	b.n	341837b8 <RCC_IC_CheckPLLSources+0xb0>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
3418377a:	f7fe fd9b 	bl	341822b4 <LL_RCC_PLL3_IsReady>
3418377e:	4603      	mov	r3, r0
34183780:	2b00      	cmp	r3, #0
34183782:	d11b      	bne.n	341837bc <RCC_IC_CheckPLLSources+0xb4>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34183784:	f7fe fdaa 	bl	341822dc <LL_RCC_PLL3_IsEnabledBypass>
34183788:	4603      	mov	r3, r0
3418378a:	2b00      	cmp	r3, #0
3418378c:	d116      	bne.n	341837bc <RCC_IC_CheckPLLSources+0xb4>
        {
          ret = 0U;
3418378e:	2300      	movs	r3, #0
34183790:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183792:	e013      	b.n	341837bc <RCC_IC_CheckPLLSources+0xb4>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34183794:	f7fe fdc4 	bl	34182320 <LL_RCC_PLL4_IsReady>
34183798:	4603      	mov	r3, r0
3418379a:	2b00      	cmp	r3, #0
3418379c:	d110      	bne.n	341837c0 <RCC_IC_CheckPLLSources+0xb8>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418379e:	f7fe fdd3 	bl	34182348 <LL_RCC_PLL4_IsEnabledBypass>
341837a2:	4603      	mov	r3, r0
341837a4:	2b00      	cmp	r3, #0
341837a6:	d10b      	bne.n	341837c0 <RCC_IC_CheckPLLSources+0xb8>
        {
          ret = 0U;
341837a8:	2300      	movs	r3, #0
341837aa:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
341837ac:	e008      	b.n	341837c0 <RCC_IC_CheckPLLSources+0xb8>
    default:
      /* Unexpected */
      ret = 0U;
341837ae:	2300      	movs	r3, #0
341837b0:	60fb      	str	r3, [r7, #12]
      break;
341837b2:	e006      	b.n	341837c2 <RCC_IC_CheckPLLSources+0xba>
      break;
341837b4:	bf00      	nop
341837b6:	e004      	b.n	341837c2 <RCC_IC_CheckPLLSources+0xba>
      break;
341837b8:	bf00      	nop
341837ba:	e002      	b.n	341837c2 <RCC_IC_CheckPLLSources+0xba>
      break;
341837bc:	bf00      	nop
341837be:	e000      	b.n	341837c2 <RCC_IC_CheckPLLSources+0xba>
      break;
341837c0:	bf00      	nop
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
341837c2:	683b      	ldr	r3, [r7, #0]
341837c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341837c8:	d03a      	beq.n	34183840 <RCC_IC_CheckPLLSources+0x138>
341837ca:	683b      	ldr	r3, [r7, #0]
341837cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341837d0:	d843      	bhi.n	3418385a <RCC_IC_CheckPLLSources+0x152>
341837d2:	683b      	ldr	r3, [r7, #0]
341837d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341837d8:	d025      	beq.n	34183826 <RCC_IC_CheckPLLSources+0x11e>
341837da:	683b      	ldr	r3, [r7, #0]
341837dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341837e0:	d83b      	bhi.n	3418385a <RCC_IC_CheckPLLSources+0x152>
341837e2:	683b      	ldr	r3, [r7, #0]
341837e4:	2b00      	cmp	r3, #0
341837e6:	d004      	beq.n	341837f2 <RCC_IC_CheckPLLSources+0xea>
341837e8:	683b      	ldr	r3, [r7, #0]
341837ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341837ee:	d00d      	beq.n	3418380c <RCC_IC_CheckPLLSources+0x104>
341837f0:	e033      	b.n	3418385a <RCC_IC_CheckPLLSources+0x152>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
341837f2:	f7fe fcf3 	bl	341821dc <LL_RCC_PLL1_IsReady>
341837f6:	4603      	mov	r3, r0
341837f8:	2b00      	cmp	r3, #0
341837fa:	d131      	bne.n	34183860 <RCC_IC_CheckPLLSources+0x158>
      {
        if (LL_RCC_PLL1_IsEnabledBypass() == 0U)
341837fc:	f7fe fd02 	bl	34182204 <LL_RCC_PLL1_IsEnabledBypass>
34183800:	4603      	mov	r3, r0
34183802:	2b00      	cmp	r3, #0
34183804:	d12c      	bne.n	34183860 <RCC_IC_CheckPLLSources+0x158>
        {
          ret = 0U;
34183806:	2300      	movs	r3, #0
34183808:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418380a:	e029      	b.n	34183860 <RCC_IC_CheckPLLSources+0x158>
    case LL_RCC_ICCLKSOURCE_PLL2:
      if (LL_RCC_PLL2_IsReady() == 0U)
3418380c:	f7fe fd1c 	bl	34182248 <LL_RCC_PLL2_IsReady>
34183810:	4603      	mov	r3, r0
34183812:	2b00      	cmp	r3, #0
34183814:	d126      	bne.n	34183864 <RCC_IC_CheckPLLSources+0x15c>
      {
        if (LL_RCC_PLL2_IsEnabledBypass() == 0U)
34183816:	f7fe fd2b 	bl	34182270 <LL_RCC_PLL2_IsEnabledBypass>
3418381a:	4603      	mov	r3, r0
3418381c:	2b00      	cmp	r3, #0
3418381e:	d121      	bne.n	34183864 <RCC_IC_CheckPLLSources+0x15c>
        {
          ret = 0U;
34183820:	2300      	movs	r3, #0
34183822:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183824:	e01e      	b.n	34183864 <RCC_IC_CheckPLLSources+0x15c>
    case LL_RCC_ICCLKSOURCE_PLL3:
      if (LL_RCC_PLL3_IsReady() == 0U)
34183826:	f7fe fd45 	bl	341822b4 <LL_RCC_PLL3_IsReady>
3418382a:	4603      	mov	r3, r0
3418382c:	2b00      	cmp	r3, #0
3418382e:	d11b      	bne.n	34183868 <RCC_IC_CheckPLLSources+0x160>
      {
        if (LL_RCC_PLL3_IsEnabledBypass() == 0U)
34183830:	f7fe fd54 	bl	341822dc <LL_RCC_PLL3_IsEnabledBypass>
34183834:	4603      	mov	r3, r0
34183836:	2b00      	cmp	r3, #0
34183838:	d116      	bne.n	34183868 <RCC_IC_CheckPLLSources+0x160>
        {
          ret = 0U;
3418383a:	2300      	movs	r3, #0
3418383c:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
3418383e:	e013      	b.n	34183868 <RCC_IC_CheckPLLSources+0x160>
    case LL_RCC_ICCLKSOURCE_PLL4:
      if (LL_RCC_PLL4_IsReady() == 0U)
34183840:	f7fe fd6e 	bl	34182320 <LL_RCC_PLL4_IsReady>
34183844:	4603      	mov	r3, r0
34183846:	2b00      	cmp	r3, #0
34183848:	d110      	bne.n	3418386c <RCC_IC_CheckPLLSources+0x164>
      {
        if (LL_RCC_PLL4_IsEnabledBypass() == 0U)
3418384a:	f7fe fd7d 	bl	34182348 <LL_RCC_PLL4_IsEnabledBypass>
3418384e:	4603      	mov	r3, r0
34183850:	2b00      	cmp	r3, #0
34183852:	d10b      	bne.n	3418386c <RCC_IC_CheckPLLSources+0x164>
        {
          ret = 0U;
34183854:	2300      	movs	r3, #0
34183856:	60fb      	str	r3, [r7, #12]
        }
      }
      break;
34183858:	e008      	b.n	3418386c <RCC_IC_CheckPLLSources+0x164>
    default:
      /* Unexpected */
      ret = 0U;
3418385a:	2300      	movs	r3, #0
3418385c:	60fb      	str	r3, [r7, #12]
      break;
3418385e:	e006      	b.n	3418386e <RCC_IC_CheckPLLSources+0x166>
      break;
34183860:	bf00      	nop
34183862:	e004      	b.n	3418386e <RCC_IC_CheckPLLSources+0x166>
      break;
34183864:	bf00      	nop
34183866:	e002      	b.n	3418386e <RCC_IC_CheckPLLSources+0x166>
      break;
34183868:	bf00      	nop
3418386a:	e000      	b.n	3418386e <RCC_IC_CheckPLLSources+0x166>
      break;
3418386c:	bf00      	nop
  }

  return ret;
3418386e:	68fb      	ldr	r3, [r7, #12]
}
34183870:	4618      	mov	r0, r3
34183872:	3710      	adds	r7, #16
34183874:	46bd      	mov	sp, r7
34183876:	bd80      	pop	{r7, pc}

34183878 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34183878:	b480      	push	{r7}
3418387a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418387c:	4b05      	ldr	r3, [pc, #20]	@ (34183894 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
3418387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34183880:	4a04      	ldr	r2, [pc, #16]	@ (34183894 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34183882:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34183886:	6553      	str	r3, [r2, #84]	@ 0x54
}
34183888:	bf00      	nop
3418388a:	46bd      	mov	sp, r7
3418388c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183890:	4770      	bx	lr
34183892:	bf00      	nop
34183894:	56028000 	.word	0x56028000

34183898 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34183898:	b480      	push	{r7}
3418389a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
3418389c:	4b05      	ldr	r3, [pc, #20]	@ (341838b4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
3418389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341838a0:	4a04      	ldr	r2, [pc, #16]	@ (341838b4 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
341838a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341838a6:	6553      	str	r3, [r2, #84]	@ 0x54
}
341838a8:	bf00      	nop
341838aa:	46bd      	mov	sp, r7
341838ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341838b0:	4770      	bx	lr
341838b2:	bf00      	nop
341838b4:	56028000 	.word	0x56028000

341838b8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
341838b8:	b480      	push	{r7}
341838ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
341838bc:	4b06      	ldr	r3, [pc, #24]	@ (341838d8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
341838be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
341838c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
341838c4:	2b40      	cmp	r3, #64	@ 0x40
341838c6:	d101      	bne.n	341838cc <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
341838c8:	2301      	movs	r3, #1
341838ca:	e000      	b.n	341838ce <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
341838cc:	2300      	movs	r3, #0
}
341838ce:	4618      	mov	r0, r3
341838d0:	46bd      	mov	sp, r7
341838d2:	f85d 7b04 	ldr.w	r7, [sp], #4
341838d6:	4770      	bx	lr
341838d8:	56028000 	.word	0x56028000

341838dc <LL_RCC_HSE_IsReady>:
{
341838dc:	b480      	push	{r7}
341838de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
341838e0:	4b06      	ldr	r3, [pc, #24]	@ (341838fc <LL_RCC_HSE_IsReady+0x20>)
341838e2:	685b      	ldr	r3, [r3, #4]
341838e4:	f003 0310 	and.w	r3, r3, #16
341838e8:	2b00      	cmp	r3, #0
341838ea:	d001      	beq.n	341838f0 <LL_RCC_HSE_IsReady+0x14>
341838ec:	2301      	movs	r3, #1
341838ee:	e000      	b.n	341838f2 <LL_RCC_HSE_IsReady+0x16>
341838f0:	2300      	movs	r3, #0
}
341838f2:	4618      	mov	r0, r3
341838f4:	46bd      	mov	sp, r7
341838f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341838fa:	4770      	bx	lr
341838fc:	56028000 	.word	0x56028000

34183900 <LL_RCC_HSI_IsReady>:
{
34183900:	b480      	push	{r7}
34183902:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34183904:	4b06      	ldr	r3, [pc, #24]	@ (34183920 <LL_RCC_HSI_IsReady+0x20>)
34183906:	685b      	ldr	r3, [r3, #4]
34183908:	f003 0308 	and.w	r3, r3, #8
3418390c:	2b00      	cmp	r3, #0
3418390e:	d001      	beq.n	34183914 <LL_RCC_HSI_IsReady+0x14>
34183910:	2301      	movs	r3, #1
34183912:	e000      	b.n	34183916 <LL_RCC_HSI_IsReady+0x16>
34183914:	2300      	movs	r3, #0
}
34183916:	4618      	mov	r0, r3
34183918:	46bd      	mov	sp, r7
3418391a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418391e:	4770      	bx	lr
34183920:	56028000 	.word	0x56028000

34183924 <LL_RCC_HSI_GetDivider>:
{
34183924:	b480      	push	{r7}
34183926:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34183928:	4b04      	ldr	r3, [pc, #16]	@ (3418393c <LL_RCC_HSI_GetDivider+0x18>)
3418392a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418392c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34183930:	4618      	mov	r0, r3
34183932:	46bd      	mov	sp, r7
34183934:	f85d 7b04 	ldr.w	r7, [sp], #4
34183938:	4770      	bx	lr
3418393a:	bf00      	nop
3418393c:	56028000 	.word	0x56028000

34183940 <LL_RCC_MSI_IsReady>:
{
34183940:	b480      	push	{r7}
34183942:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34183944:	4b06      	ldr	r3, [pc, #24]	@ (34183960 <LL_RCC_MSI_IsReady+0x20>)
34183946:	685b      	ldr	r3, [r3, #4]
34183948:	f003 0304 	and.w	r3, r3, #4
3418394c:	2b00      	cmp	r3, #0
3418394e:	d001      	beq.n	34183954 <LL_RCC_MSI_IsReady+0x14>
34183950:	2301      	movs	r3, #1
34183952:	e000      	b.n	34183956 <LL_RCC_MSI_IsReady+0x16>
34183954:	2300      	movs	r3, #0
}
34183956:	4618      	mov	r0, r3
34183958:	46bd      	mov	sp, r7
3418395a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418395e:	4770      	bx	lr
34183960:	56028000 	.word	0x56028000

34183964 <LL_RCC_MSI_GetFrequency>:
{
34183964:	b480      	push	{r7}
34183966:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34183968:	4b04      	ldr	r3, [pc, #16]	@ (3418397c <LL_RCC_MSI_GetFrequency+0x18>)
3418396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418396c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34183970:	4618      	mov	r0, r3
34183972:	46bd      	mov	sp, r7
34183974:	f85d 7b04 	ldr.w	r7, [sp], #4
34183978:	4770      	bx	lr
3418397a:	bf00      	nop
3418397c:	56028000 	.word	0x56028000

34183980 <LL_RCC_LSE_IsReady>:
{
34183980:	b480      	push	{r7}
34183982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34183984:	4b06      	ldr	r3, [pc, #24]	@ (341839a0 <LL_RCC_LSE_IsReady+0x20>)
34183986:	685b      	ldr	r3, [r3, #4]
34183988:	f003 0302 	and.w	r3, r3, #2
3418398c:	2b00      	cmp	r3, #0
3418398e:	d001      	beq.n	34183994 <LL_RCC_LSE_IsReady+0x14>
34183990:	2301      	movs	r3, #1
34183992:	e000      	b.n	34183996 <LL_RCC_LSE_IsReady+0x16>
34183994:	2300      	movs	r3, #0
}
34183996:	4618      	mov	r0, r3
34183998:	46bd      	mov	sp, r7
3418399a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418399e:	4770      	bx	lr
341839a0:	56028000 	.word	0x56028000

341839a4 <LL_RCC_LSI_IsReady>:
{
341839a4:	b480      	push	{r7}
341839a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
341839a8:	4b04      	ldr	r3, [pc, #16]	@ (341839bc <LL_RCC_LSI_IsReady+0x18>)
341839aa:	685b      	ldr	r3, [r3, #4]
341839ac:	f003 0301 	and.w	r3, r3, #1
}
341839b0:	4618      	mov	r0, r3
341839b2:	46bd      	mov	sp, r7
341839b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341839b8:	4770      	bx	lr
341839ba:	bf00      	nop
341839bc:	56028000 	.word	0x56028000

341839c0 <LL_RCC_GetAHBPrescaler>:
{
341839c0:	b480      	push	{r7}
341839c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
341839c4:	4b04      	ldr	r3, [pc, #16]	@ (341839d8 <LL_RCC_GetAHBPrescaler+0x18>)
341839c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839c8:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
341839cc:	4618      	mov	r0, r3
341839ce:	46bd      	mov	sp, r7
341839d0:	f85d 7b04 	ldr.w	r7, [sp], #4
341839d4:	4770      	bx	lr
341839d6:	bf00      	nop
341839d8:	56028000 	.word	0x56028000

341839dc <LL_RCC_GetAPB1Prescaler>:
{
341839dc:	b480      	push	{r7}
341839de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
341839e0:	4b04      	ldr	r3, [pc, #16]	@ (341839f4 <LL_RCC_GetAPB1Prescaler+0x18>)
341839e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341839e4:	f003 0307 	and.w	r3, r3, #7
}
341839e8:	4618      	mov	r0, r3
341839ea:	46bd      	mov	sp, r7
341839ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341839f0:	4770      	bx	lr
341839f2:	bf00      	nop
341839f4:	56028000 	.word	0x56028000

341839f8 <LL_RCC_GetAPB2Prescaler>:
{
341839f8:	b480      	push	{r7}
341839fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
341839fc:	4b04      	ldr	r3, [pc, #16]	@ (34183a10 <LL_RCC_GetAPB2Prescaler+0x18>)
341839fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183a00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34183a04:	4618      	mov	r0, r3
34183a06:	46bd      	mov	sp, r7
34183a08:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a0c:	4770      	bx	lr
34183a0e:	bf00      	nop
34183a10:	56028000 	.word	0x56028000

34183a14 <LL_RCC_GetAPB4Prescaler>:
{
34183a14:	b480      	push	{r7}
34183a16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34183a18:	4b04      	ldr	r3, [pc, #16]	@ (34183a2c <LL_RCC_GetAPB4Prescaler+0x18>)
34183a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183a1c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
34183a20:	4618      	mov	r0, r3
34183a22:	46bd      	mov	sp, r7
34183a24:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a28:	4770      	bx	lr
34183a2a:	bf00      	nop
34183a2c:	56028000 	.word	0x56028000

34183a30 <LL_RCC_GetAPB5Prescaler>:
{
34183a30:	b480      	push	{r7}
34183a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34183a34:	4b04      	ldr	r3, [pc, #16]	@ (34183a48 <LL_RCC_GetAPB5Prescaler+0x18>)
34183a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34183a38:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
34183a3c:	4618      	mov	r0, r3
34183a3e:	46bd      	mov	sp, r7
34183a40:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a44:	4770      	bx	lr
34183a46:	bf00      	nop
34183a48:	56028000 	.word	0x56028000

34183a4c <LL_RCC_SetClockSource>:
{
34183a4c:	b480      	push	{r7}
34183a4e:	b085      	sub	sp, #20
34183a50:	af00      	add	r7, sp, #0
34183a52:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34183a54:	687b      	ldr	r3, [r7, #4]
34183a56:	b2da      	uxtb	r2, r3
34183a58:	4b10      	ldr	r3, [pc, #64]	@ (34183a9c <LL_RCC_SetClockSource+0x50>)
34183a5a:	4413      	add	r3, r2
34183a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34183a5e:	68fb      	ldr	r3, [r7, #12]
34183a60:	681a      	ldr	r2, [r3, #0]
34183a62:	687b      	ldr	r3, [r7, #4]
34183a64:	0e19      	lsrs	r1, r3, #24
34183a66:	687b      	ldr	r3, [r7, #4]
34183a68:	0a1b      	lsrs	r3, r3, #8
34183a6a:	f003 031f 	and.w	r3, r3, #31
34183a6e:	fa01 f303 	lsl.w	r3, r1, r3
34183a72:	43db      	mvns	r3, r3
34183a74:	401a      	ands	r2, r3
34183a76:	687b      	ldr	r3, [r7, #4]
34183a78:	0c1b      	lsrs	r3, r3, #16
34183a7a:	b2d9      	uxtb	r1, r3
34183a7c:	687b      	ldr	r3, [r7, #4]
34183a7e:	0a1b      	lsrs	r3, r3, #8
34183a80:	f003 031f 	and.w	r3, r3, #31
34183a84:	fa01 f303 	lsl.w	r3, r1, r3
34183a88:	431a      	orrs	r2, r3
34183a8a:	68fb      	ldr	r3, [r7, #12]
34183a8c:	601a      	str	r2, [r3, #0]
}
34183a8e:	bf00      	nop
34183a90:	3714      	adds	r7, #20
34183a92:	46bd      	mov	sp, r7
34183a94:	f85d 7b04 	ldr.w	r7, [sp], #4
34183a98:	4770      	bx	lr
34183a9a:	bf00      	nop
34183a9c:	56028144 	.word	0x56028144

34183aa0 <LL_RCC_GetADCPrescaler>:
{
34183aa0:	b480      	push	{r7}
34183aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34183aa4:	4b04      	ldr	r3, [pc, #16]	@ (34183ab8 <LL_RCC_GetADCPrescaler+0x18>)
34183aa6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183aaa:	0a1b      	lsrs	r3, r3, #8
34183aac:	b2db      	uxtb	r3, r3
}
34183aae:	4618      	mov	r0, r3
34183ab0:	46bd      	mov	sp, r7
34183ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ab6:	4770      	bx	lr
34183ab8:	56028000 	.word	0x56028000

34183abc <LL_RCC_SetADFClockSource>:
{
34183abc:	b480      	push	{r7}
34183abe:	b083      	sub	sp, #12
34183ac0:	af00      	add	r7, sp, #0
34183ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34183ac4:	4b07      	ldr	r3, [pc, #28]	@ (34183ae4 <LL_RCC_SetADFClockSource+0x28>)
34183ac6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183aca:	f023 0207 	bic.w	r2, r3, #7
34183ace:	4905      	ldr	r1, [pc, #20]	@ (34183ae4 <LL_RCC_SetADFClockSource+0x28>)
34183ad0:	687b      	ldr	r3, [r7, #4]
34183ad2:	4313      	orrs	r3, r2
34183ad4:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34183ad8:	bf00      	nop
34183ada:	370c      	adds	r7, #12
34183adc:	46bd      	mov	sp, r7
34183ade:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ae2:	4770      	bx	lr
34183ae4:	56028000 	.word	0x56028000

34183ae8 <LL_RCC_SetCLKPClockSource>:
{
34183ae8:	b480      	push	{r7}
34183aea:	b083      	sub	sp, #12
34183aec:	af00      	add	r7, sp, #0
34183aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34183af0:	4b07      	ldr	r3, [pc, #28]	@ (34183b10 <LL_RCC_SetCLKPClockSource+0x28>)
34183af2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183af6:	f023 0207 	bic.w	r2, r3, #7
34183afa:	4905      	ldr	r1, [pc, #20]	@ (34183b10 <LL_RCC_SetCLKPClockSource+0x28>)
34183afc:	687b      	ldr	r3, [r7, #4]
34183afe:	4313      	orrs	r3, r2
34183b00:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34183b04:	bf00      	nop
34183b06:	370c      	adds	r7, #12
34183b08:	46bd      	mov	sp, r7
34183b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b0e:	4770      	bx	lr
34183b10:	56028000 	.word	0x56028000

34183b14 <LL_RCC_SetDCMIPPClockSource>:
{
34183b14:	b480      	push	{r7}
34183b16:	b083      	sub	sp, #12
34183b18:	af00      	add	r7, sp, #0
34183b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34183b1c:	4b07      	ldr	r3, [pc, #28]	@ (34183b3c <LL_RCC_SetDCMIPPClockSource+0x28>)
34183b1e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183b22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
34183b26:	4905      	ldr	r1, [pc, #20]	@ (34183b3c <LL_RCC_SetDCMIPPClockSource+0x28>)
34183b28:	687b      	ldr	r3, [r7, #4]
34183b2a:	4313      	orrs	r3, r2
34183b2c:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34183b30:	bf00      	nop
34183b32:	370c      	adds	r7, #12
34183b34:	46bd      	mov	sp, r7
34183b36:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b3a:	4770      	bx	lr
34183b3c:	56028000 	.word	0x56028000

34183b40 <LL_RCC_SetETHClockSource>:
{
34183b40:	b480      	push	{r7}
34183b42:	b083      	sub	sp, #12
34183b44:	af00      	add	r7, sp, #0
34183b46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34183b48:	4b07      	ldr	r3, [pc, #28]	@ (34183b68 <LL_RCC_SetETHClockSource+0x28>)
34183b4a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183b4e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
34183b52:	4905      	ldr	r1, [pc, #20]	@ (34183b68 <LL_RCC_SetETHClockSource+0x28>)
34183b54:	687b      	ldr	r3, [r7, #4]
34183b56:	4313      	orrs	r3, r2
34183b58:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183b5c:	bf00      	nop
34183b5e:	370c      	adds	r7, #12
34183b60:	46bd      	mov	sp, r7
34183b62:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b66:	4770      	bx	lr
34183b68:	56028000 	.word	0x56028000

34183b6c <LL_RCC_SetETHPHYInterface>:
{
34183b6c:	b480      	push	{r7}
34183b6e:	b083      	sub	sp, #12
34183b70:	af00      	add	r7, sp, #0
34183b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34183b74:	4b07      	ldr	r3, [pc, #28]	@ (34183b94 <LL_RCC_SetETHPHYInterface+0x28>)
34183b76:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183b7a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34183b7e:	4905      	ldr	r1, [pc, #20]	@ (34183b94 <LL_RCC_SetETHPHYInterface+0x28>)
34183b80:	687b      	ldr	r3, [r7, #4]
34183b82:	4313      	orrs	r3, r2
34183b84:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183b88:	bf00      	nop
34183b8a:	370c      	adds	r7, #12
34183b8c:	46bd      	mov	sp, r7
34183b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183b92:	4770      	bx	lr
34183b94:	56028000 	.word	0x56028000

34183b98 <LL_RCC_GetETH1PTPDivider>:
{
34183b98:	b480      	push	{r7}
34183b9a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34183b9c:	4b04      	ldr	r3, [pc, #16]	@ (34183bb0 <LL_RCC_GetETH1PTPDivider+0x18>)
34183b9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183ba2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
34183ba6:	4618      	mov	r0, r3
34183ba8:	46bd      	mov	sp, r7
34183baa:	f85d 7b04 	ldr.w	r7, [sp], #4
34183bae:	4770      	bx	lr
34183bb0:	56028000 	.word	0x56028000

34183bb4 <LL_RCC_SetETHREFRXClockSource>:
{
34183bb4:	b480      	push	{r7}
34183bb6:	b083      	sub	sp, #12
34183bb8:	af00      	add	r7, sp, #0
34183bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34183bbc:	4b07      	ldr	r3, [pc, #28]	@ (34183bdc <LL_RCC_SetETHREFRXClockSource+0x28>)
34183bbe:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183bc2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
34183bc6:	4905      	ldr	r1, [pc, #20]	@ (34183bdc <LL_RCC_SetETHREFRXClockSource+0x28>)
34183bc8:	687b      	ldr	r3, [r7, #4]
34183bca:	4313      	orrs	r3, r2
34183bcc:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183bd0:	bf00      	nop
34183bd2:	370c      	adds	r7, #12
34183bd4:	46bd      	mov	sp, r7
34183bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
34183bda:	4770      	bx	lr
34183bdc:	56028000 	.word	0x56028000

34183be0 <LL_RCC_SetETHREFTXClockSource>:
{
34183be0:	b480      	push	{r7}
34183be2:	b083      	sub	sp, #12
34183be4:	af00      	add	r7, sp, #0
34183be6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34183be8:	4b07      	ldr	r3, [pc, #28]	@ (34183c08 <LL_RCC_SetETHREFTXClockSource+0x28>)
34183bea:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183bee:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
34183bf2:	4905      	ldr	r1, [pc, #20]	@ (34183c08 <LL_RCC_SetETHREFTXClockSource+0x28>)
34183bf4:	687b      	ldr	r3, [r7, #4]
34183bf6:	4313      	orrs	r3, r2
34183bf8:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34183bfc:	bf00      	nop
34183bfe:	370c      	adds	r7, #12
34183c00:	46bd      	mov	sp, r7
34183c02:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c06:	4770      	bx	lr
34183c08:	56028000 	.word	0x56028000

34183c0c <LL_RCC_SetFDCANClockSource>:
{
34183c0c:	b480      	push	{r7}
34183c0e:	b083      	sub	sp, #12
34183c10:	af00      	add	r7, sp, #0
34183c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
34183c14:	4b07      	ldr	r3, [pc, #28]	@ (34183c34 <LL_RCC_SetFDCANClockSource+0x28>)
34183c16:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183c1a:	f023 0203 	bic.w	r2, r3, #3
34183c1e:	4905      	ldr	r1, [pc, #20]	@ (34183c34 <LL_RCC_SetFDCANClockSource+0x28>)
34183c20:	687b      	ldr	r3, [r7, #4]
34183c22:	4313      	orrs	r3, r2
34183c24:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34183c28:	bf00      	nop
34183c2a:	370c      	adds	r7, #12
34183c2c:	46bd      	mov	sp, r7
34183c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c32:	4770      	bx	lr
34183c34:	56028000 	.word	0x56028000

34183c38 <LL_RCC_SetFMCClockSource>:
{
34183c38:	b480      	push	{r7}
34183c3a:	b083      	sub	sp, #12
34183c3c:	af00      	add	r7, sp, #0
34183c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34183c40:	4b07      	ldr	r3, [pc, #28]	@ (34183c60 <LL_RCC_SetFMCClockSource+0x28>)
34183c42:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183c46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34183c4a:	4905      	ldr	r1, [pc, #20]	@ (34183c60 <LL_RCC_SetFMCClockSource+0x28>)
34183c4c:	687b      	ldr	r3, [r7, #4]
34183c4e:	4313      	orrs	r3, r2
34183c50:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34183c54:	bf00      	nop
34183c56:	370c      	adds	r7, #12
34183c58:	46bd      	mov	sp, r7
34183c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183c5e:	4770      	bx	lr
34183c60:	56028000 	.word	0x56028000

34183c64 <LL_RCC_SetI2CClockSource>:
{
34183c64:	b580      	push	{r7, lr}
34183c66:	b082      	sub	sp, #8
34183c68:	af00      	add	r7, sp, #0
34183c6a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183c6c:	6878      	ldr	r0, [r7, #4]
34183c6e:	f7ff feed 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183c72:	bf00      	nop
34183c74:	3708      	adds	r7, #8
34183c76:	46bd      	mov	sp, r7
34183c78:	bd80      	pop	{r7, pc}

34183c7a <LL_RCC_SetI3CClockSource>:
{
34183c7a:	b580      	push	{r7, lr}
34183c7c:	b082      	sub	sp, #8
34183c7e:	af00      	add	r7, sp, #0
34183c80:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183c82:	6878      	ldr	r0, [r7, #4]
34183c84:	f7ff fee2 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183c88:	bf00      	nop
34183c8a:	3708      	adds	r7, #8
34183c8c:	46bd      	mov	sp, r7
34183c8e:	bd80      	pop	{r7, pc}

34183c90 <LL_RCC_SetLPTIMClockSource>:
{
34183c90:	b580      	push	{r7, lr}
34183c92:	b082      	sub	sp, #8
34183c94:	af00      	add	r7, sp, #0
34183c96:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183c98:	6878      	ldr	r0, [r7, #4]
34183c9a:	f7ff fed7 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183c9e:	bf00      	nop
34183ca0:	3708      	adds	r7, #8
34183ca2:	46bd      	mov	sp, r7
34183ca4:	bd80      	pop	{r7, pc}
	...

34183ca8 <LL_RCC_SetLPUARTClockSource>:
{
34183ca8:	b480      	push	{r7}
34183caa:	b083      	sub	sp, #12
34183cac:	af00      	add	r7, sp, #0
34183cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34183cb0:	4b07      	ldr	r3, [pc, #28]	@ (34183cd0 <LL_RCC_SetLPUARTClockSource+0x28>)
34183cb2:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34183cb6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34183cba:	4905      	ldr	r1, [pc, #20]	@ (34183cd0 <LL_RCC_SetLPUARTClockSource+0x28>)
34183cbc:	687b      	ldr	r3, [r7, #4]
34183cbe:	4313      	orrs	r3, r2
34183cc0:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
34183cc4:	bf00      	nop
34183cc6:	370c      	adds	r7, #12
34183cc8:	46bd      	mov	sp, r7
34183cca:	f85d 7b04 	ldr.w	r7, [sp], #4
34183cce:	4770      	bx	lr
34183cd0:	56028000 	.word	0x56028000

34183cd4 <LL_RCC_SetLTDCClockSource>:
{
34183cd4:	b480      	push	{r7}
34183cd6:	b083      	sub	sp, #12
34183cd8:	af00      	add	r7, sp, #0
34183cda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34183cdc:	4b07      	ldr	r3, [pc, #28]	@ (34183cfc <LL_RCC_SetLTDCClockSource+0x28>)
34183cde:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34183ce2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34183ce6:	4905      	ldr	r1, [pc, #20]	@ (34183cfc <LL_RCC_SetLTDCClockSource+0x28>)
34183ce8:	687b      	ldr	r3, [r7, #4]
34183cea:	4313      	orrs	r3, r2
34183cec:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
34183cf0:	bf00      	nop
34183cf2:	370c      	adds	r7, #12
34183cf4:	46bd      	mov	sp, r7
34183cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
34183cfa:	4770      	bx	lr
34183cfc:	56028000 	.word	0x56028000

34183d00 <LL_RCC_SetMDFClockSource>:
{
34183d00:	b480      	push	{r7}
34183d02:	b083      	sub	sp, #12
34183d04:	af00      	add	r7, sp, #0
34183d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34183d08:	4b07      	ldr	r3, [pc, #28]	@ (34183d28 <LL_RCC_SetMDFClockSource+0x28>)
34183d0a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34183d0e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
34183d12:	4905      	ldr	r1, [pc, #20]	@ (34183d28 <LL_RCC_SetMDFClockSource+0x28>)
34183d14:	687b      	ldr	r3, [r7, #4]
34183d16:	4313      	orrs	r3, r2
34183d18:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
34183d1c:	bf00      	nop
34183d1e:	370c      	adds	r7, #12
34183d20:	46bd      	mov	sp, r7
34183d22:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d26:	4770      	bx	lr
34183d28:	56028000 	.word	0x56028000

34183d2c <LL_RCC_SetOTGPHYClockSource>:
{
34183d2c:	b580      	push	{r7, lr}
34183d2e:	b082      	sub	sp, #8
34183d30:	af00      	add	r7, sp, #0
34183d32:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183d34:	6878      	ldr	r0, [r7, #4]
34183d36:	f7ff fe89 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183d3a:	bf00      	nop
34183d3c:	3708      	adds	r7, #8
34183d3e:	46bd      	mov	sp, r7
34183d40:	bd80      	pop	{r7, pc}

34183d42 <LL_RCC_SetOTGPHYCKREFClockSource>:
{
34183d42:	b580      	push	{r7, lr}
34183d44:	b082      	sub	sp, #8
34183d46:	af00      	add	r7, sp, #0
34183d48:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183d4a:	6878      	ldr	r0, [r7, #4]
34183d4c:	f7ff fe7e 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183d50:	bf00      	nop
34183d52:	3708      	adds	r7, #8
34183d54:	46bd      	mov	sp, r7
34183d56:	bd80      	pop	{r7, pc}

34183d58 <LL_RCC_SetPSSIClockSource>:
{
34183d58:	b480      	push	{r7}
34183d5a:	b083      	sub	sp, #12
34183d5c:	af00      	add	r7, sp, #0
34183d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
34183d60:	4b07      	ldr	r3, [pc, #28]	@ (34183d80 <LL_RCC_SetPSSIClockSource+0x28>)
34183d62:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183d66:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34183d6a:	4905      	ldr	r1, [pc, #20]	@ (34183d80 <LL_RCC_SetPSSIClockSource+0x28>)
34183d6c:	687b      	ldr	r3, [r7, #4]
34183d6e:	4313      	orrs	r3, r2
34183d70:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34183d74:	bf00      	nop
34183d76:	370c      	adds	r7, #12
34183d78:	46bd      	mov	sp, r7
34183d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
34183d7e:	4770      	bx	lr
34183d80:	56028000 	.word	0x56028000

34183d84 <LL_RCC_SetSAIClockSource>:
{
34183d84:	b580      	push	{r7, lr}
34183d86:	b082      	sub	sp, #8
34183d88:	af00      	add	r7, sp, #0
34183d8a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183d8c:	6878      	ldr	r0, [r7, #4]
34183d8e:	f7ff fe5d 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183d92:	bf00      	nop
34183d94:	3708      	adds	r7, #8
34183d96:	46bd      	mov	sp, r7
34183d98:	bd80      	pop	{r7, pc}

34183d9a <LL_RCC_SetSDMMCClockSource>:
{
34183d9a:	b580      	push	{r7, lr}
34183d9c:	b082      	sub	sp, #8
34183d9e:	af00      	add	r7, sp, #0
34183da0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183da2:	6878      	ldr	r0, [r7, #4]
34183da4:	f7ff fe52 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183da8:	bf00      	nop
34183daa:	3708      	adds	r7, #8
34183dac:	46bd      	mov	sp, r7
34183dae:	bd80      	pop	{r7, pc}

34183db0 <LL_RCC_SetSPDIFRXClockSource>:
{
34183db0:	b480      	push	{r7}
34183db2:	b083      	sub	sp, #12
34183db4:	af00      	add	r7, sp, #0
34183db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34183db8:	4b07      	ldr	r3, [pc, #28]	@ (34183dd8 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34183dba:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34183dbe:	f023 0207 	bic.w	r2, r3, #7
34183dc2:	4905      	ldr	r1, [pc, #20]	@ (34183dd8 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34183dc4:	687b      	ldr	r3, [r7, #4]
34183dc6:	4313      	orrs	r3, r2
34183dc8:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
34183dcc:	bf00      	nop
34183dce:	370c      	adds	r7, #12
34183dd0:	46bd      	mov	sp, r7
34183dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
34183dd6:	4770      	bx	lr
34183dd8:	56028000 	.word	0x56028000

34183ddc <LL_RCC_SetSPIClockSource>:
{
34183ddc:	b580      	push	{r7, lr}
34183dde:	b082      	sub	sp, #8
34183de0:	af00      	add	r7, sp, #0
34183de2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183de4:	6878      	ldr	r0, [r7, #4]
34183de6:	f7ff fe31 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183dea:	bf00      	nop
34183dec:	3708      	adds	r7, #8
34183dee:	46bd      	mov	sp, r7
34183df0:	bd80      	pop	{r7, pc}

34183df2 <LL_RCC_SetUSARTClockSource>:
{
34183df2:	b580      	push	{r7, lr}
34183df4:	b082      	sub	sp, #8
34183df6:	af00      	add	r7, sp, #0
34183df8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183dfa:	6878      	ldr	r0, [r7, #4]
34183dfc:	f7ff fe26 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183e00:	bf00      	nop
34183e02:	3708      	adds	r7, #8
34183e04:	46bd      	mov	sp, r7
34183e06:	bd80      	pop	{r7, pc}

34183e08 <LL_RCC_SetXSPIClockSource>:
{
34183e08:	b580      	push	{r7, lr}
34183e0a:	b082      	sub	sp, #8
34183e0c:	af00      	add	r7, sp, #0
34183e0e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34183e10:	6878      	ldr	r0, [r7, #4]
34183e12:	f7ff fe1b 	bl	34183a4c <LL_RCC_SetClockSource>
}
34183e16:	bf00      	nop
34183e18:	3708      	adds	r7, #8
34183e1a:	46bd      	mov	sp, r7
34183e1c:	bd80      	pop	{r7, pc}
	...

34183e20 <LL_RCC_GetClockSource>:
{
34183e20:	b480      	push	{r7}
34183e22:	b085      	sub	sp, #20
34183e24:	af00      	add	r7, sp, #0
34183e26:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34183e28:	687b      	ldr	r3, [r7, #4]
34183e2a:	b2da      	uxtb	r2, r3
34183e2c:	4b0e      	ldr	r3, [pc, #56]	@ (34183e68 <LL_RCC_GetClockSource+0x48>)
34183e2e:	4413      	add	r3, r2
34183e30:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34183e32:	68fb      	ldr	r3, [r7, #12]
34183e34:	681a      	ldr	r2, [r3, #0]
34183e36:	687b      	ldr	r3, [r7, #4]
34183e38:	0e19      	lsrs	r1, r3, #24
34183e3a:	687b      	ldr	r3, [r7, #4]
34183e3c:	0a1b      	lsrs	r3, r3, #8
34183e3e:	f003 031f 	and.w	r3, r3, #31
34183e42:	fa01 f303 	lsl.w	r3, r1, r3
34183e46:	401a      	ands	r2, r3
34183e48:	687b      	ldr	r3, [r7, #4]
34183e4a:	0a1b      	lsrs	r3, r3, #8
34183e4c:	f003 031f 	and.w	r3, r3, #31
34183e50:	fa22 f303 	lsr.w	r3, r2, r3
34183e54:	041a      	lsls	r2, r3, #16
34183e56:	687b      	ldr	r3, [r7, #4]
34183e58:	4313      	orrs	r3, r2
}
34183e5a:	4618      	mov	r0, r3
34183e5c:	3714      	adds	r7, #20
34183e5e:	46bd      	mov	sp, r7
34183e60:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e64:	4770      	bx	lr
34183e66:	bf00      	nop
34183e68:	56028144 	.word	0x56028144

34183e6c <LL_RCC_GetADCClockSource>:
{
34183e6c:	b480      	push	{r7}
34183e6e:	b083      	sub	sp, #12
34183e70:	af00      	add	r7, sp, #0
34183e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34183e74:	4b05      	ldr	r3, [pc, #20]	@ (34183e8c <LL_RCC_GetADCClockSource+0x20>)
34183e76:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183e7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
34183e7e:	4618      	mov	r0, r3
34183e80:	370c      	adds	r7, #12
34183e82:	46bd      	mov	sp, r7
34183e84:	f85d 7b04 	ldr.w	r7, [sp], #4
34183e88:	4770      	bx	lr
34183e8a:	bf00      	nop
34183e8c:	56028000 	.word	0x56028000

34183e90 <LL_RCC_GetADFClockSource>:
{
34183e90:	b480      	push	{r7}
34183e92:	b083      	sub	sp, #12
34183e94:	af00      	add	r7, sp, #0
34183e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34183e98:	4b05      	ldr	r3, [pc, #20]	@ (34183eb0 <LL_RCC_GetADFClockSource+0x20>)
34183e9a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183e9e:	f003 0307 	and.w	r3, r3, #7
}
34183ea2:	4618      	mov	r0, r3
34183ea4:	370c      	adds	r7, #12
34183ea6:	46bd      	mov	sp, r7
34183ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
34183eac:	4770      	bx	lr
34183eae:	bf00      	nop
34183eb0:	56028000 	.word	0x56028000

34183eb4 <LL_RCC_GetCLKPClockSource>:
{
34183eb4:	b480      	push	{r7}
34183eb6:	b083      	sub	sp, #12
34183eb8:	af00      	add	r7, sp, #0
34183eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34183ebc:	4b05      	ldr	r3, [pc, #20]	@ (34183ed4 <LL_RCC_GetCLKPClockSource+0x20>)
34183ebe:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183ec2:	f003 0307 	and.w	r3, r3, #7
}
34183ec6:	4618      	mov	r0, r3
34183ec8:	370c      	adds	r7, #12
34183eca:	46bd      	mov	sp, r7
34183ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ed0:	4770      	bx	lr
34183ed2:	bf00      	nop
34183ed4:	56028000 	.word	0x56028000

34183ed8 <LL_RCC_GetDCMIPPClockSource>:
{
34183ed8:	b480      	push	{r7}
34183eda:	b083      	sub	sp, #12
34183edc:	af00      	add	r7, sp, #0
34183ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34183ee0:	4b05      	ldr	r3, [pc, #20]	@ (34183ef8 <LL_RCC_GetDCMIPPClockSource+0x20>)
34183ee2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34183ee6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
34183eea:	4618      	mov	r0, r3
34183eec:	370c      	adds	r7, #12
34183eee:	46bd      	mov	sp, r7
34183ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ef4:	4770      	bx	lr
34183ef6:	bf00      	nop
34183ef8:	56028000 	.word	0x56028000

34183efc <LL_RCC_GetETHClockSource>:
{
34183efc:	b480      	push	{r7}
34183efe:	b083      	sub	sp, #12
34183f00:	af00      	add	r7, sp, #0
34183f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
34183f04:	4b05      	ldr	r3, [pc, #20]	@ (34183f1c <LL_RCC_GetETHClockSource+0x20>)
34183f06:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183f0a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
34183f0e:	4618      	mov	r0, r3
34183f10:	370c      	adds	r7, #12
34183f12:	46bd      	mov	sp, r7
34183f14:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f18:	4770      	bx	lr
34183f1a:	bf00      	nop
34183f1c:	56028000 	.word	0x56028000

34183f20 <LL_RCC_GetETHPTPClockSource>:
{
34183f20:	b480      	push	{r7}
34183f22:	b083      	sub	sp, #12
34183f24:	af00      	add	r7, sp, #0
34183f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
34183f28:	4b05      	ldr	r3, [pc, #20]	@ (34183f40 <LL_RCC_GetETHPTPClockSource+0x20>)
34183f2a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34183f2e:	f003 0303 	and.w	r3, r3, #3
}
34183f32:	4618      	mov	r0, r3
34183f34:	370c      	adds	r7, #12
34183f36:	46bd      	mov	sp, r7
34183f38:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f3c:	4770      	bx	lr
34183f3e:	bf00      	nop
34183f40:	56028000 	.word	0x56028000

34183f44 <LL_RCC_GetFDCANClockSource>:
{
34183f44:	b480      	push	{r7}
34183f46:	b083      	sub	sp, #12
34183f48:	af00      	add	r7, sp, #0
34183f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34183f4c:	4b05      	ldr	r3, [pc, #20]	@ (34183f64 <LL_RCC_GetFDCANClockSource+0x20>)
34183f4e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183f52:	f003 0303 	and.w	r3, r3, #3
}
34183f56:	4618      	mov	r0, r3
34183f58:	370c      	adds	r7, #12
34183f5a:	46bd      	mov	sp, r7
34183f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f60:	4770      	bx	lr
34183f62:	bf00      	nop
34183f64:	56028000 	.word	0x56028000

34183f68 <LL_RCC_GetFMCClockSource>:
{
34183f68:	b480      	push	{r7}
34183f6a:	b083      	sub	sp, #12
34183f6c:	af00      	add	r7, sp, #0
34183f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
34183f70:	4b05      	ldr	r3, [pc, #20]	@ (34183f88 <LL_RCC_GetFMCClockSource+0x20>)
34183f72:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34183f76:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34183f7a:	4618      	mov	r0, r3
34183f7c:	370c      	adds	r7, #12
34183f7e:	46bd      	mov	sp, r7
34183f80:	f85d 7b04 	ldr.w	r7, [sp], #4
34183f84:	4770      	bx	lr
34183f86:	bf00      	nop
34183f88:	56028000 	.word	0x56028000

34183f8c <LL_RCC_GetI2CClockSource>:
{
34183f8c:	b580      	push	{r7, lr}
34183f8e:	b082      	sub	sp, #8
34183f90:	af00      	add	r7, sp, #0
34183f92:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183f94:	6878      	ldr	r0, [r7, #4]
34183f96:	f7ff ff43 	bl	34183e20 <LL_RCC_GetClockSource>
34183f9a:	4603      	mov	r3, r0
}
34183f9c:	4618      	mov	r0, r3
34183f9e:	3708      	adds	r7, #8
34183fa0:	46bd      	mov	sp, r7
34183fa2:	bd80      	pop	{r7, pc}

34183fa4 <LL_RCC_GetI3CClockSource>:
{
34183fa4:	b580      	push	{r7, lr}
34183fa6:	b082      	sub	sp, #8
34183fa8:	af00      	add	r7, sp, #0
34183faa:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183fac:	6878      	ldr	r0, [r7, #4]
34183fae:	f7ff ff37 	bl	34183e20 <LL_RCC_GetClockSource>
34183fb2:	4603      	mov	r3, r0
}
34183fb4:	4618      	mov	r0, r3
34183fb6:	3708      	adds	r7, #8
34183fb8:	46bd      	mov	sp, r7
34183fba:	bd80      	pop	{r7, pc}

34183fbc <LL_RCC_GetLPTIMClockSource>:
{
34183fbc:	b580      	push	{r7, lr}
34183fbe:	b082      	sub	sp, #8
34183fc0:	af00      	add	r7, sp, #0
34183fc2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34183fc4:	6878      	ldr	r0, [r7, #4]
34183fc6:	f7ff ff2b 	bl	34183e20 <LL_RCC_GetClockSource>
34183fca:	4603      	mov	r3, r0
}
34183fcc:	4618      	mov	r0, r3
34183fce:	3708      	adds	r7, #8
34183fd0:	46bd      	mov	sp, r7
34183fd2:	bd80      	pop	{r7, pc}

34183fd4 <LL_RCC_GetLPUARTClockSource>:
{
34183fd4:	b480      	push	{r7}
34183fd6:	b083      	sub	sp, #12
34183fd8:	af00      	add	r7, sp, #0
34183fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34183fdc:	4b05      	ldr	r3, [pc, #20]	@ (34183ff4 <LL_RCC_GetLPUARTClockSource+0x20>)
34183fde:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34183fe2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
34183fe6:	4618      	mov	r0, r3
34183fe8:	370c      	adds	r7, #12
34183fea:	46bd      	mov	sp, r7
34183fec:	f85d 7b04 	ldr.w	r7, [sp], #4
34183ff0:	4770      	bx	lr
34183ff2:	bf00      	nop
34183ff4:	56028000 	.word	0x56028000

34183ff8 <LL_RCC_GetLTDCClockSource>:
{
34183ff8:	b480      	push	{r7}
34183ffa:	b083      	sub	sp, #12
34183ffc:	af00      	add	r7, sp, #0
34183ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34184000:	4b05      	ldr	r3, [pc, #20]	@ (34184018 <LL_RCC_GetLTDCClockSource+0x20>)
34184002:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34184006:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
3418400a:	4618      	mov	r0, r3
3418400c:	370c      	adds	r7, #12
3418400e:	46bd      	mov	sp, r7
34184010:	f85d 7b04 	ldr.w	r7, [sp], #4
34184014:	4770      	bx	lr
34184016:	bf00      	nop
34184018:	56028000 	.word	0x56028000

3418401c <LL_RCC_GetMDFClockSource>:
{
3418401c:	b480      	push	{r7}
3418401e:	b083      	sub	sp, #12
34184020:	af00      	add	r7, sp, #0
34184022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
34184024:	4b05      	ldr	r3, [pc, #20]	@ (3418403c <LL_RCC_GetMDFClockSource+0x20>)
34184026:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
3418402a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
3418402e:	4618      	mov	r0, r3
34184030:	370c      	adds	r7, #12
34184032:	46bd      	mov	sp, r7
34184034:	f85d 7b04 	ldr.w	r7, [sp], #4
34184038:	4770      	bx	lr
3418403a:	bf00      	nop
3418403c:	56028000 	.word	0x56028000

34184040 <LL_RCC_GetPSSIClockSource>:
{
34184040:	b480      	push	{r7}
34184042:	b083      	sub	sp, #12
34184044:	af00      	add	r7, sp, #0
34184046:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34184048:	4b05      	ldr	r3, [pc, #20]	@ (34184060 <LL_RCC_GetPSSIClockSource+0x20>)
3418404a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418404e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34184052:	4618      	mov	r0, r3
34184054:	370c      	adds	r7, #12
34184056:	46bd      	mov	sp, r7
34184058:	f85d 7b04 	ldr.w	r7, [sp], #4
3418405c:	4770      	bx	lr
3418405e:	bf00      	nop
34184060:	56028000 	.word	0x56028000

34184064 <LL_RCC_GetSAIClockSource>:
{
34184064:	b580      	push	{r7, lr}
34184066:	b082      	sub	sp, #8
34184068:	af00      	add	r7, sp, #0
3418406a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3418406c:	6878      	ldr	r0, [r7, #4]
3418406e:	f7ff fed7 	bl	34183e20 <LL_RCC_GetClockSource>
34184072:	4603      	mov	r3, r0
}
34184074:	4618      	mov	r0, r3
34184076:	3708      	adds	r7, #8
34184078:	46bd      	mov	sp, r7
3418407a:	bd80      	pop	{r7, pc}

3418407c <LL_RCC_GetSDMMCClockSource>:
{
3418407c:	b580      	push	{r7, lr}
3418407e:	b082      	sub	sp, #8
34184080:	af00      	add	r7, sp, #0
34184082:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184084:	6878      	ldr	r0, [r7, #4]
34184086:	f7ff fecb 	bl	34183e20 <LL_RCC_GetClockSource>
3418408a:	4603      	mov	r3, r0
}
3418408c:	4618      	mov	r0, r3
3418408e:	3708      	adds	r7, #8
34184090:	46bd      	mov	sp, r7
34184092:	bd80      	pop	{r7, pc}

34184094 <LL_RCC_GetSPDIFRXClockSource>:
{
34184094:	b480      	push	{r7}
34184096:	b083      	sub	sp, #12
34184098:	af00      	add	r7, sp, #0
3418409a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
3418409c:	4b05      	ldr	r3, [pc, #20]	@ (341840b4 <LL_RCC_GetSPDIFRXClockSource+0x20>)
3418409e:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
341840a2:	f003 0307 	and.w	r3, r3, #7
}
341840a6:	4618      	mov	r0, r3
341840a8:	370c      	adds	r7, #12
341840aa:	46bd      	mov	sp, r7
341840ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341840b0:	4770      	bx	lr
341840b2:	bf00      	nop
341840b4:	56028000 	.word	0x56028000

341840b8 <LL_RCC_GetSPIClockSource>:
{
341840b8:	b580      	push	{r7, lr}
341840ba:	b082      	sub	sp, #8
341840bc:	af00      	add	r7, sp, #0
341840be:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341840c0:	6878      	ldr	r0, [r7, #4]
341840c2:	f7ff fead 	bl	34183e20 <LL_RCC_GetClockSource>
341840c6:	4603      	mov	r3, r0
}
341840c8:	4618      	mov	r0, r3
341840ca:	3708      	adds	r7, #8
341840cc:	46bd      	mov	sp, r7
341840ce:	bd80      	pop	{r7, pc}

341840d0 <LL_RCC_GetUSARTClockSource>:
{
341840d0:	b580      	push	{r7, lr}
341840d2:	b082      	sub	sp, #8
341840d4:	af00      	add	r7, sp, #0
341840d6:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341840d8:	6878      	ldr	r0, [r7, #4]
341840da:	f7ff fea1 	bl	34183e20 <LL_RCC_GetClockSource>
341840de:	4603      	mov	r3, r0
}
341840e0:	4618      	mov	r0, r3
341840e2:	3708      	adds	r7, #8
341840e4:	46bd      	mov	sp, r7
341840e6:	bd80      	pop	{r7, pc}

341840e8 <LL_RCC_GetUARTClockSource>:
{
341840e8:	b580      	push	{r7, lr}
341840ea:	b082      	sub	sp, #8
341840ec:	af00      	add	r7, sp, #0
341840ee:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
341840f0:	6878      	ldr	r0, [r7, #4]
341840f2:	f7ff fe95 	bl	34183e20 <LL_RCC_GetClockSource>
341840f6:	4603      	mov	r3, r0
}
341840f8:	4618      	mov	r0, r3
341840fa:	3708      	adds	r7, #8
341840fc:	46bd      	mov	sp, r7
341840fe:	bd80      	pop	{r7, pc}

34184100 <LL_RCC_GetUSBClockSource>:
{
34184100:	b580      	push	{r7, lr}
34184102:	b082      	sub	sp, #8
34184104:	af00      	add	r7, sp, #0
34184106:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184108:	6878      	ldr	r0, [r7, #4]
3418410a:	f7ff fe89 	bl	34183e20 <LL_RCC_GetClockSource>
3418410e:	4603      	mov	r3, r0
}
34184110:	4618      	mov	r0, r3
34184112:	3708      	adds	r7, #8
34184114:	46bd      	mov	sp, r7
34184116:	bd80      	pop	{r7, pc}

34184118 <LL_RCC_GetXSPIClockSource>:
{
34184118:	b580      	push	{r7, lr}
3418411a:	b082      	sub	sp, #8
3418411c:	af00      	add	r7, sp, #0
3418411e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34184120:	6878      	ldr	r0, [r7, #4]
34184122:	f7ff fe7d 	bl	34183e20 <LL_RCC_GetClockSource>
34184126:	4603      	mov	r3, r0
}
34184128:	4618      	mov	r0, r3
3418412a:	3708      	adds	r7, #8
3418412c:	46bd      	mov	sp, r7
3418412e:	bd80      	pop	{r7, pc}

34184130 <LL_RCC_SetRTCClockSource>:
{
34184130:	b480      	push	{r7}
34184132:	b083      	sub	sp, #12
34184134:	af00      	add	r7, sp, #0
34184136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34184138:	4b07      	ldr	r3, [pc, #28]	@ (34184158 <LL_RCC_SetRTCClockSource+0x28>)
3418413a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3418413e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
34184142:	4905      	ldr	r1, [pc, #20]	@ (34184158 <LL_RCC_SetRTCClockSource+0x28>)
34184144:	687b      	ldr	r3, [r7, #4]
34184146:	4313      	orrs	r3, r2
34184148:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
3418414c:	bf00      	nop
3418414e:	370c      	adds	r7, #12
34184150:	46bd      	mov	sp, r7
34184152:	f85d 7b04 	ldr.w	r7, [sp], #4
34184156:	4770      	bx	lr
34184158:	56028000 	.word	0x56028000

3418415c <LL_RCC_GetRTCClockSource>:
{
3418415c:	b480      	push	{r7}
3418415e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34184160:	4b04      	ldr	r3, [pc, #16]	@ (34184174 <LL_RCC_GetRTCClockSource+0x18>)
34184162:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34184166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
3418416a:	4618      	mov	r0, r3
3418416c:	46bd      	mov	sp, r7
3418416e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184172:	4770      	bx	lr
34184174:	56028000 	.word	0x56028000

34184178 <LL_RCC_SetRTC_HSEPrescaler>:
{
34184178:	b480      	push	{r7}
3418417a:	b083      	sub	sp, #12
3418417c:	af00      	add	r7, sp, #0
3418417e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34184180:	4b07      	ldr	r3, [pc, #28]	@ (341841a0 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34184182:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34184186:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
3418418a:	4905      	ldr	r1, [pc, #20]	@ (341841a0 <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3418418c:	687b      	ldr	r3, [r7, #4]
3418418e:	4313      	orrs	r3, r2
34184190:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34184194:	bf00      	nop
34184196:	370c      	adds	r7, #12
34184198:	46bd      	mov	sp, r7
3418419a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418419e:	4770      	bx	lr
341841a0:	56028000 	.word	0x56028000

341841a4 <LL_RCC_SetTIMPrescaler>:
{
341841a4:	b480      	push	{r7}
341841a6:	b083      	sub	sp, #12
341841a8:	af00      	add	r7, sp, #0
341841aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
341841ac:	4b07      	ldr	r3, [pc, #28]	@ (341841cc <LL_RCC_SetTIMPrescaler+0x28>)
341841ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341841b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
341841b4:	687b      	ldr	r3, [r7, #4]
341841b6:	061b      	lsls	r3, r3, #24
341841b8:	4904      	ldr	r1, [pc, #16]	@ (341841cc <LL_RCC_SetTIMPrescaler+0x28>)
341841ba:	4313      	orrs	r3, r2
341841bc:	624b      	str	r3, [r1, #36]	@ 0x24
}
341841be:	bf00      	nop
341841c0:	370c      	adds	r7, #12
341841c2:	46bd      	mov	sp, r7
341841c4:	f85d 7b04 	ldr.w	r7, [sp], #4
341841c8:	4770      	bx	lr
341841ca:	bf00      	nop
341841cc:	56028000 	.word	0x56028000

341841d0 <LL_RCC_GetTIMPrescaler>:
{
341841d0:	b480      	push	{r7}
341841d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
341841d4:	4b04      	ldr	r3, [pc, #16]	@ (341841e8 <LL_RCC_GetTIMPrescaler+0x18>)
341841d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341841d8:	0e1b      	lsrs	r3, r3, #24
341841da:	f003 0303 	and.w	r3, r3, #3
}
341841de:	4618      	mov	r0, r3
341841e0:	46bd      	mov	sp, r7
341841e2:	f85d 7b04 	ldr.w	r7, [sp], #4
341841e6:	4770      	bx	lr
341841e8:	56028000 	.word	0x56028000

341841ec <LL_RCC_PLL1_GetSource>:
{
341841ec:	b480      	push	{r7}
341841ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
341841f0:	4b04      	ldr	r3, [pc, #16]	@ (34184204 <LL_RCC_PLL1_GetSource+0x18>)
341841f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
341841f6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
341841fa:	4618      	mov	r0, r3
341841fc:	46bd      	mov	sp, r7
341841fe:	f85d 7b04 	ldr.w	r7, [sp], #4
34184202:	4770      	bx	lr
34184204:	56028000 	.word	0x56028000

34184208 <LL_RCC_PLL1_IsReady>:
{
34184208:	b480      	push	{r7}
3418420a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3418420c:	4b07      	ldr	r3, [pc, #28]	@ (3418422c <LL_RCC_PLL1_IsReady+0x24>)
3418420e:	685b      	ldr	r3, [r3, #4]
34184210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34184214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184218:	d101      	bne.n	3418421e <LL_RCC_PLL1_IsReady+0x16>
3418421a:	2301      	movs	r3, #1
3418421c:	e000      	b.n	34184220 <LL_RCC_PLL1_IsReady+0x18>
3418421e:	2300      	movs	r3, #0
}
34184220:	4618      	mov	r0, r3
34184222:	46bd      	mov	sp, r7
34184224:	f85d 7b04 	ldr.w	r7, [sp], #4
34184228:	4770      	bx	lr
3418422a:	bf00      	nop
3418422c:	56028000 	.word	0x56028000

34184230 <LL_RCC_PLL1_IsEnabledBypass>:
{
34184230:	b480      	push	{r7}
34184232:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34184234:	4b07      	ldr	r3, [pc, #28]	@ (34184254 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
34184236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418423a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418423e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184242:	d101      	bne.n	34184248 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34184244:	2301      	movs	r3, #1
34184246:	e000      	b.n	3418424a <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34184248:	2300      	movs	r3, #0
}
3418424a:	4618      	mov	r0, r3
3418424c:	46bd      	mov	sp, r7
3418424e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184252:	4770      	bx	lr
34184254:	56028000 	.word	0x56028000

34184258 <LL_RCC_PLL1_GetN>:
{
34184258:	b480      	push	{r7}
3418425a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
3418425c:	4b05      	ldr	r3, [pc, #20]	@ (34184274 <LL_RCC_PLL1_GetN+0x1c>)
3418425e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184262:	0a1b      	lsrs	r3, r3, #8
34184264:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34184268:	4618      	mov	r0, r3
3418426a:	46bd      	mov	sp, r7
3418426c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184270:	4770      	bx	lr
34184272:	bf00      	nop
34184274:	56028000 	.word	0x56028000

34184278 <LL_RCC_PLL1_GetM>:
{
34184278:	b480      	push	{r7}
3418427a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3418427c:	4b05      	ldr	r3, [pc, #20]	@ (34184294 <LL_RCC_PLL1_GetM+0x1c>)
3418427e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34184282:	0d1b      	lsrs	r3, r3, #20
34184284:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34184288:	4618      	mov	r0, r3
3418428a:	46bd      	mov	sp, r7
3418428c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184290:	4770      	bx	lr
34184292:	bf00      	nop
34184294:	56028000 	.word	0x56028000

34184298 <LL_RCC_PLL1_GetP1>:
{
34184298:	b480      	push	{r7}
3418429a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
3418429c:	4b05      	ldr	r3, [pc, #20]	@ (341842b4 <LL_RCC_PLL1_GetP1+0x1c>)
3418429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341842a2:	0edb      	lsrs	r3, r3, #27
341842a4:	f003 0307 	and.w	r3, r3, #7
}
341842a8:	4618      	mov	r0, r3
341842aa:	46bd      	mov	sp, r7
341842ac:	f85d 7b04 	ldr.w	r7, [sp], #4
341842b0:	4770      	bx	lr
341842b2:	bf00      	nop
341842b4:	56028000 	.word	0x56028000

341842b8 <LL_RCC_PLL1_GetP2>:
{
341842b8:	b480      	push	{r7}
341842ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
341842bc:	4b05      	ldr	r3, [pc, #20]	@ (341842d4 <LL_RCC_PLL1_GetP2+0x1c>)
341842be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341842c2:	0e1b      	lsrs	r3, r3, #24
341842c4:	f003 0307 	and.w	r3, r3, #7
}
341842c8:	4618      	mov	r0, r3
341842ca:	46bd      	mov	sp, r7
341842cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341842d0:	4770      	bx	lr
341842d2:	bf00      	nop
341842d4:	56028000 	.word	0x56028000

341842d8 <LL_RCC_PLL1P_IsEnabled>:
{
341842d8:	b480      	push	{r7}
341842da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
341842dc:	4b07      	ldr	r3, [pc, #28]	@ (341842fc <LL_RCC_PLL1P_IsEnabled+0x24>)
341842de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
341842e2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
341842e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
341842ea:	d101      	bne.n	341842f0 <LL_RCC_PLL1P_IsEnabled+0x18>
341842ec:	2301      	movs	r3, #1
341842ee:	e000      	b.n	341842f2 <LL_RCC_PLL1P_IsEnabled+0x1a>
341842f0:	2300      	movs	r3, #0
}
341842f2:	4618      	mov	r0, r3
341842f4:	46bd      	mov	sp, r7
341842f6:	f85d 7b04 	ldr.w	r7, [sp], #4
341842fa:	4770      	bx	lr
341842fc:	56028000 	.word	0x56028000

34184300 <LL_RCC_PLL1_GetFRACN>:
{
34184300:	b480      	push	{r7}
34184302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
34184304:	4b04      	ldr	r3, [pc, #16]	@ (34184318 <LL_RCC_PLL1_GetFRACN+0x18>)
34184306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418430a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418430e:	4618      	mov	r0, r3
34184310:	46bd      	mov	sp, r7
34184312:	f85d 7b04 	ldr.w	r7, [sp], #4
34184316:	4770      	bx	lr
34184318:	56028000 	.word	0x56028000

3418431c <LL_RCC_PLL2_GetSource>:
{
3418431c:	b480      	push	{r7}
3418431e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
34184320:	4b04      	ldr	r3, [pc, #16]	@ (34184334 <LL_RCC_PLL2_GetSource+0x18>)
34184322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184326:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418432a:	4618      	mov	r0, r3
3418432c:	46bd      	mov	sp, r7
3418432e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184332:	4770      	bx	lr
34184334:	56028000 	.word	0x56028000

34184338 <LL_RCC_PLL2_IsReady>:
{
34184338:	b480      	push	{r7}
3418433a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3418433c:	4b07      	ldr	r3, [pc, #28]	@ (3418435c <LL_RCC_PLL2_IsReady+0x24>)
3418433e:	685b      	ldr	r3, [r3, #4]
34184340:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34184344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34184348:	d101      	bne.n	3418434e <LL_RCC_PLL2_IsReady+0x16>
3418434a:	2301      	movs	r3, #1
3418434c:	e000      	b.n	34184350 <LL_RCC_PLL2_IsReady+0x18>
3418434e:	2300      	movs	r3, #0
}
34184350:	4618      	mov	r0, r3
34184352:	46bd      	mov	sp, r7
34184354:	f85d 7b04 	ldr.w	r7, [sp], #4
34184358:	4770      	bx	lr
3418435a:	bf00      	nop
3418435c:	56028000 	.word	0x56028000

34184360 <LL_RCC_PLL2_IsEnabledBypass>:
{
34184360:	b480      	push	{r7}
34184362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34184364:	4b07      	ldr	r3, [pc, #28]	@ (34184384 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34184366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418436a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418436e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34184372:	d101      	bne.n	34184378 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34184374:	2301      	movs	r3, #1
34184376:	e000      	b.n	3418437a <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34184378:	2300      	movs	r3, #0
}
3418437a:	4618      	mov	r0, r3
3418437c:	46bd      	mov	sp, r7
3418437e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184382:	4770      	bx	lr
34184384:	56028000 	.word	0x56028000

34184388 <LL_RCC_PLL2_GetN>:
{
34184388:	b480      	push	{r7}
3418438a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
3418438c:	4b05      	ldr	r3, [pc, #20]	@ (341843a4 <LL_RCC_PLL2_GetN+0x1c>)
3418438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34184392:	0a1b      	lsrs	r3, r3, #8
34184394:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34184398:	4618      	mov	r0, r3
3418439a:	46bd      	mov	sp, r7
3418439c:	f85d 7b04 	ldr.w	r7, [sp], #4
341843a0:	4770      	bx	lr
341843a2:	bf00      	nop
341843a4:	56028000 	.word	0x56028000

341843a8 <LL_RCC_PLL2_GetM>:
{
341843a8:	b480      	push	{r7}
341843aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
341843ac:	4b05      	ldr	r3, [pc, #20]	@ (341843c4 <LL_RCC_PLL2_GetM+0x1c>)
341843ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
341843b2:	0d1b      	lsrs	r3, r3, #20
341843b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
341843b8:	4618      	mov	r0, r3
341843ba:	46bd      	mov	sp, r7
341843bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341843c0:	4770      	bx	lr
341843c2:	bf00      	nop
341843c4:	56028000 	.word	0x56028000

341843c8 <LL_RCC_PLL2_GetP1>:
{
341843c8:	b480      	push	{r7}
341843ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
341843cc:	4b05      	ldr	r3, [pc, #20]	@ (341843e4 <LL_RCC_PLL2_GetP1+0x1c>)
341843ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341843d2:	0edb      	lsrs	r3, r3, #27
341843d4:	f003 0307 	and.w	r3, r3, #7
}
341843d8:	4618      	mov	r0, r3
341843da:	46bd      	mov	sp, r7
341843dc:	f85d 7b04 	ldr.w	r7, [sp], #4
341843e0:	4770      	bx	lr
341843e2:	bf00      	nop
341843e4:	56028000 	.word	0x56028000

341843e8 <LL_RCC_PLL2_GetP2>:
{
341843e8:	b480      	push	{r7}
341843ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
341843ec:	4b05      	ldr	r3, [pc, #20]	@ (34184404 <LL_RCC_PLL2_GetP2+0x1c>)
341843ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
341843f2:	0e1b      	lsrs	r3, r3, #24
341843f4:	f003 0307 	and.w	r3, r3, #7
}
341843f8:	4618      	mov	r0, r3
341843fa:	46bd      	mov	sp, r7
341843fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184400:	4770      	bx	lr
34184402:	bf00      	nop
34184404:	56028000 	.word	0x56028000

34184408 <LL_RCC_PLL2P_IsEnabled>:
{
34184408:	b480      	push	{r7}
3418440a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
3418440c:	4b07      	ldr	r3, [pc, #28]	@ (3418442c <LL_RCC_PLL2P_IsEnabled+0x24>)
3418440e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34184412:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34184416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418441a:	d101      	bne.n	34184420 <LL_RCC_PLL2P_IsEnabled+0x18>
3418441c:	2301      	movs	r3, #1
3418441e:	e000      	b.n	34184422 <LL_RCC_PLL2P_IsEnabled+0x1a>
34184420:	2300      	movs	r3, #0
}
34184422:	4618      	mov	r0, r3
34184424:	46bd      	mov	sp, r7
34184426:	f85d 7b04 	ldr.w	r7, [sp], #4
3418442a:	4770      	bx	lr
3418442c:	56028000 	.word	0x56028000

34184430 <LL_RCC_PLL2_GetFRACN>:
{
34184430:	b480      	push	{r7}
34184432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34184434:	4b04      	ldr	r3, [pc, #16]	@ (34184448 <LL_RCC_PLL2_GetFRACN+0x18>)
34184436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418443a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418443e:	4618      	mov	r0, r3
34184440:	46bd      	mov	sp, r7
34184442:	f85d 7b04 	ldr.w	r7, [sp], #4
34184446:	4770      	bx	lr
34184448:	56028000 	.word	0x56028000

3418444c <LL_RCC_PLL3_GetSource>:
{
3418444c:	b480      	push	{r7}
3418444e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34184450:	4b04      	ldr	r3, [pc, #16]	@ (34184464 <LL_RCC_PLL3_GetSource+0x18>)
34184452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34184456:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418445a:	4618      	mov	r0, r3
3418445c:	46bd      	mov	sp, r7
3418445e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184462:	4770      	bx	lr
34184464:	56028000 	.word	0x56028000

34184468 <LL_RCC_PLL3_IsReady>:
{
34184468:	b480      	push	{r7}
3418446a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418446c:	4b07      	ldr	r3, [pc, #28]	@ (3418448c <LL_RCC_PLL3_IsReady+0x24>)
3418446e:	685b      	ldr	r3, [r3, #4]
34184470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34184474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34184478:	d101      	bne.n	3418447e <LL_RCC_PLL3_IsReady+0x16>
3418447a:	2301      	movs	r3, #1
3418447c:	e000      	b.n	34184480 <LL_RCC_PLL3_IsReady+0x18>
3418447e:	2300      	movs	r3, #0
}
34184480:	4618      	mov	r0, r3
34184482:	46bd      	mov	sp, r7
34184484:	f85d 7b04 	ldr.w	r7, [sp], #4
34184488:	4770      	bx	lr
3418448a:	bf00      	nop
3418448c:	56028000 	.word	0x56028000

34184490 <LL_RCC_PLL3_IsEnabledBypass>:
{
34184490:	b480      	push	{r7}
34184492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34184494:	4b07      	ldr	r3, [pc, #28]	@ (341844b4 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34184496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418449a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3418449e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341844a2:	d101      	bne.n	341844a8 <LL_RCC_PLL3_IsEnabledBypass+0x18>
341844a4:	2301      	movs	r3, #1
341844a6:	e000      	b.n	341844aa <LL_RCC_PLL3_IsEnabledBypass+0x1a>
341844a8:	2300      	movs	r3, #0
}
341844aa:	4618      	mov	r0, r3
341844ac:	46bd      	mov	sp, r7
341844ae:	f85d 7b04 	ldr.w	r7, [sp], #4
341844b2:	4770      	bx	lr
341844b4:	56028000 	.word	0x56028000

341844b8 <LL_RCC_PLL3_GetN>:
{
341844b8:	b480      	push	{r7}
341844ba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
341844bc:	4b05      	ldr	r3, [pc, #20]	@ (341844d4 <LL_RCC_PLL3_GetN+0x1c>)
341844be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341844c2:	0a1b      	lsrs	r3, r3, #8
341844c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
341844c8:	4618      	mov	r0, r3
341844ca:	46bd      	mov	sp, r7
341844cc:	f85d 7b04 	ldr.w	r7, [sp], #4
341844d0:	4770      	bx	lr
341844d2:	bf00      	nop
341844d4:	56028000 	.word	0x56028000

341844d8 <LL_RCC_PLL3_GetM>:
{
341844d8:	b480      	push	{r7}
341844da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
341844dc:	4b05      	ldr	r3, [pc, #20]	@ (341844f4 <LL_RCC_PLL3_GetM+0x1c>)
341844de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
341844e2:	0d1b      	lsrs	r3, r3, #20
341844e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
341844e8:	4618      	mov	r0, r3
341844ea:	46bd      	mov	sp, r7
341844ec:	f85d 7b04 	ldr.w	r7, [sp], #4
341844f0:	4770      	bx	lr
341844f2:	bf00      	nop
341844f4:	56028000 	.word	0x56028000

341844f8 <LL_RCC_PLL3_GetP1>:
{
341844f8:	b480      	push	{r7}
341844fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
341844fc:	4b05      	ldr	r3, [pc, #20]	@ (34184514 <LL_RCC_PLL3_GetP1+0x1c>)
341844fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184502:	0edb      	lsrs	r3, r3, #27
34184504:	f003 0307 	and.w	r3, r3, #7
}
34184508:	4618      	mov	r0, r3
3418450a:	46bd      	mov	sp, r7
3418450c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184510:	4770      	bx	lr
34184512:	bf00      	nop
34184514:	56028000 	.word	0x56028000

34184518 <LL_RCC_PLL3_GetP2>:
{
34184518:	b480      	push	{r7}
3418451a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3418451c:	4b05      	ldr	r3, [pc, #20]	@ (34184534 <LL_RCC_PLL3_GetP2+0x1c>)
3418451e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184522:	0e1b      	lsrs	r3, r3, #24
34184524:	f003 0307 	and.w	r3, r3, #7
}
34184528:	4618      	mov	r0, r3
3418452a:	46bd      	mov	sp, r7
3418452c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184530:	4770      	bx	lr
34184532:	bf00      	nop
34184534:	56028000 	.word	0x56028000

34184538 <LL_RCC_PLL3P_IsEnabled>:
{
34184538:	b480      	push	{r7}
3418453a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
3418453c:	4b07      	ldr	r3, [pc, #28]	@ (3418455c <LL_RCC_PLL3P_IsEnabled+0x24>)
3418453e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34184542:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34184546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418454a:	d101      	bne.n	34184550 <LL_RCC_PLL3P_IsEnabled+0x18>
3418454c:	2301      	movs	r3, #1
3418454e:	e000      	b.n	34184552 <LL_RCC_PLL3P_IsEnabled+0x1a>
34184550:	2300      	movs	r3, #0
}
34184552:	4618      	mov	r0, r3
34184554:	46bd      	mov	sp, r7
34184556:	f85d 7b04 	ldr.w	r7, [sp], #4
3418455a:	4770      	bx	lr
3418455c:	56028000 	.word	0x56028000

34184560 <LL_RCC_PLL3_GetFRACN>:
{
34184560:	b480      	push	{r7}
34184562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34184564:	4b04      	ldr	r3, [pc, #16]	@ (34184578 <LL_RCC_PLL3_GetFRACN+0x18>)
34184566:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
3418456a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418456e:	4618      	mov	r0, r3
34184570:	46bd      	mov	sp, r7
34184572:	f85d 7b04 	ldr.w	r7, [sp], #4
34184576:	4770      	bx	lr
34184578:	56028000 	.word	0x56028000

3418457c <LL_RCC_PLL4_GetSource>:
{
3418457c:	b480      	push	{r7}
3418457e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34184580:	4b04      	ldr	r3, [pc, #16]	@ (34184594 <LL_RCC_PLL4_GetSource+0x18>)
34184582:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184586:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
3418458a:	4618      	mov	r0, r3
3418458c:	46bd      	mov	sp, r7
3418458e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184592:	4770      	bx	lr
34184594:	56028000 	.word	0x56028000

34184598 <LL_RCC_PLL4_IsReady>:
{
34184598:	b480      	push	{r7}
3418459a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418459c:	4b07      	ldr	r3, [pc, #28]	@ (341845bc <LL_RCC_PLL4_IsReady+0x24>)
3418459e:	685b      	ldr	r3, [r3, #4]
341845a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
341845a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
341845a8:	d101      	bne.n	341845ae <LL_RCC_PLL4_IsReady+0x16>
341845aa:	2301      	movs	r3, #1
341845ac:	e000      	b.n	341845b0 <LL_RCC_PLL4_IsReady+0x18>
341845ae:	2300      	movs	r3, #0
}
341845b0:	4618      	mov	r0, r3
341845b2:	46bd      	mov	sp, r7
341845b4:	f85d 7b04 	ldr.w	r7, [sp], #4
341845b8:	4770      	bx	lr
341845ba:	bf00      	nop
341845bc:	56028000 	.word	0x56028000

341845c0 <LL_RCC_PLL4_IsEnabledBypass>:
{
341845c0:	b480      	push	{r7}
341845c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
341845c4:	4b07      	ldr	r3, [pc, #28]	@ (341845e4 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
341845c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341845ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
341845ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341845d2:	d101      	bne.n	341845d8 <LL_RCC_PLL4_IsEnabledBypass+0x18>
341845d4:	2301      	movs	r3, #1
341845d6:	e000      	b.n	341845da <LL_RCC_PLL4_IsEnabledBypass+0x1a>
341845d8:	2300      	movs	r3, #0
}
341845da:	4618      	mov	r0, r3
341845dc:	46bd      	mov	sp, r7
341845de:	f85d 7b04 	ldr.w	r7, [sp], #4
341845e2:	4770      	bx	lr
341845e4:	56028000 	.word	0x56028000

341845e8 <LL_RCC_PLL4_GetN>:
{
341845e8:	b480      	push	{r7}
341845ea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
341845ec:	4b05      	ldr	r3, [pc, #20]	@ (34184604 <LL_RCC_PLL4_GetN+0x1c>)
341845ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341845f2:	0a1b      	lsrs	r3, r3, #8
341845f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
341845f8:	4618      	mov	r0, r3
341845fa:	46bd      	mov	sp, r7
341845fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184600:	4770      	bx	lr
34184602:	bf00      	nop
34184604:	56028000 	.word	0x56028000

34184608 <LL_RCC_PLL4_GetM>:
{
34184608:	b480      	push	{r7}
3418460a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
3418460c:	4b05      	ldr	r3, [pc, #20]	@ (34184624 <LL_RCC_PLL4_GetM+0x1c>)
3418460e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34184612:	0d1b      	lsrs	r3, r3, #20
34184614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34184618:	4618      	mov	r0, r3
3418461a:	46bd      	mov	sp, r7
3418461c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184620:	4770      	bx	lr
34184622:	bf00      	nop
34184624:	56028000 	.word	0x56028000

34184628 <LL_RCC_PLL4_GetP1>:
{
34184628:	b480      	push	{r7}
3418462a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
3418462c:	4b05      	ldr	r3, [pc, #20]	@ (34184644 <LL_RCC_PLL4_GetP1+0x1c>)
3418462e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184632:	0edb      	lsrs	r3, r3, #27
34184634:	f003 0307 	and.w	r3, r3, #7
}
34184638:	4618      	mov	r0, r3
3418463a:	46bd      	mov	sp, r7
3418463c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184640:	4770      	bx	lr
34184642:	bf00      	nop
34184644:	56028000 	.word	0x56028000

34184648 <LL_RCC_PLL4_GetP2>:
{
34184648:	b480      	push	{r7}
3418464a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3418464c:	4b05      	ldr	r3, [pc, #20]	@ (34184664 <LL_RCC_PLL4_GetP2+0x1c>)
3418464e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184652:	0e1b      	lsrs	r3, r3, #24
34184654:	f003 0307 	and.w	r3, r3, #7
}
34184658:	4618      	mov	r0, r3
3418465a:	46bd      	mov	sp, r7
3418465c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184660:	4770      	bx	lr
34184662:	bf00      	nop
34184664:	56028000 	.word	0x56028000

34184668 <LL_RCC_PLL4P_IsEnabled>:
{
34184668:	b480      	push	{r7}
3418466a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
3418466c:	4b07      	ldr	r3, [pc, #28]	@ (3418468c <LL_RCC_PLL4P_IsEnabled+0x24>)
3418466e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34184672:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34184676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418467a:	d101      	bne.n	34184680 <LL_RCC_PLL4P_IsEnabled+0x18>
3418467c:	2301      	movs	r3, #1
3418467e:	e000      	b.n	34184682 <LL_RCC_PLL4P_IsEnabled+0x1a>
34184680:	2300      	movs	r3, #0
}
34184682:	4618      	mov	r0, r3
34184684:	46bd      	mov	sp, r7
34184686:	f85d 7b04 	ldr.w	r7, [sp], #4
3418468a:	4770      	bx	lr
3418468c:	56028000 	.word	0x56028000

34184690 <LL_RCC_PLL4_GetFRACN>:
{
34184690:	b480      	push	{r7}
34184692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34184694:	4b04      	ldr	r3, [pc, #16]	@ (341846a8 <LL_RCC_PLL4_GetFRACN+0x18>)
34184696:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3418469a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
3418469e:	4618      	mov	r0, r3
341846a0:	46bd      	mov	sp, r7
341846a2:	f85d 7b04 	ldr.w	r7, [sp], #4
341846a6:	4770      	bx	lr
341846a8:	56028000 	.word	0x56028000

341846ac <LL_RCC_IC3_Enable>:
{
341846ac:	b480      	push	{r7}
341846ae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
341846b0:	4b04      	ldr	r3, [pc, #16]	@ (341846c4 <LL_RCC_IC3_Enable+0x18>)
341846b2:	2204      	movs	r2, #4
341846b4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341846b8:	bf00      	nop
341846ba:	46bd      	mov	sp, r7
341846bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341846c0:	4770      	bx	lr
341846c2:	bf00      	nop
341846c4:	56028000 	.word	0x56028000

341846c8 <LL_RCC_IC3_IsEnabled>:
{
341846c8:	b480      	push	{r7}
341846ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
341846cc:	4b07      	ldr	r3, [pc, #28]	@ (341846ec <LL_RCC_IC3_IsEnabled+0x24>)
341846ce:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341846d2:	f003 0304 	and.w	r3, r3, #4
341846d6:	2b04      	cmp	r3, #4
341846d8:	d101      	bne.n	341846de <LL_RCC_IC3_IsEnabled+0x16>
341846da:	2301      	movs	r3, #1
341846dc:	e000      	b.n	341846e0 <LL_RCC_IC3_IsEnabled+0x18>
341846de:	2300      	movs	r3, #0
}
341846e0:	4618      	mov	r0, r3
341846e2:	46bd      	mov	sp, r7
341846e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341846e8:	4770      	bx	lr
341846ea:	bf00      	nop
341846ec:	56028000 	.word	0x56028000

341846f0 <LL_RCC_IC3_GetSource>:
{
341846f0:	b480      	push	{r7}
341846f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
341846f4:	4b04      	ldr	r3, [pc, #16]	@ (34184708 <LL_RCC_IC3_GetSource+0x18>)
341846f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341846fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341846fe:	4618      	mov	r0, r3
34184700:	46bd      	mov	sp, r7
34184702:	f85d 7b04 	ldr.w	r7, [sp], #4
34184706:	4770      	bx	lr
34184708:	56028000 	.word	0x56028000

3418470c <LL_RCC_IC3_GetDivider>:
{
3418470c:	b480      	push	{r7}
3418470e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34184710:	4b05      	ldr	r3, [pc, #20]	@ (34184728 <LL_RCC_IC3_GetDivider+0x1c>)
34184712:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34184716:	0c1b      	lsrs	r3, r3, #16
34184718:	b2db      	uxtb	r3, r3
3418471a:	3301      	adds	r3, #1
}
3418471c:	4618      	mov	r0, r3
3418471e:	46bd      	mov	sp, r7
34184720:	f85d 7b04 	ldr.w	r7, [sp], #4
34184724:	4770      	bx	lr
34184726:	bf00      	nop
34184728:	56028000 	.word	0x56028000

3418472c <LL_RCC_IC4_Enable>:
{
3418472c:	b480      	push	{r7}
3418472e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34184730:	4b04      	ldr	r3, [pc, #16]	@ (34184744 <LL_RCC_IC4_Enable+0x18>)
34184732:	2208      	movs	r2, #8
34184734:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184738:	bf00      	nop
3418473a:	46bd      	mov	sp, r7
3418473c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184740:	4770      	bx	lr
34184742:	bf00      	nop
34184744:	56028000 	.word	0x56028000

34184748 <LL_RCC_IC4_IsEnabled>:
{
34184748:	b480      	push	{r7}
3418474a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
3418474c:	4b07      	ldr	r3, [pc, #28]	@ (3418476c <LL_RCC_IC4_IsEnabled+0x24>)
3418474e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184752:	f003 0308 	and.w	r3, r3, #8
34184756:	2b08      	cmp	r3, #8
34184758:	d101      	bne.n	3418475e <LL_RCC_IC4_IsEnabled+0x16>
3418475a:	2301      	movs	r3, #1
3418475c:	e000      	b.n	34184760 <LL_RCC_IC4_IsEnabled+0x18>
3418475e:	2300      	movs	r3, #0
}
34184760:	4618      	mov	r0, r3
34184762:	46bd      	mov	sp, r7
34184764:	f85d 7b04 	ldr.w	r7, [sp], #4
34184768:	4770      	bx	lr
3418476a:	bf00      	nop
3418476c:	56028000 	.word	0x56028000

34184770 <LL_RCC_IC4_GetSource>:
{
34184770:	b480      	push	{r7}
34184772:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34184774:	4b04      	ldr	r3, [pc, #16]	@ (34184788 <LL_RCC_IC4_GetSource+0x18>)
34184776:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418477a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418477e:	4618      	mov	r0, r3
34184780:	46bd      	mov	sp, r7
34184782:	f85d 7b04 	ldr.w	r7, [sp], #4
34184786:	4770      	bx	lr
34184788:	56028000 	.word	0x56028000

3418478c <LL_RCC_IC4_GetDivider>:
{
3418478c:	b480      	push	{r7}
3418478e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34184790:	4b05      	ldr	r3, [pc, #20]	@ (341847a8 <LL_RCC_IC4_GetDivider+0x1c>)
34184792:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34184796:	0c1b      	lsrs	r3, r3, #16
34184798:	b2db      	uxtb	r3, r3
3418479a:	3301      	adds	r3, #1
}
3418479c:	4618      	mov	r0, r3
3418479e:	46bd      	mov	sp, r7
341847a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341847a4:	4770      	bx	lr
341847a6:	bf00      	nop
341847a8:	56028000 	.word	0x56028000

341847ac <LL_RCC_IC5_Enable>:
{
341847ac:	b480      	push	{r7}
341847ae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
341847b0:	4b04      	ldr	r3, [pc, #16]	@ (341847c4 <LL_RCC_IC5_Enable+0x18>)
341847b2:	2210      	movs	r2, #16
341847b4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341847b8:	bf00      	nop
341847ba:	46bd      	mov	sp, r7
341847bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341847c0:	4770      	bx	lr
341847c2:	bf00      	nop
341847c4:	56028000 	.word	0x56028000

341847c8 <LL_RCC_IC5_IsEnabled>:
{
341847c8:	b480      	push	{r7}
341847ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
341847cc:	4b07      	ldr	r3, [pc, #28]	@ (341847ec <LL_RCC_IC5_IsEnabled+0x24>)
341847ce:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341847d2:	f003 0310 	and.w	r3, r3, #16
341847d6:	2b10      	cmp	r3, #16
341847d8:	d101      	bne.n	341847de <LL_RCC_IC5_IsEnabled+0x16>
341847da:	2301      	movs	r3, #1
341847dc:	e000      	b.n	341847e0 <LL_RCC_IC5_IsEnabled+0x18>
341847de:	2300      	movs	r3, #0
}
341847e0:	4618      	mov	r0, r3
341847e2:	46bd      	mov	sp, r7
341847e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341847e8:	4770      	bx	lr
341847ea:	bf00      	nop
341847ec:	56028000 	.word	0x56028000

341847f0 <LL_RCC_IC5_GetSource>:
{
341847f0:	b480      	push	{r7}
341847f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
341847f4:	4b04      	ldr	r3, [pc, #16]	@ (34184808 <LL_RCC_IC5_GetSource+0x18>)
341847f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341847fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341847fe:	4618      	mov	r0, r3
34184800:	46bd      	mov	sp, r7
34184802:	f85d 7b04 	ldr.w	r7, [sp], #4
34184806:	4770      	bx	lr
34184808:	56028000 	.word	0x56028000

3418480c <LL_RCC_IC5_GetDivider>:
{
3418480c:	b480      	push	{r7}
3418480e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34184810:	4b05      	ldr	r3, [pc, #20]	@ (34184828 <LL_RCC_IC5_GetDivider+0x1c>)
34184812:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34184816:	0c1b      	lsrs	r3, r3, #16
34184818:	b2db      	uxtb	r3, r3
3418481a:	3301      	adds	r3, #1
}
3418481c:	4618      	mov	r0, r3
3418481e:	46bd      	mov	sp, r7
34184820:	f85d 7b04 	ldr.w	r7, [sp], #4
34184824:	4770      	bx	lr
34184826:	bf00      	nop
34184828:	56028000 	.word	0x56028000

3418482c <LL_RCC_IC7_Enable>:
{
3418482c:	b480      	push	{r7}
3418482e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34184830:	4b04      	ldr	r3, [pc, #16]	@ (34184844 <LL_RCC_IC7_Enable+0x18>)
34184832:	2240      	movs	r2, #64	@ 0x40
34184834:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184838:	bf00      	nop
3418483a:	46bd      	mov	sp, r7
3418483c:	f85d 7b04 	ldr.w	r7, [sp], #4
34184840:	4770      	bx	lr
34184842:	bf00      	nop
34184844:	56028000 	.word	0x56028000

34184848 <LL_RCC_IC7_IsEnabled>:
{
34184848:	b480      	push	{r7}
3418484a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
3418484c:	4b07      	ldr	r3, [pc, #28]	@ (3418486c <LL_RCC_IC7_IsEnabled+0x24>)
3418484e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34184856:	2b40      	cmp	r3, #64	@ 0x40
34184858:	d101      	bne.n	3418485e <LL_RCC_IC7_IsEnabled+0x16>
3418485a:	2301      	movs	r3, #1
3418485c:	e000      	b.n	34184860 <LL_RCC_IC7_IsEnabled+0x18>
3418485e:	2300      	movs	r3, #0
}
34184860:	4618      	mov	r0, r3
34184862:	46bd      	mov	sp, r7
34184864:	f85d 7b04 	ldr.w	r7, [sp], #4
34184868:	4770      	bx	lr
3418486a:	bf00      	nop
3418486c:	56028000 	.word	0x56028000

34184870 <LL_RCC_IC7_GetSource>:
{
34184870:	b480      	push	{r7}
34184872:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34184874:	4b04      	ldr	r3, [pc, #16]	@ (34184888 <LL_RCC_IC7_GetSource+0x18>)
34184876:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418487a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418487e:	4618      	mov	r0, r3
34184880:	46bd      	mov	sp, r7
34184882:	f85d 7b04 	ldr.w	r7, [sp], #4
34184886:	4770      	bx	lr
34184888:	56028000 	.word	0x56028000

3418488c <LL_RCC_IC7_GetDivider>:
{
3418488c:	b480      	push	{r7}
3418488e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34184890:	4b05      	ldr	r3, [pc, #20]	@ (341848a8 <LL_RCC_IC7_GetDivider+0x1c>)
34184892:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34184896:	0c1b      	lsrs	r3, r3, #16
34184898:	b2db      	uxtb	r3, r3
3418489a:	3301      	adds	r3, #1
}
3418489c:	4618      	mov	r0, r3
3418489e:	46bd      	mov	sp, r7
341848a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341848a4:	4770      	bx	lr
341848a6:	bf00      	nop
341848a8:	56028000 	.word	0x56028000

341848ac <LL_RCC_IC8_Enable>:
{
341848ac:	b480      	push	{r7}
341848ae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341848b0:	4b04      	ldr	r3, [pc, #16]	@ (341848c4 <LL_RCC_IC8_Enable+0x18>)
341848b2:	2280      	movs	r2, #128	@ 0x80
341848b4:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341848b8:	bf00      	nop
341848ba:	46bd      	mov	sp, r7
341848bc:	f85d 7b04 	ldr.w	r7, [sp], #4
341848c0:	4770      	bx	lr
341848c2:	bf00      	nop
341848c4:	56028000 	.word	0x56028000

341848c8 <LL_RCC_IC8_IsEnabled>:
{
341848c8:	b480      	push	{r7}
341848ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
341848cc:	4b07      	ldr	r3, [pc, #28]	@ (341848ec <LL_RCC_IC8_IsEnabled+0x24>)
341848ce:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341848d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
341848d6:	2b80      	cmp	r3, #128	@ 0x80
341848d8:	d101      	bne.n	341848de <LL_RCC_IC8_IsEnabled+0x16>
341848da:	2301      	movs	r3, #1
341848dc:	e000      	b.n	341848e0 <LL_RCC_IC8_IsEnabled+0x18>
341848de:	2300      	movs	r3, #0
}
341848e0:	4618      	mov	r0, r3
341848e2:	46bd      	mov	sp, r7
341848e4:	f85d 7b04 	ldr.w	r7, [sp], #4
341848e8:	4770      	bx	lr
341848ea:	bf00      	nop
341848ec:	56028000 	.word	0x56028000

341848f0 <LL_RCC_IC8_GetSource>:
{
341848f0:	b480      	push	{r7}
341848f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
341848f4:	4b04      	ldr	r3, [pc, #16]	@ (34184908 <LL_RCC_IC8_GetSource+0x18>)
341848f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341848fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341848fe:	4618      	mov	r0, r3
34184900:	46bd      	mov	sp, r7
34184902:	f85d 7b04 	ldr.w	r7, [sp], #4
34184906:	4770      	bx	lr
34184908:	56028000 	.word	0x56028000

3418490c <LL_RCC_IC8_GetDivider>:
{
3418490c:	b480      	push	{r7}
3418490e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34184910:	4b05      	ldr	r3, [pc, #20]	@ (34184928 <LL_RCC_IC8_GetDivider+0x1c>)
34184912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34184916:	0c1b      	lsrs	r3, r3, #16
34184918:	b2db      	uxtb	r3, r3
3418491a:	3301      	adds	r3, #1
}
3418491c:	4618      	mov	r0, r3
3418491e:	46bd      	mov	sp, r7
34184920:	f85d 7b04 	ldr.w	r7, [sp], #4
34184924:	4770      	bx	lr
34184926:	bf00      	nop
34184928:	56028000 	.word	0x56028000

3418492c <LL_RCC_IC9_Enable>:
{
3418492c:	b480      	push	{r7}
3418492e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184930:	4b04      	ldr	r3, [pc, #16]	@ (34184944 <LL_RCC_IC9_Enable+0x18>)
34184932:	f44f 7280 	mov.w	r2, #256	@ 0x100
34184936:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
3418493a:	bf00      	nop
3418493c:	46bd      	mov	sp, r7
3418493e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184942:	4770      	bx	lr
34184944:	56028000 	.word	0x56028000

34184948 <LL_RCC_IC9_IsEnabled>:
{
34184948:	b480      	push	{r7}
3418494a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
3418494c:	4b07      	ldr	r3, [pc, #28]	@ (3418496c <LL_RCC_IC9_IsEnabled+0x24>)
3418494e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34184956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418495a:	d101      	bne.n	34184960 <LL_RCC_IC9_IsEnabled+0x18>
3418495c:	2301      	movs	r3, #1
3418495e:	e000      	b.n	34184962 <LL_RCC_IC9_IsEnabled+0x1a>
34184960:	2300      	movs	r3, #0
}
34184962:	4618      	mov	r0, r3
34184964:	46bd      	mov	sp, r7
34184966:	f85d 7b04 	ldr.w	r7, [sp], #4
3418496a:	4770      	bx	lr
3418496c:	56028000 	.word	0x56028000

34184970 <LL_RCC_IC9_GetSource>:
{
34184970:	b480      	push	{r7}
34184972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34184974:	4b04      	ldr	r3, [pc, #16]	@ (34184988 <LL_RCC_IC9_GetSource+0x18>)
34184976:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418497a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3418497e:	4618      	mov	r0, r3
34184980:	46bd      	mov	sp, r7
34184982:	f85d 7b04 	ldr.w	r7, [sp], #4
34184986:	4770      	bx	lr
34184988:	56028000 	.word	0x56028000

3418498c <LL_RCC_IC9_GetDivider>:
{
3418498c:	b480      	push	{r7}
3418498e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34184990:	4b05      	ldr	r3, [pc, #20]	@ (341849a8 <LL_RCC_IC9_GetDivider+0x1c>)
34184992:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34184996:	0c1b      	lsrs	r3, r3, #16
34184998:	b2db      	uxtb	r3, r3
3418499a:	3301      	adds	r3, #1
}
3418499c:	4618      	mov	r0, r3
3418499e:	46bd      	mov	sp, r7
341849a0:	f85d 7b04 	ldr.w	r7, [sp], #4
341849a4:	4770      	bx	lr
341849a6:	bf00      	nop
341849a8:	56028000 	.word	0x56028000

341849ac <LL_RCC_IC10_Enable>:
{
341849ac:	b480      	push	{r7}
341849ae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
341849b0:	4b04      	ldr	r3, [pc, #16]	@ (341849c4 <LL_RCC_IC10_Enable+0x18>)
341849b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
341849b6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
341849ba:	bf00      	nop
341849bc:	46bd      	mov	sp, r7
341849be:	f85d 7b04 	ldr.w	r7, [sp], #4
341849c2:	4770      	bx	lr
341849c4:	56028000 	.word	0x56028000

341849c8 <LL_RCC_IC10_IsEnabled>:
{
341849c8:	b480      	push	{r7}
341849ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
341849cc:	4b07      	ldr	r3, [pc, #28]	@ (341849ec <LL_RCC_IC10_IsEnabled+0x24>)
341849ce:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
341849d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
341849d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341849da:	d101      	bne.n	341849e0 <LL_RCC_IC10_IsEnabled+0x18>
341849dc:	2301      	movs	r3, #1
341849de:	e000      	b.n	341849e2 <LL_RCC_IC10_IsEnabled+0x1a>
341849e0:	2300      	movs	r3, #0
}
341849e2:	4618      	mov	r0, r3
341849e4:	46bd      	mov	sp, r7
341849e6:	f85d 7b04 	ldr.w	r7, [sp], #4
341849ea:	4770      	bx	lr
341849ec:	56028000 	.word	0x56028000

341849f0 <LL_RCC_IC10_GetSource>:
{
341849f0:	b480      	push	{r7}
341849f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
341849f4:	4b04      	ldr	r3, [pc, #16]	@ (34184a08 <LL_RCC_IC10_GetSource+0x18>)
341849f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
341849fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
341849fe:	4618      	mov	r0, r3
34184a00:	46bd      	mov	sp, r7
34184a02:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a06:	4770      	bx	lr
34184a08:	56028000 	.word	0x56028000

34184a0c <LL_RCC_IC10_GetDivider>:
{
34184a0c:	b480      	push	{r7}
34184a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34184a10:	4b05      	ldr	r3, [pc, #20]	@ (34184a28 <LL_RCC_IC10_GetDivider+0x1c>)
34184a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34184a16:	0c1b      	lsrs	r3, r3, #16
34184a18:	b2db      	uxtb	r3, r3
34184a1a:	3301      	adds	r3, #1
}
34184a1c:	4618      	mov	r0, r3
34184a1e:	46bd      	mov	sp, r7
34184a20:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a24:	4770      	bx	lr
34184a26:	bf00      	nop
34184a28:	56028000 	.word	0x56028000

34184a2c <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
34184a2c:	b480      	push	{r7}
34184a2e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
34184a30:	4b04      	ldr	r3, [pc, #16]	@ (34184a44 <LL_RCC_IC12_Enable+0x18>)
34184a32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
34184a36:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184a3a:	bf00      	nop
34184a3c:	46bd      	mov	sp, r7
34184a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a42:	4770      	bx	lr
34184a44:	56028000 	.word	0x56028000

34184a48 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
34184a48:	b480      	push	{r7}
34184a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34184a4c:	4b07      	ldr	r3, [pc, #28]	@ (34184a6c <LL_RCC_IC12_IsEnabled+0x24>)
34184a4e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34184a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34184a5a:	d101      	bne.n	34184a60 <LL_RCC_IC12_IsEnabled+0x18>
34184a5c:	2301      	movs	r3, #1
34184a5e:	e000      	b.n	34184a62 <LL_RCC_IC12_IsEnabled+0x1a>
34184a60:	2300      	movs	r3, #0
}
34184a62:	4618      	mov	r0, r3
34184a64:	46bd      	mov	sp, r7
34184a66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a6a:	4770      	bx	lr
34184a6c:	56028000 	.word	0x56028000

34184a70 <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
34184a70:	b480      	push	{r7}
34184a72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34184a74:	4b04      	ldr	r3, [pc, #16]	@ (34184a88 <LL_RCC_IC12_GetSource+0x18>)
34184a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34184a7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184a7e:	4618      	mov	r0, r3
34184a80:	46bd      	mov	sp, r7
34184a82:	f85d 7b04 	ldr.w	r7, [sp], #4
34184a86:	4770      	bx	lr
34184a88:	56028000 	.word	0x56028000

34184a8c <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34184a8c:	b480      	push	{r7}
34184a8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
34184a90:	4b05      	ldr	r3, [pc, #20]	@ (34184aa8 <LL_RCC_IC12_GetDivider+0x1c>)
34184a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34184a96:	0c1b      	lsrs	r3, r3, #16
34184a98:	b2db      	uxtb	r3, r3
34184a9a:	3301      	adds	r3, #1
}
34184a9c:	4618      	mov	r0, r3
34184a9e:	46bd      	mov	sp, r7
34184aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184aa4:	4770      	bx	lr
34184aa6:	bf00      	nop
34184aa8:	56028000 	.word	0x56028000

34184aac <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
34184aac:	b480      	push	{r7}
34184aae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34184ab0:	4b04      	ldr	r3, [pc, #16]	@ (34184ac4 <LL_RCC_IC13_Enable+0x18>)
34184ab2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34184ab6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184aba:	bf00      	nop
34184abc:	46bd      	mov	sp, r7
34184abe:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ac2:	4770      	bx	lr
34184ac4:	56028000 	.word	0x56028000

34184ac8 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
34184ac8:	b480      	push	{r7}
34184aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34184acc:	4b07      	ldr	r3, [pc, #28]	@ (34184aec <LL_RCC_IC13_IsEnabled+0x24>)
34184ace:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34184ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34184ada:	d101      	bne.n	34184ae0 <LL_RCC_IC13_IsEnabled+0x18>
34184adc:	2301      	movs	r3, #1
34184ade:	e000      	b.n	34184ae2 <LL_RCC_IC13_IsEnabled+0x1a>
34184ae0:	2300      	movs	r3, #0
}
34184ae2:	4618      	mov	r0, r3
34184ae4:	46bd      	mov	sp, r7
34184ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184aea:	4770      	bx	lr
34184aec:	56028000 	.word	0x56028000

34184af0 <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
34184af0:	b480      	push	{r7}
34184af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34184af4:	4b04      	ldr	r3, [pc, #16]	@ (34184b08 <LL_RCC_IC13_GetSource+0x18>)
34184af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34184afa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184afe:	4618      	mov	r0, r3
34184b00:	46bd      	mov	sp, r7
34184b02:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b06:	4770      	bx	lr
34184b08:	56028000 	.word	0x56028000

34184b0c <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
34184b0c:	b480      	push	{r7}
34184b0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34184b10:	4b05      	ldr	r3, [pc, #20]	@ (34184b28 <LL_RCC_IC13_GetDivider+0x1c>)
34184b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34184b16:	0c1b      	lsrs	r3, r3, #16
34184b18:	b2db      	uxtb	r3, r3
34184b1a:	3301      	adds	r3, #1
}
34184b1c:	4618      	mov	r0, r3
34184b1e:	46bd      	mov	sp, r7
34184b20:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b24:	4770      	bx	lr
34184b26:	bf00      	nop
34184b28:	56028000 	.word	0x56028000

34184b2c <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
34184b2c:	b480      	push	{r7}
34184b2e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184b30:	4b04      	ldr	r3, [pc, #16]	@ (34184b44 <LL_RCC_IC14_Enable+0x18>)
34184b32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
34184b36:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184b3a:	bf00      	nop
34184b3c:	46bd      	mov	sp, r7
34184b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b42:	4770      	bx	lr
34184b44:	56028000 	.word	0x56028000

34184b48 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34184b48:	b480      	push	{r7}
34184b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34184b4c:	4b07      	ldr	r3, [pc, #28]	@ (34184b6c <LL_RCC_IC14_IsEnabled+0x24>)
34184b4e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34184b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34184b5a:	d101      	bne.n	34184b60 <LL_RCC_IC14_IsEnabled+0x18>
34184b5c:	2301      	movs	r3, #1
34184b5e:	e000      	b.n	34184b62 <LL_RCC_IC14_IsEnabled+0x1a>
34184b60:	2300      	movs	r3, #0
}
34184b62:	4618      	mov	r0, r3
34184b64:	46bd      	mov	sp, r7
34184b66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b6a:	4770      	bx	lr
34184b6c:	56028000 	.word	0x56028000

34184b70 <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
34184b70:	b480      	push	{r7}
34184b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34184b74:	4b04      	ldr	r3, [pc, #16]	@ (34184b88 <LL_RCC_IC14_GetSource+0x18>)
34184b76:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34184b7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184b7e:	4618      	mov	r0, r3
34184b80:	46bd      	mov	sp, r7
34184b82:	f85d 7b04 	ldr.w	r7, [sp], #4
34184b86:	4770      	bx	lr
34184b88:	56028000 	.word	0x56028000

34184b8c <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34184b8c:	b480      	push	{r7}
34184b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34184b90:	4b05      	ldr	r3, [pc, #20]	@ (34184ba8 <LL_RCC_IC14_GetDivider+0x1c>)
34184b92:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34184b96:	0c1b      	lsrs	r3, r3, #16
34184b98:	b2db      	uxtb	r3, r3
34184b9a:	3301      	adds	r3, #1
}
34184b9c:	4618      	mov	r0, r3
34184b9e:	46bd      	mov	sp, r7
34184ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ba4:	4770      	bx	lr
34184ba6:	bf00      	nop
34184ba8:	56028000 	.word	0x56028000

34184bac <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
34184bac:	b480      	push	{r7}
34184bae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34184bb0:	4b04      	ldr	r3, [pc, #16]	@ (34184bc4 <LL_RCC_IC15_Enable+0x18>)
34184bb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34184bb6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184bba:	bf00      	nop
34184bbc:	46bd      	mov	sp, r7
34184bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bc2:	4770      	bx	lr
34184bc4:	56028000 	.word	0x56028000

34184bc8 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
34184bc8:	b480      	push	{r7}
34184bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34184bcc:	4b07      	ldr	r3, [pc, #28]	@ (34184bec <LL_RCC_IC15_IsEnabled+0x24>)
34184bce:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34184bd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34184bda:	d101      	bne.n	34184be0 <LL_RCC_IC15_IsEnabled+0x18>
34184bdc:	2301      	movs	r3, #1
34184bde:	e000      	b.n	34184be2 <LL_RCC_IC15_IsEnabled+0x1a>
34184be0:	2300      	movs	r3, #0
}
34184be2:	4618      	mov	r0, r3
34184be4:	46bd      	mov	sp, r7
34184be6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184bea:	4770      	bx	lr
34184bec:	56028000 	.word	0x56028000

34184bf0 <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
34184bf0:	b480      	push	{r7}
34184bf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34184bf4:	4b04      	ldr	r3, [pc, #16]	@ (34184c08 <LL_RCC_IC15_GetSource+0x18>)
34184bf6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34184bfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184bfe:	4618      	mov	r0, r3
34184c00:	46bd      	mov	sp, r7
34184c02:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c06:	4770      	bx	lr
34184c08:	56028000 	.word	0x56028000

34184c0c <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
34184c0c:	b480      	push	{r7}
34184c0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34184c10:	4b05      	ldr	r3, [pc, #20]	@ (34184c28 <LL_RCC_IC15_GetDivider+0x1c>)
34184c12:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34184c16:	0c1b      	lsrs	r3, r3, #16
34184c18:	b2db      	uxtb	r3, r3
34184c1a:	3301      	adds	r3, #1
}
34184c1c:	4618      	mov	r0, r3
34184c1e:	46bd      	mov	sp, r7
34184c20:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c24:	4770      	bx	lr
34184c26:	bf00      	nop
34184c28:	56028000 	.word	0x56028000

34184c2c <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
34184c2c:	b480      	push	{r7}
34184c2e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34184c30:	4b04      	ldr	r3, [pc, #16]	@ (34184c44 <LL_RCC_IC16_Enable+0x18>)
34184c32:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
34184c36:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184c3a:	bf00      	nop
34184c3c:	46bd      	mov	sp, r7
34184c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c42:	4770      	bx	lr
34184c44:	56028000 	.word	0x56028000

34184c48 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34184c48:	b480      	push	{r7}
34184c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34184c4c:	4b07      	ldr	r3, [pc, #28]	@ (34184c6c <LL_RCC_IC16_IsEnabled+0x24>)
34184c4e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184c52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34184c56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34184c5a:	d101      	bne.n	34184c60 <LL_RCC_IC16_IsEnabled+0x18>
34184c5c:	2301      	movs	r3, #1
34184c5e:	e000      	b.n	34184c62 <LL_RCC_IC16_IsEnabled+0x1a>
34184c60:	2300      	movs	r3, #0
}
34184c62:	4618      	mov	r0, r3
34184c64:	46bd      	mov	sp, r7
34184c66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c6a:	4770      	bx	lr
34184c6c:	56028000 	.word	0x56028000

34184c70 <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
34184c70:	b480      	push	{r7}
34184c72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34184c74:	4b04      	ldr	r3, [pc, #16]	@ (34184c88 <LL_RCC_IC16_GetSource+0x18>)
34184c76:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34184c7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184c7e:	4618      	mov	r0, r3
34184c80:	46bd      	mov	sp, r7
34184c82:	f85d 7b04 	ldr.w	r7, [sp], #4
34184c86:	4770      	bx	lr
34184c88:	56028000 	.word	0x56028000

34184c8c <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34184c8c:	b480      	push	{r7}
34184c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34184c90:	4b05      	ldr	r3, [pc, #20]	@ (34184ca8 <LL_RCC_IC16_GetDivider+0x1c>)
34184c92:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34184c96:	0c1b      	lsrs	r3, r3, #16
34184c98:	b2db      	uxtb	r3, r3
34184c9a:	3301      	adds	r3, #1
}
34184c9c:	4618      	mov	r0, r3
34184c9e:	46bd      	mov	sp, r7
34184ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ca4:	4770      	bx	lr
34184ca6:	bf00      	nop
34184ca8:	56028000 	.word	0x56028000

34184cac <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
34184cac:	b480      	push	{r7}
34184cae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
34184cb0:	4b04      	ldr	r3, [pc, #16]	@ (34184cc4 <LL_RCC_IC17_Enable+0x18>)
34184cb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34184cb6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184cba:	bf00      	nop
34184cbc:	46bd      	mov	sp, r7
34184cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cc2:	4770      	bx	lr
34184cc4:	56028000 	.word	0x56028000

34184cc8 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
34184cc8:	b480      	push	{r7}
34184cca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34184ccc:	4b07      	ldr	r3, [pc, #28]	@ (34184cec <LL_RCC_IC17_IsEnabled+0x24>)
34184cce:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184cd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34184cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34184cda:	d101      	bne.n	34184ce0 <LL_RCC_IC17_IsEnabled+0x18>
34184cdc:	2301      	movs	r3, #1
34184cde:	e000      	b.n	34184ce2 <LL_RCC_IC17_IsEnabled+0x1a>
34184ce0:	2300      	movs	r3, #0
}
34184ce2:	4618      	mov	r0, r3
34184ce4:	46bd      	mov	sp, r7
34184ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184cea:	4770      	bx	lr
34184cec:	56028000 	.word	0x56028000

34184cf0 <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
34184cf0:	b480      	push	{r7}
34184cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34184cf4:	4b04      	ldr	r3, [pc, #16]	@ (34184d08 <LL_RCC_IC17_GetSource+0x18>)
34184cf6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34184cfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184cfe:	4618      	mov	r0, r3
34184d00:	46bd      	mov	sp, r7
34184d02:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d06:	4770      	bx	lr
34184d08:	56028000 	.word	0x56028000

34184d0c <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
34184d0c:	b480      	push	{r7}
34184d0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34184d10:	4b05      	ldr	r3, [pc, #20]	@ (34184d28 <LL_RCC_IC17_GetDivider+0x1c>)
34184d12:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34184d16:	0c1b      	lsrs	r3, r3, #16
34184d18:	b2db      	uxtb	r3, r3
34184d1a:	3301      	adds	r3, #1
}
34184d1c:	4618      	mov	r0, r3
34184d1e:	46bd      	mov	sp, r7
34184d20:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d24:	4770      	bx	lr
34184d26:	bf00      	nop
34184d28:	56028000 	.word	0x56028000

34184d2c <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
34184d2c:	b480      	push	{r7}
34184d2e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
34184d30:	4b04      	ldr	r3, [pc, #16]	@ (34184d44 <LL_RCC_IC18_Enable+0x18>)
34184d32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
34184d36:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184d3a:	bf00      	nop
34184d3c:	46bd      	mov	sp, r7
34184d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d42:	4770      	bx	lr
34184d44:	56028000 	.word	0x56028000

34184d48 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34184d48:	b480      	push	{r7}
34184d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34184d4c:	4b07      	ldr	r3, [pc, #28]	@ (34184d6c <LL_RCC_IC18_IsEnabled+0x24>)
34184d4e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34184d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34184d5a:	d101      	bne.n	34184d60 <LL_RCC_IC18_IsEnabled+0x18>
34184d5c:	2301      	movs	r3, #1
34184d5e:	e000      	b.n	34184d62 <LL_RCC_IC18_IsEnabled+0x1a>
34184d60:	2300      	movs	r3, #0
}
34184d62:	4618      	mov	r0, r3
34184d64:	46bd      	mov	sp, r7
34184d66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d6a:	4770      	bx	lr
34184d6c:	56028000 	.word	0x56028000

34184d70 <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
34184d70:	b480      	push	{r7}
34184d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34184d74:	4b04      	ldr	r3, [pc, #16]	@ (34184d88 <LL_RCC_IC18_GetSource+0x18>)
34184d76:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34184d7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184d7e:	4618      	mov	r0, r3
34184d80:	46bd      	mov	sp, r7
34184d82:	f85d 7b04 	ldr.w	r7, [sp], #4
34184d86:	4770      	bx	lr
34184d88:	56028000 	.word	0x56028000

34184d8c <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34184d8c:	b480      	push	{r7}
34184d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34184d90:	4b05      	ldr	r3, [pc, #20]	@ (34184da8 <LL_RCC_IC18_GetDivider+0x1c>)
34184d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34184d96:	0c1b      	lsrs	r3, r3, #16
34184d98:	b2db      	uxtb	r3, r3
34184d9a:	3301      	adds	r3, #1
}
34184d9c:	4618      	mov	r0, r3
34184d9e:	46bd      	mov	sp, r7
34184da0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184da4:	4770      	bx	lr
34184da6:	bf00      	nop
34184da8:	56028000 	.word	0x56028000

34184dac <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
34184dac:	b480      	push	{r7}
34184dae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34184db0:	4b04      	ldr	r3, [pc, #16]	@ (34184dc4 <LL_RCC_IC19_Enable+0x18>)
34184db2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34184db6:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184dba:	bf00      	nop
34184dbc:	46bd      	mov	sp, r7
34184dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dc2:	4770      	bx	lr
34184dc4:	56028000 	.word	0x56028000

34184dc8 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
34184dc8:	b480      	push	{r7}
34184dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34184dcc:	4b07      	ldr	r3, [pc, #28]	@ (34184dec <LL_RCC_IC19_IsEnabled+0x24>)
34184dce:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34184dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34184dda:	d101      	bne.n	34184de0 <LL_RCC_IC19_IsEnabled+0x18>
34184ddc:	2301      	movs	r3, #1
34184dde:	e000      	b.n	34184de2 <LL_RCC_IC19_IsEnabled+0x1a>
34184de0:	2300      	movs	r3, #0
}
34184de2:	4618      	mov	r0, r3
34184de4:	46bd      	mov	sp, r7
34184de6:	f85d 7b04 	ldr.w	r7, [sp], #4
34184dea:	4770      	bx	lr
34184dec:	56028000 	.word	0x56028000

34184df0 <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
34184df0:	b480      	push	{r7}
34184df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
34184df4:	4b04      	ldr	r3, [pc, #16]	@ (34184e08 <LL_RCC_IC19_GetSource+0x18>)
34184df6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34184dfa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184dfe:	4618      	mov	r0, r3
34184e00:	46bd      	mov	sp, r7
34184e02:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e06:	4770      	bx	lr
34184e08:	56028000 	.word	0x56028000

34184e0c <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
34184e0c:	b480      	push	{r7}
34184e0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
34184e10:	4b05      	ldr	r3, [pc, #20]	@ (34184e28 <LL_RCC_IC19_GetDivider+0x1c>)
34184e12:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34184e16:	0c1b      	lsrs	r3, r3, #16
34184e18:	b2db      	uxtb	r3, r3
34184e1a:	3301      	adds	r3, #1
}
34184e1c:	4618      	mov	r0, r3
34184e1e:	46bd      	mov	sp, r7
34184e20:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e24:	4770      	bx	lr
34184e26:	bf00      	nop
34184e28:	56028000 	.word	0x56028000

34184e2c <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
34184e2c:	b480      	push	{r7}
34184e2e:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34184e30:	4b04      	ldr	r3, [pc, #16]	@ (34184e44 <LL_RCC_IC20_Enable+0x18>)
34184e32:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34184e36:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34184e3a:	bf00      	nop
34184e3c:	46bd      	mov	sp, r7
34184e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e42:	4770      	bx	lr
34184e44:	56028000 	.word	0x56028000

34184e48 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34184e48:	b480      	push	{r7}
34184e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34184e4c:	4b07      	ldr	r3, [pc, #28]	@ (34184e6c <LL_RCC_IC20_IsEnabled+0x24>)
34184e4e:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34184e52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34184e56:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34184e5a:	d101      	bne.n	34184e60 <LL_RCC_IC20_IsEnabled+0x18>
34184e5c:	2301      	movs	r3, #1
34184e5e:	e000      	b.n	34184e62 <LL_RCC_IC20_IsEnabled+0x1a>
34184e60:	2300      	movs	r3, #0
}
34184e62:	4618      	mov	r0, r3
34184e64:	46bd      	mov	sp, r7
34184e66:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e6a:	4770      	bx	lr
34184e6c:	56028000 	.word	0x56028000

34184e70 <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
34184e70:	b480      	push	{r7}
34184e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34184e74:	4b04      	ldr	r3, [pc, #16]	@ (34184e88 <LL_RCC_IC20_GetSource+0x18>)
34184e76:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34184e7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34184e7e:	4618      	mov	r0, r3
34184e80:	46bd      	mov	sp, r7
34184e82:	f85d 7b04 	ldr.w	r7, [sp], #4
34184e86:	4770      	bx	lr
34184e88:	56028000 	.word	0x56028000

34184e8c <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34184e8c:	b480      	push	{r7}
34184e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34184e90:	4b05      	ldr	r3, [pc, #20]	@ (34184ea8 <LL_RCC_IC20_GetDivider+0x1c>)
34184e92:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34184e96:	0c1b      	lsrs	r3, r3, #16
34184e98:	b2db      	uxtb	r3, r3
34184e9a:	3301      	adds	r3, #1
}
34184e9c:	4618      	mov	r0, r3
34184e9e:	46bd      	mov	sp, r7
34184ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ea4:	4770      	bx	lr
34184ea6:	bf00      	nop
34184ea8:	56028000 	.word	0x56028000

34184eac <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
34184eac:	b480      	push	{r7}
34184eae:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34184eb0:	4b04      	ldr	r3, [pc, #16]	@ (34184ec4 <LL_RCC_CLKP_Enable+0x18>)
34184eb2:	2240      	movs	r2, #64	@ 0x40
34184eb4:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
34184eb8:	bf00      	nop
34184eba:	46bd      	mov	sp, r7
34184ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ec0:	4770      	bx	lr
34184ec2:	bf00      	nop
34184ec4:	56028000 	.word	0x56028000

34184ec8 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
34184ec8:	b480      	push	{r7}
34184eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34184ecc:	4b07      	ldr	r3, [pc, #28]	@ (34184eec <LL_RCC_CLKP_IsEnabled+0x24>)
34184ece:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
34184ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34184ed6:	2b40      	cmp	r3, #64	@ 0x40
34184ed8:	d101      	bne.n	34184ede <LL_RCC_CLKP_IsEnabled+0x16>
34184eda:	2301      	movs	r3, #1
34184edc:	e000      	b.n	34184ee0 <LL_RCC_CLKP_IsEnabled+0x18>
34184ede:	2300      	movs	r3, #0
}
34184ee0:	4618      	mov	r0, r3
34184ee2:	46bd      	mov	sp, r7
34184ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
34184ee8:	4770      	bx	lr
34184eea:	bf00      	nop
34184eec:	56028000 	.word	0x56028000

34184ef0 <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
34184ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
34184ef4:	b0f2      	sub	sp, #456	@ 0x1c8
34184ef6:	af00      	add	r7, sp, #0
34184ef8:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
34184efc:	2300      	movs	r3, #0
34184efe:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
34184f02:	2300      	movs	r3, #0
34184f04:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34184f08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
34184f10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
34184f14:	2500      	movs	r5, #0
34184f16:	ea54 0305 	orrs.w	r3, r4, r5
34184f1a:	d06c      	beq.n	34184ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
34184f1c:	f7ff f91e 	bl	3418415c <LL_RCC_GetRTCClockSource>
34184f20:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
34184f24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34184f28:	2b00      	cmp	r3, #0
34184f2a:	d018      	beq.n	34184f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
34184f2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f30:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184f34:	f403 7240 	and.w	r2, r3, #768	@ 0x300
34184f38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
34184f3c:	4293      	cmp	r3, r2
34184f3e:	d00e      	beq.n	34184f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
34184f40:	4bc3      	ldr	r3, [pc, #780]	@ (34185250 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34184f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184f44:	4ac2      	ldr	r2, [pc, #776]	@ (34185250 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34184f46:	f043 0301 	orr.w	r3, r3, #1
34184f4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34184f4c:	4bc0      	ldr	r3, [pc, #768]	@ (34185250 <HAL_RCCEx_PeriphCLKConfig+0x360>)
34184f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34184f50:	f003 0301 	and.w	r3, r3, #1
34184f54:	2b00      	cmp	r3, #0
34184f56:	d102      	bne.n	34184f5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
34184f58:	2301      	movs	r3, #1
34184f5a:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
34184f5e:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184f62:	2b00      	cmp	r3, #0
34184f64:	d143      	bne.n	34184fee <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34184f66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184f6a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34184f72:	d117      	bne.n	34184fa4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34184f74:	f7fc fc4c 	bl	34181810 <HAL_GetTick>
34184f78:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
34184f7c:	e00d      	b.n	34184f9a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34184f7e:	f7fc fc47 	bl	34181810 <HAL_GetTick>
34184f82:	4602      	mov	r2, r0
34184f84:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
34184f88:	1ad2      	subs	r2, r2, r3
34184f8a:	f241 3388 	movw	r3, #5000	@ 0x1388
34184f8e:	429a      	cmp	r2, r3
34184f90:	d903      	bls.n	34184f9a <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
34184f92:	2303      	movs	r3, #3
34184f94:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
34184f98:	e004      	b.n	34184fa4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
34184f9a:	f7fe fcf1 	bl	34183980 <LL_RCC_LSE_IsReady>
34184f9e:	4603      	mov	r3, r0
34184fa0:	2b00      	cmp	r3, #0
34184fa2:	d0ec      	beq.n	34184f7e <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
34184fa4:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184fa8:	2b00      	cmp	r3, #0
34184faa:	d11b      	bne.n	34184fe4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34184fac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fb0:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34184fb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34184fbc:	d108      	bne.n	34184fd0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
34184fbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fc2:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184fc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34184fca:	4618      	mov	r0, r3
34184fcc:	f7ff f8d4 	bl	34184178 <LL_RCC_SetRTC_HSEPrescaler>
34184fd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184fd4:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34184fd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34184fdc:	4618      	mov	r0, r3
34184fde:	f7ff f8a7 	bl	34184130 <LL_RCC_SetRTCClockSource>
34184fe2:	e008      	b.n	34184ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
34184fe4:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184fe8:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
34184fec:	e003      	b.n	34184ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
34184fee:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34184ff2:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
34184ff6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34184ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
34184ffe:	f002 0804 	and.w	r8, r2, #4
34185002:	f04f 0900 	mov.w	r9, #0
34185006:	ea58 0309 	orrs.w	r3, r8, r9
3418500a:	f000 809b 	beq.w	34185144 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
3418500e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185012:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185016:	2b04      	cmp	r3, #4
34185018:	d116      	bne.n	34185048 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418501a:	4b8e      	ldr	r3, [pc, #568]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418501c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34185020:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185024:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185028:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418502c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418502e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185034:	3b01      	subs	r3, #1
34185036:	041b      	lsls	r3, r3, #16
34185038:	4313      	orrs	r3, r2
3418503a:	4a86      	ldr	r2, [pc, #536]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418503c:	430b      	orrs	r3, r1
3418503e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34185042:	f7ff fbb3 	bl	341847ac <LL_RCC_IC5_Enable>
34185046:	e076      	b.n	34185136 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34185048:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418504c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185050:	2b05      	cmp	r3, #5
34185052:	d116      	bne.n	34185082 <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185054:	4b7f      	ldr	r3, [pc, #508]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185056:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3418505a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418505e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185062:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185066:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185068:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418506c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418506e:	3b01      	subs	r3, #1
34185070:	041b      	lsls	r3, r3, #16
34185072:	4313      	orrs	r3, r2
34185074:	4a77      	ldr	r2, [pc, #476]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185076:	430b      	orrs	r3, r1
34185078:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3418507c:	f7ff fc96 	bl	341849ac <LL_RCC_IC10_Enable>
34185080:	e059      	b.n	34185136 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
34185082:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185086:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418508a:	2b06      	cmp	r3, #6
3418508c:	d116      	bne.n	341850bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418508e:	4b71      	ldr	r3, [pc, #452]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185090:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185094:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185098:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418509c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850a0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341850a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341850a8:	3b01      	subs	r3, #1
341850aa:	041b      	lsls	r3, r3, #16
341850ac:	4313      	orrs	r3, r2
341850ae:	4a69      	ldr	r2, [pc, #420]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341850b0:	430b      	orrs	r3, r1
341850b2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341850b6:	f7ff fd79 	bl	34184bac <LL_RCC_IC15_Enable>
341850ba:	e03c      	b.n	34185136 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
341850bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
341850c4:	2b03      	cmp	r3, #3
341850c6:	d118      	bne.n	341850fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
341850c8:	4b62      	ldr	r3, [pc, #392]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341850ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
341850ce:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341850d2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341850d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850da:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
341850de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
341850e6:	3b01      	subs	r3, #1
341850e8:	041b      	lsls	r3, r3, #16
341850ea:	4313      	orrs	r3, r2
341850ec:	4a59      	ldr	r2, [pc, #356]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341850ee:	430b      	orrs	r3, r1
341850f0:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
341850f4:	f7ff fe5a 	bl	34184dac <LL_RCC_IC19_Enable>
341850f8:	e01d      	b.n	34185136 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
341850fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341850fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34185102:	2b07      	cmp	r3, #7
34185104:	d117      	bne.n	34185136 <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34185106:	4b53      	ldr	r3, [pc, #332]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185108:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418510c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185110:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185114:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185118:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
3418511c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185120:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34185124:	3b01      	subs	r3, #1
34185126:	041b      	lsls	r3, r3, #16
34185128:	4313      	orrs	r3, r2
3418512a:	4a4a      	ldr	r2, [pc, #296]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418512c:	430b      	orrs	r3, r1
3418512e:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34185132:	f7ff fe7b 	bl	34184e2c <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
34185136:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418513a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3418513e:	4618      	mov	r0, r3
34185140:	f7fe fcd2 	bl	34183ae8 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34185144:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185148:	e9d3 2300 	ldrd	r2, r3, [r3]
3418514c:	f04f 0a00 	mov.w	sl, #0
34185150:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
34185154:	ea5a 030b 	orrs.w	r3, sl, fp
34185158:	d04b      	beq.n	341851f2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3418515a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418515e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34185162:	4b3d      	ldr	r3, [pc, #244]	@ (34185258 <HAL_RCCEx_PeriphCLKConfig+0x368>)
34185164:	429a      	cmp	r2, r3
34185166:	d116      	bne.n	34185196 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34185168:	4b3a      	ldr	r3, [pc, #232]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418516a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418516e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185172:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185176:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418517a:	699a      	ldr	r2, [r3, #24]
3418517c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185180:	69db      	ldr	r3, [r3, #28]
34185182:	3b01      	subs	r3, #1
34185184:	041b      	lsls	r3, r3, #16
34185186:	4313      	orrs	r3, r2
34185188:	4a32      	ldr	r2, [pc, #200]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3418518a:	430b      	orrs	r3, r1
3418518c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34185190:	f7ff fa8c 	bl	341846ac <LL_RCC_IC3_Enable>
34185194:	e026      	b.n	341851e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34185196:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418519a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3418519e:	4b2f      	ldr	r3, [pc, #188]	@ (3418525c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
341851a0:	429a      	cmp	r2, r3
341851a2:	d116      	bne.n	341851d2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341851a4:	4b2b      	ldr	r3, [pc, #172]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341851a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341851aa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341851ae:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341851b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851b6:	6a1a      	ldr	r2, [r3, #32]
341851b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341851be:	3b01      	subs	r3, #1
341851c0:	041b      	lsls	r3, r3, #16
341851c2:	4313      	orrs	r3, r2
341851c4:	4a23      	ldr	r2, [pc, #140]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
341851c6:	430b      	orrs	r3, r1
341851c8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
341851cc:	f7ff faae 	bl	3418472c <LL_RCC_IC4_Enable>
341851d0:	e008      	b.n	341851e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
341851d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
341851da:	4b21      	ldr	r3, [pc, #132]	@ (34185260 <HAL_RCCEx_PeriphCLKConfig+0x370>)
341851dc:	429a      	cmp	r2, r3
341851de:	d101      	bne.n	341851e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
341851e0:	f7ff fe64 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
341851e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
341851ec:	4618      	mov	r0, r3
341851ee:	f7fe fe0b 	bl	34183e08 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
341851f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341851f6:	e9d3 2300 	ldrd	r2, r3, [r3]
341851fa:	2100      	movs	r1, #0
341851fc:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
34185200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
34185204:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
34185208:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
3418520c:	4603      	mov	r3, r0
3418520e:	460a      	mov	r2, r1
34185210:	4313      	orrs	r3, r2
34185212:	d057      	beq.n	341852c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34185214:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185218:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3418521c:	4b11      	ldr	r3, [pc, #68]	@ (34185264 <HAL_RCCEx_PeriphCLKConfig+0x374>)
3418521e:	429a      	cmp	r2, r3
34185220:	d122      	bne.n	34185268 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34185222:	4b0c      	ldr	r3, [pc, #48]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185224:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185228:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418522c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185230:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185234:	699a      	ldr	r2, [r3, #24]
34185236:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418523a:	69db      	ldr	r3, [r3, #28]
3418523c:	3b01      	subs	r3, #1
3418523e:	041b      	lsls	r3, r3, #16
34185240:	4313      	orrs	r3, r2
34185242:	4a04      	ldr	r2, [pc, #16]	@ (34185254 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34185244:	430b      	orrs	r3, r1
34185246:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418524a:	f7ff fa2f 	bl	341846ac <LL_RCC_IC3_Enable>
3418524e:	e032      	b.n	341852b6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
34185250:	56024800 	.word	0x56024800
34185254:	56028000 	.word	0x56028000
34185258:	03020014 	.word	0x03020014
3418525c:	03030014 	.word	0x03030014
34185260:	03010014 	.word	0x03010014
34185264:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34185268:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418526c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34185270:	4bc5      	ldr	r3, [pc, #788]	@ (34185588 <HAL_RCCEx_PeriphCLKConfig+0x698>)
34185272:	429a      	cmp	r2, r3
34185274:	d116      	bne.n	341852a4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185276:	4bc5      	ldr	r3, [pc, #788]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185278:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
3418527c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185280:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185284:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185288:	6a1a      	ldr	r2, [r3, #32]
3418528a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185290:	3b01      	subs	r3, #1
34185292:	041b      	lsls	r3, r3, #16
34185294:	4313      	orrs	r3, r2
34185296:	4abd      	ldr	r2, [pc, #756]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185298:	430b      	orrs	r3, r1
3418529a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418529e:	f7ff fa45 	bl	3418472c <LL_RCC_IC4_Enable>
341852a2:	e008      	b.n	341852b6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
341852a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
341852ac:	4bb8      	ldr	r3, [pc, #736]	@ (34185590 <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
341852ae:	429a      	cmp	r2, r3
341852b0:	d101      	bne.n	341852b6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
341852b2:	f7ff fdfb 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
341852b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
341852be:	4618      	mov	r0, r3
341852c0:	f7fe fda2 	bl	34183e08 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
341852c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852c8:	e9d3 2300 	ldrd	r2, r3, [r3]
341852cc:	2100      	movs	r1, #0
341852ce:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
341852d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
341852d6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
341852da:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
341852de:	4603      	mov	r3, r0
341852e0:	460a      	mov	r2, r1
341852e2:	4313      	orrs	r3, r2
341852e4:	d04b      	beq.n	3418537e <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
341852e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341852ea:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
341852ee:	4ba9      	ldr	r3, [pc, #676]	@ (34185594 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
341852f0:	429a      	cmp	r2, r3
341852f2:	d116      	bne.n	34185322 <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341852f4:	4ba5      	ldr	r3, [pc, #660]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341852f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341852fa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341852fe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185302:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185306:	699a      	ldr	r2, [r3, #24]
34185308:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418530c:	69db      	ldr	r3, [r3, #28]
3418530e:	3b01      	subs	r3, #1
34185310:	041b      	lsls	r3, r3, #16
34185312:	4313      	orrs	r3, r2
34185314:	4a9d      	ldr	r2, [pc, #628]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185316:	430b      	orrs	r3, r1
34185318:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3418531c:	f7ff f9c6 	bl	341846ac <LL_RCC_IC3_Enable>
34185320:	e026      	b.n	34185370 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
34185322:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185326:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
3418532a:	4b9b      	ldr	r3, [pc, #620]	@ (34185598 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
3418532c:	429a      	cmp	r2, r3
3418532e:	d116      	bne.n	3418535e <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185330:	4b96      	ldr	r3, [pc, #600]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185332:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185336:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418533a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418533e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185342:	6a1a      	ldr	r2, [r3, #32]
34185344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418534a:	3b01      	subs	r3, #1
3418534c:	041b      	lsls	r3, r3, #16
3418534e:	4313      	orrs	r3, r2
34185350:	4a8e      	ldr	r2, [pc, #568]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185352:	430b      	orrs	r3, r1
34185354:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185358:	f7ff f9e8 	bl	3418472c <LL_RCC_IC4_Enable>
3418535c:	e008      	b.n	34185370 <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
3418535e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185362:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34185366:	4b8d      	ldr	r3, [pc, #564]	@ (3418559c <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
34185368:	429a      	cmp	r2, r3
3418536a:	d101      	bne.n	34185370 <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
3418536c:	f7ff fd9e 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34185370:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185374:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34185378:	4618      	mov	r0, r3
3418537a:	f7fe fd45 	bl	34183e08 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
3418537e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185382:	e9d3 2300 	ldrd	r2, r3, [r3]
34185386:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
3418538a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
3418538e:	2300      	movs	r3, #0
34185390:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
34185394:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
34185398:	4603      	mov	r3, r0
3418539a:	460a      	mov	r2, r1
3418539c:	4313      	orrs	r3, r2
3418539e:	d048      	beq.n	34185432 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
341853a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341853a8:	2b20      	cmp	r3, #32
341853aa:	d116      	bne.n	341853da <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341853ac:	4b77      	ldr	r3, [pc, #476]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341853ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341853b2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341853b6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341853ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853be:	699a      	ldr	r2, [r3, #24]
341853c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853c4:	69db      	ldr	r3, [r3, #28]
341853c6:	3b01      	subs	r3, #1
341853c8:	041b      	lsls	r3, r3, #16
341853ca:	4313      	orrs	r3, r2
341853cc:	4a6f      	ldr	r2, [pc, #444]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341853ce:	430b      	orrs	r3, r1
341853d0:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
341853d4:	f7ff f96a 	bl	341846ac <LL_RCC_IC3_Enable>
341853d8:	e024      	b.n	34185424 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
341853da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
341853e2:	2b30      	cmp	r3, #48	@ 0x30
341853e4:	d116      	bne.n	34185414 <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341853e6:	4b69      	ldr	r3, [pc, #420]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341853e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341853ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341853f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341853f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853f8:	6a1a      	ldr	r2, [r3, #32]
341853fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341853fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185400:	3b01      	subs	r3, #1
34185402:	041b      	lsls	r3, r3, #16
34185404:	4313      	orrs	r3, r2
34185406:	4a61      	ldr	r2, [pc, #388]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185408:	430b      	orrs	r3, r1
3418540a:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418540e:	f7ff f98d 	bl	3418472c <LL_RCC_IC4_Enable>
34185412:	e007      	b.n	34185424 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34185414:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185418:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418541c:	2b10      	cmp	r3, #16
3418541e:	d101      	bne.n	34185424 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
34185420:	f7ff fd44 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
34185424:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185428:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
3418542c:	4618      	mov	r0, r3
3418542e:	f7fe fc03 	bl	34183c38 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34185432:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185436:	e9d3 2300 	ldrd	r2, r3, [r3]
3418543a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
3418543e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
34185442:	2300      	movs	r3, #0
34185444:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
34185448:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
3418544c:	4603      	mov	r3, r0
3418544e:	460a      	mov	r2, r1
34185450:	4313      	orrs	r3, r2
34185452:	d04b      	beq.n	341854ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34185454:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185458:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
3418545c:	4b50      	ldr	r3, [pc, #320]	@ (341855a0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
3418545e:	429a      	cmp	r2, r3
34185460:	d116      	bne.n	34185490 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185462:	4b4a      	ldr	r3, [pc, #296]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185464:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185468:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418546c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185470:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185474:	6a1a      	ldr	r2, [r3, #32]
34185476:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418547c:	3b01      	subs	r3, #1
3418547e:	041b      	lsls	r3, r3, #16
34185480:	4313      	orrs	r3, r2
34185482:	4a42      	ldr	r2, [pc, #264]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34185484:	430b      	orrs	r3, r1
34185486:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3418548a:	f7ff f94f 	bl	3418472c <LL_RCC_IC4_Enable>
3418548e:	e026      	b.n	341854de <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34185490:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185494:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34185498:	4b42      	ldr	r3, [pc, #264]	@ (341855a4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
3418549a:	429a      	cmp	r2, r3
3418549c:	d116      	bne.n	341854cc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
3418549e:	4b3b      	ldr	r3, [pc, #236]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341854a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
341854a4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341854a8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341854ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
341854b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341854b8:	3b01      	subs	r3, #1
341854ba:	041b      	lsls	r3, r3, #16
341854bc:	4313      	orrs	r3, r2
341854be:	4a33      	ldr	r2, [pc, #204]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
341854c0:	430b      	orrs	r3, r1
341854c2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
341854c6:	f7ff f971 	bl	341847ac <LL_RCC_IC5_Enable>
341854ca:	e008      	b.n	341854de <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
341854cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854d0:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
341854d4:	4b34      	ldr	r3, [pc, #208]	@ (341855a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
341854d6:	429a      	cmp	r2, r3
341854d8:	d101      	bne.n	341854de <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
341854da:	f7ff fce7 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
341854de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854e2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
341854e6:	4618      	mov	r0, r3
341854e8:	f7fe fc57 	bl	34183d9a <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
341854ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341854f0:	e9d3 2300 	ldrd	r2, r3, [r3]
341854f4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
341854f8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
341854fc:	2300      	movs	r3, #0
341854fe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
34185502:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
34185506:	4603      	mov	r3, r0
34185508:	460a      	mov	r2, r1
3418550a:	4313      	orrs	r3, r2
3418550c:	d062      	beq.n	341855d4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
3418550e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185512:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34185516:	4b25      	ldr	r3, [pc, #148]	@ (341855ac <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
34185518:	429a      	cmp	r2, r3
3418551a:	d116      	bne.n	3418554a <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
3418551c:	4b1b      	ldr	r3, [pc, #108]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418551e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34185522:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185526:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418552a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418552e:	6a1a      	ldr	r2, [r3, #32]
34185530:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34185536:	3b01      	subs	r3, #1
34185538:	041b      	lsls	r3, r3, #16
3418553a:	4313      	orrs	r3, r2
3418553c:	4a13      	ldr	r2, [pc, #76]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418553e:	430b      	orrs	r3, r1
34185540:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34185544:	f7ff f8f2 	bl	3418472c <LL_RCC_IC4_Enable>
34185548:	e03d      	b.n	341855c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
3418554a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418554e:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34185552:	4b17      	ldr	r3, [pc, #92]	@ (341855b0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
34185554:	429a      	cmp	r2, r3
34185556:	d12d      	bne.n	341855b4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34185558:	4b0c      	ldr	r3, [pc, #48]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418555a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418555e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185562:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185566:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418556a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418556c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34185572:	3b01      	subs	r3, #1
34185574:	041b      	lsls	r3, r3, #16
34185576:	4313      	orrs	r3, r2
34185578:	4a04      	ldr	r2, [pc, #16]	@ (3418558c <HAL_RCCEx_PeriphCLKConfig+0x69c>)
3418557a:	430b      	orrs	r3, r1
3418557c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34185580:	f7ff f914 	bl	341847ac <LL_RCC_IC5_Enable>
34185584:	e01f      	b.n	341855c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
34185586:	bf00      	nop
34185588:	03030414 	.word	0x03030414
3418558c:	56028000 	.word	0x56028000
34185590:	03010414 	.word	0x03010414
34185594:	03020814 	.word	0x03020814
34185598:	03030814 	.word	0x03030814
3418559c:	03010814 	.word	0x03010814
341855a0:	0302001c 	.word	0x0302001c
341855a4:	0303001c 	.word	0x0303001c
341855a8:	0301001c 	.word	0x0301001c
341855ac:	0302041c 	.word	0x0302041c
341855b0:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
341855b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
341855bc:	4bb3      	ldr	r3, [pc, #716]	@ (3418588c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
341855be:	429a      	cmp	r2, r3
341855c0:	d101      	bne.n	341855c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
341855c2:	f7ff fc73 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
341855c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855ca:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
341855ce:	4618      	mov	r0, r3
341855d0:	f7fe fbe3 	bl	34183d9a <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
341855d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855d8:	e9d3 2300 	ldrd	r2, r3, [r3]
341855dc:	f002 0301 	and.w	r3, r2, #1
341855e0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
341855e4:	2300      	movs	r3, #0
341855e6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
341855ea:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
341855ee:	4603      	mov	r3, r0
341855f0:	460a      	mov	r2, r1
341855f2:	4313      	orrs	r3, r2
341855f4:	d057      	beq.n	341856a6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
341855f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341855fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
341855fe:	2b20      	cmp	r3, #32
34185600:	d116      	bne.n	34185630 <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34185602:	4ba3      	ldr	r3, [pc, #652]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185604:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34185608:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418560c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185610:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34185616:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418561a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418561c:	3b01      	subs	r3, #1
3418561e:	041b      	lsls	r3, r3, #16
34185620:	4313      	orrs	r3, r2
34185622:	4a9b      	ldr	r2, [pc, #620]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185624:	430b      	orrs	r3, r1
34185626:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418562a:	f7ff f8ff 	bl	3418482c <LL_RCC_IC7_Enable>
3418562e:	e024      	b.n	3418567a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34185630:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185634:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34185638:	2b30      	cmp	r3, #48	@ 0x30
3418563a:	d116      	bne.n	3418566a <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418563c:	4b94      	ldr	r3, [pc, #592]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418563e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185642:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185646:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418564a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418564e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34185650:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34185656:	3b01      	subs	r3, #1
34185658:	041b      	lsls	r3, r3, #16
3418565a:	4313      	orrs	r3, r2
3418565c:	4a8c      	ldr	r2, [pc, #560]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418565e:	430b      	orrs	r3, r1
34185660:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34185664:	f7ff f922 	bl	341848ac <LL_RCC_IC8_Enable>
34185668:	e007      	b.n	3418567a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
3418566a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418566e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34185672:	2b10      	cmp	r3, #16
34185674:	d101      	bne.n	3418567a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
34185676:	f7ff fc19 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
3418567a:	4b85      	ldr	r3, [pc, #532]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418567c:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34185680:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
34185684:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
34185688:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418568c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
34185690:	3b01      	subs	r3, #1
34185692:	021a      	lsls	r2, r3, #8
34185694:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185698:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
3418569c:	4313      	orrs	r3, r2
3418569e:	4a7c      	ldr	r2, [pc, #496]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341856a0:	430b      	orrs	r3, r1
341856a2:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
341856a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856aa:	e9d3 2300 	ldrd	r2, r3, [r3]
341856ae:	f002 0302 	and.w	r3, r2, #2
341856b2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
341856b6:	2300      	movs	r3, #0
341856b8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
341856bc:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
341856c0:	4603      	mov	r3, r0
341856c2:	460a      	mov	r2, r1
341856c4:	4313      	orrs	r3, r2
341856c6:	d048      	beq.n	3418575a <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
341856c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
341856d0:	2b02      	cmp	r3, #2
341856d2:	d116      	bne.n	34185702 <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341856d4:	4b6e      	ldr	r3, [pc, #440]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341856d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341856da:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341856de:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341856e2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341856e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341856ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341856ee:	3b01      	subs	r3, #1
341856f0:	041b      	lsls	r3, r3, #16
341856f2:	4313      	orrs	r3, r2
341856f4:	4a66      	ldr	r2, [pc, #408]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341856f6:	430b      	orrs	r3, r1
341856f8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341856fc:	f7ff f896 	bl	3418482c <LL_RCC_IC7_Enable>
34185700:	e024      	b.n	3418574c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34185702:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185706:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3418570a:	2b03      	cmp	r3, #3
3418570c:	d116      	bne.n	3418573c <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418570e:	4b60      	ldr	r3, [pc, #384]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34185714:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185718:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418571c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185720:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34185722:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34185728:	3b01      	subs	r3, #1
3418572a:	041b      	lsls	r3, r3, #16
3418572c:	4313      	orrs	r3, r2
3418572e:	4a58      	ldr	r2, [pc, #352]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185730:	430b      	orrs	r3, r1
34185732:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34185736:	f7ff f8b9 	bl	341848ac <LL_RCC_IC8_Enable>
3418573a:	e007      	b.n	3418574c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
3418573c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185740:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185744:	2b01      	cmp	r3, #1
34185746:	d101      	bne.n	3418574c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
34185748:	f7ff fbb0 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
3418574c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185750:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34185754:	4618      	mov	r0, r3
34185756:	f7fe f9b1 	bl	34183abc <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
3418575a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418575e:	e9d3 2300 	ldrd	r2, r3, [r3]
34185762:	f002 0308 	and.w	r3, r2, #8
34185766:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
3418576a:	2300      	movs	r3, #0
3418576c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
34185770:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
34185774:	4603      	mov	r3, r0
34185776:	460a      	mov	r2, r1
34185778:	4313      	orrs	r3, r2
3418577a:	d017      	beq.n	341857ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
3418577c:	4b44      	ldr	r3, [pc, #272]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
3418577e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34185782:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185786:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418578a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418578e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34185792:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418579a:	3b01      	subs	r3, #1
3418579c:	041b      	lsls	r3, r3, #16
3418579e:	4313      	orrs	r3, r2
341857a0:	4a3b      	ldr	r2, [pc, #236]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341857a2:	430b      	orrs	r3, r1
341857a4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
341857a8:	f7ff fac0 	bl	34184d2c <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
341857ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857b0:	e9d3 2300 	ldrd	r2, r3, [r3]
341857b4:	f002 0310 	and.w	r3, r2, #16
341857b8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
341857bc:	2300      	movs	r3, #0
341857be:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
341857c2:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
341857c6:	4603      	mov	r3, r0
341857c8:	460a      	mov	r2, r1
341857ca:	4313      	orrs	r3, r2
341857cc:	d02f      	beq.n	3418582e <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
341857ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
341857d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
341857da:	d118      	bne.n	3418580e <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
341857dc:	4b2c      	ldr	r3, [pc, #176]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
341857de:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
341857e2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341857e6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341857ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
341857f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341857f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
341857fa:	3b01      	subs	r3, #1
341857fc:	041b      	lsls	r3, r3, #16
341857fe:	4313      	orrs	r3, r2
34185800:	4a23      	ldr	r2, [pc, #140]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185802:	430b      	orrs	r3, r1
34185804:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
34185808:	f7ff fa50 	bl	34184cac <LL_RCC_IC17_Enable>
3418580c:	e008      	b.n	34185820 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
3418580e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185812:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34185816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418581a:	d101      	bne.n	34185820 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
3418581c:	f7ff fb46 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
34185820:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185824:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34185828:	4618      	mov	r0, r3
3418582a:	f7fe f973 	bl	34183b14 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3418582e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185832:	e9d3 2300 	ldrd	r2, r3, [r3]
34185836:	f002 0320 	and.w	r3, r2, #32
3418583a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
3418583e:	2300      	movs	r3, #0
34185840:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
34185844:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
34185848:	4603      	mov	r3, r0
3418584a:	460a      	mov	r2, r1
3418584c:	4313      	orrs	r3, r2
3418584e:	d031      	beq.n	341858b4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34185850:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185854:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34185858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
3418585c:	d11a      	bne.n	34185894 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
3418585e:	4b0c      	ldr	r3, [pc, #48]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34185864:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185868:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418586c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185870:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
34185872:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34185878:	3b01      	subs	r3, #1
3418587a:	041b      	lsls	r3, r3, #16
3418587c:	4313      	orrs	r3, r2
3418587e:	4a04      	ldr	r2, [pc, #16]	@ (34185890 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34185880:	430b      	orrs	r3, r1
34185882:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
34185886:	f7ff f8d1 	bl	34184a2c <LL_RCC_IC12_Enable>
3418588a:	e00c      	b.n	341858a6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
3418588c:	0301041c 	.word	0x0301041c
34185890:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
34185894:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185898:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3418589c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
341858a0:	d101      	bne.n	341858a6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
341858a2:	f7ff fb03 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
341858a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858aa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
341858ae:	4618      	mov	r0, r3
341858b0:	f7fe f946 	bl	34183b40 <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
341858b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858b8:	e9d3 2300 	ldrd	r2, r3, [r3]
341858bc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
341858c0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
341858c4:	2300      	movs	r3, #0
341858c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
341858ca:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
341858ce:	4603      	mov	r3, r0
341858d0:	460a      	mov	r2, r1
341858d2:	4313      	orrs	r3, r2
341858d4:	d006      	beq.n	341858e4 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
341858d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
341858de:	4618      	mov	r0, r3
341858e0:	f7fe f944 	bl	34183b6c <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
341858e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341858e8:	e9d3 2300 	ldrd	r2, r3, [r3]
341858ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
341858f0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
341858f4:	2300      	movs	r3, #0
341858f6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
341858fa:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
341858fe:	4603      	mov	r3, r0
34185900:	460a      	mov	r2, r1
34185902:	4313      	orrs	r3, r2
34185904:	d006      	beq.n	34185914 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
34185906:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418590a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
3418590e:	4618      	mov	r0, r3
34185910:	f7fe f950 	bl	34183bb4 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34185914:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185918:	e9d3 2300 	ldrd	r2, r3, [r3]
3418591c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
34185920:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
34185924:	2300      	movs	r3, #0
34185926:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
3418592a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
3418592e:	4603      	mov	r3, r0
34185930:	460a      	mov	r2, r1
34185932:	4313      	orrs	r3, r2
34185934:	d006      	beq.n	34185944 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
34185936:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418593a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
3418593e:	4618      	mov	r0, r3
34185940:	f7fe f94e 	bl	34183be0 <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34185944:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185948:	e9d3 2300 	ldrd	r2, r3, [r3]
3418594c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
34185950:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
34185954:	2300      	movs	r3, #0
34185956:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
3418595a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3418595e:	4603      	mov	r3, r0
34185960:	460a      	mov	r2, r1
34185962:	4313      	orrs	r3, r2
34185964:	d038      	beq.n	341859d8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34185966:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418596a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418596e:	2b02      	cmp	r3, #2
34185970:	d116      	bne.n	341859a0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34185972:	4bbc      	ldr	r3, [pc, #752]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34185978:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418597c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185980:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185984:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
34185986:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418598a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418598c:	3b01      	subs	r3, #1
3418598e:	041b      	lsls	r3, r3, #16
34185990:	4313      	orrs	r3, r2
34185992:	4ab4      	ldr	r2, [pc, #720]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185994:	430b      	orrs	r3, r1
34185996:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
3418599a:	f7ff f887 	bl	34184aac <LL_RCC_IC13_Enable>
3418599e:	e007      	b.n	341859b0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
341859a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341859a8:	2b01      	cmp	r3, #1
341859aa:	d101      	bne.n	341859b0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
341859ac:	f7ff fa7e 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
341859b0:	4bac      	ldr	r3, [pc, #688]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341859b2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
341859b6:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
341859ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341859c2:	3b01      	subs	r3, #1
341859c4:	011a      	lsls	r2, r3, #4
341859c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341859ce:	4313      	orrs	r3, r2
341859d0:	4aa4      	ldr	r2, [pc, #656]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
341859d2:	430b      	orrs	r3, r1
341859d4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
341859d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859dc:	e9d3 2300 	ldrd	r2, r3, [r3]
341859e0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
341859e4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
341859e8:	2300      	movs	r3, #0
341859ea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
341859ee:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
341859f2:	4603      	mov	r3, r0
341859f4:	460a      	mov	r2, r1
341859f6:	4313      	orrs	r3, r2
341859f8:	d02d      	beq.n	34185a56 <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
341859fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341859fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185a02:	2b02      	cmp	r3, #2
34185a04:	d118      	bne.n	34185a38 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34185a06:	4b97      	ldr	r3, [pc, #604]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185a08:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34185a0c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185a10:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185a14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a18:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
34185a1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
34185a24:	3b01      	subs	r3, #1
34185a26:	041b      	lsls	r3, r3, #16
34185a28:	4313      	orrs	r3, r2
34185a2a:	4a8e      	ldr	r2, [pc, #568]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185a2c:	430b      	orrs	r3, r1
34185a2e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
34185a32:	f7ff f9bb 	bl	34184dac <LL_RCC_IC19_Enable>
34185a36:	e007      	b.n	34185a48 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34185a38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185a40:	2b01      	cmp	r3, #1
34185a42:	d101      	bne.n	34185a48 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
34185a44:	f7ff fa32 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
34185a48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34185a50:	4618      	mov	r0, r3
34185a52:	f7fe f8db 	bl	34183c0c <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34185a56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
34185a5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
34185a62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
34185a66:	2300      	movs	r3, #0
34185a68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
34185a6c:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
34185a70:	4603      	mov	r3, r0
34185a72:	460a      	mov	r2, r1
34185a74:	4313      	orrs	r3, r2
34185a76:	d04b      	beq.n	34185b10 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34185a78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a7c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34185a80:	4b79      	ldr	r3, [pc, #484]	@ (34185c68 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
34185a82:	429a      	cmp	r2, r3
34185a84:	d116      	bne.n	34185ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185a86:	4b77      	ldr	r3, [pc, #476]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185a8c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185a90:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185a94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185a9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185aa0:	3b01      	subs	r3, #1
34185aa2:	041b      	lsls	r3, r3, #16
34185aa4:	4313      	orrs	r3, r2
34185aa6:	4a6f      	ldr	r2, [pc, #444]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185aa8:	430b      	orrs	r3, r1
34185aaa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185aae:	f7fe ff7d 	bl	341849ac <LL_RCC_IC10_Enable>
34185ab2:	e026      	b.n	34185b02 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34185ab4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ab8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34185abc:	4b6b      	ldr	r3, [pc, #428]	@ (34185c6c <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
34185abe:	429a      	cmp	r2, r3
34185ac0:	d116      	bne.n	34185af0 <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185ac2:	4b68      	ldr	r3, [pc, #416]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185ac4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185ac8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185acc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ad0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ad4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185ad6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185adc:	3b01      	subs	r3, #1
34185ade:	041b      	lsls	r3, r3, #16
34185ae0:	4313      	orrs	r3, r2
34185ae2:	4a60      	ldr	r2, [pc, #384]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185ae4:	430b      	orrs	r3, r1
34185ae6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185aea:	f7ff f85f 	bl	34184bac <LL_RCC_IC15_Enable>
34185aee:	e008      	b.n	34185b02 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34185af0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185af4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34185af8:	4b5d      	ldr	r3, [pc, #372]	@ (34185c70 <HAL_RCCEx_PeriphCLKConfig+0xd80>)
34185afa:	429a      	cmp	r2, r3
34185afc:	d101      	bne.n	34185b02 <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
34185afe:	f7ff f9d5 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
34185b02:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185b0a:	4618      	mov	r0, r3
34185b0c:	f7fe f8aa 	bl	34183c64 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34185b10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b14:	e9d3 2300 	ldrd	r2, r3, [r3]
34185b18:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
34185b1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
34185b20:	2300      	movs	r3, #0
34185b22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
34185b26:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
34185b2a:	4603      	mov	r3, r0
34185b2c:	460a      	mov	r2, r1
34185b2e:	4313      	orrs	r3, r2
34185b30:	d04b      	beq.n	34185bca <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34185b32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b36:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34185b3a:	4b4e      	ldr	r3, [pc, #312]	@ (34185c74 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
34185b3c:	429a      	cmp	r2, r3
34185b3e:	d116      	bne.n	34185b6e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185b40:	4b48      	ldr	r3, [pc, #288]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185b46:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185b4a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185b4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185b54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185b5a:	3b01      	subs	r3, #1
34185b5c:	041b      	lsls	r3, r3, #16
34185b5e:	4313      	orrs	r3, r2
34185b60:	4a40      	ldr	r2, [pc, #256]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185b62:	430b      	orrs	r3, r1
34185b64:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185b68:	f7fe ff20 	bl	341849ac <LL_RCC_IC10_Enable>
34185b6c:	e026      	b.n	34185bbc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34185b6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b72:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34185b76:	4b40      	ldr	r3, [pc, #256]	@ (34185c78 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
34185b78:	429a      	cmp	r2, r3
34185b7a:	d116      	bne.n	34185baa <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185b7c:	4b39      	ldr	r3, [pc, #228]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185b7e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185b82:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185b86:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185b8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b8e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185b90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185b96:	3b01      	subs	r3, #1
34185b98:	041b      	lsls	r3, r3, #16
34185b9a:	4313      	orrs	r3, r2
34185b9c:	4a31      	ldr	r2, [pc, #196]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185b9e:	430b      	orrs	r3, r1
34185ba0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185ba4:	f7ff f802 	bl	34184bac <LL_RCC_IC15_Enable>
34185ba8:	e008      	b.n	34185bbc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34185baa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bae:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34185bb2:	4b32      	ldr	r3, [pc, #200]	@ (34185c7c <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
34185bb4:	429a      	cmp	r2, r3
34185bb6:	d101      	bne.n	34185bbc <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
34185bb8:	f7ff f978 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
34185bbc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bc0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34185bc4:	4618      	mov	r0, r3
34185bc6:	f7fe f84d 	bl	34183c64 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34185bca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bce:	e9d3 2300 	ldrd	r2, r3, [r3]
34185bd2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34185bd6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
34185bda:	2300      	movs	r3, #0
34185bdc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
34185be0:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
34185be4:	4603      	mov	r3, r0
34185be6:	460a      	mov	r2, r1
34185be8:	4313      	orrs	r3, r2
34185bea:	d05d      	beq.n	34185ca8 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34185bec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185bf0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34185bf4:	4b22      	ldr	r3, [pc, #136]	@ (34185c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>)
34185bf6:	429a      	cmp	r2, r3
34185bf8:	d116      	bne.n	34185c28 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185bfa:	4b1a      	ldr	r3, [pc, #104]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185c00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185c04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185c08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185c0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185c14:	3b01      	subs	r3, #1
34185c16:	041b      	lsls	r3, r3, #16
34185c18:	4313      	orrs	r3, r2
34185c1a:	4a12      	ldr	r2, [pc, #72]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185c1c:	430b      	orrs	r3, r1
34185c1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185c22:	f7fe fec3 	bl	341849ac <LL_RCC_IC10_Enable>
34185c26:	e038      	b.n	34185c9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34185c28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c2c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34185c30:	4b14      	ldr	r3, [pc, #80]	@ (34185c84 <HAL_RCCEx_PeriphCLKConfig+0xd94>)
34185c32:	429a      	cmp	r2, r3
34185c34:	d128      	bne.n	34185c88 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185c36:	4b0b      	ldr	r3, [pc, #44]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185c38:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185c3c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185c40:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185c44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c48:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185c4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185c50:	3b01      	subs	r3, #1
34185c52:	041b      	lsls	r3, r3, #16
34185c54:	4313      	orrs	r3, r2
34185c56:	4a03      	ldr	r2, [pc, #12]	@ (34185c64 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34185c58:	430b      	orrs	r3, r1
34185c5a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185c5e:	f7fe ffa5 	bl	34184bac <LL_RCC_IC15_Enable>
34185c62:	e01a      	b.n	34185c9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
34185c64:	56028000 	.word	0x56028000
34185c68:	0702000c 	.word	0x0702000c
34185c6c:	0703000c 	.word	0x0703000c
34185c70:	0701000c 	.word	0x0701000c
34185c74:	0702040c 	.word	0x0702040c
34185c78:	0703040c 	.word	0x0703040c
34185c7c:	0701040c 	.word	0x0701040c
34185c80:	0702080c 	.word	0x0702080c
34185c84:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34185c88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c8c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
34185c90:	4bc8      	ldr	r3, [pc, #800]	@ (34185fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
34185c92:	429a      	cmp	r2, r3
34185c94:	d101      	bne.n	34185c9a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
34185c96:	f7ff f909 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
34185c9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185c9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34185ca2:	4618      	mov	r0, r3
34185ca4:	f7fd ffde 	bl	34183c64 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34185ca8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cac:	e9d3 2300 	ldrd	r2, r3, [r3]
34185cb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34185cb4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
34185cb8:	2300      	movs	r3, #0
34185cba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
34185cbe:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
34185cc2:	4603      	mov	r3, r0
34185cc4:	460a      	mov	r2, r1
34185cc6:	4313      	orrs	r3, r2
34185cc8:	d04b      	beq.n	34185d62 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34185cca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cce:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34185cd2:	4bb9      	ldr	r3, [pc, #740]	@ (34185fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
34185cd4:	429a      	cmp	r2, r3
34185cd6:	d116      	bne.n	34185d06 <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185cd8:	4bb8      	ldr	r3, [pc, #736]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185cda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185cde:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185ce2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ce6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185cf2:	3b01      	subs	r3, #1
34185cf4:	041b      	lsls	r3, r3, #16
34185cf6:	4313      	orrs	r3, r2
34185cf8:	4ab0      	ldr	r2, [pc, #704]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185cfa:	430b      	orrs	r3, r1
34185cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185d00:	f7fe fe54 	bl	341849ac <LL_RCC_IC10_Enable>
34185d04:	e026      	b.n	34185d54 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34185d06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d0a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34185d0e:	4bac      	ldr	r3, [pc, #688]	@ (34185fc0 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
34185d10:	429a      	cmp	r2, r3
34185d12:	d116      	bne.n	34185d42 <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185d14:	4ba9      	ldr	r3, [pc, #676]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185d16:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185d1a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185d1e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185d22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d26:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185d28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185d2e:	3b01      	subs	r3, #1
34185d30:	041b      	lsls	r3, r3, #16
34185d32:	4313      	orrs	r3, r2
34185d34:	4aa1      	ldr	r2, [pc, #644]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185d36:	430b      	orrs	r3, r1
34185d38:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185d3c:	f7fe ff36 	bl	34184bac <LL_RCC_IC15_Enable>
34185d40:	e008      	b.n	34185d54 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
34185d42:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d46:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34185d4a:	4b9e      	ldr	r3, [pc, #632]	@ (34185fc4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
34185d4c:	429a      	cmp	r2, r3
34185d4e:	d101      	bne.n	34185d54 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
34185d50:	f7ff f8ac 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
34185d54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34185d5c:	4618      	mov	r0, r3
34185d5e:	f7fd ff81 	bl	34183c64 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34185d62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d66:	e9d3 2300 	ldrd	r2, r3, [r3]
34185d6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
34185d6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
34185d72:	2300      	movs	r3, #0
34185d74:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
34185d78:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
34185d7c:	4603      	mov	r3, r0
34185d7e:	460a      	mov	r2, r1
34185d80:	4313      	orrs	r3, r2
34185d82:	d04b      	beq.n	34185e1c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34185d84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185d88:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34185d8c:	4b8e      	ldr	r3, [pc, #568]	@ (34185fc8 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
34185d8e:	429a      	cmp	r2, r3
34185d90:	d116      	bne.n	34185dc0 <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185d92:	4b8a      	ldr	r3, [pc, #552]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185d98:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185d9c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185da0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185da4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185da6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185dac:	3b01      	subs	r3, #1
34185dae:	041b      	lsls	r3, r3, #16
34185db0:	4313      	orrs	r3, r2
34185db2:	4a82      	ldr	r2, [pc, #520]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185db4:	430b      	orrs	r3, r1
34185db6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185dba:	f7fe fdf7 	bl	341849ac <LL_RCC_IC10_Enable>
34185dbe:	e026      	b.n	34185e0e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
34185dc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185dc4:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34185dc8:	4b80      	ldr	r3, [pc, #512]	@ (34185fcc <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
34185dca:	429a      	cmp	r2, r3
34185dcc:	d116      	bne.n	34185dfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185dce:	4b7b      	ldr	r3, [pc, #492]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185dd0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185dd4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185dd8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185ddc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185de0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185de2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185de8:	3b01      	subs	r3, #1
34185dea:	041b      	lsls	r3, r3, #16
34185dec:	4313      	orrs	r3, r2
34185dee:	4a73      	ldr	r2, [pc, #460]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185df0:	430b      	orrs	r3, r1
34185df2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185df6:	f7fe fed9 	bl	34184bac <LL_RCC_IC15_Enable>
34185dfa:	e008      	b.n	34185e0e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34185dfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e00:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34185e04:	4b72      	ldr	r3, [pc, #456]	@ (34185fd0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
34185e06:	429a      	cmp	r2, r3
34185e08:	d101      	bne.n	34185e0e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
34185e0a:	f7ff f84f 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
34185e0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e12:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34185e16:	4618      	mov	r0, r3
34185e18:	f7fd ff2f 	bl	34183c7a <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34185e1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e20:	e9d3 2300 	ldrd	r2, r3, [r3]
34185e24:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
34185e28:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
34185e2c:	2300      	movs	r3, #0
34185e2e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
34185e32:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
34185e36:	4603      	mov	r3, r0
34185e38:	460a      	mov	r2, r1
34185e3a:	4313      	orrs	r3, r2
34185e3c:	d04b      	beq.n	34185ed6 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34185e3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e42:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34185e46:	4b63      	ldr	r3, [pc, #396]	@ (34185fd4 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
34185e48:	429a      	cmp	r2, r3
34185e4a:	d116      	bne.n	34185e7a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34185e4c:	4b5b      	ldr	r3, [pc, #364]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34185e52:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185e56:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185e5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34185e60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34185e66:	3b01      	subs	r3, #1
34185e68:	041b      	lsls	r3, r3, #16
34185e6a:	4313      	orrs	r3, r2
34185e6c:	4a53      	ldr	r2, [pc, #332]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185e6e:	430b      	orrs	r3, r1
34185e70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34185e74:	f7fe fd9a 	bl	341849ac <LL_RCC_IC10_Enable>
34185e78:	e026      	b.n	34185ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34185e7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e7e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34185e82:	4b55      	ldr	r3, [pc, #340]	@ (34185fd8 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
34185e84:	429a      	cmp	r2, r3
34185e86:	d116      	bne.n	34185eb6 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185e88:	4b4c      	ldr	r3, [pc, #304]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185e8a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185e8e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185e92:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185e96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185e9a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185e9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185ea2:	3b01      	subs	r3, #1
34185ea4:	041b      	lsls	r3, r3, #16
34185ea6:	4313      	orrs	r3, r2
34185ea8:	4a44      	ldr	r2, [pc, #272]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185eaa:	430b      	orrs	r3, r1
34185eac:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185eb0:	f7fe fe7c 	bl	34184bac <LL_RCC_IC15_Enable>
34185eb4:	e008      	b.n	34185ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34185eb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185eba:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34185ebe:	4b47      	ldr	r3, [pc, #284]	@ (34185fdc <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
34185ec0:	429a      	cmp	r2, r3
34185ec2:	d101      	bne.n	34185ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
34185ec4:	f7fe fff2 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
34185ec8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ecc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185ed0:	4618      	mov	r0, r3
34185ed2:	f7fd fed2 	bl	34183c7a <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34185ed6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185eda:	e9d3 2300 	ldrd	r2, r3, [r3]
34185ede:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
34185ee2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
34185ee6:	2300      	movs	r3, #0
34185ee8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
34185eec:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
34185ef0:	4603      	mov	r3, r0
34185ef2:	460a      	mov	r2, r1
34185ef4:	4313      	orrs	r3, r2
34185ef6:	d02d      	beq.n	34185f54 <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34185ef8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185efc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34185f00:	4b37      	ldr	r3, [pc, #220]	@ (34185fe0 <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
34185f02:	429a      	cmp	r2, r3
34185f04:	d116      	bne.n	34185f34 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185f06:	4b2d      	ldr	r3, [pc, #180]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185f08:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185f0c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185f10:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185f14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f18:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185f1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185f20:	3b01      	subs	r3, #1
34185f22:	041b      	lsls	r3, r3, #16
34185f24:	4313      	orrs	r3, r2
34185f26:	4a25      	ldr	r2, [pc, #148]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185f28:	430b      	orrs	r3, r1
34185f2a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185f2e:	f7fe fe3d 	bl	34184bac <LL_RCC_IC15_Enable>
34185f32:	e008      	b.n	34185f46 <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34185f34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f38:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
34185f3c:	4b29      	ldr	r3, [pc, #164]	@ (34185fe4 <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
34185f3e:	429a      	cmp	r2, r3
34185f40:	d101      	bne.n	34185f46 <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
34185f42:	f7fe ffb3 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
34185f46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34185f4e:	4618      	mov	r0, r3
34185f50:	f7fd fe9e 	bl	34183c90 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34185f54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f58:	e9d3 2300 	ldrd	r2, r3, [r3]
34185f5c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
34185f60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
34185f64:	2300      	movs	r3, #0
34185f66:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
34185f6a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
34185f6e:	4603      	mov	r3, r0
34185f70:	460a      	mov	r2, r1
34185f72:	4313      	orrs	r3, r2
34185f74:	d04a      	beq.n	3418600c <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34185f76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34185f7e:	4b1a      	ldr	r3, [pc, #104]	@ (34185fe8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
34185f80:	429a      	cmp	r2, r3
34185f82:	d133      	bne.n	34185fec <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185f84:	4b0d      	ldr	r3, [pc, #52]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185f86:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34185f8a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34185f8e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34185f92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f96:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34185f98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34185f9e:	3b01      	subs	r3, #1
34185fa0:	041b      	lsls	r3, r3, #16
34185fa2:	4313      	orrs	r3, r2
34185fa4:	4a05      	ldr	r2, [pc, #20]	@ (34185fbc <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34185fa6:	430b      	orrs	r3, r1
34185fa8:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34185fac:	f7fe fdfe 	bl	34184bac <LL_RCC_IC15_Enable>
34185fb0:	e025      	b.n	34185ffe <HAL_RCCEx_PeriphCLKConfig+0x110e>
34185fb2:	bf00      	nop
34185fb4:	0701080c 	.word	0x0701080c
34185fb8:	07020c0c 	.word	0x07020c0c
34185fbc:	56028000 	.word	0x56028000
34185fc0:	07030c0c 	.word	0x07030c0c
34185fc4:	07010c0c 	.word	0x07010c0c
34185fc8:	0702100c 	.word	0x0702100c
34185fcc:	0703100c 	.word	0x0703100c
34185fd0:	0701100c 	.word	0x0701100c
34185fd4:	0702140c 	.word	0x0702140c
34185fd8:	0703140c 	.word	0x0703140c
34185fdc:	0701140c 	.word	0x0701140c
34185fe0:	0702082c 	.word	0x0702082c
34185fe4:	0701082c 	.word	0x0701082c
34185fe8:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
34185fec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34185ff0:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
34185ff4:	4bca      	ldr	r3, [pc, #808]	@ (34186320 <HAL_RCCEx_PeriphCLKConfig+0x1430>)
34185ff6:	429a      	cmp	r2, r3
34185ff8:	d101      	bne.n	34185ffe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
34185ffa:	f7fe ff57 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
34185ffe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186002:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34186006:	4618      	mov	r0, r3
34186008:	f7fd fe42 	bl	34183c90 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
3418600c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186010:	e9d3 2300 	ldrd	r2, r3, [r3]
34186014:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
34186018:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
3418601c:	2300      	movs	r3, #0
3418601e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
34186022:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
34186026:	4603      	mov	r3, r0
34186028:	460a      	mov	r2, r1
3418602a:	4313      	orrs	r3, r2
3418602c:	d02d      	beq.n	3418608a <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
3418602e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186032:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34186036:	4bbb      	ldr	r3, [pc, #748]	@ (34186324 <HAL_RCCEx_PeriphCLKConfig+0x1434>)
34186038:	429a      	cmp	r2, r3
3418603a:	d116      	bne.n	3418606a <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418603c:	4bba      	ldr	r3, [pc, #744]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418603e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186042:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186046:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418604a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418604e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34186050:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186054:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186056:	3b01      	subs	r3, #1
34186058:	041b      	lsls	r3, r3, #16
3418605a:	4313      	orrs	r3, r2
3418605c:	4ab2      	ldr	r2, [pc, #712]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418605e:	430b      	orrs	r3, r1
34186060:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186064:	f7fe fda2 	bl	34184bac <LL_RCC_IC15_Enable>
34186068:	e008      	b.n	3418607c <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
3418606a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418606e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
34186072:	4bae      	ldr	r3, [pc, #696]	@ (3418632c <HAL_RCCEx_PeriphCLKConfig+0x143c>)
34186074:	429a      	cmp	r2, r3
34186076:	d101      	bne.n	3418607c <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
34186078:	f7fe ff18 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
3418607c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186080:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34186084:	4618      	mov	r0, r3
34186086:	f7fd fe03 	bl	34183c90 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
3418608a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418608e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186092:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34186096:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
3418609a:	2300      	movs	r3, #0
3418609c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
341860a0:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
341860a4:	4603      	mov	r3, r0
341860a6:	460a      	mov	r2, r1
341860a8:	4313      	orrs	r3, r2
341860aa:	d02d      	beq.n	34186108 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
341860ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860b0:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
341860b4:	4b9e      	ldr	r3, [pc, #632]	@ (34186330 <HAL_RCCEx_PeriphCLKConfig+0x1440>)
341860b6:	429a      	cmp	r2, r3
341860b8:	d116      	bne.n	341860e8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341860ba:	4b9b      	ldr	r3, [pc, #620]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341860bc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341860c0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341860c4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341860c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860cc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
341860ce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
341860d4:	3b01      	subs	r3, #1
341860d6:	041b      	lsls	r3, r3, #16
341860d8:	4313      	orrs	r3, r2
341860da:	4a93      	ldr	r2, [pc, #588]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341860dc:	430b      	orrs	r3, r1
341860de:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
341860e2:	f7fe fd63 	bl	34184bac <LL_RCC_IC15_Enable>
341860e6:	e008      	b.n	341860fa <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
341860e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860ec:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
341860f0:	4b90      	ldr	r3, [pc, #576]	@ (34186334 <HAL_RCCEx_PeriphCLKConfig+0x1444>)
341860f2:	429a      	cmp	r2, r3
341860f4:	d101      	bne.n	341860fa <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
341860f6:	f7fe fed9 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
341860fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341860fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
34186102:	4618      	mov	r0, r3
34186104:	f7fd fdc4 	bl	34183c90 <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34186108:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418610c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186110:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
34186114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
34186118:	2300      	movs	r3, #0
3418611a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
3418611e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
34186122:	4603      	mov	r3, r0
34186124:	460a      	mov	r2, r1
34186126:	4313      	orrs	r3, r2
34186128:	d02d      	beq.n	34186186 <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
3418612a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418612e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
34186132:	4b81      	ldr	r3, [pc, #516]	@ (34186338 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
34186134:	429a      	cmp	r2, r3
34186136:	d116      	bne.n	34186166 <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34186138:	4b7b      	ldr	r3, [pc, #492]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418613a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418613e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186142:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186146:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418614a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3418614c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34186152:	3b01      	subs	r3, #1
34186154:	041b      	lsls	r3, r3, #16
34186156:	4313      	orrs	r3, r2
34186158:	4a73      	ldr	r2, [pc, #460]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3418615a:	430b      	orrs	r3, r1
3418615c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34186160:	f7fe fd24 	bl	34184bac <LL_RCC_IC15_Enable>
34186164:	e008      	b.n	34186178 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34186166:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418616a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3418616e:	4b73      	ldr	r3, [pc, #460]	@ (3418633c <HAL_RCCEx_PeriphCLKConfig+0x144c>)
34186170:	429a      	cmp	r2, r3
34186172:	d101      	bne.n	34186178 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
34186174:	f7fe fe9a 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34186178:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418617c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34186180:	4618      	mov	r0, r3
34186182:	f7fd fd85 	bl	34183c90 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34186186:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418618a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418618e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
34186192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34186196:	2300      	movs	r3, #0
34186198:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
3418619c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
341861a0:	4603      	mov	r3, r0
341861a2:	460a      	mov	r2, r1
341861a4:	4313      	orrs	r3, r2
341861a6:	d04b      	beq.n	34186240 <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
341861a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861ac:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341861b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341861b4:	d116      	bne.n	341861e4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341861b6:	4b5c      	ldr	r3, [pc, #368]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341861b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341861bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341861c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341861c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341861ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341861d0:	3b01      	subs	r3, #1
341861d2:	041b      	lsls	r3, r3, #16
341861d4:	4313      	orrs	r3, r2
341861d6:	4a54      	ldr	r2, [pc, #336]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341861d8:	430b      	orrs	r3, r1
341861da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341861de:	f7fe fba5 	bl	3418492c <LL_RCC_IC9_Enable>
341861e2:	e026      	b.n	34186232 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
341861e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341861e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
341861ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341861f0:	d116      	bne.n	34186220 <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341861f2:	4b4d      	ldr	r3, [pc, #308]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341861f4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341861f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341861fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186200:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186204:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186206:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418620a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418620c:	3b01      	subs	r3, #1
3418620e:	041b      	lsls	r3, r3, #16
34186210:	4313      	orrs	r3, r2
34186212:	4a45      	ldr	r2, [pc, #276]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186214:	430b      	orrs	r3, r1
34186216:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418621a:	f7fe fc87 	bl	34184b2c <LL_RCC_IC14_Enable>
3418621e:	e008      	b.n	34186232 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34186220:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186224:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
34186228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418622c:	d101      	bne.n	34186232 <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
3418622e:	f7fe fe3d 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
34186232:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186236:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3418623a:	4618      	mov	r0, r3
3418623c:	f7fd fd34 	bl	34183ca8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34186240:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186244:	e9d3 2300 	ldrd	r2, r3, [r3]
34186248:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
3418624c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
34186250:	2300      	movs	r3, #0
34186252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34186256:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
3418625a:	4603      	mov	r3, r0
3418625c:	460a      	mov	r2, r1
3418625e:	4313      	orrs	r3, r2
34186260:	d02f      	beq.n	341862c2 <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
34186262:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186266:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
3418626a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418626e:	d118      	bne.n	341862a2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
34186270:	4b2d      	ldr	r3, [pc, #180]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186272:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34186276:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418627a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418627e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186282:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34186286:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418628a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3418628e:	3b01      	subs	r3, #1
34186290:	041b      	lsls	r3, r3, #16
34186292:	4313      	orrs	r3, r2
34186294:	4a24      	ldr	r2, [pc, #144]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186296:	430b      	orrs	r3, r1
34186298:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
3418629c:	f7fe fcc6 	bl	34184c2c <LL_RCC_IC16_Enable>
341862a0:	e008      	b.n	341862b4 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
341862a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
341862aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
341862ae:	d101      	bne.n	341862b4 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
341862b0:	f7fe fdfc 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
341862b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862b8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
341862bc:	4618      	mov	r0, r3
341862be:	f7fd fd09 	bl	34183cd4 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
341862c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862c6:	e9d3 2300 	ldrd	r2, r3, [r3]
341862ca:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
341862ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
341862d2:	2300      	movs	r3, #0
341862d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
341862d8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
341862dc:	4603      	mov	r3, r0
341862de:	460a      	mov	r2, r1
341862e0:	4313      	orrs	r3, r2
341862e2:	d05b      	beq.n	3418639c <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
341862e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341862e8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
341862ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341862f0:	d126      	bne.n	34186340 <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341862f2:	4b0d      	ldr	r3, [pc, #52]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
341862f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341862f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341862fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186300:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186304:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186306:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418630c:	3b01      	subs	r3, #1
3418630e:	041b      	lsls	r3, r3, #16
34186310:	4313      	orrs	r3, r2
34186312:	4a05      	ldr	r2, [pc, #20]	@ (34186328 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34186314:	430b      	orrs	r3, r1
34186316:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418631a:	f7fe fa87 	bl	3418482c <LL_RCC_IC7_Enable>
3418631e:	e036      	b.n	3418638e <HAL_RCCEx_PeriphCLKConfig+0x149e>
34186320:	07010c2c 	.word	0x07010c2c
34186324:	0702102c 	.word	0x0702102c
34186328:	56028000 	.word	0x56028000
3418632c:	0701102c 	.word	0x0701102c
34186330:	0702142c 	.word	0x0702142c
34186334:	0701142c 	.word	0x0701142c
34186338:	0702182c 	.word	0x0702182c
3418633c:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34186340:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186344:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34186348:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418634c:	d116      	bne.n	3418637c <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418634e:	4bb5      	ldr	r3, [pc, #724]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186354:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186358:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418635c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186360:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186362:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186368:	3b01      	subs	r3, #1
3418636a:	041b      	lsls	r3, r3, #16
3418636c:	4313      	orrs	r3, r2
3418636e:	4aad      	ldr	r2, [pc, #692]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186370:	430b      	orrs	r3, r1
34186372:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186376:	f7fe fa99 	bl	341848ac <LL_RCC_IC8_Enable>
3418637a:	e008      	b.n	3418638e <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
3418637c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186380:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34186384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34186388:	d101      	bne.n	3418638e <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
3418638a:	f7fe fd8f 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
3418638e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186392:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34186396:	4618      	mov	r0, r3
34186398:	f7fd fcb2 	bl	34183d00 <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
3418639c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863a0:	e9d3 2300 	ldrd	r2, r3, [r3]
341863a4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
341863a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
341863ac:	2300      	movs	r3, #0
341863ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
341863b2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
341863b6:	4603      	mov	r3, r0
341863b8:	460a      	mov	r2, r1
341863ba:	4313      	orrs	r3, r2
341863bc:	d02d      	beq.n	3418641a <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
341863be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
341863c6:	2b20      	cmp	r3, #32
341863c8:	d118      	bne.n	341863fc <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
341863ca:	4b96      	ldr	r3, [pc, #600]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341863cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
341863d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341863d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341863d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863dc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
341863e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341863e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
341863e8:	3b01      	subs	r3, #1
341863ea:	041b      	lsls	r3, r3, #16
341863ec:	4313      	orrs	r3, r2
341863ee:	4a8d      	ldr	r2, [pc, #564]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341863f0:	430b      	orrs	r3, r1
341863f2:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
341863f6:	f7fe fd19 	bl	34184e2c <LL_RCC_IC20_Enable>
341863fa:	e007      	b.n	3418640c <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
341863fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186400:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34186404:	2b10      	cmp	r3, #16
34186406:	d101      	bne.n	3418640c <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
34186408:	f7fe fd50 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
3418640c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186410:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34186414:	4618      	mov	r0, r3
34186416:	f7fd fc9f 	bl	34183d58 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
3418641a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418641e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186422:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34186426:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
3418642a:	2300      	movs	r3, #0
3418642c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
34186430:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
34186434:	4603      	mov	r3, r0
34186436:	460a      	mov	r2, r1
34186438:	4313      	orrs	r3, r2
3418643a:	d04b      	beq.n	341864d4 <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
3418643c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186440:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34186444:	4b78      	ldr	r3, [pc, #480]	@ (34186628 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
34186446:	429a      	cmp	r2, r3
34186448:	d116      	bne.n	34186478 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418644a:	4b76      	ldr	r3, [pc, #472]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418644c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34186450:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186454:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186458:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418645c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418645e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34186464:	3b01      	subs	r3, #1
34186466:	041b      	lsls	r3, r3, #16
34186468:	4313      	orrs	r3, r2
3418646a:	4a6e      	ldr	r2, [pc, #440]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
3418646c:	430b      	orrs	r3, r1
3418646e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34186472:	f7fe f9db 	bl	3418482c <LL_RCC_IC7_Enable>
34186476:	e026      	b.n	341864c6 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34186478:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418647c:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34186480:	4b6a      	ldr	r3, [pc, #424]	@ (3418662c <HAL_RCCEx_PeriphCLKConfig+0x173c>)
34186482:	429a      	cmp	r2, r3
34186484:	d116      	bne.n	341864b4 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186486:	4b67      	ldr	r3, [pc, #412]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418648c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186490:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186494:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186498:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418649a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418649e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341864a0:	3b01      	subs	r3, #1
341864a2:	041b      	lsls	r3, r3, #16
341864a4:	4313      	orrs	r3, r2
341864a6:	4a5f      	ldr	r2, [pc, #380]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341864a8:	430b      	orrs	r3, r1
341864aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341864ae:	f7fe f9fd 	bl	341848ac <LL_RCC_IC8_Enable>
341864b2:	e008      	b.n	341864c6 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
341864b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864b8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
341864bc:	4b5c      	ldr	r3, [pc, #368]	@ (34186630 <HAL_RCCEx_PeriphCLKConfig+0x1740>)
341864be:	429a      	cmp	r2, r3
341864c0:	d101      	bne.n	341864c6 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
341864c2:	f7fe fcf3 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
341864c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864ca:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
341864ce:	4618      	mov	r0, r3
341864d0:	f7fd fc58 	bl	34183d84 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
341864d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864d8:	e9d3 2300 	ldrd	r2, r3, [r3]
341864dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
341864e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
341864e4:	2300      	movs	r3, #0
341864e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
341864ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
341864ee:	4603      	mov	r3, r0
341864f0:	460a      	mov	r2, r1
341864f2:	4313      	orrs	r3, r2
341864f4:	d04b      	beq.n	3418658e <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
341864f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341864fa:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
341864fe:	4b4d      	ldr	r3, [pc, #308]	@ (34186634 <HAL_RCCEx_PeriphCLKConfig+0x1744>)
34186500:	429a      	cmp	r2, r3
34186502:	d116      	bne.n	34186532 <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34186504:	4b47      	ldr	r3, [pc, #284]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186506:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3418650a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418650e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186512:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186516:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34186518:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418651c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
3418651e:	3b01      	subs	r3, #1
34186520:	041b      	lsls	r3, r3, #16
34186522:	4313      	orrs	r3, r2
34186524:	4a3f      	ldr	r2, [pc, #252]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186526:	430b      	orrs	r3, r1
34186528:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
3418652c:	f7fe f97e 	bl	3418482c <LL_RCC_IC7_Enable>
34186530:	e026      	b.n	34186580 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34186532:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186536:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
3418653a:	4b3f      	ldr	r3, [pc, #252]	@ (34186638 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
3418653c:	429a      	cmp	r2, r3
3418653e:	d116      	bne.n	3418656e <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186540:	4b38      	ldr	r3, [pc, #224]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186546:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418654a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418654e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186552:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186554:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418655a:	3b01      	subs	r3, #1
3418655c:	041b      	lsls	r3, r3, #16
3418655e:	4313      	orrs	r3, r2
34186560:	4a30      	ldr	r2, [pc, #192]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186562:	430b      	orrs	r3, r1
34186564:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186568:	f7fe f9a0 	bl	341848ac <LL_RCC_IC8_Enable>
3418656c:	e008      	b.n	34186580 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
3418656e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186572:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34186576:	4b31      	ldr	r3, [pc, #196]	@ (3418663c <HAL_RCCEx_PeriphCLKConfig+0x174c>)
34186578:	429a      	cmp	r2, r3
3418657a:	d101      	bne.n	34186580 <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
3418657c:	f7fe fc96 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
34186580:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186584:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
34186588:	4618      	mov	r0, r3
3418658a:	f7fd fbfb 	bl	34183d84 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
3418658e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186592:	e9d3 2300 	ldrd	r2, r3, [r3]
34186596:	2100      	movs	r1, #0
34186598:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
3418659c:	f003 0301 	and.w	r3, r3, #1
341865a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
341865a4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
341865a8:	4603      	mov	r3, r0
341865aa:	460a      	mov	r2, r1
341865ac:	4313      	orrs	r3, r2
341865ae:	d056      	beq.n	3418665e <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
341865b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341865b8:	2b02      	cmp	r3, #2
341865ba:	d116      	bne.n	341865ea <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341865bc:	4b19      	ldr	r3, [pc, #100]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341865be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
341865c2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341865c6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341865ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
341865d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
341865d6:	3b01      	subs	r3, #1
341865d8:	041b      	lsls	r3, r3, #16
341865da:	4313      	orrs	r3, r2
341865dc:	4a11      	ldr	r2, [pc, #68]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341865de:	430b      	orrs	r3, r1
341865e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
341865e4:	f7fe f922 	bl	3418482c <LL_RCC_IC7_Enable>
341865e8:	e032      	b.n	34186650 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
341865ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341865ee:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
341865f2:	2b03      	cmp	r3, #3
341865f4:	d124      	bne.n	34186640 <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341865f6:	4b0b      	ldr	r3, [pc, #44]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
341865f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
341865fc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186600:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186604:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418660a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418660e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186610:	3b01      	subs	r3, #1
34186612:	041b      	lsls	r3, r3, #16
34186614:	4313      	orrs	r3, r2
34186616:	4a03      	ldr	r2, [pc, #12]	@ (34186624 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34186618:	430b      	orrs	r3, r1
3418661a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418661e:	f7fe f945 	bl	341848ac <LL_RCC_IC8_Enable>
34186622:	e015      	b.n	34186650 <HAL_RCCEx_PeriphCLKConfig+0x1760>
34186624:	56028000 	.word	0x56028000
34186628:	07021418 	.word	0x07021418
3418662c:	07031418 	.word	0x07031418
34186630:	07011418 	.word	0x07011418
34186634:	07021818 	.word	0x07021818
34186638:	07031818 	.word	0x07031818
3418663c:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34186640:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186644:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186648:	2b01      	cmp	r3, #1
3418664a:	d101      	bne.n	34186650 <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
3418664c:	f7fe fc2e 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
34186650:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186654:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34186658:	4618      	mov	r0, r3
3418665a:	f7fd fba9 	bl	34183db0 <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
3418665e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186662:	e9d3 2300 	ldrd	r2, r3, [r3]
34186666:	2100      	movs	r1, #0
34186668:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
3418666c:	f003 0302 	and.w	r3, r3, #2
34186670:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
34186674:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
34186678:	4603      	mov	r3, r0
3418667a:	460a      	mov	r2, r1
3418667c:	4313      	orrs	r3, r2
3418667e:	d04b      	beq.n	34186718 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34186680:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186684:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34186688:	4bc6      	ldr	r3, [pc, #792]	@ (341869a4 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
3418668a:	429a      	cmp	r2, r3
3418668c:	d116      	bne.n	341866bc <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418668e:	4bc6      	ldr	r3, [pc, #792]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186694:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186698:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418669c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
341866a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
341866a8:	3b01      	subs	r3, #1
341866aa:	041b      	lsls	r3, r3, #16
341866ac:	4313      	orrs	r3, r2
341866ae:	4abe      	ldr	r2, [pc, #760]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341866b0:	430b      	orrs	r3, r1
341866b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
341866b6:	f7fe f8f9 	bl	341848ac <LL_RCC_IC8_Enable>
341866ba:	e026      	b.n	3418670a <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
341866bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866c0:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
341866c4:	4bb9      	ldr	r3, [pc, #740]	@ (341869ac <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
341866c6:	429a      	cmp	r2, r3
341866c8:	d116      	bne.n	341866f8 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341866ca:	4bb7      	ldr	r3, [pc, #732]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341866cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341866d0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341866d4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341866d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341866de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341866e4:	3b01      	subs	r3, #1
341866e6:	041b      	lsls	r3, r3, #16
341866e8:	4313      	orrs	r3, r2
341866ea:	4aaf      	ldr	r2, [pc, #700]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341866ec:	430b      	orrs	r3, r1
341866ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341866f2:	f7fe f91b 	bl	3418492c <LL_RCC_IC9_Enable>
341866f6:	e008      	b.n	3418670a <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
341866f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341866fc:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34186700:	4bab      	ldr	r3, [pc, #684]	@ (341869b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
34186702:	429a      	cmp	r2, r3
34186704:	d101      	bne.n	3418670a <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
34186706:	f7fe fbd1 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
3418670a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418670e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
34186712:	4618      	mov	r0, r3
34186714:	f7fd fb62 	bl	34183ddc <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34186718:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418671c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186720:	2100      	movs	r1, #0
34186722:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
34186726:	f003 0304 	and.w	r3, r3, #4
3418672a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
3418672e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
34186732:	4603      	mov	r3, r0
34186734:	460a      	mov	r2, r1
34186736:	4313      	orrs	r3, r2
34186738:	d04b      	beq.n	341867d2 <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
3418673a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418673e:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34186742:	4b9c      	ldr	r3, [pc, #624]	@ (341869b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
34186744:	429a      	cmp	r2, r3
34186746:	d116      	bne.n	34186776 <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186748:	4b97      	ldr	r3, [pc, #604]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418674a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3418674e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186752:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186756:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418675a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418675c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186762:	3b01      	subs	r3, #1
34186764:	041b      	lsls	r3, r3, #16
34186766:	4313      	orrs	r3, r2
34186768:	4a8f      	ldr	r2, [pc, #572]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418676a:	430b      	orrs	r3, r1
3418676c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186770:	f7fe f89c 	bl	341848ac <LL_RCC_IC8_Enable>
34186774:	e026      	b.n	341867c4 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34186776:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418677a:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
3418677e:	4b8e      	ldr	r3, [pc, #568]	@ (341869b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
34186780:	429a      	cmp	r2, r3
34186782:	d116      	bne.n	341867b2 <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186784:	4b88      	ldr	r3, [pc, #544]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186786:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418678a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418678e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186792:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186796:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186798:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418679c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418679e:	3b01      	subs	r3, #1
341867a0:	041b      	lsls	r3, r3, #16
341867a2:	4313      	orrs	r3, r2
341867a4:	4a80      	ldr	r2, [pc, #512]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341867a6:	430b      	orrs	r3, r1
341867a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341867ac:	f7fe f8be 	bl	3418492c <LL_RCC_IC9_Enable>
341867b0:	e008      	b.n	341867c4 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
341867b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867b6:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
341867ba:	4b80      	ldr	r3, [pc, #512]	@ (341869bc <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
341867bc:	429a      	cmp	r2, r3
341867be:	d101      	bne.n	341867c4 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
341867c0:	f7fe fb74 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
341867c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
341867cc:	4618      	mov	r0, r3
341867ce:	f7fd fb05 	bl	34183ddc <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
341867d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867d6:	e9d3 2300 	ldrd	r2, r3, [r3]
341867da:	2100      	movs	r1, #0
341867dc:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
341867e0:	f003 0308 	and.w	r3, r3, #8
341867e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
341867e8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
341867ec:	4603      	mov	r3, r0
341867ee:	460a      	mov	r2, r1
341867f0:	4313      	orrs	r3, r2
341867f2:	d04b      	beq.n	3418688c <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
341867f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341867f8:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
341867fc:	4b70      	ldr	r3, [pc, #448]	@ (341869c0 <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
341867fe:	429a      	cmp	r2, r3
34186800:	d116      	bne.n	34186830 <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186802:	4b69      	ldr	r3, [pc, #420]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186808:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418680c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186810:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186816:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418681a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418681c:	3b01      	subs	r3, #1
3418681e:	041b      	lsls	r3, r3, #16
34186820:	4313      	orrs	r3, r2
34186822:	4a61      	ldr	r2, [pc, #388]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186824:	430b      	orrs	r3, r1
34186826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
3418682a:	f7fe f83f 	bl	341848ac <LL_RCC_IC8_Enable>
3418682e:	e026      	b.n	3418687e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34186830:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186834:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34186838:	4b62      	ldr	r3, [pc, #392]	@ (341869c4 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
3418683a:	429a      	cmp	r2, r3
3418683c:	d116      	bne.n	3418686c <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418683e:	4b5a      	ldr	r3, [pc, #360]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186840:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186844:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186848:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418684c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186852:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186858:	3b01      	subs	r3, #1
3418685a:	041b      	lsls	r3, r3, #16
3418685c:	4313      	orrs	r3, r2
3418685e:	4a52      	ldr	r2, [pc, #328]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186860:	430b      	orrs	r3, r1
34186862:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186866:	f7fe f861 	bl	3418492c <LL_RCC_IC9_Enable>
3418686a:	e008      	b.n	3418687e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
3418686c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186870:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34186874:	4b54      	ldr	r3, [pc, #336]	@ (341869c8 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
34186876:	429a      	cmp	r2, r3
34186878:	d101      	bne.n	3418687e <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
3418687a:	f7fe fb17 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
3418687e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186882:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
34186886:	4618      	mov	r0, r3
34186888:	f7fd faa8 	bl	34183ddc <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
3418688c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186890:	e9d3 2300 	ldrd	r2, r3, [r3]
34186894:	2100      	movs	r1, #0
34186896:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
3418689a:	f003 0310 	and.w	r3, r3, #16
3418689e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
341868a2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
341868a6:	4603      	mov	r3, r0
341868a8:	460a      	mov	r2, r1
341868aa:	4313      	orrs	r3, r2
341868ac:	d04b      	beq.n	34186946 <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
341868ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868b2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
341868b6:	4b45      	ldr	r3, [pc, #276]	@ (341869cc <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
341868b8:	429a      	cmp	r2, r3
341868ba:	d116      	bne.n	341868ea <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341868bc:	4b3a      	ldr	r3, [pc, #232]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341868be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341868c2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341868c6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341868ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341868d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
341868d6:	3b01      	subs	r3, #1
341868d8:	041b      	lsls	r3, r3, #16
341868da:	4313      	orrs	r3, r2
341868dc:	4a32      	ldr	r2, [pc, #200]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341868de:	430b      	orrs	r3, r1
341868e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341868e4:	f7fe f822 	bl	3418492c <LL_RCC_IC9_Enable>
341868e8:	e026      	b.n	34186938 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
341868ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341868ee:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
341868f2:	4b37      	ldr	r3, [pc, #220]	@ (341869d0 <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
341868f4:	429a      	cmp	r2, r3
341868f6:	d116      	bne.n	34186926 <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341868f8:	4b2b      	ldr	r3, [pc, #172]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
341868fa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341868fe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186902:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186906:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418690a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3418690c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186912:	3b01      	subs	r3, #1
34186914:	041b      	lsls	r3, r3, #16
34186916:	4313      	orrs	r3, r2
34186918:	4a23      	ldr	r2, [pc, #140]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
3418691a:	430b      	orrs	r3, r1
3418691c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186920:	f7fe f904 	bl	34184b2c <LL_RCC_IC14_Enable>
34186924:	e008      	b.n	34186938 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34186926:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418692a:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
3418692e:	4b29      	ldr	r3, [pc, #164]	@ (341869d4 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
34186930:	429a      	cmp	r2, r3
34186932:	d101      	bne.n	34186938 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
34186934:	f7fe faba 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
34186938:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418693c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
34186940:	4618      	mov	r0, r3
34186942:	f7fd fa4b 	bl	34183ddc <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34186946:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418694a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418694e:	2100      	movs	r1, #0
34186950:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
34186954:	f003 0320 	and.w	r3, r3, #32
34186958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
3418695c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
34186960:	4603      	mov	r3, r0
34186962:	460a      	mov	r2, r1
34186964:	4313      	orrs	r3, r2
34186966:	d067      	beq.n	34186a38 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34186968:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418696c:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34186970:	4b19      	ldr	r3, [pc, #100]	@ (341869d8 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
34186972:	429a      	cmp	r2, r3
34186974:	d132      	bne.n	341869dc <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186976:	4b0c      	ldr	r3, [pc, #48]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418697c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186980:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186984:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418698a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418698e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186990:	3b01      	subs	r3, #1
34186992:	041b      	lsls	r3, r3, #16
34186994:	4313      	orrs	r3, r2
34186996:	4a04      	ldr	r2, [pc, #16]	@ (341869a8 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34186998:	430b      	orrs	r3, r1
3418699a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418699e:	f7fd ffc5 	bl	3418492c <LL_RCC_IC9_Enable>
341869a2:	e042      	b.n	34186a2a <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
341869a4:	07020420 	.word	0x07020420
341869a8:	56028000 	.word	0x56028000
341869ac:	07030420 	.word	0x07030420
341869b0:	07010420 	.word	0x07010420
341869b4:	07020820 	.word	0x07020820
341869b8:	07030820 	.word	0x07030820
341869bc:	07010820 	.word	0x07010820
341869c0:	07020c20 	.word	0x07020c20
341869c4:	07030c20 	.word	0x07030c20
341869c8:	07010c20 	.word	0x07010c20
341869cc:	07021020 	.word	0x07021020
341869d0:	07031020 	.word	0x07031020
341869d4:	07011020 	.word	0x07011020
341869d8:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
341869dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869e0:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
341869e4:	4bc2      	ldr	r3, [pc, #776]	@ (34186cf0 <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
341869e6:	429a      	cmp	r2, r3
341869e8:	d116      	bne.n	34186a18 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341869ea:	4bc2      	ldr	r3, [pc, #776]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
341869ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341869f0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341869f4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341869f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341869fc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341869fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186a04:	3b01      	subs	r3, #1
34186a06:	041b      	lsls	r3, r3, #16
34186a08:	4313      	orrs	r3, r2
34186a0a:	4aba      	ldr	r2, [pc, #744]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186a0c:	430b      	orrs	r3, r1
34186a0e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186a12:	f7fe f88b 	bl	34184b2c <LL_RCC_IC14_Enable>
34186a16:	e008      	b.n	34186a2a <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34186a18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a1c:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
34186a20:	4bb5      	ldr	r3, [pc, #724]	@ (34186cf8 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
34186a22:	429a      	cmp	r2, r3
34186a24:	d101      	bne.n	34186a2a <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
34186a26:	f7fe fa41 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
34186a2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a2e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34186a32:	4618      	mov	r0, r3
34186a34:	f7fd f9d2 	bl	34183ddc <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
34186a38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186a40:	2100      	movs	r1, #0
34186a42:	67b9      	str	r1, [r7, #120]	@ 0x78
34186a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34186a48:	67fb      	str	r3, [r7, #124]	@ 0x7c
34186a4a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
34186a4e:	4603      	mov	r3, r0
34186a50:	460a      	mov	r2, r1
34186a52:	4313      	orrs	r3, r2
34186a54:	d04b      	beq.n	34186aee <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34186a56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a5a:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34186a5e:	4ba7      	ldr	r3, [pc, #668]	@ (34186cfc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
34186a60:	429a      	cmp	r2, r3
34186a62:	d116      	bne.n	34186a92 <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34186a64:	4ba3      	ldr	r3, [pc, #652]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186a6a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186a6e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186a72:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34186a78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34186a7e:	3b01      	subs	r3, #1
34186a80:	041b      	lsls	r3, r3, #16
34186a82:	4313      	orrs	r3, r2
34186a84:	4a9b      	ldr	r2, [pc, #620]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186a86:	430b      	orrs	r3, r1
34186a88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34186a8c:	f7fd ff0e 	bl	341848ac <LL_RCC_IC8_Enable>
34186a90:	e026      	b.n	34186ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34186a92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186a96:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34186a9a:	4b99      	ldr	r3, [pc, #612]	@ (34186d00 <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
34186a9c:	429a      	cmp	r2, r3
34186a9e:	d116      	bne.n	34186ace <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186aa0:	4b94      	ldr	r3, [pc, #592]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186aa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186aa6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186aaa:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186aae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ab2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186ab4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186aba:	3b01      	subs	r3, #1
34186abc:	041b      	lsls	r3, r3, #16
34186abe:	4313      	orrs	r3, r2
34186ac0:	4a8c      	ldr	r2, [pc, #560]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186ac2:	430b      	orrs	r3, r1
34186ac4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186ac8:	f7fd ff30 	bl	3418492c <LL_RCC_IC9_Enable>
34186acc:	e008      	b.n	34186ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34186ace:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ad2:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34186ad6:	4b8b      	ldr	r3, [pc, #556]	@ (34186d04 <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
34186ad8:	429a      	cmp	r2, r3
34186ada:	d101      	bne.n	34186ae0 <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
34186adc:	f7fe f9e6 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
34186ae0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ae4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34186ae8:	4618      	mov	r0, r3
34186aea:	f7fd f977 	bl	34183ddc <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
34186aee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186af2:	e9d3 2300 	ldrd	r2, r3, [r3]
34186af6:	2100      	movs	r1, #0
34186af8:	6739      	str	r1, [r7, #112]	@ 0x70
34186afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34186afe:	677b      	str	r3, [r7, #116]	@ 0x74
34186b00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
34186b04:	4603      	mov	r3, r0
34186b06:	460a      	mov	r2, r1
34186b08:	4313      	orrs	r3, r2
34186b0a:	d04b      	beq.n	34186ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34186b0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b10:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34186b14:	4b7c      	ldr	r3, [pc, #496]	@ (34186d08 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
34186b16:	429a      	cmp	r2, r3
34186b18:	d116      	bne.n	34186b48 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186b1a:	4b76      	ldr	r3, [pc, #472]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186b1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186b20:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186b24:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186b28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186b2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186b34:	3b01      	subs	r3, #1
34186b36:	041b      	lsls	r3, r3, #16
34186b38:	4313      	orrs	r3, r2
34186b3a:	4a6e      	ldr	r2, [pc, #440]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186b3c:	430b      	orrs	r3, r1
34186b3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186b42:	f7fd fef3 	bl	3418492c <LL_RCC_IC9_Enable>
34186b46:	e026      	b.n	34186b96 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34186b48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b4c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34186b50:	4b6e      	ldr	r3, [pc, #440]	@ (34186d0c <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
34186b52:	429a      	cmp	r2, r3
34186b54:	d116      	bne.n	34186b84 <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186b56:	4b67      	ldr	r3, [pc, #412]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186b58:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186b5c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186b60:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186b64:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186b6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186b70:	3b01      	subs	r3, #1
34186b72:	041b      	lsls	r3, r3, #16
34186b74:	4313      	orrs	r3, r2
34186b76:	4a5f      	ldr	r2, [pc, #380]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186b78:	430b      	orrs	r3, r1
34186b7a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186b7e:	f7fd ffd5 	bl	34184b2c <LL_RCC_IC14_Enable>
34186b82:	e008      	b.n	34186b96 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34186b84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b88:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34186b8c:	4b60      	ldr	r3, [pc, #384]	@ (34186d10 <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
34186b8e:	429a      	cmp	r2, r3
34186b90:	d101      	bne.n	34186b96 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
34186b92:	f7fe f98b 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
34186b96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186b9a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
34186b9e:	4618      	mov	r0, r3
34186ba0:	f7fd f927 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34186ba4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
34186bac:	2100      	movs	r1, #0
34186bae:	66b9      	str	r1, [r7, #104]	@ 0x68
34186bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34186bb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
34186bb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34186bba:	4603      	mov	r3, r0
34186bbc:	460a      	mov	r2, r1
34186bbe:	4313      	orrs	r3, r2
34186bc0:	d04b      	beq.n	34186c5a <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34186bc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186bc6:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34186bca:	4b52      	ldr	r3, [pc, #328]	@ (34186d14 <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
34186bcc:	429a      	cmp	r2, r3
34186bce:	d116      	bne.n	34186bfe <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186bd0:	4b48      	ldr	r3, [pc, #288]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186bd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186bd6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186bda:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186bde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186be2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186be4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186bea:	3b01      	subs	r3, #1
34186bec:	041b      	lsls	r3, r3, #16
34186bee:	4313      	orrs	r3, r2
34186bf0:	4a40      	ldr	r2, [pc, #256]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186bf2:	430b      	orrs	r3, r1
34186bf4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186bf8:	f7fd fe98 	bl	3418492c <LL_RCC_IC9_Enable>
34186bfc:	e026      	b.n	34186c4c <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34186bfe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c02:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34186c06:	4b44      	ldr	r3, [pc, #272]	@ (34186d18 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
34186c08:	429a      	cmp	r2, r3
34186c0a:	d116      	bne.n	34186c3a <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186c0c:	4b39      	ldr	r3, [pc, #228]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186c0e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186c12:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186c16:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186c1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186c20:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186c26:	3b01      	subs	r3, #1
34186c28:	041b      	lsls	r3, r3, #16
34186c2a:	4313      	orrs	r3, r2
34186c2c:	4a31      	ldr	r2, [pc, #196]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186c2e:	430b      	orrs	r3, r1
34186c30:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186c34:	f7fd ff7a 	bl	34184b2c <LL_RCC_IC14_Enable>
34186c38:	e008      	b.n	34186c4c <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34186c3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c3e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34186c42:	4b36      	ldr	r3, [pc, #216]	@ (34186d1c <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
34186c44:	429a      	cmp	r2, r3
34186c46:	d101      	bne.n	34186c4c <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
34186c48:	f7fe f930 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
34186c4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c50:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34186c54:	4618      	mov	r0, r3
34186c56:	f7fd f8cc 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34186c5a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186c62:	2100      	movs	r1, #0
34186c64:	6639      	str	r1, [r7, #96]	@ 0x60
34186c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34186c6a:	667b      	str	r3, [r7, #100]	@ 0x64
34186c6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
34186c70:	4603      	mov	r3, r0
34186c72:	460a      	mov	r2, r1
34186c74:	4313      	orrs	r3, r2
34186c76:	d067      	beq.n	34186d48 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34186c78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c7c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34186c80:	4b27      	ldr	r3, [pc, #156]	@ (34186d20 <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
34186c82:	429a      	cmp	r2, r3
34186c84:	d116      	bne.n	34186cb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186c86:	4b1b      	ldr	r3, [pc, #108]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186c8c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186c90:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186c94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186c9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186ca0:	3b01      	subs	r3, #1
34186ca2:	041b      	lsls	r3, r3, #16
34186ca4:	4313      	orrs	r3, r2
34186ca6:	4a13      	ldr	r2, [pc, #76]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186ca8:	430b      	orrs	r3, r1
34186caa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186cae:	f7fd fe3d 	bl	3418492c <LL_RCC_IC9_Enable>
34186cb2:	e042      	b.n	34186d3a <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34186cb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cb8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34186cbc:	4b19      	ldr	r3, [pc, #100]	@ (34186d24 <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
34186cbe:	429a      	cmp	r2, r3
34186cc0:	d132      	bne.n	34186d28 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186cc2:	4b0c      	ldr	r3, [pc, #48]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186cc4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186cc8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186ccc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186cd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cd4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186cd6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186cdc:	3b01      	subs	r3, #1
34186cde:	041b      	lsls	r3, r3, #16
34186ce0:	4313      	orrs	r3, r2
34186ce2:	4a04      	ldr	r2, [pc, #16]	@ (34186cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34186ce4:	430b      	orrs	r3, r1
34186ce6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186cea:	f7fd ff1f 	bl	34184b2c <LL_RCC_IC14_Enable>
34186cee:	e024      	b.n	34186d3a <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
34186cf0:	07031420 	.word	0x07031420
34186cf4:	56028000 	.word	0x56028000
34186cf8:	07011420 	.word	0x07011420
34186cfc:	07021820 	.word	0x07021820
34186d00:	07031820 	.word	0x07031820
34186d04:	07011820 	.word	0x07011820
34186d08:	07020030 	.word	0x07020030
34186d0c:	07030030 	.word	0x07030030
34186d10:	07010030 	.word	0x07010030
34186d14:	07020430 	.word	0x07020430
34186d18:	07030430 	.word	0x07030430
34186d1c:	07010430 	.word	0x07010430
34186d20:	07020830 	.word	0x07020830
34186d24:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34186d28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d2c:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34186d30:	4bb3      	ldr	r3, [pc, #716]	@ (34187000 <HAL_RCCEx_PeriphCLKConfig+0x2110>)
34186d32:	429a      	cmp	r2, r3
34186d34:	d101      	bne.n	34186d3a <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
34186d36:	f7fe f8b9 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
34186d3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d3e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
34186d42:	4618      	mov	r0, r3
34186d44:	f7fd f855 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34186d48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
34186d50:	2100      	movs	r1, #0
34186d52:	65b9      	str	r1, [r7, #88]	@ 0x58
34186d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34186d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
34186d5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
34186d5e:	4603      	mov	r3, r0
34186d60:	460a      	mov	r2, r1
34186d62:	4313      	orrs	r3, r2
34186d64:	d04b      	beq.n	34186dfe <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34186d66:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d6a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34186d6e:	4ba5      	ldr	r3, [pc, #660]	@ (34187004 <HAL_RCCEx_PeriphCLKConfig+0x2114>)
34186d70:	429a      	cmp	r2, r3
34186d72:	d116      	bne.n	34186da2 <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186d74:	4ba4      	ldr	r3, [pc, #656]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186d76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186d7a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186d7e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186d82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186d88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186d8e:	3b01      	subs	r3, #1
34186d90:	041b      	lsls	r3, r3, #16
34186d92:	4313      	orrs	r3, r2
34186d94:	4a9c      	ldr	r2, [pc, #624]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186d96:	430b      	orrs	r3, r1
34186d98:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186d9c:	f7fd fdc6 	bl	3418492c <LL_RCC_IC9_Enable>
34186da0:	e026      	b.n	34186df0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34186da2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186da6:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34186daa:	4b98      	ldr	r3, [pc, #608]	@ (3418700c <HAL_RCCEx_PeriphCLKConfig+0x211c>)
34186dac:	429a      	cmp	r2, r3
34186dae:	d116      	bne.n	34186dde <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186db0:	4b95      	ldr	r3, [pc, #596]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186db2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186db6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186dba:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186dbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186dc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186dc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186dca:	3b01      	subs	r3, #1
34186dcc:	041b      	lsls	r3, r3, #16
34186dce:	4313      	orrs	r3, r2
34186dd0:	4a8d      	ldr	r2, [pc, #564]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186dd2:	430b      	orrs	r3, r1
34186dd4:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186dd8:	f7fd fea8 	bl	34184b2c <LL_RCC_IC14_Enable>
34186ddc:	e008      	b.n	34186df0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34186dde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186de2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34186de6:	4b8a      	ldr	r3, [pc, #552]	@ (34187010 <HAL_RCCEx_PeriphCLKConfig+0x2120>)
34186de8:	429a      	cmp	r2, r3
34186dea:	d101      	bne.n	34186df0 <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
34186dec:	f7fe f85e 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
34186df0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186df4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34186df8:	4618      	mov	r0, r3
34186dfa:	f7fc fffa 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
34186dfe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e02:	e9d3 2300 	ldrd	r2, r3, [r3]
34186e06:	2100      	movs	r1, #0
34186e08:	6539      	str	r1, [r7, #80]	@ 0x50
34186e0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34186e0e:	657b      	str	r3, [r7, #84]	@ 0x54
34186e10:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
34186e14:	4603      	mov	r3, r0
34186e16:	460a      	mov	r2, r1
34186e18:	4313      	orrs	r3, r2
34186e1a:	d04b      	beq.n	34186eb4 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34186e1c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e20:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34186e24:	4b7b      	ldr	r3, [pc, #492]	@ (34187014 <HAL_RCCEx_PeriphCLKConfig+0x2124>)
34186e26:	429a      	cmp	r2, r3
34186e28:	d116      	bne.n	34186e58 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186e2a:	4b77      	ldr	r3, [pc, #476]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186e2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186e30:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186e34:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186e38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186e3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186e44:	3b01      	subs	r3, #1
34186e46:	041b      	lsls	r3, r3, #16
34186e48:	4313      	orrs	r3, r2
34186e4a:	4a6f      	ldr	r2, [pc, #444]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186e4c:	430b      	orrs	r3, r1
34186e4e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186e52:	f7fd fd6b 	bl	3418492c <LL_RCC_IC9_Enable>
34186e56:	e026      	b.n	34186ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34186e58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e5c:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34186e60:	4b6d      	ldr	r3, [pc, #436]	@ (34187018 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
34186e62:	429a      	cmp	r2, r3
34186e64:	d116      	bne.n	34186e94 <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186e66:	4b68      	ldr	r3, [pc, #416]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186e68:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186e6c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186e70:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186e74:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186e7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186e80:	3b01      	subs	r3, #1
34186e82:	041b      	lsls	r3, r3, #16
34186e84:	4313      	orrs	r3, r2
34186e86:	4a60      	ldr	r2, [pc, #384]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186e88:	430b      	orrs	r3, r1
34186e8a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186e8e:	f7fd fe4d 	bl	34184b2c <LL_RCC_IC14_Enable>
34186e92:	e008      	b.n	34186ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34186e94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186e98:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34186e9c:	4b5f      	ldr	r3, [pc, #380]	@ (3418701c <HAL_RCCEx_PeriphCLKConfig+0x212c>)
34186e9e:	429a      	cmp	r2, r3
34186ea0:	d101      	bne.n	34186ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
34186ea2:	f7fe f803 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
34186ea6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186eaa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
34186eae:	4618      	mov	r0, r3
34186eb0:	f7fc ff9f 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34186eb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
34186ebc:	2100      	movs	r1, #0
34186ebe:	64b9      	str	r1, [r7, #72]	@ 0x48
34186ec0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34186ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
34186ec6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
34186eca:	4603      	mov	r3, r0
34186ecc:	460a      	mov	r2, r1
34186ece:	4313      	orrs	r3, r2
34186ed0:	d04b      	beq.n	34186f6a <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34186ed2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ed6:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34186eda:	4b51      	ldr	r3, [pc, #324]	@ (34187020 <HAL_RCCEx_PeriphCLKConfig+0x2130>)
34186edc:	429a      	cmp	r2, r3
34186ede:	d116      	bne.n	34186f0e <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186ee0:	4b49      	ldr	r3, [pc, #292]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186ee2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186ee6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186eea:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186eee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ef2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186ef4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186efa:	3b01      	subs	r3, #1
34186efc:	041b      	lsls	r3, r3, #16
34186efe:	4313      	orrs	r3, r2
34186f00:	4a41      	ldr	r2, [pc, #260]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186f02:	430b      	orrs	r3, r1
34186f04:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186f08:	f7fd fd10 	bl	3418492c <LL_RCC_IC9_Enable>
34186f0c:	e026      	b.n	34186f5c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34186f0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f12:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34186f16:	4b43      	ldr	r3, [pc, #268]	@ (34187024 <HAL_RCCEx_PeriphCLKConfig+0x2134>)
34186f18:	429a      	cmp	r2, r3
34186f1a:	d116      	bne.n	34186f4a <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186f1c:	4b3a      	ldr	r3, [pc, #232]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186f1e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186f22:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186f26:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186f2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186f30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186f36:	3b01      	subs	r3, #1
34186f38:	041b      	lsls	r3, r3, #16
34186f3a:	4313      	orrs	r3, r2
34186f3c:	4a32      	ldr	r2, [pc, #200]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186f3e:	430b      	orrs	r3, r1
34186f40:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186f44:	f7fd fdf2 	bl	34184b2c <LL_RCC_IC14_Enable>
34186f48:	e008      	b.n	34186f5c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34186f4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f4e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34186f52:	4b35      	ldr	r3, [pc, #212]	@ (34187028 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
34186f54:	429a      	cmp	r2, r3
34186f56:	d101      	bne.n	34186f5c <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
34186f58:	f7fd ffa8 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
34186f5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f60:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34186f64:	4618      	mov	r0, r3
34186f66:	f7fc ff44 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34186f6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
34186f72:	2100      	movs	r1, #0
34186f74:	6439      	str	r1, [r7, #64]	@ 0x40
34186f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34186f7a:	647b      	str	r3, [r7, #68]	@ 0x44
34186f7c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
34186f80:	4603      	mov	r3, r0
34186f82:	460a      	mov	r2, r1
34186f84:	4313      	orrs	r3, r2
34186f86:	d065      	beq.n	34187054 <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34186f88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186f8c:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34186f90:	4b26      	ldr	r3, [pc, #152]	@ (3418702c <HAL_RCCEx_PeriphCLKConfig+0x213c>)
34186f92:	429a      	cmp	r2, r3
34186f94:	d116      	bne.n	34186fc4 <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34186f96:	4b1c      	ldr	r3, [pc, #112]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186f98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186f9c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186fa0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186fa4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34186faa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34186fb0:	3b01      	subs	r3, #1
34186fb2:	041b      	lsls	r3, r3, #16
34186fb4:	4313      	orrs	r3, r2
34186fb6:	4a14      	ldr	r2, [pc, #80]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186fb8:	430b      	orrs	r3, r1
34186fba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34186fbe:	f7fd fcb5 	bl	3418492c <LL_RCC_IC9_Enable>
34186fc2:	e040      	b.n	34187046 <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34186fc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fc8:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34186fcc:	4b18      	ldr	r3, [pc, #96]	@ (34187030 <HAL_RCCEx_PeriphCLKConfig+0x2140>)
34186fce:	429a      	cmp	r2, r3
34186fd0:	d130      	bne.n	34187034 <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34186fd2:	4b0d      	ldr	r3, [pc, #52]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186fd4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186fd8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34186fdc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34186fe0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fe4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34186fe6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34186fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34186fec:	3b01      	subs	r3, #1
34186fee:	041b      	lsls	r3, r3, #16
34186ff0:	4313      	orrs	r3, r2
34186ff2:	4a05      	ldr	r2, [pc, #20]	@ (34187008 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34186ff4:	430b      	orrs	r3, r1
34186ff6:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34186ffa:	f7fd fd97 	bl	34184b2c <LL_RCC_IC14_Enable>
34186ffe:	e022      	b.n	34187046 <HAL_RCCEx_PeriphCLKConfig+0x2156>
34187000:	07010830 	.word	0x07010830
34187004:	07020c30 	.word	0x07020c30
34187008:	56028000 	.word	0x56028000
3418700c:	07030c30 	.word	0x07030c30
34187010:	07010c30 	.word	0x07010c30
34187014:	07021030 	.word	0x07021030
34187018:	07031030 	.word	0x07031030
3418701c:	07011030 	.word	0x07011030
34187020:	07021430 	.word	0x07021430
34187024:	07031430 	.word	0x07031430
34187028:	07011430 	.word	0x07011430
3418702c:	07021830 	.word	0x07021830
34187030:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34187034:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187038:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3418703c:	4bc8      	ldr	r3, [pc, #800]	@ (34187360 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418703e:	429a      	cmp	r2, r3
34187040:	d101      	bne.n	34187046 <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
34187042:	f7fd ff33 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34187046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418704a:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3418704e:	4618      	mov	r0, r3
34187050:	f7fc fecf 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34187054:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187058:	e9d3 2300 	ldrd	r2, r3, [r3]
3418705c:	2100      	movs	r1, #0
3418705e:	63b9      	str	r1, [r7, #56]	@ 0x38
34187060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34187064:	63fb      	str	r3, [r7, #60]	@ 0x3c
34187066:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
3418706a:	4603      	mov	r3, r0
3418706c:	460a      	mov	r2, r1
3418706e:	4313      	orrs	r3, r2
34187070:	d04b      	beq.n	3418710a <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34187072:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187076:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
3418707a:	4bba      	ldr	r3, [pc, #744]	@ (34187364 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3418707c:	429a      	cmp	r2, r3
3418707e:	d116      	bne.n	341870ae <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187080:	4bb9      	ldr	r3, [pc, #740]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187082:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187086:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418708a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3418708e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187092:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34187094:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418709a:	3b01      	subs	r3, #1
3418709c:	041b      	lsls	r3, r3, #16
3418709e:	4313      	orrs	r3, r2
341870a0:	4ab1      	ldr	r2, [pc, #708]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341870a2:	430b      	orrs	r3, r1
341870a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
341870a8:	f7fd fc40 	bl	3418492c <LL_RCC_IC9_Enable>
341870ac:	e026      	b.n	341870fc <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
341870ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870b2:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341870b6:	4bad      	ldr	r3, [pc, #692]	@ (3418736c <HAL_RCCEx_PeriphCLKConfig+0x247c>)
341870b8:	429a      	cmp	r2, r3
341870ba:	d116      	bne.n	341870ea <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
341870bc:	4baa      	ldr	r3, [pc, #680]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341870be:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
341870c2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
341870c6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
341870ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
341870d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
341870d6:	3b01      	subs	r3, #1
341870d8:	041b      	lsls	r3, r3, #16
341870da:	4313      	orrs	r3, r2
341870dc:	4aa2      	ldr	r2, [pc, #648]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341870de:	430b      	orrs	r3, r1
341870e0:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
341870e4:	f7fd fd22 	bl	34184b2c <LL_RCC_IC14_Enable>
341870e8:	e008      	b.n	341870fc <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
341870ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341870ee:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
341870f2:	4b9f      	ldr	r3, [pc, #636]	@ (34187370 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
341870f4:	429a      	cmp	r2, r3
341870f6:	d101      	bne.n	341870fc <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
341870f8:	f7fd fed8 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
341870fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187100:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
34187104:	4618      	mov	r0, r3
34187106:	f7fc fe74 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
3418710a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418710e:	e9d3 2300 	ldrd	r2, r3, [r3]
34187112:	2100      	movs	r1, #0
34187114:	6339      	str	r1, [r7, #48]	@ 0x30
34187116:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418711a:	637b      	str	r3, [r7, #52]	@ 0x34
3418711c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
34187120:	4603      	mov	r3, r0
34187122:	460a      	mov	r2, r1
34187124:	4313      	orrs	r3, r2
34187126:	d04b      	beq.n	341871c0 <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34187128:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418712c:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34187130:	4a90      	ldr	r2, [pc, #576]	@ (34187374 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34187132:	4293      	cmp	r3, r2
34187134:	d116      	bne.n	34187164 <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34187136:	4b8c      	ldr	r3, [pc, #560]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187138:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3418713c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34187140:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187144:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187148:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418714a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418714e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34187150:	3b01      	subs	r3, #1
34187152:	041b      	lsls	r3, r3, #16
34187154:	4313      	orrs	r3, r2
34187156:	4a84      	ldr	r2, [pc, #528]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187158:	430b      	orrs	r3, r1
3418715a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3418715e:	f7fd fbe5 	bl	3418492c <LL_RCC_IC9_Enable>
34187162:	e026      	b.n	341871b2 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34187164:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187168:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
3418716c:	4a82      	ldr	r2, [pc, #520]	@ (34187378 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
3418716e:	4293      	cmp	r3, r2
34187170:	d116      	bne.n	341871a0 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187172:	4b7d      	ldr	r3, [pc, #500]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187174:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34187178:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3418717c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34187180:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187184:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34187186:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418718a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3418718c:	3b01      	subs	r3, #1
3418718e:	041b      	lsls	r3, r3, #16
34187190:	4313      	orrs	r3, r2
34187192:	4a75      	ldr	r2, [pc, #468]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187194:	430b      	orrs	r3, r1
34187196:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3418719a:	f7fd fcc7 	bl	34184b2c <LL_RCC_IC14_Enable>
3418719e:	e008      	b.n	341871b2 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
341871a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871a4:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341871a8:	4a74      	ldr	r2, [pc, #464]	@ (3418737c <HAL_RCCEx_PeriphCLKConfig+0x248c>)
341871aa:	4293      	cmp	r3, r2
341871ac:	d101      	bne.n	341871b2 <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
341871ae:	f7fd fe7d 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
341871b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871b6:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
341871ba:	4618      	mov	r0, r3
341871bc:	f7fc fe19 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
341871c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871c4:	e9d3 2300 	ldrd	r2, r3, [r3]
341871c8:	2100      	movs	r1, #0
341871ca:	62b9      	str	r1, [r7, #40]	@ 0x28
341871cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
341871d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
341871d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
341871d6:	4603      	mov	r3, r0
341871d8:	460a      	mov	r2, r1
341871da:	4313      	orrs	r3, r2
341871dc:	d04b      	beq.n	34187276 <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
341871de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341871e2:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
341871e6:	4a66      	ldr	r2, [pc, #408]	@ (34187380 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
341871e8:	4293      	cmp	r3, r2
341871ea:	d116      	bne.n	3418721a <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341871ec:	4b5e      	ldr	r3, [pc, #376]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
341871ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
341871f2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341871f6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341871fa:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
341871fe:	6c91      	ldr	r1, [r2, #72]	@ 0x48
34187200:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187204:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
34187206:	3a01      	subs	r2, #1
34187208:	0412      	lsls	r2, r2, #16
3418720a:	430a      	orrs	r2, r1
3418720c:	4956      	ldr	r1, [pc, #344]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418720e:	4313      	orrs	r3, r2
34187210:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34187214:	f7fd fb8a 	bl	3418492c <LL_RCC_IC9_Enable>
34187218:	e026      	b.n	34187268 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
3418721a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418721e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34187222:	4a58      	ldr	r2, [pc, #352]	@ (34187384 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
34187224:	4293      	cmp	r3, r2
34187226:	d116      	bne.n	34187256 <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34187228:	4b4f      	ldr	r3, [pc, #316]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418722a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418722e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34187232:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34187236:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418723a:	6f11      	ldr	r1, [r2, #112]	@ 0x70
3418723c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187240:	6f52      	ldr	r2, [r2, #116]	@ 0x74
34187242:	3a01      	subs	r2, #1
34187244:	0412      	lsls	r2, r2, #16
34187246:	430a      	orrs	r2, r1
34187248:	4947      	ldr	r1, [pc, #284]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418724a:	4313      	orrs	r3, r2
3418724c:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34187250:	f7fd fc6c 	bl	34184b2c <LL_RCC_IC14_Enable>
34187254:	e008      	b.n	34187268 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34187256:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418725a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3418725e:	4a4a      	ldr	r2, [pc, #296]	@ (34187388 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
34187260:	4293      	cmp	r3, r2
34187262:	d101      	bne.n	34187268 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
34187264:	f7fd fe22 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
34187268:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418726c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
34187270:	4618      	mov	r0, r3
34187272:	f7fc fdbe 	bl	34183df2 <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34187276:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418727a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418727e:	2100      	movs	r1, #0
34187280:	6239      	str	r1, [r7, #32]
34187282:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34187286:	627b      	str	r3, [r7, #36]	@ 0x24
34187288:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
3418728c:	4603      	mov	r3, r0
3418728e:	460a      	mov	r2, r1
34187290:	4313      	orrs	r3, r2
34187292:	d014      	beq.n	341872be <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34187294:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187298:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3418729c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
341872a0:	4618      	mov	r0, r3
341872a2:	f7fc fd4e 	bl	34183d42 <LL_RCC_SetOTGPHYCKREFClockSource>
341872a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872aa:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
341872ae:	0fdb      	lsrs	r3, r3, #31
341872b0:	2b01      	cmp	r3, #1
341872b2:	d102      	bne.n	341872ba <HAL_RCCEx_PeriphCLKConfig+0x23ca>
341872b4:	f7fc faf0 	bl	34183898 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
341872b8:	e001      	b.n	341872be <HAL_RCCEx_PeriphCLKConfig+0x23ce>
341872ba:	f7fc fadd 	bl	34183878 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
341872be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872c2:	e9d3 2300 	ldrd	r2, r3, [r3]
341872c6:	2100      	movs	r1, #0
341872c8:	61b9      	str	r1, [r7, #24]
341872ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
341872ce:	61fb      	str	r3, [r7, #28]
341872d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
341872d4:	4603      	mov	r3, r0
341872d6:	460a      	mov	r2, r1
341872d8:	4313      	orrs	r3, r2
341872da:	d014      	beq.n	34187306 <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
341872dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872e0:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
341872e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
341872e8:	4618      	mov	r0, r3
341872ea:	f7fc fd2a 	bl	34183d42 <LL_RCC_SetOTGPHYCKREFClockSource>
341872ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341872f2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
341872f6:	0fdb      	lsrs	r3, r3, #31
341872f8:	2b01      	cmp	r3, #1
341872fa:	d102      	bne.n	34187302 <HAL_RCCEx_PeriphCLKConfig+0x2412>
341872fc:	f7fc facc 	bl	34183898 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34187300:	e001      	b.n	34187306 <HAL_RCCEx_PeriphCLKConfig+0x2416>
34187302:	f7fc fab9 	bl	34183878 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34187306:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418730a:	e9d3 2300 	ldrd	r2, r3, [r3]
3418730e:	2100      	movs	r1, #0
34187310:	6139      	str	r1, [r7, #16]
34187312:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34187316:	617b      	str	r3, [r7, #20]
34187318:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
3418731c:	4603      	mov	r3, r0
3418731e:	460a      	mov	r2, r1
34187320:	4313      	orrs	r3, r2
34187322:	d053      	beq.n	341873cc <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34187324:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187328:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
3418732c:	4a17      	ldr	r2, [pc, #92]	@ (3418738c <HAL_RCCEx_PeriphCLKConfig+0x249c>)
3418732e:	4293      	cmp	r3, r2
34187330:	d12e      	bne.n	34187390 <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34187332:	4b0d      	ldr	r3, [pc, #52]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187334:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187338:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418733c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34187340:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187344:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34187346:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418734a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
3418734c:	3a01      	subs	r2, #1
3418734e:	0412      	lsls	r2, r2, #16
34187350:	430a      	orrs	r2, r1
34187352:	4905      	ldr	r1, [pc, #20]	@ (34187368 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34187354:	4313      	orrs	r3, r2
34187356:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3418735a:	f7fd fc27 	bl	34184bac <LL_RCC_IC15_Enable>
3418735e:	e020      	b.n	341873a2 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
34187360:	07011830 	.word	0x07011830
34187364:	07021c30 	.word	0x07021c30
34187368:	56028000 	.word	0x56028000
3418736c:	07031c30 	.word	0x07031c30
34187370:	07011c30 	.word	0x07011c30
34187374:	07020034 	.word	0x07020034
34187378:	07030034 	.word	0x07030034
3418737c:	07010034 	.word	0x07010034
34187380:	07020434 	.word	0x07020434
34187384:	07030434 	.word	0x07030434
34187388:	07010434 	.word	0x07010434
3418738c:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34187390:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187394:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34187398:	4a43      	ldr	r2, [pc, #268]	@ (341874a8 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
3418739a:	4293      	cmp	r3, r2
3418739c:	d101      	bne.n	341873a2 <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
3418739e:	f7fd fd85 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
341873a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873a6:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
341873aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
341873ae:	4618      	mov	r0, r3
341873b0:	f7fc fcbc 	bl	34183d2c <LL_RCC_SetOTGPHYClockSource>
341873b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873b8:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
341873bc:	0fdb      	lsrs	r3, r3, #31
341873be:	2b01      	cmp	r3, #1
341873c0:	d102      	bne.n	341873c8 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
341873c2:	f7fc fa69 	bl	34183898 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
341873c6:	e001      	b.n	341873cc <HAL_RCCEx_PeriphCLKConfig+0x24dc>
341873c8:	f7fc fa56 	bl	34183878 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
341873cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873d0:	e9d3 2300 	ldrd	r2, r3, [r3]
341873d4:	2100      	movs	r1, #0
341873d6:	60b9      	str	r1, [r7, #8]
341873d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
341873dc:	60fb      	str	r3, [r7, #12]
341873de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
341873e2:	4603      	mov	r3, r0
341873e4:	460a      	mov	r2, r1
341873e6:	4313      	orrs	r3, r2
341873e8:	d03b      	beq.n	34187462 <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
341873ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
341873ee:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
341873f2:	4a2e      	ldr	r2, [pc, #184]	@ (341874ac <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
341873f4:	4293      	cmp	r3, r2
341873f6:	d116      	bne.n	34187426 <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341873f8:	4b2d      	ldr	r3, [pc, #180]	@ (341874b0 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
341873fa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341873fe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34187402:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34187406:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
3418740a:	6f91      	ldr	r1, [r2, #120]	@ 0x78
3418740c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34187410:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34187412:	3a01      	subs	r2, #1
34187414:	0412      	lsls	r2, r2, #16
34187416:	430a      	orrs	r2, r1
34187418:	4925      	ldr	r1, [pc, #148]	@ (341874b0 <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
3418741a:	4313      	orrs	r3, r2
3418741c:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34187420:	f7fd fbc4 	bl	34184bac <LL_RCC_IC15_Enable>
34187424:	e008      	b.n	34187438 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34187426:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418742a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
3418742e:	4a21      	ldr	r2, [pc, #132]	@ (341874b4 <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
34187430:	4293      	cmp	r3, r2
34187432:	d101      	bne.n	34187438 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
34187434:	f7fd fd3a 	bl	34184eac <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34187438:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418743c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34187440:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34187444:	4618      	mov	r0, r3
34187446:	f7fc fc71 	bl	34183d2c <LL_RCC_SetOTGPHYClockSource>
3418744a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3418744e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34187452:	0fdb      	lsrs	r3, r3, #31
34187454:	2b01      	cmp	r3, #1
34187456:	d102      	bne.n	3418745e <HAL_RCCEx_PeriphCLKConfig+0x256e>
34187458:	f7fc fa1e 	bl	34183898 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
3418745c:	e001      	b.n	34187462 <HAL_RCCEx_PeriphCLKConfig+0x2572>
3418745e:	f7fc fa0b 	bl	34183878 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34187462:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187466:	e9d3 2300 	ldrd	r2, r3, [r3]
3418746a:	2100      	movs	r1, #0
3418746c:	6039      	str	r1, [r7, #0]
3418746e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34187472:	607b      	str	r3, [r7, #4]
34187474:	e9d7 0100 	ldrd	r0, r1, [r7]
34187478:	4603      	mov	r3, r0
3418747a:	460a      	mov	r2, r1
3418747c:	4313      	orrs	r3, r2
3418747e:	d006      	beq.n	3418748e <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34187480:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34187484:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34187488:	4618      	mov	r0, r3
3418748a:	f7fc fe8b 	bl	341841a4 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
3418748e:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
34187492:	2b00      	cmp	r3, #0
34187494:	d101      	bne.n	3418749a <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
34187496:	2300      	movs	r3, #0
34187498:	e000      	b.n	3418749c <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
3418749a:	2301      	movs	r3, #1
}
3418749c:	4618      	mov	r0, r3
3418749e:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
341874a2:	46bd      	mov	sp, r7
341874a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
341874a8:	03010c14 	.word	0x03010c14
341874ac:	03021414 	.word	0x03021414
341874b0:	56028000 	.word	0x56028000
341874b4:	03011414 	.word	0x03011414

341874b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
341874b8:	b590      	push	{r4, r7, lr}
341874ba:	b085      	sub	sp, #20
341874bc:	af00      	add	r7, sp, #0
341874be:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
341874c2:	2100      	movs	r1, #0
341874c4:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
341874c6:	e9d7 0100 	ldrd	r0, r1, [r7]
341874ca:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
341874ce:	ea50 0104 	orrs.w	r1, r0, r4
341874d2:	f000 8436 	beq.w	34187d42 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
341874d6:	e9d7 0100 	ldrd	r0, r1, [r7]
341874da:	2801      	cmp	r0, #1
341874dc:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
341874e0:	f080 8434 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341874e4:	e9d7 0100 	ldrd	r0, r1, [r7]
341874e8:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
341874ec:	ea50 0104 	orrs.w	r1, r0, r4
341874f0:	f000 8422 	beq.w	34187d38 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
341874f4:	e9d7 0100 	ldrd	r0, r1, [r7]
341874f8:	2801      	cmp	r0, #1
341874fa:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
341874fe:	f080 8425 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187502:	e9d7 0100 	ldrd	r0, r1, [r7]
34187506:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
3418750a:	ea50 0104 	orrs.w	r1, r0, r4
3418750e:	f000 840e 	beq.w	34187d2e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
34187512:	e9d7 0100 	ldrd	r0, r1, [r7]
34187516:	2801      	cmp	r0, #1
34187518:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
3418751c:	f080 8416 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187520:	e9d7 0100 	ldrd	r0, r1, [r7]
34187524:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
34187528:	ea50 0104 	orrs.w	r1, r0, r4
3418752c:	f000 83fa 	beq.w	34187d24 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
34187530:	e9d7 0100 	ldrd	r0, r1, [r7]
34187534:	2801      	cmp	r0, #1
34187536:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
3418753a:	f080 8407 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418753e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187542:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
34187546:	ea50 0104 	orrs.w	r1, r0, r4
3418754a:	f000 83e6 	beq.w	34187d1a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
3418754e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187552:	2801      	cmp	r0, #1
34187554:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34187558:	f080 83f8 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418755c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187560:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
34187564:	ea50 0104 	orrs.w	r1, r0, r4
34187568:	f000 83d2 	beq.w	34187d10 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
3418756c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187570:	2801      	cmp	r0, #1
34187572:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
34187576:	f080 83e9 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418757a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418757e:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
34187582:	ea50 0104 	orrs.w	r1, r0, r4
34187586:	f000 83be 	beq.w	34187d06 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
3418758a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418758e:	2801      	cmp	r0, #1
34187590:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
34187594:	f080 83da 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187598:	e9d7 0100 	ldrd	r0, r1, [r7]
3418759c:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
341875a0:	ea50 0104 	orrs.w	r1, r0, r4
341875a4:	f000 83aa 	beq.w	34187cfc <HAL_RCCEx_GetPeriphCLKFreq+0x844>
341875a8:	e9d7 0100 	ldrd	r0, r1, [r7]
341875ac:	2801      	cmp	r0, #1
341875ae:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
341875b2:	f080 83cb 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341875b6:	e9d7 0100 	ldrd	r0, r1, [r7]
341875ba:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
341875be:	ea50 0104 	orrs.w	r1, r0, r4
341875c2:	f000 8396 	beq.w	34187cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
341875c6:	e9d7 0100 	ldrd	r0, r1, [r7]
341875ca:	2801      	cmp	r0, #1
341875cc:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
341875d0:	f080 83bc 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341875d4:	e9d7 0100 	ldrd	r0, r1, [r7]
341875d8:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
341875dc:	ea50 0104 	orrs.w	r1, r0, r4
341875e0:	f000 8382 	beq.w	34187ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
341875e4:	e9d7 0100 	ldrd	r0, r1, [r7]
341875e8:	2801      	cmp	r0, #1
341875ea:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
341875ee:	f080 83ad 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341875f2:	e9d7 0100 	ldrd	r0, r1, [r7]
341875f6:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
341875fa:	ea50 0104 	orrs.w	r1, r0, r4
341875fe:	f000 836e 	beq.w	34187cde <HAL_RCCEx_GetPeriphCLKFreq+0x826>
34187602:	e9d7 0100 	ldrd	r0, r1, [r7]
34187606:	2801      	cmp	r0, #1
34187608:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
3418760c:	f080 839e 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187610:	e9d7 0100 	ldrd	r0, r1, [r7]
34187614:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
34187618:	ea50 0104 	orrs.w	r1, r0, r4
3418761c:	f000 835a 	beq.w	34187cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
34187620:	e9d7 0100 	ldrd	r0, r1, [r7]
34187624:	2801      	cmp	r0, #1
34187626:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
3418762a:	f080 838f 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418762e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187632:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
34187636:	ea50 0104 	orrs.w	r1, r0, r4
3418763a:	f000 8346 	beq.w	34187cca <HAL_RCCEx_GetPeriphCLKFreq+0x812>
3418763e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187642:	2801      	cmp	r0, #1
34187644:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
34187648:	f080 8380 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418764c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187650:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
34187654:	ea50 0104 	orrs.w	r1, r0, r4
34187658:	f000 8332 	beq.w	34187cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
3418765c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187660:	2801      	cmp	r0, #1
34187662:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
34187666:	f080 8371 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418766a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418766e:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
34187672:	ea50 0104 	orrs.w	r1, r0, r4
34187676:	f000 831e 	beq.w	34187cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
3418767a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418767e:	2801      	cmp	r0, #1
34187680:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
34187684:	f080 8362 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187688:	e9d7 0100 	ldrd	r0, r1, [r7]
3418768c:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
34187690:	ea50 0104 	orrs.w	r1, r0, r4
34187694:	f000 830a 	beq.w	34187cac <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
34187698:	e9d7 0100 	ldrd	r0, r1, [r7]
3418769c:	2801      	cmp	r0, #1
3418769e:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
341876a2:	f080 8353 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341876a6:	e9d7 0100 	ldrd	r0, r1, [r7]
341876aa:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
341876ae:	ea50 0104 	orrs.w	r1, r0, r4
341876b2:	f000 82f6 	beq.w	34187ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
341876b6:	e9d7 0100 	ldrd	r0, r1, [r7]
341876ba:	2801      	cmp	r0, #1
341876bc:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
341876c0:	f080 8344 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341876c4:	e9d7 0100 	ldrd	r0, r1, [r7]
341876c8:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
341876cc:	ea50 0104 	orrs.w	r1, r0, r4
341876d0:	f000 82e2 	beq.w	34187c98 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
341876d4:	e9d7 0100 	ldrd	r0, r1, [r7]
341876d8:	2801      	cmp	r0, #1
341876da:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
341876de:	f080 8335 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341876e2:	e9d7 0100 	ldrd	r0, r1, [r7]
341876e6:	f1a1 0420 	sub.w	r4, r1, #32
341876ea:	ea50 0104 	orrs.w	r1, r0, r4
341876ee:	f000 82ce 	beq.w	34187c8e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
341876f2:	e9d7 0100 	ldrd	r0, r1, [r7]
341876f6:	2801      	cmp	r0, #1
341876f8:	f171 0120 	sbcs.w	r1, r1, #32
341876fc:	f080 8326 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187700:	e9d7 0100 	ldrd	r0, r1, [r7]
34187704:	f1a1 0410 	sub.w	r4, r1, #16
34187708:	ea50 0104 	orrs.w	r1, r0, r4
3418770c:	f000 82ba 	beq.w	34187c84 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
34187710:	e9d7 0100 	ldrd	r0, r1, [r7]
34187714:	2801      	cmp	r0, #1
34187716:	f171 0110 	sbcs.w	r1, r1, #16
3418771a:	f080 8317 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418771e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187722:	f1a1 0408 	sub.w	r4, r1, #8
34187726:	ea50 0104 	orrs.w	r1, r0, r4
3418772a:	f000 82a6 	beq.w	34187c7a <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
3418772e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187732:	2801      	cmp	r0, #1
34187734:	f171 0108 	sbcs.w	r1, r1, #8
34187738:	f080 8308 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418773c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187740:	1f0c      	subs	r4, r1, #4
34187742:	ea50 0104 	orrs.w	r1, r0, r4
34187746:	f000 8293 	beq.w	34187c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
3418774a:	e9d7 0100 	ldrd	r0, r1, [r7]
3418774e:	2801      	cmp	r0, #1
34187750:	f171 0104 	sbcs.w	r1, r1, #4
34187754:	f080 82fa 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187758:	e9d7 0100 	ldrd	r0, r1, [r7]
3418775c:	1e8c      	subs	r4, r1, #2
3418775e:	ea50 0104 	orrs.w	r1, r0, r4
34187762:	f000 8280 	beq.w	34187c66 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34187766:	e9d7 0100 	ldrd	r0, r1, [r7]
3418776a:	2801      	cmp	r0, #1
3418776c:	f171 0102 	sbcs.w	r1, r1, #2
34187770:	f080 82ec 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187774:	e9d7 0100 	ldrd	r0, r1, [r7]
34187778:	1e4c      	subs	r4, r1, #1
3418777a:	ea50 0104 	orrs.w	r1, r0, r4
3418777e:	f000 826d 	beq.w	34187c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
34187782:	e9d7 0100 	ldrd	r0, r1, [r7]
34187786:	2801      	cmp	r0, #1
34187788:	f171 0101 	sbcs.w	r1, r1, #1
3418778c:	f080 82de 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187790:	e9d7 0100 	ldrd	r0, r1, [r7]
34187794:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
34187798:	4321      	orrs	r1, r4
3418779a:	f000 825a 	beq.w	34187c52 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
3418779e:	e9d7 0100 	ldrd	r0, r1, [r7]
341877a2:	4cda      	ldr	r4, [pc, #872]	@ (34187b0c <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
341877a4:	42a0      	cmp	r0, r4
341877a6:	f171 0100 	sbcs.w	r1, r1, #0
341877aa:	f080 82cf 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341877ae:	e9d7 0100 	ldrd	r0, r1, [r7]
341877b2:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
341877b6:	4321      	orrs	r1, r4
341877b8:	f000 8246 	beq.w	34187c48 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
341877bc:	e9d7 0100 	ldrd	r0, r1, [r7]
341877c0:	4cd3      	ldr	r4, [pc, #844]	@ (34187b10 <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
341877c2:	42a0      	cmp	r0, r4
341877c4:	f171 0100 	sbcs.w	r1, r1, #0
341877c8:	f080 82c0 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341877cc:	e9d7 0100 	ldrd	r0, r1, [r7]
341877d0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
341877d4:	4321      	orrs	r1, r4
341877d6:	f000 8232 	beq.w	34187c3e <HAL_RCCEx_GetPeriphCLKFreq+0x786>
341877da:	e9d7 0100 	ldrd	r0, r1, [r7]
341877de:	4ccd      	ldr	r4, [pc, #820]	@ (34187b14 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
341877e0:	42a0      	cmp	r0, r4
341877e2:	f171 0100 	sbcs.w	r1, r1, #0
341877e6:	f080 82b1 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341877ea:	e9d7 0100 	ldrd	r0, r1, [r7]
341877ee:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
341877f2:	4321      	orrs	r1, r4
341877f4:	f000 821e 	beq.w	34187c34 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
341877f8:	e9d7 0100 	ldrd	r0, r1, [r7]
341877fc:	4cc6      	ldr	r4, [pc, #792]	@ (34187b18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
341877fe:	42a0      	cmp	r0, r4
34187800:	f171 0100 	sbcs.w	r1, r1, #0
34187804:	f080 82a2 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187808:	e9d7 0100 	ldrd	r0, r1, [r7]
3418780c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
34187810:	4321      	orrs	r1, r4
34187812:	f000 820b 	beq.w	34187c2c <HAL_RCCEx_GetPeriphCLKFreq+0x774>
34187816:	e9d7 0100 	ldrd	r0, r1, [r7]
3418781a:	4cc0      	ldr	r4, [pc, #768]	@ (34187b1c <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
3418781c:	42a0      	cmp	r0, r4
3418781e:	f171 0100 	sbcs.w	r1, r1, #0
34187822:	f080 8293 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187826:	e9d7 0100 	ldrd	r0, r1, [r7]
3418782a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
3418782e:	4321      	orrs	r1, r4
34187830:	f000 81f7 	beq.w	34187c22 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
34187834:	e9d7 0100 	ldrd	r0, r1, [r7]
34187838:	4cb9      	ldr	r4, [pc, #740]	@ (34187b20 <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
3418783a:	42a0      	cmp	r0, r4
3418783c:	f171 0100 	sbcs.w	r1, r1, #0
34187840:	f080 8284 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187844:	e9d7 0100 	ldrd	r0, r1, [r7]
34187848:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
3418784c:	4321      	orrs	r1, r4
3418784e:	f000 81e2 	beq.w	34187c16 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
34187852:	e9d7 0100 	ldrd	r0, r1, [r7]
34187856:	4cb3      	ldr	r4, [pc, #716]	@ (34187b24 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34187858:	42a0      	cmp	r0, r4
3418785a:	f171 0100 	sbcs.w	r1, r1, #0
3418785e:	f080 8275 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187862:	e9d7 0100 	ldrd	r0, r1, [r7]
34187866:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
3418786a:	4321      	orrs	r1, r4
3418786c:	f000 81cd 	beq.w	34187c0a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
34187870:	e9d7 0100 	ldrd	r0, r1, [r7]
34187874:	4cac      	ldr	r4, [pc, #688]	@ (34187b28 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
34187876:	42a0      	cmp	r0, r4
34187878:	f171 0100 	sbcs.w	r1, r1, #0
3418787c:	f080 8266 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187880:	e9d7 0100 	ldrd	r0, r1, [r7]
34187884:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
34187888:	4321      	orrs	r1, r4
3418788a:	f000 81b8 	beq.w	34187bfe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
3418788e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187892:	4ca6      	ldr	r4, [pc, #664]	@ (34187b2c <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
34187894:	42a0      	cmp	r0, r4
34187896:	f171 0100 	sbcs.w	r1, r1, #0
3418789a:	f080 8257 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3418789e:	e9d7 0100 	ldrd	r0, r1, [r7]
341878a2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
341878a6:	4321      	orrs	r1, r4
341878a8:	f000 81a4 	beq.w	34187bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
341878ac:	e9d7 0100 	ldrd	r0, r1, [r7]
341878b0:	4c9f      	ldr	r4, [pc, #636]	@ (34187b30 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
341878b2:	42a0      	cmp	r0, r4
341878b4:	f171 0100 	sbcs.w	r1, r1, #0
341878b8:	f080 8248 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341878bc:	e9d7 0100 	ldrd	r0, r1, [r7]
341878c0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
341878c4:	4321      	orrs	r1, r4
341878c6:	f000 8190 	beq.w	34187bea <HAL_RCCEx_GetPeriphCLKFreq+0x732>
341878ca:	e9d7 0100 	ldrd	r0, r1, [r7]
341878ce:	4c99      	ldr	r4, [pc, #612]	@ (34187b34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
341878d0:	42a0      	cmp	r0, r4
341878d2:	f171 0100 	sbcs.w	r1, r1, #0
341878d6:	f080 8239 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341878da:	e9d7 0100 	ldrd	r0, r1, [r7]
341878de:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
341878e2:	4321      	orrs	r1, r4
341878e4:	f000 817c 	beq.w	34187be0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
341878e8:	e9d7 0100 	ldrd	r0, r1, [r7]
341878ec:	4c92      	ldr	r4, [pc, #584]	@ (34187b38 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
341878ee:	42a0      	cmp	r0, r4
341878f0:	f171 0100 	sbcs.w	r1, r1, #0
341878f4:	f080 822a 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341878f8:	e9d7 0100 	ldrd	r0, r1, [r7]
341878fc:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
34187900:	4321      	orrs	r1, r4
34187902:	f000 8168 	beq.w	34187bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
34187906:	e9d7 0100 	ldrd	r0, r1, [r7]
3418790a:	4c8c      	ldr	r4, [pc, #560]	@ (34187b3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
3418790c:	42a0      	cmp	r0, r4
3418790e:	f171 0100 	sbcs.w	r1, r1, #0
34187912:	f080 821b 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187916:	e9d7 0100 	ldrd	r0, r1, [r7]
3418791a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
3418791e:	4321      	orrs	r1, r4
34187920:	f000 8154 	beq.w	34187bcc <HAL_RCCEx_GetPeriphCLKFreq+0x714>
34187924:	e9d7 0100 	ldrd	r0, r1, [r7]
34187928:	4c85      	ldr	r4, [pc, #532]	@ (34187b40 <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
3418792a:	42a0      	cmp	r0, r4
3418792c:	f171 0100 	sbcs.w	r1, r1, #0
34187930:	f080 820c 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187934:	e9d7 0100 	ldrd	r0, r1, [r7]
34187938:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
3418793c:	4321      	orrs	r1, r4
3418793e:	f000 8140 	beq.w	34187bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
34187942:	e9d7 0100 	ldrd	r0, r1, [r7]
34187946:	4c7f      	ldr	r4, [pc, #508]	@ (34187b44 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34187948:	42a0      	cmp	r0, r4
3418794a:	f171 0100 	sbcs.w	r1, r1, #0
3418794e:	f080 81fd 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187952:	e9d7 0100 	ldrd	r0, r1, [r7]
34187956:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
3418795a:	4321      	orrs	r1, r4
3418795c:	f000 812c 	beq.w	34187bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
34187960:	e9d7 0100 	ldrd	r0, r1, [r7]
34187964:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34187968:	f171 0100 	sbcs.w	r1, r1, #0
3418796c:	f080 81ee 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187970:	e9d7 0100 	ldrd	r0, r1, [r7]
34187974:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34187978:	4321      	orrs	r1, r4
3418797a:	f000 8118 	beq.w	34187bae <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
3418797e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187982:	f248 0401 	movw	r4, #32769	@ 0x8001
34187986:	42a0      	cmp	r0, r4
34187988:	f171 0100 	sbcs.w	r1, r1, #0
3418798c:	f080 81de 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187990:	e9d7 0100 	ldrd	r0, r1, [r7]
34187994:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34187998:	4321      	orrs	r1, r4
3418799a:	f000 8103 	beq.w	34187ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3418799e:	e9d7 0100 	ldrd	r0, r1, [r7]
341879a2:	f244 0401 	movw	r4, #16385	@ 0x4001
341879a6:	42a0      	cmp	r0, r4
341879a8:	f171 0100 	sbcs.w	r1, r1, #0
341879ac:	f080 81ce 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341879b0:	e9d7 0100 	ldrd	r0, r1, [r7]
341879b4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
341879b8:	4321      	orrs	r1, r4
341879ba:	f000 80ee 	beq.w	34187b9a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
341879be:	e9d7 0100 	ldrd	r0, r1, [r7]
341879c2:	f242 0401 	movw	r4, #8193	@ 0x2001
341879c6:	42a0      	cmp	r0, r4
341879c8:	f171 0100 	sbcs.w	r1, r1, #0
341879cc:	f080 81be 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341879d0:	e9d7 0100 	ldrd	r0, r1, [r7]
341879d4:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
341879d8:	4321      	orrs	r1, r4
341879da:	f000 80d9 	beq.w	34187b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
341879de:	e9d7 0100 	ldrd	r0, r1, [r7]
341879e2:	f241 0401 	movw	r4, #4097	@ 0x1001
341879e6:	42a0      	cmp	r0, r4
341879e8:	f171 0100 	sbcs.w	r1, r1, #0
341879ec:	f080 81ae 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
341879f0:	e9d7 0100 	ldrd	r0, r1, [r7]
341879f4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
341879f8:	4321      	orrs	r1, r4
341879fa:	f000 80c4 	beq.w	34187b86 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
341879fe:	e9d7 0100 	ldrd	r0, r1, [r7]
34187a02:	f640 0401 	movw	r4, #2049	@ 0x801
34187a06:	42a0      	cmp	r0, r4
34187a08:	f171 0100 	sbcs.w	r1, r1, #0
34187a0c:	f080 819e 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187a10:	e9d7 0100 	ldrd	r0, r1, [r7]
34187a14:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
34187a18:	4321      	orrs	r1, r4
34187a1a:	f000 80af 	beq.w	34187b7c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
34187a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
34187a22:	f240 4401 	movw	r4, #1025	@ 0x401
34187a26:	42a0      	cmp	r0, r4
34187a28:	f171 0100 	sbcs.w	r1, r1, #0
34187a2c:	f080 818e 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187a30:	e9d7 0100 	ldrd	r0, r1, [r7]
34187a34:	2821      	cmp	r0, #33	@ 0x21
34187a36:	f171 0100 	sbcs.w	r1, r1, #0
34187a3a:	d255      	bcs.n	34187ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
34187a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
34187a40:	4301      	orrs	r1, r0
34187a42:	f000 8183 	beq.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187a46:	e9d7 0100 	ldrd	r0, r1, [r7]
34187a4a:	1e42      	subs	r2, r0, #1
34187a4c:	f141 33ff 	adc.w	r3, r1, #4294967295
34187a50:	2a20      	cmp	r2, #32
34187a52:	f173 0100 	sbcs.w	r1, r3, #0
34187a56:	f080 8179 	bcs.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187a5a:	2a1f      	cmp	r2, #31
34187a5c:	f200 8176 	bhi.w	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34187a60:	a101      	add	r1, pc, #4	@ (adr r1, 34187a68 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
34187a62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
34187a66:	bf00      	nop
34187a68:	34187af7 	.word	0x34187af7
34187a6c:	34187b01 	.word	0x34187b01
34187a70:	34187d4d 	.word	0x34187d4d
34187a74:	34187b51 	.word	0x34187b51
34187a78:	34187d4d 	.word	0x34187d4d
34187a7c:	34187d4d 	.word	0x34187d4d
34187a80:	34187d4d 	.word	0x34187d4d
34187a84:	34187b49 	.word	0x34187b49
34187a88:	34187d4d 	.word	0x34187d4d
34187a8c:	34187d4d 	.word	0x34187d4d
34187a90:	34187d4d 	.word	0x34187d4d
34187a94:	34187d4d 	.word	0x34187d4d
34187a98:	34187d4d 	.word	0x34187d4d
34187a9c:	34187d4d 	.word	0x34187d4d
34187aa0:	34187d4d 	.word	0x34187d4d
34187aa4:	34187b5b 	.word	0x34187b5b
34187aa8:	34187d4d 	.word	0x34187d4d
34187aac:	34187d4d 	.word	0x34187d4d
34187ab0:	34187d4d 	.word	0x34187d4d
34187ab4:	34187d4d 	.word	0x34187d4d
34187ab8:	34187d4d 	.word	0x34187d4d
34187abc:	34187d4d 	.word	0x34187d4d
34187ac0:	34187d4d 	.word	0x34187d4d
34187ac4:	34187d4d 	.word	0x34187d4d
34187ac8:	34187d4d 	.word	0x34187d4d
34187acc:	34187d4d 	.word	0x34187d4d
34187ad0:	34187d4d 	.word	0x34187d4d
34187ad4:	34187d4d 	.word	0x34187d4d
34187ad8:	34187d4d 	.word	0x34187d4d
34187adc:	34187d4d 	.word	0x34187d4d
34187ae0:	34187d4d 	.word	0x34187d4d
34187ae4:	34187b67 	.word	0x34187b67
34187ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
34187aec:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
34187af0:	430b      	orrs	r3, r1
34187af2:	d03e      	beq.n	34187b72 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
34187af4:	e12a      	b.n	34187d4c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
34187af6:	2070      	movs	r0, #112	@ 0x70
34187af8:	f000 fb90 	bl	3418821c <RCCEx_GetADCCLKFreq>
34187afc:	60f8      	str	r0, [r7, #12]
      break;
34187afe:	e126      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
34187b00:	2007      	movs	r0, #7
34187b02:	f000 fc8d 	bl	34188420 <RCCEx_GetADFCLKFreq>
34187b06:	60f8      	str	r0, [r7, #12]
      break;
34187b08:	e121      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
34187b0a:	bf00      	nop
34187b0c:	80000001 	.word	0x80000001
34187b10:	40000001 	.word	0x40000001
34187b14:	20000001 	.word	0x20000001
34187b18:	10000001 	.word	0x10000001
34187b1c:	08000001 	.word	0x08000001
34187b20:	04000001 	.word	0x04000001
34187b24:	02000001 	.word	0x02000001
34187b28:	01000001 	.word	0x01000001
34187b2c:	00800001 	.word	0x00800001
34187b30:	00400001 	.word	0x00400001
34187b34:	00200001 	.word	0x00200001
34187b38:	00100001 	.word	0x00100001
34187b3c:	00080001 	.word	0x00080001
34187b40:	00040001 	.word	0x00040001
34187b44:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34187b48:	f000 ff0c 	bl	34188964 <RCCEx_GetCSICLKFreq>
34187b4c:	60f8      	str	r0, [r7, #12]
      break;
34187b4e:	e0fe      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34187b50:	2007      	movs	r0, #7
34187b52:	f000 fd51 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34187b56:	60f8      	str	r0, [r7, #12]
      break;
34187b58:	e0f9      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
34187b5a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
34187b5e:	f000 ff4d 	bl	341889fc <RCCEx_GetDCMIPPCLKFreq>
34187b62:	60f8      	str	r0, [r7, #12]
      break;
34187b64:	e0f3      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
34187b66:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
34187b6a:	f000 ffd1 	bl	34188b10 <RCCEx_GetETH1CLKFreq>
34187b6e:	60f8      	str	r0, [r7, #12]
      break;
34187b70:	e0ed      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
34187b72:	2003      	movs	r0, #3
34187b74:	f001 f84c 	bl	34188c10 <RCCEx_GetETH1PTPCLKFreq>
34187b78:	60f8      	str	r0, [r7, #12]
      break;
34187b7a:	e0e8      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
34187b7c:	2003      	movs	r0, #3
34187b7e:	f001 f8cb 	bl	34188d18 <RCCEx_GetFDCANCLKFreq>
34187b82:	60f8      	str	r0, [r7, #12]
      break;
34187b84:	e0e3      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
34187b86:	2030      	movs	r0, #48	@ 0x30
34187b88:	f001 f946 	bl	34188e18 <RCCEx_GetFMCCLKFreq>
34187b8c:	60f8      	str	r0, [r7, #12]
      break;
34187b8e:	e0de      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34187b90:	4871      	ldr	r0, [pc, #452]	@ (34187d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
34187b92:	f001 f9f9 	bl	34188f88 <RCCEx_GetI2CCLKFreq>
34187b96:	60f8      	str	r0, [r7, #12]
      break;
34187b98:	e0d9      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34187b9a:	4870      	ldr	r0, [pc, #448]	@ (34187d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
34187b9c:	f001 f9f4 	bl	34188f88 <RCCEx_GetI2CCLKFreq>
34187ba0:	60f8      	str	r0, [r7, #12]
      break;
34187ba2:	e0d4      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34187ba4:	486e      	ldr	r0, [pc, #440]	@ (34187d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
34187ba6:	f001 f9ef 	bl	34188f88 <RCCEx_GetI2CCLKFreq>
34187baa:	60f8      	str	r0, [r7, #12]
      break;
34187bac:	e0cf      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34187bae:	486d      	ldr	r0, [pc, #436]	@ (34187d64 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
34187bb0:	f001 f9ea 	bl	34188f88 <RCCEx_GetI2CCLKFreq>
34187bb4:	60f8      	str	r0, [r7, #12]
      break;
34187bb6:	e0ca      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34187bb8:	486b      	ldr	r0, [pc, #428]	@ (34187d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34187bba:	f001 fb8d 	bl	341892d8 <RCCEx_GetI3CCLKFreq>
34187bbe:	60f8      	str	r0, [r7, #12]
      break;
34187bc0:	e0c5      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34187bc2:	486a      	ldr	r0, [pc, #424]	@ (34187d6c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
34187bc4:	f001 fb88 	bl	341892d8 <RCCEx_GetI3CCLKFreq>
34187bc8:	60f8      	str	r0, [r7, #12]
      break;
34187bca:	e0c0      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34187bcc:	4868      	ldr	r0, [pc, #416]	@ (34187d70 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
34187bce:	f001 fcb7 	bl	34189540 <RCCEx_GetLPTIMCLKFreq>
34187bd2:	60f8      	str	r0, [r7, #12]
      break;
34187bd4:	e0bb      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34187bd6:	4867      	ldr	r0, [pc, #412]	@ (34187d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
34187bd8:	f001 fcb2 	bl	34189540 <RCCEx_GetLPTIMCLKFreq>
34187bdc:	60f8      	str	r0, [r7, #12]
      break;
34187bde:	e0b6      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34187be0:	4865      	ldr	r0, [pc, #404]	@ (34187d78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
34187be2:	f001 fcad 	bl	34189540 <RCCEx_GetLPTIMCLKFreq>
34187be6:	60f8      	str	r0, [r7, #12]
      break;
34187be8:	e0b1      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34187bea:	4864      	ldr	r0, [pc, #400]	@ (34187d7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
34187bec:	f001 fca8 	bl	34189540 <RCCEx_GetLPTIMCLKFreq>
34187bf0:	60f8      	str	r0, [r7, #12]
      break;
34187bf2:	e0ac      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
34187bf4:	4862      	ldr	r0, [pc, #392]	@ (34187d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
34187bf6:	f001 fca3 	bl	34189540 <RCCEx_GetLPTIMCLKFreq>
34187bfa:	60f8      	str	r0, [r7, #12]
      break;
34187bfc:	e0a7      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
34187bfe:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
34187c02:	f001 fe47 	bl	34189894 <RCCEx_GetLPUARTCLKFreq>
34187c06:	60f8      	str	r0, [r7, #12]
      break;
34187c08:	e0a1      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
34187c0a:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
34187c0e:	f001 ff43 	bl	34189a98 <RCCEx_GetLTDCCLKFreq>
34187c12:	60f8      	str	r0, [r7, #12]
      break;
34187c14:	e09b      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
34187c16:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
34187c1a:	f001 ffc7 	bl	34189bac <RCCEx_GetMDFCLKFreq>
34187c1e:	60f8      	str	r0, [r7, #12]
      break;
34187c20:	e095      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
34187c22:	2030      	movs	r0, #48	@ 0x30
34187c24:	f002 f8cc 	bl	34189dc0 <RCCEx_GetPSSICLKFreq>
34187c28:	60f8      	str	r0, [r7, #12]
      break;
34187c2a:	e090      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
34187c2c:	f002 f94a 	bl	34189ec4 <RCCEx_GetRTCCLKFreq>
34187c30:	60f8      	str	r0, [r7, #12]
      break;
34187c32:	e08c      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
34187c34:	4853      	ldr	r0, [pc, #332]	@ (34187d84 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
34187c36:	f002 f997 	bl	34189f68 <RCCEx_GetSAICLKFreq>
34187c3a:	60f8      	str	r0, [r7, #12]
      break;
34187c3c:	e087      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34187c3e:	4852      	ldr	r0, [pc, #328]	@ (34187d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
34187c40:	f002 f992 	bl	34189f68 <RCCEx_GetSAICLKFreq>
34187c44:	60f8      	str	r0, [r7, #12]
      break;
34187c46:	e082      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34187c48:	4850      	ldr	r0, [pc, #320]	@ (34187d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34187c4a:	f002 faf3 	bl	3418a234 <RCCEx_GetSDMMCCLKFreq>
34187c4e:	60f8      	str	r0, [r7, #12]
      break;
34187c50:	e07d      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34187c52:	484f      	ldr	r0, [pc, #316]	@ (34187d90 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34187c54:	f002 faee 	bl	3418a234 <RCCEx_GetSDMMCCLKFreq>
34187c58:	60f8      	str	r0, [r7, #12]
      break;
34187c5a:	e078      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34187c5c:	2007      	movs	r0, #7
34187c5e:	f002 fbd3 	bl	3418a408 <RCCEx_GetSPDIFRXCLKFreq>
34187c62:	60f8      	str	r0, [r7, #12]
      break;
34187c64:	e073      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34187c66:	484b      	ldr	r0, [pc, #300]	@ (34187d94 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34187c68:	f002 fcb2 	bl	3418a5d0 <RCCEx_GetSPICLKFreq>
34187c6c:	60f8      	str	r0, [r7, #12]
      break;
34187c6e:	e06e      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34187c70:	4849      	ldr	r0, [pc, #292]	@ (34187d98 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
34187c72:	f002 fcad 	bl	3418a5d0 <RCCEx_GetSPICLKFreq>
34187c76:	60f8      	str	r0, [r7, #12]
      break;
34187c78:	e069      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34187c7a:	4848      	ldr	r0, [pc, #288]	@ (34187d9c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34187c7c:	f002 fca8 	bl	3418a5d0 <RCCEx_GetSPICLKFreq>
34187c80:	60f8      	str	r0, [r7, #12]
      break;
34187c82:	e064      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34187c84:	4846      	ldr	r0, [pc, #280]	@ (34187da0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34187c86:	f002 fca3 	bl	3418a5d0 <RCCEx_GetSPICLKFreq>
34187c8a:	60f8      	str	r0, [r7, #12]
      break;
34187c8c:	e05f      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
34187c8e:	4845      	ldr	r0, [pc, #276]	@ (34187da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
34187c90:	f002 fc9e 	bl	3418a5d0 <RCCEx_GetSPICLKFreq>
34187c94:	60f8      	str	r0, [r7, #12]
      break;
34187c96:	e05a      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34187c98:	4843      	ldr	r0, [pc, #268]	@ (34187da8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34187c9a:	f002 fc99 	bl	3418a5d0 <RCCEx_GetSPICLKFreq>
34187c9e:	60f8      	str	r0, [r7, #12]
      break;
34187ca0:	e055      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34187ca2:	4842      	ldr	r0, [pc, #264]	@ (34187dac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34187ca4:	f003 f990 	bl	3418afc8 <RCCEx_GetUSARTCLKFreq>
34187ca8:	60f8      	str	r0, [r7, #12]
      break;
34187caa:	e050      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34187cac:	4840      	ldr	r0, [pc, #256]	@ (34187db0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
34187cae:	f003 f98b 	bl	3418afc8 <RCCEx_GetUSARTCLKFreq>
34187cb2:	60f8      	str	r0, [r7, #12]
      break;
34187cb4:	e04b      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34187cb6:	483f      	ldr	r0, [pc, #252]	@ (34187db4 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34187cb8:	f003 f986 	bl	3418afc8 <RCCEx_GetUSARTCLKFreq>
34187cbc:	60f8      	str	r0, [r7, #12]
      break;
34187cbe:	e046      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
34187cc0:	483d      	ldr	r0, [pc, #244]	@ (34187db8 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
34187cc2:	f002 ff57 	bl	3418ab74 <RCCEx_GetUARTCLKFreq>
34187cc6:	60f8      	str	r0, [r7, #12]
      break;
34187cc8:	e041      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34187cca:	483c      	ldr	r0, [pc, #240]	@ (34187dbc <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34187ccc:	f002 ff52 	bl	3418ab74 <RCCEx_GetUARTCLKFreq>
34187cd0:	60f8      	str	r0, [r7, #12]
      break;
34187cd2:	e03c      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34187cd4:	483a      	ldr	r0, [pc, #232]	@ (34187dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187cd6:	f003 f977 	bl	3418afc8 <RCCEx_GetUSARTCLKFreq>
34187cda:	60f8      	str	r0, [r7, #12]
      break;
34187cdc:	e037      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34187cde:	4839      	ldr	r0, [pc, #228]	@ (34187dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
34187ce0:	f002 ff48 	bl	3418ab74 <RCCEx_GetUARTCLKFreq>
34187ce4:	60f8      	str	r0, [r7, #12]
      break;
34187ce6:	e032      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34187ce8:	4837      	ldr	r0, [pc, #220]	@ (34187dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34187cea:	f002 ff43 	bl	3418ab74 <RCCEx_GetUARTCLKFreq>
34187cee:	60f8      	str	r0, [r7, #12]
      break;
34187cf0:	e02d      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34187cf2:	4836      	ldr	r0, [pc, #216]	@ (34187dcc <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34187cf4:	f002 ff3e 	bl	3418ab74 <RCCEx_GetUARTCLKFreq>
34187cf8:	60f8      	str	r0, [r7, #12]
      break;
34187cfa:	e028      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34187cfc:	4834      	ldr	r0, [pc, #208]	@ (34187dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
34187cfe:	f003 f963 	bl	3418afc8 <RCCEx_GetUSARTCLKFreq>
34187d02:	60f8      	str	r0, [r7, #12]
      break;
34187d04:	e023      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
34187d06:	4833      	ldr	r0, [pc, #204]	@ (34187dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
34187d08:	f003 fc3e 	bl	3418b588 <RCCEx_GetOTGPHYCKREFCLKFreq>
34187d0c:	60f8      	str	r0, [r7, #12]
      break;
34187d0e:	e01e      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34187d10:	4831      	ldr	r0, [pc, #196]	@ (34187dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34187d12:	f003 fb83 	bl	3418b41c <RCCEx_GetOTGPHYCLKFreq>
34187d16:	60f8      	str	r0, [r7, #12]
      break;
34187d18:	e019      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34187d1a:	4830      	ldr	r0, [pc, #192]	@ (34187ddc <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34187d1c:	f003 fc34 	bl	3418b588 <RCCEx_GetOTGPHYCKREFCLKFreq>
34187d20:	60f8      	str	r0, [r7, #12]
      break;
34187d22:	e014      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34187d24:	482e      	ldr	r0, [pc, #184]	@ (34187de0 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34187d26:	f003 fb79 	bl	3418b41c <RCCEx_GetOTGPHYCLKFreq>
34187d2a:	60f8      	str	r0, [r7, #12]
      break;
34187d2c:	e00f      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34187d2e:	482d      	ldr	r0, [pc, #180]	@ (34187de4 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34187d30:	f003 fc7a 	bl	3418b628 <RCCEx_GetXSPICLKFreq>
34187d34:	60f8      	str	r0, [r7, #12]
      break;
34187d36:	e00a      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34187d38:	482b      	ldr	r0, [pc, #172]	@ (34187de8 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
34187d3a:	f003 fc75 	bl	3418b628 <RCCEx_GetXSPICLKFreq>
34187d3e:	60f8      	str	r0, [r7, #12]
      break;
34187d40:	e005      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34187d42:	482a      	ldr	r0, [pc, #168]	@ (34187dec <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34187d44:	f003 fc70 	bl	3418b628 <RCCEx_GetXSPICLKFreq>
34187d48:	60f8      	str	r0, [r7, #12]
      break;
34187d4a:	e000      	b.n	34187d4e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34187d4c:	bf00      	nop
  }

  return frequency;
34187d4e:	68fb      	ldr	r3, [r7, #12]
}
34187d50:	4618      	mov	r0, r3
34187d52:	3714      	adds	r7, #20
34187d54:	46bd      	mov	sp, r7
34187d56:	bd90      	pop	{r4, r7, pc}
34187d58:	0700000c 	.word	0x0700000c
34187d5c:	0700040c 	.word	0x0700040c
34187d60:	0700080c 	.word	0x0700080c
34187d64:	07000c0c 	.word	0x07000c0c
34187d68:	0700100c 	.word	0x0700100c
34187d6c:	0700140c 	.word	0x0700140c
34187d70:	0700082c 	.word	0x0700082c
34187d74:	07000c2c 	.word	0x07000c2c
34187d78:	0700102c 	.word	0x0700102c
34187d7c:	0700142c 	.word	0x0700142c
34187d80:	0700182c 	.word	0x0700182c
34187d84:	07001418 	.word	0x07001418
34187d88:	07001818 	.word	0x07001818
34187d8c:	0300001c 	.word	0x0300001c
34187d90:	0300041c 	.word	0x0300041c
34187d94:	07000420 	.word	0x07000420
34187d98:	07000820 	.word	0x07000820
34187d9c:	07000c20 	.word	0x07000c20
34187da0:	07001020 	.word	0x07001020
34187da4:	07001420 	.word	0x07001420
34187da8:	07001820 	.word	0x07001820
34187dac:	07000030 	.word	0x07000030
34187db0:	07000430 	.word	0x07000430
34187db4:	07000830 	.word	0x07000830
34187db8:	07000c30 	.word	0x07000c30
34187dbc:	07001030 	.word	0x07001030
34187dc0:	07001430 	.word	0x07001430
34187dc4:	07001830 	.word	0x07001830
34187dc8:	07001c30 	.word	0x07001c30
34187dcc:	07000034 	.word	0x07000034
34187dd0:	07000434 	.word	0x07000434
34187dd4:	01001014 	.word	0x01001014
34187dd8:	03000c14 	.word	0x03000c14
34187ddc:	01001814 	.word	0x01001814
34187de0:	03001414 	.word	0x03001414
34187de4:	03000014 	.word	0x03000014
34187de8:	03000414 	.word	0x03000414
34187dec:	03000814 	.word	0x03000814

34187df0 <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
34187df0:	b5f0      	push	{r4, r5, r6, r7, lr}
34187df2:	b087      	sub	sp, #28
34187df4:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187df6:	2300      	movs	r3, #0
34187df8:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
34187dfa:	f7fc fa05 	bl	34184208 <LL_RCC_PLL1_IsReady>
34187dfe:	4603      	mov	r3, r0
34187e00:	2b00      	cmp	r3, #0
34187e02:	d02a      	beq.n	34187e5a <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
34187e04:	f7fc fa68 	bl	341842d8 <LL_RCC_PLL1P_IsEnabled>
34187e08:	4603      	mov	r3, r0
34187e0a:	2b00      	cmp	r3, #0
34187e0c:	d031      	beq.n	34187e72 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34187e0e:	f7fc f9ed 	bl	341841ec <LL_RCC_PLL1_GetSource>
34187e12:	4603      	mov	r3, r0
34187e14:	4618      	mov	r0, r3
34187e16:	f000 f957 	bl	341880c8 <RCCEx_GetPLLSourceFreq>
34187e1a:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187e1c:	68bb      	ldr	r3, [r7, #8]
34187e1e:	2b00      	cmp	r3, #0
34187e20:	d027      	beq.n	34187e72 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL1_GetM();
34187e22:	f7fc fa29 	bl	34184278 <LL_RCC_PLL1_GetM>
34187e26:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187e28:	687b      	ldr	r3, [r7, #4]
34187e2a:	2b00      	cmp	r3, #0
34187e2c:	d021      	beq.n	34187e72 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
34187e2e:	f7fc fa13 	bl	34184258 <LL_RCC_PLL1_GetN>
34187e32:	4605      	mov	r5, r0
34187e34:	f7fc fa64 	bl	34184300 <LL_RCC_PLL1_GetFRACN>
34187e38:	4606      	mov	r6, r0
34187e3a:	f7fc fa2d 	bl	34184298 <LL_RCC_PLL1_GetP1>
34187e3e:	4604      	mov	r4, r0
34187e40:	f7fc fa3a 	bl	341842b8 <LL_RCC_PLL1_GetP2>
34187e44:	4603      	mov	r3, r0
34187e46:	9301      	str	r3, [sp, #4]
34187e48:	9400      	str	r4, [sp, #0]
34187e4a:	4633      	mov	r3, r6
34187e4c:	462a      	mov	r2, r5
34187e4e:	6879      	ldr	r1, [r7, #4]
34187e50:	68b8      	ldr	r0, [r7, #8]
34187e52:	f000 f997 	bl	34188184 <RCCEx_CalcPLLFreq>
34187e56:	60f8      	str	r0, [r7, #12]
34187e58:	e00b      	b.n	34187e72 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
34187e5a:	f7fc f9e9 	bl	34184230 <LL_RCC_PLL1_IsEnabledBypass>
34187e5e:	4603      	mov	r3, r0
34187e60:	2b00      	cmp	r3, #0
34187e62:	d006      	beq.n	34187e72 <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34187e64:	f7fc f9c2 	bl	341841ec <LL_RCC_PLL1_GetSource>
34187e68:	4603      	mov	r3, r0
34187e6a:	4618      	mov	r0, r3
34187e6c:	f000 f92c 	bl	341880c8 <RCCEx_GetPLLSourceFreq>
34187e70:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187e72:	68fb      	ldr	r3, [r7, #12]
}
34187e74:	4618      	mov	r0, r3
34187e76:	3714      	adds	r7, #20
34187e78:	46bd      	mov	sp, r7
34187e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

34187e7c <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
34187e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
34187e7e:	b087      	sub	sp, #28
34187e80:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187e82:	2300      	movs	r3, #0
34187e84:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34187e86:	f7fc fa57 	bl	34184338 <LL_RCC_PLL2_IsReady>
34187e8a:	4603      	mov	r3, r0
34187e8c:	2b00      	cmp	r3, #0
34187e8e:	d02a      	beq.n	34187ee6 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
34187e90:	f7fc faba 	bl	34184408 <LL_RCC_PLL2P_IsEnabled>
34187e94:	4603      	mov	r3, r0
34187e96:	2b00      	cmp	r3, #0
34187e98:	d031      	beq.n	34187efe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34187e9a:	f7fc fa3f 	bl	3418431c <LL_RCC_PLL2_GetSource>
34187e9e:	4603      	mov	r3, r0
34187ea0:	4618      	mov	r0, r3
34187ea2:	f000 f911 	bl	341880c8 <RCCEx_GetPLLSourceFreq>
34187ea6:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187ea8:	68bb      	ldr	r3, [r7, #8]
34187eaa:	2b00      	cmp	r3, #0
34187eac:	d027      	beq.n	34187efe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL2_GetM();
34187eae:	f7fc fa7b 	bl	341843a8 <LL_RCC_PLL2_GetM>
34187eb2:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187eb4:	687b      	ldr	r3, [r7, #4]
34187eb6:	2b00      	cmp	r3, #0
34187eb8:	d021      	beq.n	34187efe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34187eba:	f7fc fa65 	bl	34184388 <LL_RCC_PLL2_GetN>
34187ebe:	4605      	mov	r5, r0
34187ec0:	f7fc fab6 	bl	34184430 <LL_RCC_PLL2_GetFRACN>
34187ec4:	4606      	mov	r6, r0
34187ec6:	f7fc fa7f 	bl	341843c8 <LL_RCC_PLL2_GetP1>
34187eca:	4604      	mov	r4, r0
34187ecc:	f7fc fa8c 	bl	341843e8 <LL_RCC_PLL2_GetP2>
34187ed0:	4603      	mov	r3, r0
34187ed2:	9301      	str	r3, [sp, #4]
34187ed4:	9400      	str	r4, [sp, #0]
34187ed6:	4633      	mov	r3, r6
34187ed8:	462a      	mov	r2, r5
34187eda:	6879      	ldr	r1, [r7, #4]
34187edc:	68b8      	ldr	r0, [r7, #8]
34187ede:	f000 f951 	bl	34188184 <RCCEx_CalcPLLFreq>
34187ee2:	60f8      	str	r0, [r7, #12]
34187ee4:	e00b      	b.n	34187efe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
34187ee6:	f7fc fa3b 	bl	34184360 <LL_RCC_PLL2_IsEnabledBypass>
34187eea:	4603      	mov	r3, r0
34187eec:	2b00      	cmp	r3, #0
34187eee:	d006      	beq.n	34187efe <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34187ef0:	f7fc fa14 	bl	3418431c <LL_RCC_PLL2_GetSource>
34187ef4:	4603      	mov	r3, r0
34187ef6:	4618      	mov	r0, r3
34187ef8:	f000 f8e6 	bl	341880c8 <RCCEx_GetPLLSourceFreq>
34187efc:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187efe:	68fb      	ldr	r3, [r7, #12]
}
34187f00:	4618      	mov	r0, r3
34187f02:	3714      	adds	r7, #20
34187f04:	46bd      	mov	sp, r7
34187f06:	bdf0      	pop	{r4, r5, r6, r7, pc}

34187f08 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
34187f08:	b5f0      	push	{r4, r5, r6, r7, lr}
34187f0a:	b087      	sub	sp, #28
34187f0c:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187f0e:	2300      	movs	r3, #0
34187f10:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
34187f12:	f7fc faa9 	bl	34184468 <LL_RCC_PLL3_IsReady>
34187f16:	4603      	mov	r3, r0
34187f18:	2b00      	cmp	r3, #0
34187f1a:	d02a      	beq.n	34187f72 <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
34187f1c:	f7fc fb0c 	bl	34184538 <LL_RCC_PLL3P_IsEnabled>
34187f20:	4603      	mov	r3, r0
34187f22:	2b00      	cmp	r3, #0
34187f24:	d031      	beq.n	34187f8a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34187f26:	f7fc fa91 	bl	3418444c <LL_RCC_PLL3_GetSource>
34187f2a:	4603      	mov	r3, r0
34187f2c:	4618      	mov	r0, r3
34187f2e:	f000 f8cb 	bl	341880c8 <RCCEx_GetPLLSourceFreq>
34187f32:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187f34:	68bb      	ldr	r3, [r7, #8]
34187f36:	2b00      	cmp	r3, #0
34187f38:	d027      	beq.n	34187f8a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL3_GetM();
34187f3a:	f7fc facd 	bl	341844d8 <LL_RCC_PLL3_GetM>
34187f3e:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187f40:	687b      	ldr	r3, [r7, #4]
34187f42:	2b00      	cmp	r3, #0
34187f44:	d021      	beq.n	34187f8a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34187f46:	f7fc fab7 	bl	341844b8 <LL_RCC_PLL3_GetN>
34187f4a:	4605      	mov	r5, r0
34187f4c:	f7fc fb08 	bl	34184560 <LL_RCC_PLL3_GetFRACN>
34187f50:	4606      	mov	r6, r0
34187f52:	f7fc fad1 	bl	341844f8 <LL_RCC_PLL3_GetP1>
34187f56:	4604      	mov	r4, r0
34187f58:	f7fc fade 	bl	34184518 <LL_RCC_PLL3_GetP2>
34187f5c:	4603      	mov	r3, r0
34187f5e:	9301      	str	r3, [sp, #4]
34187f60:	9400      	str	r4, [sp, #0]
34187f62:	4633      	mov	r3, r6
34187f64:	462a      	mov	r2, r5
34187f66:	6879      	ldr	r1, [r7, #4]
34187f68:	68b8      	ldr	r0, [r7, #8]
34187f6a:	f000 f90b 	bl	34188184 <RCCEx_CalcPLLFreq>
34187f6e:	60f8      	str	r0, [r7, #12]
34187f70:	e00b      	b.n	34187f8a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
34187f72:	f7fc fa8d 	bl	34184490 <LL_RCC_PLL3_IsEnabledBypass>
34187f76:	4603      	mov	r3, r0
34187f78:	2b00      	cmp	r3, #0
34187f7a:	d006      	beq.n	34187f8a <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34187f7c:	f7fc fa66 	bl	3418444c <LL_RCC_PLL3_GetSource>
34187f80:	4603      	mov	r3, r0
34187f82:	4618      	mov	r0, r3
34187f84:	f000 f8a0 	bl	341880c8 <RCCEx_GetPLLSourceFreq>
34187f88:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34187f8a:	68fb      	ldr	r3, [r7, #12]
}
34187f8c:	4618      	mov	r0, r3
34187f8e:	3714      	adds	r7, #20
34187f90:	46bd      	mov	sp, r7
34187f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

34187f94 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34187f94:	b5f0      	push	{r4, r5, r6, r7, lr}
34187f96:	b087      	sub	sp, #28
34187f98:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34187f9a:	2300      	movs	r3, #0
34187f9c:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
34187f9e:	f7fc fafb 	bl	34184598 <LL_RCC_PLL4_IsReady>
34187fa2:	4603      	mov	r3, r0
34187fa4:	2b00      	cmp	r3, #0
34187fa6:	d02a      	beq.n	34187ffe <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34187fa8:	f7fc fb5e 	bl	34184668 <LL_RCC_PLL4P_IsEnabled>
34187fac:	4603      	mov	r3, r0
34187fae:	2b00      	cmp	r3, #0
34187fb0:	d031      	beq.n	34188016 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34187fb2:	f7fc fae3 	bl	3418457c <LL_RCC_PLL4_GetSource>
34187fb6:	4603      	mov	r3, r0
34187fb8:	4618      	mov	r0, r3
34187fba:	f000 f885 	bl	341880c8 <RCCEx_GetPLLSourceFreq>
34187fbe:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34187fc0:	68bb      	ldr	r3, [r7, #8]
34187fc2:	2b00      	cmp	r3, #0
34187fc4:	d027      	beq.n	34188016 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL4_GetM();
34187fc6:	f7fc fb1f 	bl	34184608 <LL_RCC_PLL4_GetM>
34187fca:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34187fcc:	687b      	ldr	r3, [r7, #4]
34187fce:	2b00      	cmp	r3, #0
34187fd0:	d021      	beq.n	34188016 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34187fd2:	f7fc fb09 	bl	341845e8 <LL_RCC_PLL4_GetN>
34187fd6:	4605      	mov	r5, r0
34187fd8:	f7fc fb5a 	bl	34184690 <LL_RCC_PLL4_GetFRACN>
34187fdc:	4606      	mov	r6, r0
34187fde:	f7fc fb23 	bl	34184628 <LL_RCC_PLL4_GetP1>
34187fe2:	4604      	mov	r4, r0
34187fe4:	f7fc fb30 	bl	34184648 <LL_RCC_PLL4_GetP2>
34187fe8:	4603      	mov	r3, r0
34187fea:	9301      	str	r3, [sp, #4]
34187fec:	9400      	str	r4, [sp, #0]
34187fee:	4633      	mov	r3, r6
34187ff0:	462a      	mov	r2, r5
34187ff2:	6879      	ldr	r1, [r7, #4]
34187ff4:	68b8      	ldr	r0, [r7, #8]
34187ff6:	f000 f8c5 	bl	34188184 <RCCEx_CalcPLLFreq>
34187ffa:	60f8      	str	r0, [r7, #12]
34187ffc:	e00b      	b.n	34188016 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
34187ffe:	f7fc fadf 	bl	341845c0 <LL_RCC_PLL4_IsEnabledBypass>
34188002:	4603      	mov	r3, r0
34188004:	2b00      	cmp	r3, #0
34188006:	d006      	beq.n	34188016 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
34188008:	f7fc fab8 	bl	3418457c <LL_RCC_PLL4_GetSource>
3418800c:	4603      	mov	r3, r0
3418800e:	4618      	mov	r0, r3
34188010:	f000 f85a 	bl	341880c8 <RCCEx_GetPLLSourceFreq>
34188014:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34188016:	68fb      	ldr	r3, [r7, #12]
}
34188018:	4618      	mov	r0, r3
3418801a:	3714      	adds	r7, #20
3418801c:	46bd      	mov	sp, r7
3418801e:	bdf0      	pop	{r4, r5, r6, r7, pc}

34188020 <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
34188020:	b580      	push	{r7, lr}
34188022:	b082      	sub	sp, #8
34188024:	af00      	add	r7, sp, #0
34188026:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34188028:	f7fb fcca 	bl	341839c0 <LL_RCC_GetAHBPrescaler>
3418802c:	4603      	mov	r3, r0
3418802e:	0d1b      	lsrs	r3, r3, #20
34188030:	f003 0307 	and.w	r3, r3, #7
34188034:	687a      	ldr	r2, [r7, #4]
34188036:	fa22 f303 	lsr.w	r3, r2, r3
}
3418803a:	4618      	mov	r0, r3
3418803c:	3708      	adds	r7, #8
3418803e:	46bd      	mov	sp, r7
34188040:	bd80      	pop	{r7, pc}

34188042 <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
34188042:	b580      	push	{r7, lr}
34188044:	b082      	sub	sp, #8
34188046:	af00      	add	r7, sp, #0
34188048:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
3418804a:	f7fb fcc7 	bl	341839dc <LL_RCC_GetAPB1Prescaler>
3418804e:	4603      	mov	r3, r0
34188050:	f003 0307 	and.w	r3, r3, #7
34188054:	687a      	ldr	r2, [r7, #4]
34188056:	fa22 f303 	lsr.w	r3, r2, r3
}
3418805a:	4618      	mov	r0, r3
3418805c:	3708      	adds	r7, #8
3418805e:	46bd      	mov	sp, r7
34188060:	bd80      	pop	{r7, pc}

34188062 <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
34188062:	b580      	push	{r7, lr}
34188064:	b082      	sub	sp, #8
34188066:	af00      	add	r7, sp, #0
34188068:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
3418806a:	f7fb fcc5 	bl	341839f8 <LL_RCC_GetAPB2Prescaler>
3418806e:	4603      	mov	r3, r0
34188070:	091b      	lsrs	r3, r3, #4
34188072:	f003 0307 	and.w	r3, r3, #7
34188076:	687a      	ldr	r2, [r7, #4]
34188078:	fa22 f303 	lsr.w	r3, r2, r3
}
3418807c:	4618      	mov	r0, r3
3418807e:	3708      	adds	r7, #8
34188080:	46bd      	mov	sp, r7
34188082:	bd80      	pop	{r7, pc}

34188084 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34188084:	b580      	push	{r7, lr}
34188086:	b082      	sub	sp, #8
34188088:	af00      	add	r7, sp, #0
3418808a:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
3418808c:	f7fb fcc2 	bl	34183a14 <LL_RCC_GetAPB4Prescaler>
34188090:	4603      	mov	r3, r0
34188092:	0b1b      	lsrs	r3, r3, #12
34188094:	f003 0307 	and.w	r3, r3, #7
34188098:	687a      	ldr	r2, [r7, #4]
3418809a:	fa22 f303 	lsr.w	r3, r2, r3
}
3418809e:	4618      	mov	r0, r3
341880a0:	3708      	adds	r7, #8
341880a2:	46bd      	mov	sp, r7
341880a4:	bd80      	pop	{r7, pc}

341880a6 <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
341880a6:	b580      	push	{r7, lr}
341880a8:	b082      	sub	sp, #8
341880aa:	af00      	add	r7, sp, #0
341880ac:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
341880ae:	f7fb fcbf 	bl	34183a30 <LL_RCC_GetAPB5Prescaler>
341880b2:	4603      	mov	r3, r0
341880b4:	0c1b      	lsrs	r3, r3, #16
341880b6:	f003 0307 	and.w	r3, r3, #7
341880ba:	687a      	ldr	r2, [r7, #4]
341880bc:	fa22 f303 	lsr.w	r3, r2, r3
}
341880c0:	4618      	mov	r0, r3
341880c2:	3708      	adds	r7, #8
341880c4:	46bd      	mov	sp, r7
341880c6:	bd80      	pop	{r7, pc}

341880c8 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
341880c8:	b580      	push	{r7, lr}
341880ca:	b084      	sub	sp, #16
341880cc:	af00      	add	r7, sp, #0
341880ce:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
341880d0:	2300      	movs	r3, #0
341880d2:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
341880d4:	687b      	ldr	r3, [r7, #4]
341880d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341880da:	d039      	beq.n	34188150 <RCCEx_GetPLLSourceFreq+0x88>
341880dc:	687b      	ldr	r3, [r7, #4]
341880de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341880e2:	d838      	bhi.n	34188156 <RCCEx_GetPLLSourceFreq+0x8e>
341880e4:	687b      	ldr	r3, [r7, #4]
341880e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341880ea:	d029      	beq.n	34188140 <RCCEx_GetPLLSourceFreq+0x78>
341880ec:	687b      	ldr	r3, [r7, #4]
341880ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341880f2:	d830      	bhi.n	34188156 <RCCEx_GetPLLSourceFreq+0x8e>
341880f4:	687b      	ldr	r3, [r7, #4]
341880f6:	2b00      	cmp	r3, #0
341880f8:	d004      	beq.n	34188104 <RCCEx_GetPLLSourceFreq+0x3c>
341880fa:	687b      	ldr	r3, [r7, #4]
341880fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188100:	d00e      	beq.n	34188120 <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
34188102:	e028      	b.n	34188156 <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
34188104:	f7fb fbfc 	bl	34183900 <LL_RCC_HSI_IsReady>
34188108:	4603      	mov	r3, r0
3418810a:	2b00      	cmp	r3, #0
3418810c:	d025      	beq.n	3418815a <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418810e:	f7fb fc09 	bl	34183924 <LL_RCC_HSI_GetDivider>
34188112:	4603      	mov	r3, r0
34188114:	09db      	lsrs	r3, r3, #7
34188116:	4a16      	ldr	r2, [pc, #88]	@ (34188170 <RCCEx_GetPLLSourceFreq+0xa8>)
34188118:	fa22 f303 	lsr.w	r3, r2, r3
3418811c:	60fb      	str	r3, [r7, #12]
      break;
3418811e:	e01c      	b.n	3418815a <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
34188120:	f7fb fc0e 	bl	34183940 <LL_RCC_MSI_IsReady>
34188124:	4603      	mov	r3, r0
34188126:	2b00      	cmp	r3, #0
34188128:	d019      	beq.n	3418815e <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
3418812a:	f7fb fc1b 	bl	34183964 <LL_RCC_MSI_GetFrequency>
3418812e:	4603      	mov	r3, r0
34188130:	2b00      	cmp	r3, #0
34188132:	d102      	bne.n	3418813a <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
34188134:	4b0f      	ldr	r3, [pc, #60]	@ (34188174 <RCCEx_GetPLLSourceFreq+0xac>)
34188136:	60fb      	str	r3, [r7, #12]
      break;
34188138:	e011      	b.n	3418815e <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
3418813a:	4b0f      	ldr	r3, [pc, #60]	@ (34188178 <RCCEx_GetPLLSourceFreq+0xb0>)
3418813c:	60fb      	str	r3, [r7, #12]
      break;
3418813e:	e00e      	b.n	3418815e <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
34188140:	f7fb fbcc 	bl	341838dc <LL_RCC_HSE_IsReady>
34188144:	4603      	mov	r3, r0
34188146:	2b00      	cmp	r3, #0
34188148:	d00b      	beq.n	34188162 <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
3418814a:	4b0c      	ldr	r3, [pc, #48]	@ (3418817c <RCCEx_GetPLLSourceFreq+0xb4>)
3418814c:	60fb      	str	r3, [r7, #12]
      break;
3418814e:	e008      	b.n	34188162 <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34188150:	4b0b      	ldr	r3, [pc, #44]	@ (34188180 <RCCEx_GetPLLSourceFreq+0xb8>)
34188152:	60fb      	str	r3, [r7, #12]
      break;
34188154:	e006      	b.n	34188164 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34188156:	bf00      	nop
34188158:	e004      	b.n	34188164 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418815a:	bf00      	nop
3418815c:	e002      	b.n	34188164 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3418815e:	bf00      	nop
34188160:	e000      	b.n	34188164 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34188162:	bf00      	nop
  }

  return pllinputfreq;
34188164:	68fb      	ldr	r3, [r7, #12]
}
34188166:	4618      	mov	r0, r3
34188168:	3710      	adds	r7, #16
3418816a:	46bd      	mov	sp, r7
3418816c:	bd80      	pop	{r7, pc}
3418816e:	bf00      	nop
34188170:	03d09000 	.word	0x03d09000
34188174:	003d0900 	.word	0x003d0900
34188178:	00f42400 	.word	0x00f42400
3418817c:	02dc6c00 	.word	0x02dc6c00
34188180:	00bb8000 	.word	0x00bb8000

34188184 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34188184:	b480      	push	{r7}
34188186:	b087      	sub	sp, #28
34188188:	af00      	add	r7, sp, #0
3418818a:	60f8      	str	r0, [r7, #12]
3418818c:	60b9      	str	r1, [r7, #8]
3418818e:	607a      	str	r2, [r7, #4]
34188190:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
34188192:	68fb      	ldr	r3, [r7, #12]
34188194:	ee07 3a90 	vmov	s15, r3
34188198:	eeb8 7a67 	vcvt.f32.u32	s14, s15
3418819c:	687b      	ldr	r3, [r7, #4]
3418819e:	ee07 3a90 	vmov	s15, r3
341881a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
341881a6:	683b      	ldr	r3, [r7, #0]
341881a8:	ee07 3a90 	vmov	s15, r3
341881ac:	eeb8 6a67 	vcvt.f32.u32	s12, s15
341881b0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 34188218 <RCCEx_CalcPLLFreq+0x94>
341881b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
341881b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
341881bc:	ee67 6a27 	vmul.f32	s13, s14, s15
341881c0:	68bb      	ldr	r3, [r7, #8]
341881c2:	ee07 3a90 	vmov	s15, r3
341881c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341881ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
341881ce:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
341881d2:	6a3b      	ldr	r3, [r7, #32]
341881d4:	ee07 3a90 	vmov	s15, r3
341881d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341881dc:	edd7 6a05 	vldr	s13, [r7, #20]
341881e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
341881e4:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
341881e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
341881ea:	ee07 3a90 	vmov	s15, r3
341881ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
341881f2:	edd7 6a05 	vldr	s13, [r7, #20]
341881f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
341881fa:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
341881fe:	edd7 7a05 	vldr	s15, [r7, #20]
34188202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34188206:	ee17 3a90 	vmov	r3, s15
}
3418820a:	4618      	mov	r0, r3
3418820c:	371c      	adds	r7, #28
3418820e:	46bd      	mov	sp, r7
34188210:	f85d 7b04 	ldr.w	r7, [sp], #4
34188214:	4770      	bx	lr
34188216:	bf00      	nop
34188218:	4b800000 	.word	0x4b800000

3418821c <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
3418821c:	b590      	push	{r4, r7, lr}
3418821e:	b085      	sub	sp, #20
34188220:	af00      	add	r7, sp, #0
34188222:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
34188224:	2300      	movs	r3, #0
34188226:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
34188228:	6878      	ldr	r0, [r7, #4]
3418822a:	f7fb fe1f 	bl	34183e6c <LL_RCC_GetADCClockSource>
3418822e:	4603      	mov	r3, r0
34188230:	2b70      	cmp	r3, #112	@ 0x70
34188232:	f000 80d1 	beq.w	341883d8 <RCCEx_GetADCCLKFreq+0x1bc>
34188236:	2b70      	cmp	r3, #112	@ 0x70
34188238:	f200 80d8 	bhi.w	341883ec <RCCEx_GetADCCLKFreq+0x1d0>
3418823c:	2b60      	cmp	r3, #96	@ 0x60
3418823e:	f000 80c8 	beq.w	341883d2 <RCCEx_GetADCCLKFreq+0x1b6>
34188242:	2b60      	cmp	r3, #96	@ 0x60
34188244:	f200 80d2 	bhi.w	341883ec <RCCEx_GetADCCLKFreq+0x1d0>
34188248:	2b50      	cmp	r3, #80	@ 0x50
3418824a:	f000 80ac 	beq.w	341883a6 <RCCEx_GetADCCLKFreq+0x18a>
3418824e:	2b50      	cmp	r3, #80	@ 0x50
34188250:	f200 80cc 	bhi.w	341883ec <RCCEx_GetADCCLKFreq+0x1d0>
34188254:	2b40      	cmp	r3, #64	@ 0x40
34188256:	f000 80b4 	beq.w	341883c2 <RCCEx_GetADCCLKFreq+0x1a6>
3418825a:	2b40      	cmp	r3, #64	@ 0x40
3418825c:	f200 80c6 	bhi.w	341883ec <RCCEx_GetADCCLKFreq+0x1d0>
34188260:	2b30      	cmp	r3, #48	@ 0x30
34188262:	d05d      	beq.n	34188320 <RCCEx_GetADCCLKFreq+0x104>
34188264:	2b30      	cmp	r3, #48	@ 0x30
34188266:	f200 80c1 	bhi.w	341883ec <RCCEx_GetADCCLKFreq+0x1d0>
3418826a:	2b20      	cmp	r3, #32
3418826c:	d014      	beq.n	34188298 <RCCEx_GetADCCLKFreq+0x7c>
3418826e:	2b20      	cmp	r3, #32
34188270:	f200 80bc 	bhi.w	341883ec <RCCEx_GetADCCLKFreq+0x1d0>
34188274:	2b00      	cmp	r3, #0
34188276:	d002      	beq.n	3418827e <RCCEx_GetADCCLKFreq+0x62>
34188278:	2b10      	cmp	r3, #16
3418827a:	d008      	beq.n	3418828e <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
3418827c:	e0b6      	b.n	341883ec <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418827e:	f7fa ff3f 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34188282:	4603      	mov	r3, r0
34188284:	4618      	mov	r0, r3
34188286:	f7ff fecb 	bl	34188020 <RCCEx_GetHCLKFreq>
3418828a:	60f8      	str	r0, [r7, #12]
      break;
3418828c:	e0b7      	b.n	341883fe <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418828e:	2007      	movs	r0, #7
34188290:	f000 f9b2 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34188294:	60f8      	str	r0, [r7, #12]
      break;
34188296:	e0b2      	b.n	341883fe <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34188298:	f7fc fad6 	bl	34184848 <LL_RCC_IC7_IsEnabled>
3418829c:	4603      	mov	r3, r0
3418829e:	2b00      	cmp	r3, #0
341882a0:	f000 80a6 	beq.w	341883f0 <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
341882a4:	f7fc faf2 	bl	3418488c <LL_RCC_IC7_GetDivider>
341882a8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
341882aa:	f7fc fae1 	bl	34184870 <LL_RCC_IC7_GetSource>
341882ae:	4603      	mov	r3, r0
341882b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341882b4:	d029      	beq.n	3418830a <RCCEx_GetADCCLKFreq+0xee>
341882b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341882ba:	d82f      	bhi.n	3418831c <RCCEx_GetADCCLKFreq+0x100>
341882bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341882c0:	d01a      	beq.n	341882f8 <RCCEx_GetADCCLKFreq+0xdc>
341882c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341882c6:	d829      	bhi.n	3418831c <RCCEx_GetADCCLKFreq+0x100>
341882c8:	2b00      	cmp	r3, #0
341882ca:	d003      	beq.n	341882d4 <RCCEx_GetADCCLKFreq+0xb8>
341882cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341882d0:	d009      	beq.n	341882e6 <RCCEx_GetADCCLKFreq+0xca>
            break;
341882d2:	e023      	b.n	3418831c <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341882d4:	f7ff fd8c 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341882d8:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341882da:	68fa      	ldr	r2, [r7, #12]
341882dc:	68bb      	ldr	r3, [r7, #8]
341882de:	fbb2 f3f3 	udiv	r3, r2, r3
341882e2:	60fb      	str	r3, [r7, #12]
            break;
341882e4:	e01b      	b.n	3418831e <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341882e6:	f7ff fdc9 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341882ea:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341882ec:	68fa      	ldr	r2, [r7, #12]
341882ee:	68bb      	ldr	r3, [r7, #8]
341882f0:	fbb2 f3f3 	udiv	r3, r2, r3
341882f4:	60fb      	str	r3, [r7, #12]
            break;
341882f6:	e012      	b.n	3418831e <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341882f8:	f7ff fe06 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
341882fc:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
341882fe:	68fa      	ldr	r2, [r7, #12]
34188300:	68bb      	ldr	r3, [r7, #8]
34188302:	fbb2 f3f3 	udiv	r3, r2, r3
34188306:	60fb      	str	r3, [r7, #12]
            break;
34188308:	e009      	b.n	3418831e <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418830a:	f7ff fe43 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418830e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188310:	68fa      	ldr	r2, [r7, #12]
34188312:	68bb      	ldr	r3, [r7, #8]
34188314:	fbb2 f3f3 	udiv	r3, r2, r3
34188318:	60fb      	str	r3, [r7, #12]
            break;
3418831a:	e000      	b.n	3418831e <RCCEx_GetADCCLKFreq+0x102>
            break;
3418831c:	bf00      	nop
      break;
3418831e:	e067      	b.n	341883f0 <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34188320:	f7fc fad2 	bl	341848c8 <LL_RCC_IC8_IsEnabled>
34188324:	4603      	mov	r3, r0
34188326:	2b00      	cmp	r3, #0
34188328:	d064      	beq.n	341883f4 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
3418832a:	f7fc faef 	bl	3418490c <LL_RCC_IC8_GetDivider>
3418832e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34188330:	f7fc fade 	bl	341848f0 <LL_RCC_IC8_GetSource>
34188334:	4603      	mov	r3, r0
34188336:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418833a:	d029      	beq.n	34188390 <RCCEx_GetADCCLKFreq+0x174>
3418833c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188340:	d82f      	bhi.n	341883a2 <RCCEx_GetADCCLKFreq+0x186>
34188342:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188346:	d01a      	beq.n	3418837e <RCCEx_GetADCCLKFreq+0x162>
34188348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418834c:	d829      	bhi.n	341883a2 <RCCEx_GetADCCLKFreq+0x186>
3418834e:	2b00      	cmp	r3, #0
34188350:	d003      	beq.n	3418835a <RCCEx_GetADCCLKFreq+0x13e>
34188352:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188356:	d009      	beq.n	3418836c <RCCEx_GetADCCLKFreq+0x150>
            break;
34188358:	e023      	b.n	341883a2 <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418835a:	f7ff fd49 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418835e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188360:	68fa      	ldr	r2, [r7, #12]
34188362:	68bb      	ldr	r3, [r7, #8]
34188364:	fbb2 f3f3 	udiv	r3, r2, r3
34188368:	60fb      	str	r3, [r7, #12]
            break;
3418836a:	e01b      	b.n	341883a4 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418836c:	f7ff fd86 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188370:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188372:	68fa      	ldr	r2, [r7, #12]
34188374:	68bb      	ldr	r3, [r7, #8]
34188376:	fbb2 f3f3 	udiv	r3, r2, r3
3418837a:	60fb      	str	r3, [r7, #12]
            break;
3418837c:	e012      	b.n	341883a4 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418837e:	f7ff fdc3 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188382:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188384:	68fa      	ldr	r2, [r7, #12]
34188386:	68bb      	ldr	r3, [r7, #8]
34188388:	fbb2 f3f3 	udiv	r3, r2, r3
3418838c:	60fb      	str	r3, [r7, #12]
            break;
3418838e:	e009      	b.n	341883a4 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188390:	f7ff fe00 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188394:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34188396:	68fa      	ldr	r2, [r7, #12]
34188398:	68bb      	ldr	r3, [r7, #8]
3418839a:	fbb2 f3f3 	udiv	r3, r2, r3
3418839e:	60fb      	str	r3, [r7, #12]
            break;
341883a0:	e000      	b.n	341883a4 <RCCEx_GetADCCLKFreq+0x188>
            break;
341883a2:	bf00      	nop
      break;
341883a4:	e026      	b.n	341883f4 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
341883a6:	f7fb faab 	bl	34183900 <LL_RCC_HSI_IsReady>
341883aa:	4603      	mov	r3, r0
341883ac:	2b00      	cmp	r3, #0
341883ae:	d023      	beq.n	341883f8 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341883b0:	f7fb fab8 	bl	34183924 <LL_RCC_HSI_GetDivider>
341883b4:	4603      	mov	r3, r0
341883b6:	09db      	lsrs	r3, r3, #7
341883b8:	4a16      	ldr	r2, [pc, #88]	@ (34188414 <RCCEx_GetADCCLKFreq+0x1f8>)
341883ba:	fa22 f303 	lsr.w	r3, r2, r3
341883be:	60fb      	str	r3, [r7, #12]
      break;
341883c0:	e01a      	b.n	341883f8 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
341883c2:	f7fb fabd 	bl	34183940 <LL_RCC_MSI_IsReady>
341883c6:	4603      	mov	r3, r0
341883c8:	2b00      	cmp	r3, #0
341883ca:	d017      	beq.n	341883fc <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
341883cc:	4b12      	ldr	r3, [pc, #72]	@ (34188418 <RCCEx_GetADCCLKFreq+0x1fc>)
341883ce:	60fb      	str	r3, [r7, #12]
      break;
341883d0:	e014      	b.n	341883fc <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
341883d2:	4b12      	ldr	r3, [pc, #72]	@ (3418841c <RCCEx_GetADCCLKFreq+0x200>)
341883d4:	60fb      	str	r3, [r7, #12]
      break;
341883d6:	e012      	b.n	341883fe <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
341883d8:	f7fa fe92 	bl	34183100 <HAL_RCC_GetSysClockFreq>
341883dc:	4604      	mov	r4, r0
341883de:	f7fb fef7 	bl	341841d0 <LL_RCC_GetTIMPrescaler>
341883e2:	4603      	mov	r3, r0
341883e4:	fa24 f303 	lsr.w	r3, r4, r3
341883e8:	60fb      	str	r3, [r7, #12]
      break;
341883ea:	e008      	b.n	341883fe <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341883ec:	bf00      	nop
341883ee:	e006      	b.n	341883fe <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341883f0:	bf00      	nop
341883f2:	e004      	b.n	341883fe <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341883f4:	bf00      	nop
341883f6:	e002      	b.n	341883fe <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341883f8:	bf00      	nop
341883fa:	e000      	b.n	341883fe <RCCEx_GetADCCLKFreq+0x1e2>
      break;
341883fc:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
341883fe:	f7fb fb4f 	bl	34183aa0 <LL_RCC_GetADCPrescaler>
34188402:	4603      	mov	r3, r0
34188404:	3301      	adds	r3, #1
34188406:	68fa      	ldr	r2, [r7, #12]
34188408:	fbb2 f3f3 	udiv	r3, r2, r3
}
3418840c:	4618      	mov	r0, r3
3418840e:	3714      	adds	r7, #20
34188410:	46bd      	mov	sp, r7
34188412:	bd90      	pop	{r4, r7, pc}
34188414:	03d09000 	.word	0x03d09000
34188418:	003d0900 	.word	0x003d0900
3418841c:	00bb8000 	.word	0x00bb8000

34188420 <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
34188420:	b590      	push	{r4, r7, lr}
34188422:	b085      	sub	sp, #20
34188424:	af00      	add	r7, sp, #0
34188426:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34188428:	2300      	movs	r3, #0
3418842a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
3418842c:	6878      	ldr	r0, [r7, #4]
3418842e:	f7fb fd2f 	bl	34183e90 <LL_RCC_GetADFClockSource>
34188432:	4603      	mov	r3, r0
34188434:	2b07      	cmp	r3, #7
34188436:	f200 80ca 	bhi.w	341885ce <RCCEx_GetADFCLKFreq+0x1ae>
3418843a:	a201      	add	r2, pc, #4	@ (adr r2, 34188440 <RCCEx_GetADFCLKFreq+0x20>)
3418843c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188440:	34188461 	.word	0x34188461
34188444:	34188471 	.word	0x34188471
34188448:	3418847b 	.word	0x3418847b
3418844c:	34188503 	.word	0x34188503
34188450:	341885a5 	.word	0x341885a5
34188454:	34188589 	.word	0x34188589
34188458:	341885b5 	.word	0x341885b5
3418845c:	341885bb 	.word	0x341885bb
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188460:	f7fa fe4e 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34188464:	4603      	mov	r3, r0
34188466:	4618      	mov	r0, r3
34188468:	f7ff fdda 	bl	34188020 <RCCEx_GetHCLKFreq>
3418846c:	60f8      	str	r0, [r7, #12]
      break;
3418846e:	e0b7      	b.n	341885e0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188470:	2007      	movs	r0, #7
34188472:	f000 f8c1 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34188476:	60f8      	str	r0, [r7, #12]
      break;
34188478:	e0b2      	b.n	341885e0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418847a:	f7fc f9e5 	bl	34184848 <LL_RCC_IC7_IsEnabled>
3418847e:	4603      	mov	r3, r0
34188480:	2b00      	cmp	r3, #0
34188482:	f000 80a6 	beq.w	341885d2 <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34188486:	f7fc fa01 	bl	3418488c <LL_RCC_IC7_GetDivider>
3418848a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418848c:	f7fc f9f0 	bl	34184870 <LL_RCC_IC7_GetSource>
34188490:	4603      	mov	r3, r0
34188492:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188496:	d029      	beq.n	341884ec <RCCEx_GetADFCLKFreq+0xcc>
34188498:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418849c:	d82f      	bhi.n	341884fe <RCCEx_GetADFCLKFreq+0xde>
3418849e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341884a2:	d01a      	beq.n	341884da <RCCEx_GetADFCLKFreq+0xba>
341884a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341884a8:	d829      	bhi.n	341884fe <RCCEx_GetADFCLKFreq+0xde>
341884aa:	2b00      	cmp	r3, #0
341884ac:	d003      	beq.n	341884b6 <RCCEx_GetADFCLKFreq+0x96>
341884ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341884b2:	d009      	beq.n	341884c8 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341884b4:	e023      	b.n	341884fe <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341884b6:	f7ff fc9b 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341884ba:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341884bc:	68fa      	ldr	r2, [r7, #12]
341884be:	68bb      	ldr	r3, [r7, #8]
341884c0:	fbb2 f3f3 	udiv	r3, r2, r3
341884c4:	60fb      	str	r3, [r7, #12]
            break;
341884c6:	e01b      	b.n	34188500 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341884c8:	f7ff fcd8 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341884cc:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341884ce:	68fa      	ldr	r2, [r7, #12]
341884d0:	68bb      	ldr	r3, [r7, #8]
341884d2:	fbb2 f3f3 	udiv	r3, r2, r3
341884d6:	60fb      	str	r3, [r7, #12]
            break;
341884d8:	e012      	b.n	34188500 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341884da:	f7ff fd15 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
341884de:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341884e0:	68fa      	ldr	r2, [r7, #12]
341884e2:	68bb      	ldr	r3, [r7, #8]
341884e4:	fbb2 f3f3 	udiv	r3, r2, r3
341884e8:	60fb      	str	r3, [r7, #12]
            break;
341884ea:	e009      	b.n	34188500 <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341884ec:	f7ff fd52 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
341884f0:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
341884f2:	68fa      	ldr	r2, [r7, #12]
341884f4:	68bb      	ldr	r3, [r7, #8]
341884f6:	fbb2 f3f3 	udiv	r3, r2, r3
341884fa:	60fb      	str	r3, [r7, #12]
            break;
341884fc:	e000      	b.n	34188500 <RCCEx_GetADFCLKFreq+0xe0>
            break;
341884fe:	bf00      	nop
        }
      }
      break;
34188500:	e067      	b.n	341885d2 <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34188502:	f7fc f9e1 	bl	341848c8 <LL_RCC_IC8_IsEnabled>
34188506:	4603      	mov	r3, r0
34188508:	2b00      	cmp	r3, #0
3418850a:	d064      	beq.n	341885d6 <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418850c:	f7fc f9fe 	bl	3418490c <LL_RCC_IC8_GetDivider>
34188510:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34188512:	f7fc f9ed 	bl	341848f0 <LL_RCC_IC8_GetSource>
34188516:	4603      	mov	r3, r0
34188518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418851c:	d029      	beq.n	34188572 <RCCEx_GetADFCLKFreq+0x152>
3418851e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188522:	d82f      	bhi.n	34188584 <RCCEx_GetADFCLKFreq+0x164>
34188524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188528:	d01a      	beq.n	34188560 <RCCEx_GetADFCLKFreq+0x140>
3418852a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418852e:	d829      	bhi.n	34188584 <RCCEx_GetADFCLKFreq+0x164>
34188530:	2b00      	cmp	r3, #0
34188532:	d003      	beq.n	3418853c <RCCEx_GetADFCLKFreq+0x11c>
34188534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188538:	d009      	beq.n	3418854e <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418853a:	e023      	b.n	34188584 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418853c:	f7ff fc58 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34188540:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188542:	68fa      	ldr	r2, [r7, #12]
34188544:	68bb      	ldr	r3, [r7, #8]
34188546:	fbb2 f3f3 	udiv	r3, r2, r3
3418854a:	60fb      	str	r3, [r7, #12]
            break;
3418854c:	e01b      	b.n	34188586 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418854e:	f7ff fc95 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188552:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188554:	68fa      	ldr	r2, [r7, #12]
34188556:	68bb      	ldr	r3, [r7, #8]
34188558:	fbb2 f3f3 	udiv	r3, r2, r3
3418855c:	60fb      	str	r3, [r7, #12]
            break;
3418855e:	e012      	b.n	34188586 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188560:	f7ff fcd2 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188564:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188566:	68fa      	ldr	r2, [r7, #12]
34188568:	68bb      	ldr	r3, [r7, #8]
3418856a:	fbb2 f3f3 	udiv	r3, r2, r3
3418856e:	60fb      	str	r3, [r7, #12]
            break;
34188570:	e009      	b.n	34188586 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188572:	f7ff fd0f 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188576:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34188578:	68fa      	ldr	r2, [r7, #12]
3418857a:	68bb      	ldr	r3, [r7, #8]
3418857c:	fbb2 f3f3 	udiv	r3, r2, r3
34188580:	60fb      	str	r3, [r7, #12]
            break;
34188582:	e000      	b.n	34188586 <RCCEx_GetADFCLKFreq+0x166>
            break;
34188584:	bf00      	nop
        }
      }
      break;
34188586:	e026      	b.n	341885d6 <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34188588:	f7fb f9ba 	bl	34183900 <LL_RCC_HSI_IsReady>
3418858c:	4603      	mov	r3, r0
3418858e:	2b00      	cmp	r3, #0
34188590:	d023      	beq.n	341885da <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188592:	f7fb f9c7 	bl	34183924 <LL_RCC_HSI_GetDivider>
34188596:	4603      	mov	r3, r0
34188598:	09db      	lsrs	r3, r3, #7
3418859a:	4a14      	ldr	r2, [pc, #80]	@ (341885ec <RCCEx_GetADFCLKFreq+0x1cc>)
3418859c:	fa22 f303 	lsr.w	r3, r2, r3
341885a0:	60fb      	str	r3, [r7, #12]
      }
      break;
341885a2:	e01a      	b.n	341885da <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
341885a4:	f7fb f9cc 	bl	34183940 <LL_RCC_MSI_IsReady>
341885a8:	4603      	mov	r3, r0
341885aa:	2b00      	cmp	r3, #0
341885ac:	d017      	beq.n	341885de <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
341885ae:	4b10      	ldr	r3, [pc, #64]	@ (341885f0 <RCCEx_GetADFCLKFreq+0x1d0>)
341885b0:	60fb      	str	r3, [r7, #12]
      }
      break;
341885b2:	e014      	b.n	341885de <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
341885b4:	4b0f      	ldr	r3, [pc, #60]	@ (341885f4 <RCCEx_GetADFCLKFreq+0x1d4>)
341885b6:	60fb      	str	r3, [r7, #12]
      break;
341885b8:	e012      	b.n	341885e0 <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
341885ba:	f7fa fda1 	bl	34183100 <HAL_RCC_GetSysClockFreq>
341885be:	4604      	mov	r4, r0
341885c0:	f7fb fe06 	bl	341841d0 <LL_RCC_GetTIMPrescaler>
341885c4:	4603      	mov	r3, r0
341885c6:	fa24 f303 	lsr.w	r3, r4, r3
341885ca:	60fb      	str	r3, [r7, #12]
      break;
341885cc:	e008      	b.n	341885e0 <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
341885ce:	bf00      	nop
341885d0:	e006      	b.n	341885e0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
341885d2:	bf00      	nop
341885d4:	e004      	b.n	341885e0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
341885d6:	bf00      	nop
341885d8:	e002      	b.n	341885e0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
341885da:	bf00      	nop
341885dc:	e000      	b.n	341885e0 <RCCEx_GetADFCLKFreq+0x1c0>
      break;
341885de:	bf00      	nop
  }

  return adf_frequency;
341885e0:	68fb      	ldr	r3, [r7, #12]
}
341885e2:	4618      	mov	r0, r3
341885e4:	3714      	adds	r7, #20
341885e6:	46bd      	mov	sp, r7
341885e8:	bd90      	pop	{r4, r7, pc}
341885ea:	bf00      	nop
341885ec:	03d09000 	.word	0x03d09000
341885f0:	003d0900 	.word	0x003d0900
341885f4:	00bb8000 	.word	0x00bb8000

341885f8 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
341885f8:	b580      	push	{r7, lr}
341885fa:	b084      	sub	sp, #16
341885fc:	af00      	add	r7, sp, #0
341885fe:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34188600:	2300      	movs	r3, #0
34188602:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
34188604:	f7fc fc60 	bl	34184ec8 <LL_RCC_CLKP_IsEnabled>
34188608:	4603      	mov	r3, r0
3418860a:	2b01      	cmp	r3, #1
3418860c:	f040 81a5 	bne.w	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34188610:	6878      	ldr	r0, [r7, #4]
34188612:	f7fb fc4f 	bl	34183eb4 <LL_RCC_GetCLKPClockSource>
34188616:	4603      	mov	r3, r0
34188618:	2b07      	cmp	r3, #7
3418861a:	f200 818d 	bhi.w	34188938 <RCCEx_GetCLKPCLKFreq+0x340>
3418861e:	a201      	add	r2, pc, #4	@ (adr r2, 34188624 <RCCEx_GetCLKPCLKFreq+0x2c>)
34188620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188624:	34188645 	.word	0x34188645
34188628:	34188663 	.word	0x34188663
3418862c:	34188675 	.word	0x34188675
34188630:	3418881f 	.word	0x3418881f
34188634:	34188687 	.word	0x34188687
34188638:	3418870f 	.word	0x3418870f
3418863c:	34188797 	.word	0x34188797
34188640:	341888a7 	.word	0x341888a7
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34188644:	f7fb f95c 	bl	34183900 <LL_RCC_HSI_IsReady>
34188648:	4603      	mov	r3, r0
3418864a:	2b00      	cmp	r3, #0
3418864c:	f000 8176 	beq.w	3418893c <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188650:	f7fb f968 	bl	34183924 <LL_RCC_HSI_GetDivider>
34188654:	4603      	mov	r3, r0
34188656:	09db      	lsrs	r3, r3, #7
34188658:	4aa1      	ldr	r2, [pc, #644]	@ (341888e0 <RCCEx_GetCLKPCLKFreq+0x2e8>)
3418865a:	fa22 f303 	lsr.w	r3, r2, r3
3418865e:	60fb      	str	r3, [r7, #12]
        }
        break;
34188660:	e16c      	b.n	3418893c <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34188662:	f7fb f96d 	bl	34183940 <LL_RCC_MSI_IsReady>
34188666:	4603      	mov	r3, r0
34188668:	2b00      	cmp	r3, #0
3418866a:	f000 8169 	beq.w	34188940 <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
3418866e:	4b9d      	ldr	r3, [pc, #628]	@ (341888e4 <RCCEx_GetCLKPCLKFreq+0x2ec>)
34188670:	60fb      	str	r3, [r7, #12]
        }
        break;
34188672:	e165      	b.n	34188940 <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34188674:	f7fb f932 	bl	341838dc <LL_RCC_HSE_IsReady>
34188678:	4603      	mov	r3, r0
3418867a:	2b00      	cmp	r3, #0
3418867c:	f000 8162 	beq.w	34188944 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34188680:	4b99      	ldr	r3, [pc, #612]	@ (341888e8 <RCCEx_GetCLKPCLKFreq+0x2f0>)
34188682:	60fb      	str	r3, [r7, #12]
        }
        break;
34188684:	e15e      	b.n	34188944 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
34188686:	f7fc f89f 	bl	341847c8 <LL_RCC_IC5_IsEnabled>
3418868a:	4603      	mov	r3, r0
3418868c:	2b00      	cmp	r3, #0
3418868e:	f000 815b 	beq.w	34188948 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
34188692:	f7fc f8bb 	bl	3418480c <LL_RCC_IC5_GetDivider>
34188696:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34188698:	f7fc f8aa 	bl	341847f0 <LL_RCC_IC5_GetSource>
3418869c:	4603      	mov	r3, r0
3418869e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341886a2:	d029      	beq.n	341886f8 <RCCEx_GetCLKPCLKFreq+0x100>
341886a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341886a8:	d82f      	bhi.n	3418870a <RCCEx_GetCLKPCLKFreq+0x112>
341886aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341886ae:	d01a      	beq.n	341886e6 <RCCEx_GetCLKPCLKFreq+0xee>
341886b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341886b4:	d829      	bhi.n	3418870a <RCCEx_GetCLKPCLKFreq+0x112>
341886b6:	2b00      	cmp	r3, #0
341886b8:	d003      	beq.n	341886c2 <RCCEx_GetCLKPCLKFreq+0xca>
341886ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341886be:	d009      	beq.n	341886d4 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
341886c0:	e023      	b.n	3418870a <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341886c2:	f7ff fb95 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341886c6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341886c8:	68fa      	ldr	r2, [r7, #12]
341886ca:	68bb      	ldr	r3, [r7, #8]
341886cc:	fbb2 f3f3 	udiv	r3, r2, r3
341886d0:	60fb      	str	r3, [r7, #12]
              break;
341886d2:	e01b      	b.n	3418870c <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341886d4:	f7ff fbd2 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341886d8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341886da:	68fa      	ldr	r2, [r7, #12]
341886dc:	68bb      	ldr	r3, [r7, #8]
341886de:	fbb2 f3f3 	udiv	r3, r2, r3
341886e2:	60fb      	str	r3, [r7, #12]
              break;
341886e4:	e012      	b.n	3418870c <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341886e6:	f7ff fc0f 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
341886ea:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341886ec:	68fa      	ldr	r2, [r7, #12]
341886ee:	68bb      	ldr	r3, [r7, #8]
341886f0:	fbb2 f3f3 	udiv	r3, r2, r3
341886f4:	60fb      	str	r3, [r7, #12]
              break;
341886f6:	e009      	b.n	3418870c <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341886f8:	f7ff fc4c 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
341886fc:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341886fe:	68fa      	ldr	r2, [r7, #12]
34188700:	68bb      	ldr	r3, [r7, #8]
34188702:	fbb2 f3f3 	udiv	r3, r2, r3
34188706:	60fb      	str	r3, [r7, #12]
              break;
34188708:	e000      	b.n	3418870c <RCCEx_GetCLKPCLKFreq+0x114>
              break;
3418870a:	bf00      	nop
          }
        }
        break;
3418870c:	e11c      	b.n	34188948 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
3418870e:	f7fc f95b 	bl	341849c8 <LL_RCC_IC10_IsEnabled>
34188712:	4603      	mov	r3, r0
34188714:	2b00      	cmp	r3, #0
34188716:	f000 8119 	beq.w	3418894c <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
3418871a:	f7fc f977 	bl	34184a0c <LL_RCC_IC10_GetDivider>
3418871e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
34188720:	f7fc f966 	bl	341849f0 <LL_RCC_IC10_GetSource>
34188724:	4603      	mov	r3, r0
34188726:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418872a:	d029      	beq.n	34188780 <RCCEx_GetCLKPCLKFreq+0x188>
3418872c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188730:	d82f      	bhi.n	34188792 <RCCEx_GetCLKPCLKFreq+0x19a>
34188732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188736:	d01a      	beq.n	3418876e <RCCEx_GetCLKPCLKFreq+0x176>
34188738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418873c:	d829      	bhi.n	34188792 <RCCEx_GetCLKPCLKFreq+0x19a>
3418873e:	2b00      	cmp	r3, #0
34188740:	d003      	beq.n	3418874a <RCCEx_GetCLKPCLKFreq+0x152>
34188742:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188746:	d009      	beq.n	3418875c <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34188748:	e023      	b.n	34188792 <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418874a:	f7ff fb51 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418874e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188750:	68fa      	ldr	r2, [r7, #12]
34188752:	68bb      	ldr	r3, [r7, #8]
34188754:	fbb2 f3f3 	udiv	r3, r2, r3
34188758:	60fb      	str	r3, [r7, #12]
              break;
3418875a:	e01b      	b.n	34188794 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418875c:	f7ff fb8e 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188760:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188762:	68fa      	ldr	r2, [r7, #12]
34188764:	68bb      	ldr	r3, [r7, #8]
34188766:	fbb2 f3f3 	udiv	r3, r2, r3
3418876a:	60fb      	str	r3, [r7, #12]
              break;
3418876c:	e012      	b.n	34188794 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418876e:	f7ff fbcb 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188772:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188774:	68fa      	ldr	r2, [r7, #12]
34188776:	68bb      	ldr	r3, [r7, #8]
34188778:	fbb2 f3f3 	udiv	r3, r2, r3
3418877c:	60fb      	str	r3, [r7, #12]
              break;
3418877e:	e009      	b.n	34188794 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188780:	f7ff fc08 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188784:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188786:	68fa      	ldr	r2, [r7, #12]
34188788:	68bb      	ldr	r3, [r7, #8]
3418878a:	fbb2 f3f3 	udiv	r3, r2, r3
3418878e:	60fb      	str	r3, [r7, #12]
              break;
34188790:	e000      	b.n	34188794 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
34188792:	bf00      	nop
          }
        }
        break;
34188794:	e0da      	b.n	3418894c <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
34188796:	f7fc fa17 	bl	34184bc8 <LL_RCC_IC15_IsEnabled>
3418879a:	4603      	mov	r3, r0
3418879c:	2b00      	cmp	r3, #0
3418879e:	f000 80d7 	beq.w	34188950 <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
341887a2:	f7fc fa33 	bl	34184c0c <LL_RCC_IC15_GetDivider>
341887a6:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
341887a8:	f7fc fa22 	bl	34184bf0 <LL_RCC_IC15_GetSource>
341887ac:	4603      	mov	r3, r0
341887ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341887b2:	d029      	beq.n	34188808 <RCCEx_GetCLKPCLKFreq+0x210>
341887b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341887b8:	d82f      	bhi.n	3418881a <RCCEx_GetCLKPCLKFreq+0x222>
341887ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341887be:	d01a      	beq.n	341887f6 <RCCEx_GetCLKPCLKFreq+0x1fe>
341887c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341887c4:	d829      	bhi.n	3418881a <RCCEx_GetCLKPCLKFreq+0x222>
341887c6:	2b00      	cmp	r3, #0
341887c8:	d003      	beq.n	341887d2 <RCCEx_GetCLKPCLKFreq+0x1da>
341887ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341887ce:	d009      	beq.n	341887e4 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
341887d0:	e023      	b.n	3418881a <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341887d2:	f7ff fb0d 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341887d6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341887d8:	68fa      	ldr	r2, [r7, #12]
341887da:	68bb      	ldr	r3, [r7, #8]
341887dc:	fbb2 f3f3 	udiv	r3, r2, r3
341887e0:	60fb      	str	r3, [r7, #12]
              break;
341887e2:	e01b      	b.n	3418881c <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341887e4:	f7ff fb4a 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341887e8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341887ea:	68fa      	ldr	r2, [r7, #12]
341887ec:	68bb      	ldr	r3, [r7, #8]
341887ee:	fbb2 f3f3 	udiv	r3, r2, r3
341887f2:	60fb      	str	r3, [r7, #12]
              break;
341887f4:	e012      	b.n	3418881c <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341887f6:	f7ff fb87 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
341887fa:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341887fc:	68fa      	ldr	r2, [r7, #12]
341887fe:	68bb      	ldr	r3, [r7, #8]
34188800:	fbb2 f3f3 	udiv	r3, r2, r3
34188804:	60fb      	str	r3, [r7, #12]
              break;
34188806:	e009      	b.n	3418881c <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188808:	f7ff fbc4 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418880c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
3418880e:	68fa      	ldr	r2, [r7, #12]
34188810:	68bb      	ldr	r3, [r7, #8]
34188812:	fbb2 f3f3 	udiv	r3, r2, r3
34188816:	60fb      	str	r3, [r7, #12]
              break;
34188818:	e000      	b.n	3418881c <RCCEx_GetCLKPCLKFreq+0x224>
              break;
3418881a:	bf00      	nop
          }
        }
        break;
3418881c:	e098      	b.n	34188950 <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
3418881e:	f7fc fad3 	bl	34184dc8 <LL_RCC_IC19_IsEnabled>
34188822:	4603      	mov	r3, r0
34188824:	2b00      	cmp	r3, #0
34188826:	f000 8095 	beq.w	34188954 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
3418882a:	f7fc faef 	bl	34184e0c <LL_RCC_IC19_GetDivider>
3418882e:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
34188830:	f7fc fade 	bl	34184df0 <LL_RCC_IC19_GetSource>
34188834:	4603      	mov	r3, r0
34188836:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418883a:	d029      	beq.n	34188890 <RCCEx_GetCLKPCLKFreq+0x298>
3418883c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188840:	d82f      	bhi.n	341888a2 <RCCEx_GetCLKPCLKFreq+0x2aa>
34188842:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188846:	d01a      	beq.n	3418887e <RCCEx_GetCLKPCLKFreq+0x286>
34188848:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418884c:	d829      	bhi.n	341888a2 <RCCEx_GetCLKPCLKFreq+0x2aa>
3418884e:	2b00      	cmp	r3, #0
34188850:	d003      	beq.n	3418885a <RCCEx_GetCLKPCLKFreq+0x262>
34188852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188856:	d009      	beq.n	3418886c <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34188858:	e023      	b.n	341888a2 <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418885a:	f7ff fac9 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418885e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188860:	68fa      	ldr	r2, [r7, #12]
34188862:	68bb      	ldr	r3, [r7, #8]
34188864:	fbb2 f3f3 	udiv	r3, r2, r3
34188868:	60fb      	str	r3, [r7, #12]
              break;
3418886a:	e01b      	b.n	341888a4 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418886c:	f7ff fb06 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188870:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188872:	68fa      	ldr	r2, [r7, #12]
34188874:	68bb      	ldr	r3, [r7, #8]
34188876:	fbb2 f3f3 	udiv	r3, r2, r3
3418887a:	60fb      	str	r3, [r7, #12]
              break;
3418887c:	e012      	b.n	341888a4 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418887e:	f7ff fb43 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188882:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188884:	68fa      	ldr	r2, [r7, #12]
34188886:	68bb      	ldr	r3, [r7, #8]
34188888:	fbb2 f3f3 	udiv	r3, r2, r3
3418888c:	60fb      	str	r3, [r7, #12]
              break;
3418888e:	e009      	b.n	341888a4 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188890:	f7ff fb80 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188894:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188896:	68fa      	ldr	r2, [r7, #12]
34188898:	68bb      	ldr	r3, [r7, #8]
3418889a:	fbb2 f3f3 	udiv	r3, r2, r3
3418889e:	60fb      	str	r3, [r7, #12]
              break;
341888a0:	e000      	b.n	341888a4 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
341888a2:	bf00      	nop
          }
        }
        break;
341888a4:	e056      	b.n	34188954 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
341888a6:	f7fc facf 	bl	34184e48 <LL_RCC_IC20_IsEnabled>
341888aa:	4603      	mov	r3, r0
341888ac:	2b00      	cmp	r3, #0
341888ae:	d053      	beq.n	34188958 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
341888b0:	f7fc faec 	bl	34184e8c <LL_RCC_IC20_GetDivider>
341888b4:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
341888b6:	f7fc fadb 	bl	34184e70 <LL_RCC_IC20_GetSource>
341888ba:	4603      	mov	r3, r0
341888bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341888c0:	d02f      	beq.n	34188922 <RCCEx_GetCLKPCLKFreq+0x32a>
341888c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341888c6:	d835      	bhi.n	34188934 <RCCEx_GetCLKPCLKFreq+0x33c>
341888c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341888cc:	d020      	beq.n	34188910 <RCCEx_GetCLKPCLKFreq+0x318>
341888ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341888d2:	d82f      	bhi.n	34188934 <RCCEx_GetCLKPCLKFreq+0x33c>
341888d4:	2b00      	cmp	r3, #0
341888d6:	d009      	beq.n	341888ec <RCCEx_GetCLKPCLKFreq+0x2f4>
341888d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341888dc:	d00f      	beq.n	341888fe <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
341888de:	e029      	b.n	34188934 <RCCEx_GetCLKPCLKFreq+0x33c>
341888e0:	03d09000 	.word	0x03d09000
341888e4:	003d0900 	.word	0x003d0900
341888e8:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341888ec:	f7ff fa80 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341888f0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
341888f2:	68fa      	ldr	r2, [r7, #12]
341888f4:	68bb      	ldr	r3, [r7, #8]
341888f6:	fbb2 f3f3 	udiv	r3, r2, r3
341888fa:	60fb      	str	r3, [r7, #12]
              break;
341888fc:	e01b      	b.n	34188936 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341888fe:	f7ff fabd 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188902:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188904:	68fa      	ldr	r2, [r7, #12]
34188906:	68bb      	ldr	r3, [r7, #8]
34188908:	fbb2 f3f3 	udiv	r3, r2, r3
3418890c:	60fb      	str	r3, [r7, #12]
              break;
3418890e:	e012      	b.n	34188936 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188910:	f7ff fafa 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188914:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188916:	68fa      	ldr	r2, [r7, #12]
34188918:	68bb      	ldr	r3, [r7, #8]
3418891a:	fbb2 f3f3 	udiv	r3, r2, r3
3418891e:	60fb      	str	r3, [r7, #12]
              break;
34188920:	e009      	b.n	34188936 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188922:	f7ff fb37 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188926:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34188928:	68fa      	ldr	r2, [r7, #12]
3418892a:	68bb      	ldr	r3, [r7, #8]
3418892c:	fbb2 f3f3 	udiv	r3, r2, r3
34188930:	60fb      	str	r3, [r7, #12]
              break;
34188932:	e000      	b.n	34188936 <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
34188934:	bf00      	nop
          }
        }
        break;
34188936:	e00f      	b.n	34188958 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34188938:	bf00      	nop
3418893a:	e00e      	b.n	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418893c:	bf00      	nop
3418893e:	e00c      	b.n	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188940:	bf00      	nop
34188942:	e00a      	b.n	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188944:	bf00      	nop
34188946:	e008      	b.n	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188948:	bf00      	nop
3418894a:	e006      	b.n	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3418894c:	bf00      	nop
3418894e:	e004      	b.n	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188950:	bf00      	nop
34188952:	e002      	b.n	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188954:	bf00      	nop
34188956:	e000      	b.n	3418895a <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34188958:	bf00      	nop
    }
  }

  return clkp_frequency;
3418895a:	68fb      	ldr	r3, [r7, #12]
}
3418895c:	4618      	mov	r0, r3
3418895e:	3710      	adds	r7, #16
34188960:	46bd      	mov	sp, r7
34188962:	bd80      	pop	{r7, pc}

34188964 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
34188964:	b580      	push	{r7, lr}
34188966:	b082      	sub	sp, #8
34188968:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418896a:	2300      	movs	r3, #0
3418896c:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
3418896e:	f7fc f9eb 	bl	34184d48 <LL_RCC_IC18_IsEnabled>
34188972:	4603      	mov	r3, r0
34188974:	2b00      	cmp	r3, #0
34188976:	d03c      	beq.n	341889f2 <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34188978:	f7fc fa08 	bl	34184d8c <LL_RCC_IC18_GetDivider>
3418897c:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
3418897e:	f7fc f9f7 	bl	34184d70 <LL_RCC_IC18_GetSource>
34188982:	4603      	mov	r3, r0
34188984:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188988:	d029      	beq.n	341889de <RCCEx_GetCSICLKFreq+0x7a>
3418898a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418898e:	d82f      	bhi.n	341889f0 <RCCEx_GetCSICLKFreq+0x8c>
34188990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188994:	d01a      	beq.n	341889cc <RCCEx_GetCSICLKFreq+0x68>
34188996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418899a:	d829      	bhi.n	341889f0 <RCCEx_GetCSICLKFreq+0x8c>
3418899c:	2b00      	cmp	r3, #0
3418899e:	d003      	beq.n	341889a8 <RCCEx_GetCSICLKFreq+0x44>
341889a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341889a4:	d009      	beq.n	341889ba <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
341889a6:	e023      	b.n	341889f0 <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341889a8:	f7ff fa22 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341889ac:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341889ae:	687a      	ldr	r2, [r7, #4]
341889b0:	683b      	ldr	r3, [r7, #0]
341889b2:	fbb2 f3f3 	udiv	r3, r2, r3
341889b6:	607b      	str	r3, [r7, #4]
        break;
341889b8:	e01b      	b.n	341889f2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341889ba:	f7ff fa5f 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341889be:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341889c0:	687a      	ldr	r2, [r7, #4]
341889c2:	683b      	ldr	r3, [r7, #0]
341889c4:	fbb2 f3f3 	udiv	r3, r2, r3
341889c8:	607b      	str	r3, [r7, #4]
        break;
341889ca:	e012      	b.n	341889f2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341889cc:	f7ff fa9c 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
341889d0:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341889d2:	687a      	ldr	r2, [r7, #4]
341889d4:	683b      	ldr	r3, [r7, #0]
341889d6:	fbb2 f3f3 	udiv	r3, r2, r3
341889da:	607b      	str	r3, [r7, #4]
        break;
341889dc:	e009      	b.n	341889f2 <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341889de:	f7ff fad9 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
341889e2:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
341889e4:	687a      	ldr	r2, [r7, #4]
341889e6:	683b      	ldr	r3, [r7, #0]
341889e8:	fbb2 f3f3 	udiv	r3, r2, r3
341889ec:	607b      	str	r3, [r7, #4]
        break;
341889ee:	e000      	b.n	341889f2 <RCCEx_GetCSICLKFreq+0x8e>
        break;
341889f0:	bf00      	nop
    }
  }

  return clkp_frequency;
341889f2:	687b      	ldr	r3, [r7, #4]
}
341889f4:	4618      	mov	r0, r3
341889f6:	3708      	adds	r7, #8
341889f8:	46bd      	mov	sp, r7
341889fa:	bd80      	pop	{r7, pc}

341889fc <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
341889fc:	b580      	push	{r7, lr}
341889fe:	b084      	sub	sp, #16
34188a00:	af00      	add	r7, sp, #0
34188a02:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
34188a04:	2300      	movs	r3, #0
34188a06:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34188a08:	6878      	ldr	r0, [r7, #4]
34188a0a:	f7fb fa65 	bl	34183ed8 <LL_RCC_GetDCMIPPClockSource>
34188a0e:	4603      	mov	r3, r0
34188a10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34188a14:	d062      	beq.n	34188adc <RCCEx_GetDCMIPPCLKFreq+0xe0>
34188a16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34188a1a:	d86d      	bhi.n	34188af8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34188a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34188a20:	d019      	beq.n	34188a56 <RCCEx_GetDCMIPPCLKFreq+0x5a>
34188a22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34188a26:	d867      	bhi.n	34188af8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
34188a28:	2b00      	cmp	r3, #0
34188a2a:	d003      	beq.n	34188a34 <RCCEx_GetDCMIPPCLKFreq+0x38>
34188a2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34188a30:	d00c      	beq.n	34188a4c <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34188a32:	e061      	b.n	34188af8 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34188a34:	f7fa fb64 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34188a38:	4603      	mov	r3, r0
34188a3a:	4618      	mov	r0, r3
34188a3c:	f7ff faf0 	bl	34188020 <RCCEx_GetHCLKFreq>
34188a40:	4603      	mov	r3, r0
34188a42:	4618      	mov	r0, r3
34188a44:	f7ff fb2f 	bl	341880a6 <RCCEx_GetPCLK5Freq>
34188a48:	60f8      	str	r0, [r7, #12]
      break;
34188a4a:	e05a      	b.n	34188b02 <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188a4c:	2007      	movs	r0, #7
34188a4e:	f7ff fdd3 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34188a52:	60f8      	str	r0, [r7, #12]
      break;
34188a54:	e055      	b.n	34188b02 <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
34188a56:	f7fc f937 	bl	34184cc8 <LL_RCC_IC17_IsEnabled>
34188a5a:	4603      	mov	r3, r0
34188a5c:	2b00      	cmp	r3, #0
34188a5e:	d04d      	beq.n	34188afc <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
34188a60:	f7fc f954 	bl	34184d0c <LL_RCC_IC17_GetDivider>
34188a64:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
34188a66:	f7fc f943 	bl	34184cf0 <LL_RCC_IC17_GetSource>
34188a6a:	4603      	mov	r3, r0
34188a6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188a70:	d029      	beq.n	34188ac6 <RCCEx_GetDCMIPPCLKFreq+0xca>
34188a72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188a76:	d82f      	bhi.n	34188ad8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34188a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188a7c:	d01a      	beq.n	34188ab4 <RCCEx_GetDCMIPPCLKFreq+0xb8>
34188a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188a82:	d829      	bhi.n	34188ad8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34188a84:	2b00      	cmp	r3, #0
34188a86:	d003      	beq.n	34188a90 <RCCEx_GetDCMIPPCLKFreq+0x94>
34188a88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188a8c:	d009      	beq.n	34188aa2 <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
34188a8e:	e023      	b.n	34188ad8 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188a90:	f7ff f9ae 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34188a94:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188a96:	68fa      	ldr	r2, [r7, #12]
34188a98:	68bb      	ldr	r3, [r7, #8]
34188a9a:	fbb2 f3f3 	udiv	r3, r2, r3
34188a9e:	60fb      	str	r3, [r7, #12]
            break;
34188aa0:	e01b      	b.n	34188ada <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188aa2:	f7ff f9eb 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188aa6:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188aa8:	68fa      	ldr	r2, [r7, #12]
34188aaa:	68bb      	ldr	r3, [r7, #8]
34188aac:	fbb2 f3f3 	udiv	r3, r2, r3
34188ab0:	60fb      	str	r3, [r7, #12]
            break;
34188ab2:	e012      	b.n	34188ada <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188ab4:	f7ff fa28 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188ab8:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188aba:	68fa      	ldr	r2, [r7, #12]
34188abc:	68bb      	ldr	r3, [r7, #8]
34188abe:	fbb2 f3f3 	udiv	r3, r2, r3
34188ac2:	60fb      	str	r3, [r7, #12]
            break;
34188ac4:	e009      	b.n	34188ada <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188ac6:	f7ff fa65 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188aca:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34188acc:	68fa      	ldr	r2, [r7, #12]
34188ace:	68bb      	ldr	r3, [r7, #8]
34188ad0:	fbb2 f3f3 	udiv	r3, r2, r3
34188ad4:	60fb      	str	r3, [r7, #12]
            break;
34188ad6:	e000      	b.n	34188ada <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
34188ad8:	bf00      	nop
      break;
34188ada:	e00f      	b.n	34188afc <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34188adc:	f7fa ff10 	bl	34183900 <LL_RCC_HSI_IsReady>
34188ae0:	4603      	mov	r3, r0
34188ae2:	2b00      	cmp	r3, #0
34188ae4:	d00c      	beq.n	34188b00 <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34188ae6:	f7fa ff1d 	bl	34183924 <LL_RCC_HSI_GetDivider>
34188aea:	4603      	mov	r3, r0
34188aec:	09db      	lsrs	r3, r3, #7
34188aee:	4a07      	ldr	r2, [pc, #28]	@ (34188b0c <RCCEx_GetDCMIPPCLKFreq+0x110>)
34188af0:	fa22 f303 	lsr.w	r3, r2, r3
34188af4:	60fb      	str	r3, [r7, #12]
      break;
34188af6:	e003      	b.n	34188b00 <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
34188af8:	bf00      	nop
34188afa:	e002      	b.n	34188b02 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34188afc:	bf00      	nop
34188afe:	e000      	b.n	34188b02 <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
34188b00:	bf00      	nop
  }

  return dcmipp_frequency;
34188b02:	68fb      	ldr	r3, [r7, #12]
}
34188b04:	4618      	mov	r0, r3
34188b06:	3710      	adds	r7, #16
34188b08:	46bd      	mov	sp, r7
34188b0a:	bd80      	pop	{r7, pc}
34188b0c:	03d09000 	.word	0x03d09000

34188b10 <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
34188b10:	b580      	push	{r7, lr}
34188b12:	b084      	sub	sp, #16
34188b14:	af00      	add	r7, sp, #0
34188b16:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
34188b18:	2300      	movs	r3, #0
34188b1a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
34188b1c:	6878      	ldr	r0, [r7, #4]
34188b1e:	f7fb f9ed 	bl	34183efc <LL_RCC_GetETHClockSource>
34188b22:	4603      	mov	r3, r0
34188b24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34188b28:	d05e      	beq.n	34188be8 <RCCEx_GetETH1CLKFreq+0xd8>
34188b2a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
34188b2e:	d863      	bhi.n	34188bf8 <RCCEx_GetETH1CLKFreq+0xe8>
34188b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34188b34:	d015      	beq.n	34188b62 <RCCEx_GetETH1CLKFreq+0x52>
34188b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34188b3a:	d85d      	bhi.n	34188bf8 <RCCEx_GetETH1CLKFreq+0xe8>
34188b3c:	2b00      	cmp	r3, #0
34188b3e:	d003      	beq.n	34188b48 <RCCEx_GetETH1CLKFreq+0x38>
34188b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34188b44:	d008      	beq.n	34188b58 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
34188b46:	e057      	b.n	34188bf8 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188b48:	f7fa fada 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34188b4c:	4603      	mov	r3, r0
34188b4e:	4618      	mov	r0, r3
34188b50:	f7ff fa66 	bl	34188020 <RCCEx_GetHCLKFreq>
34188b54:	60f8      	str	r0, [r7, #12]
      break;
34188b56:	e054      	b.n	34188c02 <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188b58:	2007      	movs	r0, #7
34188b5a:	f7ff fd4d 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34188b5e:	60f8      	str	r0, [r7, #12]
      break;
34188b60:	e04f      	b.n	34188c02 <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
34188b62:	f7fb ff71 	bl	34184a48 <LL_RCC_IC12_IsEnabled>
34188b66:	4603      	mov	r3, r0
34188b68:	2b00      	cmp	r3, #0
34188b6a:	d047      	beq.n	34188bfc <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
34188b6c:	f7fb ff8e 	bl	34184a8c <LL_RCC_IC12_GetDivider>
34188b70:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
34188b72:	f7fb ff7d 	bl	34184a70 <LL_RCC_IC12_GetSource>
34188b76:	4603      	mov	r3, r0
34188b78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b7c:	d029      	beq.n	34188bd2 <RCCEx_GetETH1CLKFreq+0xc2>
34188b7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188b82:	d82f      	bhi.n	34188be4 <RCCEx_GetETH1CLKFreq+0xd4>
34188b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b88:	d01a      	beq.n	34188bc0 <RCCEx_GetETH1CLKFreq+0xb0>
34188b8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188b8e:	d829      	bhi.n	34188be4 <RCCEx_GetETH1CLKFreq+0xd4>
34188b90:	2b00      	cmp	r3, #0
34188b92:	d003      	beq.n	34188b9c <RCCEx_GetETH1CLKFreq+0x8c>
34188b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188b98:	d009      	beq.n	34188bae <RCCEx_GetETH1CLKFreq+0x9e>
            break;
34188b9a:	e023      	b.n	34188be4 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188b9c:	f7ff f928 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34188ba0:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34188ba2:	68fa      	ldr	r2, [r7, #12]
34188ba4:	68bb      	ldr	r3, [r7, #8]
34188ba6:	fbb2 f3f3 	udiv	r3, r2, r3
34188baa:	60fb      	str	r3, [r7, #12]
            break;
34188bac:	e01b      	b.n	34188be6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188bae:	f7ff f965 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188bb2:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34188bb4:	68fa      	ldr	r2, [r7, #12]
34188bb6:	68bb      	ldr	r3, [r7, #8]
34188bb8:	fbb2 f3f3 	udiv	r3, r2, r3
34188bbc:	60fb      	str	r3, [r7, #12]
            break;
34188bbe:	e012      	b.n	34188be6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188bc0:	f7ff f9a2 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188bc4:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34188bc6:	68fa      	ldr	r2, [r7, #12]
34188bc8:	68bb      	ldr	r3, [r7, #8]
34188bca:	fbb2 f3f3 	udiv	r3, r2, r3
34188bce:	60fb      	str	r3, [r7, #12]
            break;
34188bd0:	e009      	b.n	34188be6 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188bd2:	f7ff f9df 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188bd6:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34188bd8:	68fa      	ldr	r2, [r7, #12]
34188bda:	68bb      	ldr	r3, [r7, #8]
34188bdc:	fbb2 f3f3 	udiv	r3, r2, r3
34188be0:	60fb      	str	r3, [r7, #12]
            break;
34188be2:	e000      	b.n	34188be6 <RCCEx_GetETH1CLKFreq+0xd6>
            break;
34188be4:	bf00      	nop
      break;
34188be6:	e009      	b.n	34188bfc <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
34188be8:	f7fa fe78 	bl	341838dc <LL_RCC_HSE_IsReady>
34188bec:	4603      	mov	r3, r0
34188bee:	2b00      	cmp	r3, #0
34188bf0:	d006      	beq.n	34188c00 <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
34188bf2:	4b06      	ldr	r3, [pc, #24]	@ (34188c0c <RCCEx_GetETH1CLKFreq+0xfc>)
34188bf4:	60fb      	str	r3, [r7, #12]
      break;
34188bf6:	e003      	b.n	34188c00 <RCCEx_GetETH1CLKFreq+0xf0>
      break;
34188bf8:	bf00      	nop
34188bfa:	e002      	b.n	34188c02 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34188bfc:	bf00      	nop
34188bfe:	e000      	b.n	34188c02 <RCCEx_GetETH1CLKFreq+0xf2>
      break;
34188c00:	bf00      	nop
  }

  return eth1_frequency;
34188c02:	68fb      	ldr	r3, [r7, #12]
}
34188c04:	4618      	mov	r0, r3
34188c06:	3710      	adds	r7, #16
34188c08:	46bd      	mov	sp, r7
34188c0a:	bd80      	pop	{r7, pc}
34188c0c:	02dc6c00 	.word	0x02dc6c00

34188c10 <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
34188c10:	b580      	push	{r7, lr}
34188c12:	b084      	sub	sp, #16
34188c14:	af00      	add	r7, sp, #0
34188c16:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
34188c18:	2300      	movs	r3, #0
34188c1a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
34188c1c:	6878      	ldr	r0, [r7, #4]
34188c1e:	f7fb f97f 	bl	34183f20 <LL_RCC_GetETHPTPClockSource>
34188c22:	4603      	mov	r3, r0
34188c24:	2b03      	cmp	r3, #3
34188c26:	d863      	bhi.n	34188cf0 <RCCEx_GetETH1PTPCLKFreq+0xe0>
34188c28:	a201      	add	r2, pc, #4	@ (adr r2, 34188c30 <RCCEx_GetETH1PTPCLKFreq+0x20>)
34188c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188c2e:	bf00      	nop
34188c30:	34188c41 	.word	0x34188c41
34188c34:	34188c51 	.word	0x34188c51
34188c38:	34188c5b 	.word	0x34188c5b
34188c3c:	34188ce1 	.word	0x34188ce1
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188c40:	f7fa fa5e 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34188c44:	4603      	mov	r3, r0
34188c46:	4618      	mov	r0, r3
34188c48:	f7ff f9ea 	bl	34188020 <RCCEx_GetHCLKFreq>
34188c4c:	60f8      	str	r0, [r7, #12]
      break;
34188c4e:	e054      	b.n	34188cfa <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188c50:	2007      	movs	r0, #7
34188c52:	f7ff fcd1 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34188c56:	60f8      	str	r0, [r7, #12]
      break;
34188c58:	e04f      	b.n	34188cfa <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34188c5a:	f7fb ff35 	bl	34184ac8 <LL_RCC_IC13_IsEnabled>
34188c5e:	4603      	mov	r3, r0
34188c60:	2b00      	cmp	r3, #0
34188c62:	d047      	beq.n	34188cf4 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34188c64:	f7fb ff52 	bl	34184b0c <LL_RCC_IC13_GetDivider>
34188c68:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34188c6a:	f7fb ff41 	bl	34184af0 <LL_RCC_IC13_GetSource>
34188c6e:	4603      	mov	r3, r0
34188c70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c74:	d029      	beq.n	34188cca <RCCEx_GetETH1PTPCLKFreq+0xba>
34188c76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188c7a:	d82f      	bhi.n	34188cdc <RCCEx_GetETH1PTPCLKFreq+0xcc>
34188c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188c80:	d01a      	beq.n	34188cb8 <RCCEx_GetETH1PTPCLKFreq+0xa8>
34188c82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188c86:	d829      	bhi.n	34188cdc <RCCEx_GetETH1PTPCLKFreq+0xcc>
34188c88:	2b00      	cmp	r3, #0
34188c8a:	d003      	beq.n	34188c94 <RCCEx_GetETH1PTPCLKFreq+0x84>
34188c8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188c90:	d009      	beq.n	34188ca6 <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188c92:	e023      	b.n	34188cdc <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188c94:	f7ff f8ac 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34188c98:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188c9a:	68fa      	ldr	r2, [r7, #12]
34188c9c:	68bb      	ldr	r3, [r7, #8]
34188c9e:	fbb2 f3f3 	udiv	r3, r2, r3
34188ca2:	60fb      	str	r3, [r7, #12]
            break;
34188ca4:	e01b      	b.n	34188cde <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188ca6:	f7ff f8e9 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188caa:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188cac:	68fa      	ldr	r2, [r7, #12]
34188cae:	68bb      	ldr	r3, [r7, #8]
34188cb0:	fbb2 f3f3 	udiv	r3, r2, r3
34188cb4:	60fb      	str	r3, [r7, #12]
            break;
34188cb6:	e012      	b.n	34188cde <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188cb8:	f7ff f926 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188cbc:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188cbe:	68fa      	ldr	r2, [r7, #12]
34188cc0:	68bb      	ldr	r3, [r7, #8]
34188cc2:	fbb2 f3f3 	udiv	r3, r2, r3
34188cc6:	60fb      	str	r3, [r7, #12]
            break;
34188cc8:	e009      	b.n	34188cde <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188cca:	f7ff f963 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188cce:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34188cd0:	68fa      	ldr	r2, [r7, #12]
34188cd2:	68bb      	ldr	r3, [r7, #8]
34188cd4:	fbb2 f3f3 	udiv	r3, r2, r3
34188cd8:	60fb      	str	r3, [r7, #12]
            break;
34188cda:	e000      	b.n	34188cde <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34188cdc:	bf00      	nop
        }
      }
      break;
34188cde:	e009      	b.n	34188cf4 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34188ce0:	f7fa fdfc 	bl	341838dc <LL_RCC_HSE_IsReady>
34188ce4:	4603      	mov	r3, r0
34188ce6:	2b00      	cmp	r3, #0
34188ce8:	d006      	beq.n	34188cf8 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
34188cea:	4b0a      	ldr	r3, [pc, #40]	@ (34188d14 <RCCEx_GetETH1PTPCLKFreq+0x104>)
34188cec:	60fb      	str	r3, [r7, #12]
      }
      break;
34188cee:	e003      	b.n	34188cf8 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
34188cf0:	bf00      	nop
34188cf2:	e002      	b.n	34188cfa <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34188cf4:	bf00      	nop
34188cf6:	e000      	b.n	34188cfa <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
34188cf8:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34188cfa:	f7fa ff4d 	bl	34183b98 <LL_RCC_GetETH1PTPDivider>
34188cfe:	4603      	mov	r3, r0
34188d00:	091b      	lsrs	r3, r3, #4
34188d02:	3301      	adds	r3, #1
34188d04:	68fa      	ldr	r2, [r7, #12]
34188d06:	fbb2 f3f3 	udiv	r3, r2, r3
}
34188d0a:	4618      	mov	r0, r3
34188d0c:	3710      	adds	r7, #16
34188d0e:	46bd      	mov	sp, r7
34188d10:	bd80      	pop	{r7, pc}
34188d12:	bf00      	nop
34188d14:	02dc6c00 	.word	0x02dc6c00

34188d18 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
34188d18:	b580      	push	{r7, lr}
34188d1a:	b084      	sub	sp, #16
34188d1c:	af00      	add	r7, sp, #0
34188d1e:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
34188d20:	2300      	movs	r3, #0
34188d22:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
34188d24:	6878      	ldr	r0, [r7, #4]
34188d26:	f7fb f90d 	bl	34183f44 <LL_RCC_GetFDCANClockSource>
34188d2a:	4603      	mov	r3, r0
34188d2c:	2b03      	cmp	r3, #3
34188d2e:	d867      	bhi.n	34188e00 <RCCEx_GetFDCANCLKFreq+0xe8>
34188d30:	a201      	add	r2, pc, #4	@ (adr r2, 34188d38 <RCCEx_GetFDCANCLKFreq+0x20>)
34188d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34188d36:	bf00      	nop
34188d38:	34188d49 	.word	0x34188d49
34188d3c:	34188d61 	.word	0x34188d61
34188d40:	34188d6b 	.word	0x34188d6b
34188d44:	34188df1 	.word	0x34188df1
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34188d48:	f7fa f9da 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34188d4c:	4603      	mov	r3, r0
34188d4e:	4618      	mov	r0, r3
34188d50:	f7ff f966 	bl	34188020 <RCCEx_GetHCLKFreq>
34188d54:	4603      	mov	r3, r0
34188d56:	4618      	mov	r0, r3
34188d58:	f7ff f973 	bl	34188042 <RCCEx_GetPCLK1Freq>
34188d5c:	60f8      	str	r0, [r7, #12]
      break;
34188d5e:	e054      	b.n	34188e0a <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188d60:	2007      	movs	r0, #7
34188d62:	f7ff fc49 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34188d66:	60f8      	str	r0, [r7, #12]
      break;
34188d68:	e04f      	b.n	34188e0a <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34188d6a:	f7fc f82d 	bl	34184dc8 <LL_RCC_IC19_IsEnabled>
34188d6e:	4603      	mov	r3, r0
34188d70:	2b00      	cmp	r3, #0
34188d72:	d047      	beq.n	34188e04 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34188d74:	f7fc f84a 	bl	34184e0c <LL_RCC_IC19_GetDivider>
34188d78:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34188d7a:	f7fc f839 	bl	34184df0 <LL_RCC_IC19_GetSource>
34188d7e:	4603      	mov	r3, r0
34188d80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188d84:	d029      	beq.n	34188dda <RCCEx_GetFDCANCLKFreq+0xc2>
34188d86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188d8a:	d82f      	bhi.n	34188dec <RCCEx_GetFDCANCLKFreq+0xd4>
34188d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188d90:	d01a      	beq.n	34188dc8 <RCCEx_GetFDCANCLKFreq+0xb0>
34188d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188d96:	d829      	bhi.n	34188dec <RCCEx_GetFDCANCLKFreq+0xd4>
34188d98:	2b00      	cmp	r3, #0
34188d9a:	d003      	beq.n	34188da4 <RCCEx_GetFDCANCLKFreq+0x8c>
34188d9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188da0:	d009      	beq.n	34188db6 <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34188da2:	e023      	b.n	34188dec <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188da4:	f7ff f824 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34188da8:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188daa:	68fa      	ldr	r2, [r7, #12]
34188dac:	68bb      	ldr	r3, [r7, #8]
34188dae:	fbb2 f3f3 	udiv	r3, r2, r3
34188db2:	60fb      	str	r3, [r7, #12]
            break;
34188db4:	e01b      	b.n	34188dee <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188db6:	f7ff f861 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188dba:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188dbc:	68fa      	ldr	r2, [r7, #12]
34188dbe:	68bb      	ldr	r3, [r7, #8]
34188dc0:	fbb2 f3f3 	udiv	r3, r2, r3
34188dc4:	60fb      	str	r3, [r7, #12]
            break;
34188dc6:	e012      	b.n	34188dee <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188dc8:	f7ff f89e 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188dcc:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188dce:	68fa      	ldr	r2, [r7, #12]
34188dd0:	68bb      	ldr	r3, [r7, #8]
34188dd2:	fbb2 f3f3 	udiv	r3, r2, r3
34188dd6:	60fb      	str	r3, [r7, #12]
            break;
34188dd8:	e009      	b.n	34188dee <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188dda:	f7ff f8db 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188dde:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34188de0:	68fa      	ldr	r2, [r7, #12]
34188de2:	68bb      	ldr	r3, [r7, #8]
34188de4:	fbb2 f3f3 	udiv	r3, r2, r3
34188de8:	60fb      	str	r3, [r7, #12]
            break;
34188dea:	e000      	b.n	34188dee <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
34188dec:	bf00      	nop
        }
      }
      break;
34188dee:	e009      	b.n	34188e04 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
34188df0:	f7fa fd74 	bl	341838dc <LL_RCC_HSE_IsReady>
34188df4:	4603      	mov	r3, r0
34188df6:	2b00      	cmp	r3, #0
34188df8:	d006      	beq.n	34188e08 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
34188dfa:	4b06      	ldr	r3, [pc, #24]	@ (34188e14 <RCCEx_GetFDCANCLKFreq+0xfc>)
34188dfc:	60fb      	str	r3, [r7, #12]
      }
      break;
34188dfe:	e003      	b.n	34188e08 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
34188e00:	bf00      	nop
34188e02:	e002      	b.n	34188e0a <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34188e04:	bf00      	nop
34188e06:	e000      	b.n	34188e0a <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
34188e08:	bf00      	nop
  }

  return fdcan_frequency;
34188e0a:	68fb      	ldr	r3, [r7, #12]
}
34188e0c:	4618      	mov	r0, r3
34188e0e:	3710      	adds	r7, #16
34188e10:	46bd      	mov	sp, r7
34188e12:	bd80      	pop	{r7, pc}
34188e14:	02dc6c00 	.word	0x02dc6c00

34188e18 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
34188e18:	b580      	push	{r7, lr}
34188e1a:	b084      	sub	sp, #16
34188e1c:	af00      	add	r7, sp, #0
34188e1e:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34188e20:	2300      	movs	r3, #0
34188e22:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
34188e24:	6878      	ldr	r0, [r7, #4]
34188e26:	f7fb f89f 	bl	34183f68 <LL_RCC_GetFMCClockSource>
34188e2a:	4603      	mov	r3, r0
34188e2c:	2b30      	cmp	r3, #48	@ 0x30
34188e2e:	d05d      	beq.n	34188eec <RCCEx_GetFMCCLKFreq+0xd4>
34188e30:	2b30      	cmp	r3, #48	@ 0x30
34188e32:	f200 809e 	bhi.w	34188f72 <RCCEx_GetFMCCLKFreq+0x15a>
34188e36:	2b20      	cmp	r3, #32
34188e38:	d014      	beq.n	34188e64 <RCCEx_GetFMCCLKFreq+0x4c>
34188e3a:	2b20      	cmp	r3, #32
34188e3c:	f200 8099 	bhi.w	34188f72 <RCCEx_GetFMCCLKFreq+0x15a>
34188e40:	2b00      	cmp	r3, #0
34188e42:	d002      	beq.n	34188e4a <RCCEx_GetFMCCLKFreq+0x32>
34188e44:	2b10      	cmp	r3, #16
34188e46:	d008      	beq.n	34188e5a <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34188e48:	e093      	b.n	34188f72 <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34188e4a:	f7fa f959 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34188e4e:	4603      	mov	r3, r0
34188e50:	4618      	mov	r0, r3
34188e52:	f7ff f8e5 	bl	34188020 <RCCEx_GetHCLKFreq>
34188e56:	60f8      	str	r0, [r7, #12]
      break;
34188e58:	e090      	b.n	34188f7c <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34188e5a:	2007      	movs	r0, #7
34188e5c:	f7ff fbcc 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34188e60:	60f8      	str	r0, [r7, #12]
      break;
34188e62:	e08b      	b.n	34188f7c <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34188e64:	f7fb fc30 	bl	341846c8 <LL_RCC_IC3_IsEnabled>
34188e68:	4603      	mov	r3, r0
34188e6a:	2b00      	cmp	r3, #0
34188e6c:	f000 8083 	beq.w	34188f76 <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
34188e70:	f7fb fc4c 	bl	3418470c <LL_RCC_IC3_GetDivider>
34188e74:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34188e76:	f7fb fc3b 	bl	341846f0 <LL_RCC_IC3_GetSource>
34188e7a:	4603      	mov	r3, r0
34188e7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188e80:	d029      	beq.n	34188ed6 <RCCEx_GetFMCCLKFreq+0xbe>
34188e82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188e86:	d82f      	bhi.n	34188ee8 <RCCEx_GetFMCCLKFreq+0xd0>
34188e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188e8c:	d01a      	beq.n	34188ec4 <RCCEx_GetFMCCLKFreq+0xac>
34188e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188e92:	d829      	bhi.n	34188ee8 <RCCEx_GetFMCCLKFreq+0xd0>
34188e94:	2b00      	cmp	r3, #0
34188e96:	d003      	beq.n	34188ea0 <RCCEx_GetFMCCLKFreq+0x88>
34188e98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188e9c:	d009      	beq.n	34188eb2 <RCCEx_GetFMCCLKFreq+0x9a>
            break;
34188e9e:	e023      	b.n	34188ee8 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188ea0:	f7fe ffa6 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34188ea4:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188ea6:	68fa      	ldr	r2, [r7, #12]
34188ea8:	68bb      	ldr	r3, [r7, #8]
34188eaa:	fbb2 f3f3 	udiv	r3, r2, r3
34188eae:	60fb      	str	r3, [r7, #12]
            break;
34188eb0:	e01b      	b.n	34188eea <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188eb2:	f7fe ffe3 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188eb6:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188eb8:	68fa      	ldr	r2, [r7, #12]
34188eba:	68bb      	ldr	r3, [r7, #8]
34188ebc:	fbb2 f3f3 	udiv	r3, r2, r3
34188ec0:	60fb      	str	r3, [r7, #12]
            break;
34188ec2:	e012      	b.n	34188eea <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188ec4:	f7ff f820 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188ec8:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188eca:	68fa      	ldr	r2, [r7, #12]
34188ecc:	68bb      	ldr	r3, [r7, #8]
34188ece:	fbb2 f3f3 	udiv	r3, r2, r3
34188ed2:	60fb      	str	r3, [r7, #12]
            break;
34188ed4:	e009      	b.n	34188eea <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188ed6:	f7ff f85d 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188eda:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188edc:	68fa      	ldr	r2, [r7, #12]
34188ede:	68bb      	ldr	r3, [r7, #8]
34188ee0:	fbb2 f3f3 	udiv	r3, r2, r3
34188ee4:	60fb      	str	r3, [r7, #12]
            break;
34188ee6:	e000      	b.n	34188eea <RCCEx_GetFMCCLKFreq+0xd2>
            break;
34188ee8:	bf00      	nop
      break;
34188eea:	e044      	b.n	34188f76 <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
34188eec:	f7fb fc2c 	bl	34184748 <LL_RCC_IC4_IsEnabled>
34188ef0:	4603      	mov	r3, r0
34188ef2:	2b00      	cmp	r3, #0
34188ef4:	d041      	beq.n	34188f7a <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
34188ef6:	f7fb fc49 	bl	3418478c <LL_RCC_IC4_GetDivider>
34188efa:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34188efc:	f7fb fc38 	bl	34184770 <LL_RCC_IC4_GetSource>
34188f00:	4603      	mov	r3, r0
34188f02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188f06:	d029      	beq.n	34188f5c <RCCEx_GetFMCCLKFreq+0x144>
34188f08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34188f0c:	d82f      	bhi.n	34188f6e <RCCEx_GetFMCCLKFreq+0x156>
34188f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188f12:	d01a      	beq.n	34188f4a <RCCEx_GetFMCCLKFreq+0x132>
34188f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34188f18:	d829      	bhi.n	34188f6e <RCCEx_GetFMCCLKFreq+0x156>
34188f1a:	2b00      	cmp	r3, #0
34188f1c:	d003      	beq.n	34188f26 <RCCEx_GetFMCCLKFreq+0x10e>
34188f1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34188f22:	d009      	beq.n	34188f38 <RCCEx_GetFMCCLKFreq+0x120>
            break;
34188f24:	e023      	b.n	34188f6e <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34188f26:	f7fe ff63 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34188f2a:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188f2c:	68fa      	ldr	r2, [r7, #12]
34188f2e:	68bb      	ldr	r3, [r7, #8]
34188f30:	fbb2 f3f3 	udiv	r3, r2, r3
34188f34:	60fb      	str	r3, [r7, #12]
            break;
34188f36:	e01b      	b.n	34188f70 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34188f38:	f7fe ffa0 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34188f3c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188f3e:	68fa      	ldr	r2, [r7, #12]
34188f40:	68bb      	ldr	r3, [r7, #8]
34188f42:	fbb2 f3f3 	udiv	r3, r2, r3
34188f46:	60fb      	str	r3, [r7, #12]
            break;
34188f48:	e012      	b.n	34188f70 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34188f4a:	f7fe ffdd 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34188f4e:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188f50:	68fa      	ldr	r2, [r7, #12]
34188f52:	68bb      	ldr	r3, [r7, #8]
34188f54:	fbb2 f3f3 	udiv	r3, r2, r3
34188f58:	60fb      	str	r3, [r7, #12]
            break;
34188f5a:	e009      	b.n	34188f70 <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34188f5c:	f7ff f81a 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34188f60:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34188f62:	68fa      	ldr	r2, [r7, #12]
34188f64:	68bb      	ldr	r3, [r7, #8]
34188f66:	fbb2 f3f3 	udiv	r3, r2, r3
34188f6a:	60fb      	str	r3, [r7, #12]
            break;
34188f6c:	e000      	b.n	34188f70 <RCCEx_GetFMCCLKFreq+0x158>
            break;
34188f6e:	bf00      	nop
      break;
34188f70:	e003      	b.n	34188f7a <RCCEx_GetFMCCLKFreq+0x162>
      break;
34188f72:	bf00      	nop
34188f74:	e002      	b.n	34188f7c <RCCEx_GetFMCCLKFreq+0x164>
      break;
34188f76:	bf00      	nop
34188f78:	e000      	b.n	34188f7c <RCCEx_GetFMCCLKFreq+0x164>
      break;
34188f7a:	bf00      	nop
  }

  return fmc_frequency;
34188f7c:	68fb      	ldr	r3, [r7, #12]
}
34188f7e:	4618      	mov	r0, r3
34188f80:	3710      	adds	r7, #16
34188f82:	46bd      	mov	sp, r7
34188f84:	bd80      	pop	{r7, pc}
	...

34188f88 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
34188f88:	b580      	push	{r7, lr}
34188f8a:	b084      	sub	sp, #16
34188f8c:	af00      	add	r7, sp, #0
34188f8e:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
34188f90:	2300      	movs	r3, #0
34188f92:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34188f94:	6878      	ldr	r0, [r7, #4]
34188f96:	f7fa fff9 	bl	34183f8c <LL_RCC_GetI2CClockSource>
34188f9a:	4603      	mov	r3, r0
34188f9c:	4aa2      	ldr	r2, [pc, #648]	@ (34189228 <RCCEx_GetI2CCLKFreq+0x2a0>)
34188f9e:	4293      	cmp	r3, r2
34188fa0:	f000 8172 	beq.w	34189288 <RCCEx_GetI2CCLKFreq+0x300>
34188fa4:	4aa0      	ldr	r2, [pc, #640]	@ (34189228 <RCCEx_GetI2CCLKFreq+0x2a0>)
34188fa6:	4293      	cmp	r3, r2
34188fa8:	f200 8184 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34188fac:	4a9f      	ldr	r2, [pc, #636]	@ (3418922c <RCCEx_GetI2CCLKFreq+0x2a4>)
34188fae:	4293      	cmp	r3, r2
34188fb0:	f000 816a 	beq.w	34189288 <RCCEx_GetI2CCLKFreq+0x300>
34188fb4:	4a9d      	ldr	r2, [pc, #628]	@ (3418922c <RCCEx_GetI2CCLKFreq+0x2a4>)
34188fb6:	4293      	cmp	r3, r2
34188fb8:	f200 817c 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34188fbc:	4a9c      	ldr	r2, [pc, #624]	@ (34189230 <RCCEx_GetI2CCLKFreq+0x2a8>)
34188fbe:	4293      	cmp	r3, r2
34188fc0:	f000 8162 	beq.w	34189288 <RCCEx_GetI2CCLKFreq+0x300>
34188fc4:	4a9a      	ldr	r2, [pc, #616]	@ (34189230 <RCCEx_GetI2CCLKFreq+0x2a8>)
34188fc6:	4293      	cmp	r3, r2
34188fc8:	f200 8174 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34188fcc:	4a99      	ldr	r2, [pc, #612]	@ (34189234 <RCCEx_GetI2CCLKFreq+0x2ac>)
34188fce:	4293      	cmp	r3, r2
34188fd0:	f000 815a 	beq.w	34189288 <RCCEx_GetI2CCLKFreq+0x300>
34188fd4:	4a97      	ldr	r2, [pc, #604]	@ (34189234 <RCCEx_GetI2CCLKFreq+0x2ac>)
34188fd6:	4293      	cmp	r3, r2
34188fd8:	f200 816c 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34188fdc:	4a96      	ldr	r2, [pc, #600]	@ (34189238 <RCCEx_GetI2CCLKFreq+0x2b0>)
34188fde:	4293      	cmp	r3, r2
34188fe0:	f000 8160 	beq.w	341892a4 <RCCEx_GetI2CCLKFreq+0x31c>
34188fe4:	4a94      	ldr	r2, [pc, #592]	@ (34189238 <RCCEx_GetI2CCLKFreq+0x2b0>)
34188fe6:	4293      	cmp	r3, r2
34188fe8:	f200 8164 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34188fec:	4a93      	ldr	r2, [pc, #588]	@ (3418923c <RCCEx_GetI2CCLKFreq+0x2b4>)
34188fee:	4293      	cmp	r3, r2
34188ff0:	f000 8158 	beq.w	341892a4 <RCCEx_GetI2CCLKFreq+0x31c>
34188ff4:	4a91      	ldr	r2, [pc, #580]	@ (3418923c <RCCEx_GetI2CCLKFreq+0x2b4>)
34188ff6:	4293      	cmp	r3, r2
34188ff8:	f200 815c 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34188ffc:	4a90      	ldr	r2, [pc, #576]	@ (34189240 <RCCEx_GetI2CCLKFreq+0x2b8>)
34188ffe:	4293      	cmp	r3, r2
34189000:	f000 8150 	beq.w	341892a4 <RCCEx_GetI2CCLKFreq+0x31c>
34189004:	4a8e      	ldr	r2, [pc, #568]	@ (34189240 <RCCEx_GetI2CCLKFreq+0x2b8>)
34189006:	4293      	cmp	r3, r2
34189008:	f200 8154 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
3418900c:	4a8d      	ldr	r2, [pc, #564]	@ (34189244 <RCCEx_GetI2CCLKFreq+0x2bc>)
3418900e:	4293      	cmp	r3, r2
34189010:	f000 8148 	beq.w	341892a4 <RCCEx_GetI2CCLKFreq+0x31c>
34189014:	4a8b      	ldr	r2, [pc, #556]	@ (34189244 <RCCEx_GetI2CCLKFreq+0x2bc>)
34189016:	4293      	cmp	r3, r2
34189018:	f200 814c 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
3418901c:	4a8a      	ldr	r2, [pc, #552]	@ (34189248 <RCCEx_GetI2CCLKFreq+0x2c0>)
3418901e:	4293      	cmp	r3, r2
34189020:	f000 80be 	beq.w	341891a0 <RCCEx_GetI2CCLKFreq+0x218>
34189024:	4a88      	ldr	r2, [pc, #544]	@ (34189248 <RCCEx_GetI2CCLKFreq+0x2c0>)
34189026:	4293      	cmp	r3, r2
34189028:	f200 8144 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
3418902c:	4a87      	ldr	r2, [pc, #540]	@ (3418924c <RCCEx_GetI2CCLKFreq+0x2c4>)
3418902e:	4293      	cmp	r3, r2
34189030:	f000 80b6 	beq.w	341891a0 <RCCEx_GetI2CCLKFreq+0x218>
34189034:	4a85      	ldr	r2, [pc, #532]	@ (3418924c <RCCEx_GetI2CCLKFreq+0x2c4>)
34189036:	4293      	cmp	r3, r2
34189038:	f200 813c 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
3418903c:	4a84      	ldr	r2, [pc, #528]	@ (34189250 <RCCEx_GetI2CCLKFreq+0x2c8>)
3418903e:	4293      	cmp	r3, r2
34189040:	f000 80ae 	beq.w	341891a0 <RCCEx_GetI2CCLKFreq+0x218>
34189044:	4a82      	ldr	r2, [pc, #520]	@ (34189250 <RCCEx_GetI2CCLKFreq+0x2c8>)
34189046:	4293      	cmp	r3, r2
34189048:	f200 8134 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
3418904c:	4a81      	ldr	r2, [pc, #516]	@ (34189254 <RCCEx_GetI2CCLKFreq+0x2cc>)
3418904e:	4293      	cmp	r3, r2
34189050:	f000 80a6 	beq.w	341891a0 <RCCEx_GetI2CCLKFreq+0x218>
34189054:	4a7f      	ldr	r2, [pc, #508]	@ (34189254 <RCCEx_GetI2CCLKFreq+0x2cc>)
34189056:	4293      	cmp	r3, r2
34189058:	f200 812c 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
3418905c:	4a7e      	ldr	r2, [pc, #504]	@ (34189258 <RCCEx_GetI2CCLKFreq+0x2d0>)
3418905e:	4293      	cmp	r3, r2
34189060:	d05a      	beq.n	34189118 <RCCEx_GetI2CCLKFreq+0x190>
34189062:	4a7d      	ldr	r2, [pc, #500]	@ (34189258 <RCCEx_GetI2CCLKFreq+0x2d0>)
34189064:	4293      	cmp	r3, r2
34189066:	f200 8125 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
3418906a:	4a7c      	ldr	r2, [pc, #496]	@ (3418925c <RCCEx_GetI2CCLKFreq+0x2d4>)
3418906c:	4293      	cmp	r3, r2
3418906e:	d053      	beq.n	34189118 <RCCEx_GetI2CCLKFreq+0x190>
34189070:	4a7a      	ldr	r2, [pc, #488]	@ (3418925c <RCCEx_GetI2CCLKFreq+0x2d4>)
34189072:	4293      	cmp	r3, r2
34189074:	f200 811e 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34189078:	4a79      	ldr	r2, [pc, #484]	@ (34189260 <RCCEx_GetI2CCLKFreq+0x2d8>)
3418907a:	4293      	cmp	r3, r2
3418907c:	d04c      	beq.n	34189118 <RCCEx_GetI2CCLKFreq+0x190>
3418907e:	4a78      	ldr	r2, [pc, #480]	@ (34189260 <RCCEx_GetI2CCLKFreq+0x2d8>)
34189080:	4293      	cmp	r3, r2
34189082:	f200 8117 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34189086:	4a77      	ldr	r2, [pc, #476]	@ (34189264 <RCCEx_GetI2CCLKFreq+0x2dc>)
34189088:	4293      	cmp	r3, r2
3418908a:	d045      	beq.n	34189118 <RCCEx_GetI2CCLKFreq+0x190>
3418908c:	4a75      	ldr	r2, [pc, #468]	@ (34189264 <RCCEx_GetI2CCLKFreq+0x2dc>)
3418908e:	4293      	cmp	r3, r2
34189090:	f200 8110 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
34189094:	4a74      	ldr	r2, [pc, #464]	@ (34189268 <RCCEx_GetI2CCLKFreq+0x2e0>)
34189096:	4293      	cmp	r3, r2
34189098:	d039      	beq.n	3418910e <RCCEx_GetI2CCLKFreq+0x186>
3418909a:	4a73      	ldr	r2, [pc, #460]	@ (34189268 <RCCEx_GetI2CCLKFreq+0x2e0>)
3418909c:	4293      	cmp	r3, r2
3418909e:	f200 8109 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
341890a2:	4a72      	ldr	r2, [pc, #456]	@ (3418926c <RCCEx_GetI2CCLKFreq+0x2e4>)
341890a4:	4293      	cmp	r3, r2
341890a6:	d032      	beq.n	3418910e <RCCEx_GetI2CCLKFreq+0x186>
341890a8:	4a70      	ldr	r2, [pc, #448]	@ (3418926c <RCCEx_GetI2CCLKFreq+0x2e4>)
341890aa:	4293      	cmp	r3, r2
341890ac:	f200 8102 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
341890b0:	4a6f      	ldr	r2, [pc, #444]	@ (34189270 <RCCEx_GetI2CCLKFreq+0x2e8>)
341890b2:	4293      	cmp	r3, r2
341890b4:	d02b      	beq.n	3418910e <RCCEx_GetI2CCLKFreq+0x186>
341890b6:	4a6e      	ldr	r2, [pc, #440]	@ (34189270 <RCCEx_GetI2CCLKFreq+0x2e8>)
341890b8:	4293      	cmp	r3, r2
341890ba:	f200 80fb 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
341890be:	4a6d      	ldr	r2, [pc, #436]	@ (34189274 <RCCEx_GetI2CCLKFreq+0x2ec>)
341890c0:	4293      	cmp	r3, r2
341890c2:	d024      	beq.n	3418910e <RCCEx_GetI2CCLKFreq+0x186>
341890c4:	4a6b      	ldr	r2, [pc, #428]	@ (34189274 <RCCEx_GetI2CCLKFreq+0x2ec>)
341890c6:	4293      	cmp	r3, r2
341890c8:	f200 80f4 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
341890cc:	4a6a      	ldr	r2, [pc, #424]	@ (34189278 <RCCEx_GetI2CCLKFreq+0x2f0>)
341890ce:	4293      	cmp	r3, r2
341890d0:	d011      	beq.n	341890f6 <RCCEx_GetI2CCLKFreq+0x16e>
341890d2:	4a69      	ldr	r2, [pc, #420]	@ (34189278 <RCCEx_GetI2CCLKFreq+0x2f0>)
341890d4:	4293      	cmp	r3, r2
341890d6:	f200 80ed 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
341890da:	4a68      	ldr	r2, [pc, #416]	@ (3418927c <RCCEx_GetI2CCLKFreq+0x2f4>)
341890dc:	4293      	cmp	r3, r2
341890de:	d00a      	beq.n	341890f6 <RCCEx_GetI2CCLKFreq+0x16e>
341890e0:	4a66      	ldr	r2, [pc, #408]	@ (3418927c <RCCEx_GetI2CCLKFreq+0x2f4>)
341890e2:	4293      	cmp	r3, r2
341890e4:	f200 80e6 	bhi.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
341890e8:	4a65      	ldr	r2, [pc, #404]	@ (34189280 <RCCEx_GetI2CCLKFreq+0x2f8>)
341890ea:	4293      	cmp	r3, r2
341890ec:	d003      	beq.n	341890f6 <RCCEx_GetI2CCLKFreq+0x16e>
341890ee:	4a65      	ldr	r2, [pc, #404]	@ (34189284 <RCCEx_GetI2CCLKFreq+0x2fc>)
341890f0:	4293      	cmp	r3, r2
341890f2:	f040 80df 	bne.w	341892b4 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341890f6:	f7fa f803 	bl	34183100 <HAL_RCC_GetSysClockFreq>
341890fa:	4603      	mov	r3, r0
341890fc:	4618      	mov	r0, r3
341890fe:	f7fe ff8f 	bl	34188020 <RCCEx_GetHCLKFreq>
34189102:	4603      	mov	r3, r0
34189104:	4618      	mov	r0, r3
34189106:	f7fe ff9c 	bl	34188042 <RCCEx_GetPCLK1Freq>
3418910a:	60f8      	str	r0, [r7, #12]
      break;
3418910c:	e0db      	b.n	341892c6 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418910e:	2007      	movs	r0, #7
34189110:	f7ff fa72 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34189114:	60f8      	str	r0, [r7, #12]
      break;
34189116:	e0d6      	b.n	341892c6 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34189118:	f7fb fc56 	bl	341849c8 <LL_RCC_IC10_IsEnabled>
3418911c:	4603      	mov	r3, r0
3418911e:	2b00      	cmp	r3, #0
34189120:	f000 80ca 	beq.w	341892b8 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34189124:	f7fb fc72 	bl	34184a0c <LL_RCC_IC10_GetDivider>
34189128:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
3418912a:	f7fb fc61 	bl	341849f0 <LL_RCC_IC10_GetSource>
3418912e:	4603      	mov	r3, r0
34189130:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189134:	d029      	beq.n	3418918a <RCCEx_GetI2CCLKFreq+0x202>
34189136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418913a:	d82f      	bhi.n	3418919c <RCCEx_GetI2CCLKFreq+0x214>
3418913c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189140:	d01a      	beq.n	34189178 <RCCEx_GetI2CCLKFreq+0x1f0>
34189142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189146:	d829      	bhi.n	3418919c <RCCEx_GetI2CCLKFreq+0x214>
34189148:	2b00      	cmp	r3, #0
3418914a:	d003      	beq.n	34189154 <RCCEx_GetI2CCLKFreq+0x1cc>
3418914c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189150:	d009      	beq.n	34189166 <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189152:	e023      	b.n	3418919c <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189154:	f7fe fe4c 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34189158:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418915a:	68fa      	ldr	r2, [r7, #12]
3418915c:	68bb      	ldr	r3, [r7, #8]
3418915e:	fbb2 f3f3 	udiv	r3, r2, r3
34189162:	60fb      	str	r3, [r7, #12]
            break;
34189164:	e01b      	b.n	3418919e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189166:	f7fe fe89 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418916a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418916c:	68fa      	ldr	r2, [r7, #12]
3418916e:	68bb      	ldr	r3, [r7, #8]
34189170:	fbb2 f3f3 	udiv	r3, r2, r3
34189174:	60fb      	str	r3, [r7, #12]
            break;
34189176:	e012      	b.n	3418919e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189178:	f7fe fec6 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418917c:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3418917e:	68fa      	ldr	r2, [r7, #12]
34189180:	68bb      	ldr	r3, [r7, #8]
34189182:	fbb2 f3f3 	udiv	r3, r2, r3
34189186:	60fb      	str	r3, [r7, #12]
            break;
34189188:	e009      	b.n	3418919e <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418918a:	f7fe ff03 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418918e:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189190:	68fa      	ldr	r2, [r7, #12]
34189192:	68bb      	ldr	r3, [r7, #8]
34189194:	fbb2 f3f3 	udiv	r3, r2, r3
34189198:	60fb      	str	r3, [r7, #12]
            break;
3418919a:	e000      	b.n	3418919e <RCCEx_GetI2CCLKFreq+0x216>
            break;
3418919c:	bf00      	nop
        }
      }
      break;
3418919e:	e08b      	b.n	341892b8 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
341891a0:	f7fb fd12 	bl	34184bc8 <LL_RCC_IC15_IsEnabled>
341891a4:	4603      	mov	r3, r0
341891a6:	2b00      	cmp	r3, #0
341891a8:	f000 8088 	beq.w	341892bc <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
341891ac:	f7fb fd2e 	bl	34184c0c <LL_RCC_IC15_GetDivider>
341891b0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
341891b2:	f7fb fd1d 	bl	34184bf0 <LL_RCC_IC15_GetSource>
341891b6:	4603      	mov	r3, r0
341891b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341891bc:	d029      	beq.n	34189212 <RCCEx_GetI2CCLKFreq+0x28a>
341891be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341891c2:	d82f      	bhi.n	34189224 <RCCEx_GetI2CCLKFreq+0x29c>
341891c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341891c8:	d01a      	beq.n	34189200 <RCCEx_GetI2CCLKFreq+0x278>
341891ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341891ce:	d829      	bhi.n	34189224 <RCCEx_GetI2CCLKFreq+0x29c>
341891d0:	2b00      	cmp	r3, #0
341891d2:	d003      	beq.n	341891dc <RCCEx_GetI2CCLKFreq+0x254>
341891d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341891d8:	d009      	beq.n	341891ee <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341891da:	e023      	b.n	34189224 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341891dc:	f7fe fe08 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341891e0:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
341891e2:	68fa      	ldr	r2, [r7, #12]
341891e4:	68bb      	ldr	r3, [r7, #8]
341891e6:	fbb2 f3f3 	udiv	r3, r2, r3
341891ea:	60fb      	str	r3, [r7, #12]
            break;
341891ec:	e01b      	b.n	34189226 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341891ee:	f7fe fe45 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341891f2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
341891f4:	68fa      	ldr	r2, [r7, #12]
341891f6:	68bb      	ldr	r3, [r7, #8]
341891f8:	fbb2 f3f3 	udiv	r3, r2, r3
341891fc:	60fb      	str	r3, [r7, #12]
            break;
341891fe:	e012      	b.n	34189226 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189200:	f7fe fe82 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34189204:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189206:	68fa      	ldr	r2, [r7, #12]
34189208:	68bb      	ldr	r3, [r7, #8]
3418920a:	fbb2 f3f3 	udiv	r3, r2, r3
3418920e:	60fb      	str	r3, [r7, #12]
            break;
34189210:	e009      	b.n	34189226 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189212:	f7fe febf 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34189216:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34189218:	68fa      	ldr	r2, [r7, #12]
3418921a:	68bb      	ldr	r3, [r7, #8]
3418921c:	fbb2 f3f3 	udiv	r3, r2, r3
34189220:	60fb      	str	r3, [r7, #12]
            break;
34189222:	e000      	b.n	34189226 <RCCEx_GetI2CCLKFreq+0x29e>
            break;
34189224:	bf00      	nop
        }
      }
      break;
34189226:	e049      	b.n	341892bc <RCCEx_GetI2CCLKFreq+0x334>
34189228:	07050c0c 	.word	0x07050c0c
3418922c:	0705080c 	.word	0x0705080c
34189230:	0705040c 	.word	0x0705040c
34189234:	0705000c 	.word	0x0705000c
34189238:	07040c0c 	.word	0x07040c0c
3418923c:	0704080c 	.word	0x0704080c
34189240:	0704040c 	.word	0x0704040c
34189244:	0704000c 	.word	0x0704000c
34189248:	07030c0c 	.word	0x07030c0c
3418924c:	0703080c 	.word	0x0703080c
34189250:	0703040c 	.word	0x0703040c
34189254:	0703000c 	.word	0x0703000c
34189258:	07020c0c 	.word	0x07020c0c
3418925c:	0702080c 	.word	0x0702080c
34189260:	0702040c 	.word	0x0702040c
34189264:	0702000c 	.word	0x0702000c
34189268:	07010c0c 	.word	0x07010c0c
3418926c:	0701080c 	.word	0x0701080c
34189270:	0701040c 	.word	0x0701040c
34189274:	0701000c 	.word	0x0701000c
34189278:	07000c0c 	.word	0x07000c0c
3418927c:	0700080c 	.word	0x0700080c
34189280:	0700000c 	.word	0x0700000c
34189284:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34189288:	f7fa fb3a 	bl	34183900 <LL_RCC_HSI_IsReady>
3418928c:	4603      	mov	r3, r0
3418928e:	2b00      	cmp	r3, #0
34189290:	d016      	beq.n	341892c0 <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189292:	f7fa fb47 	bl	34183924 <LL_RCC_HSI_GetDivider>
34189296:	4603      	mov	r3, r0
34189298:	09db      	lsrs	r3, r3, #7
3418929a:	4a0d      	ldr	r2, [pc, #52]	@ (341892d0 <RCCEx_GetI2CCLKFreq+0x348>)
3418929c:	fa22 f303 	lsr.w	r3, r2, r3
341892a0:	60fb      	str	r3, [r7, #12]
      }
      break;
341892a2:	e00d      	b.n	341892c0 <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
341892a4:	f7fa fb4c 	bl	34183940 <LL_RCC_MSI_IsReady>
341892a8:	4603      	mov	r3, r0
341892aa:	2b00      	cmp	r3, #0
341892ac:	d00a      	beq.n	341892c4 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
341892ae:	4b09      	ldr	r3, [pc, #36]	@ (341892d4 <RCCEx_GetI2CCLKFreq+0x34c>)
341892b0:	60fb      	str	r3, [r7, #12]
      }
      break;
341892b2:	e007      	b.n	341892c4 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
341892b4:	bf00      	nop
341892b6:	e006      	b.n	341892c6 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
341892b8:	bf00      	nop
341892ba:	e004      	b.n	341892c6 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
341892bc:	bf00      	nop
341892be:	e002      	b.n	341892c6 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
341892c0:	bf00      	nop
341892c2:	e000      	b.n	341892c6 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
341892c4:	bf00      	nop
  }

  return i2c_frequency;
341892c6:	68fb      	ldr	r3, [r7, #12]
}
341892c8:	4618      	mov	r0, r3
341892ca:	3710      	adds	r7, #16
341892cc:	46bd      	mov	sp, r7
341892ce:	bd80      	pop	{r7, pc}
341892d0:	03d09000 	.word	0x03d09000
341892d4:	003d0900 	.word	0x003d0900

341892d8 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
341892d8:	b580      	push	{r7, lr}
341892da:	b084      	sub	sp, #16
341892dc:	af00      	add	r7, sp, #0
341892de:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
341892e0:	2300      	movs	r3, #0
341892e2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
341892e4:	6878      	ldr	r0, [r7, #4]
341892e6:	f7fa fe5d 	bl	34183fa4 <LL_RCC_GetI3CClockSource>
341892ea:	4603      	mov	r3, r0
341892ec:	4a86      	ldr	r2, [pc, #536]	@ (34189508 <RCCEx_GetI3CCLKFreq+0x230>)
341892ee:	4293      	cmp	r3, r2
341892f0:	f000 80e6 	beq.w	341894c0 <RCCEx_GetI3CCLKFreq+0x1e8>
341892f4:	4a84      	ldr	r2, [pc, #528]	@ (34189508 <RCCEx_GetI3CCLKFreq+0x230>)
341892f6:	4293      	cmp	r3, r2
341892f8:	f200 80f8 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
341892fc:	4a83      	ldr	r2, [pc, #524]	@ (3418950c <RCCEx_GetI3CCLKFreq+0x234>)
341892fe:	4293      	cmp	r3, r2
34189300:	f000 80de 	beq.w	341894c0 <RCCEx_GetI3CCLKFreq+0x1e8>
34189304:	4a81      	ldr	r2, [pc, #516]	@ (3418950c <RCCEx_GetI3CCLKFreq+0x234>)
34189306:	4293      	cmp	r3, r2
34189308:	f200 80f0 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
3418930c:	4a80      	ldr	r2, [pc, #512]	@ (34189510 <RCCEx_GetI3CCLKFreq+0x238>)
3418930e:	4293      	cmp	r3, r2
34189310:	f000 80e4 	beq.w	341894dc <RCCEx_GetI3CCLKFreq+0x204>
34189314:	4a7e      	ldr	r2, [pc, #504]	@ (34189510 <RCCEx_GetI3CCLKFreq+0x238>)
34189316:	4293      	cmp	r3, r2
34189318:	f200 80e8 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
3418931c:	4a7d      	ldr	r2, [pc, #500]	@ (34189514 <RCCEx_GetI3CCLKFreq+0x23c>)
3418931e:	4293      	cmp	r3, r2
34189320:	f000 80dc 	beq.w	341894dc <RCCEx_GetI3CCLKFreq+0x204>
34189324:	4a7b      	ldr	r2, [pc, #492]	@ (34189514 <RCCEx_GetI3CCLKFreq+0x23c>)
34189326:	4293      	cmp	r3, r2
34189328:	f200 80e0 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
3418932c:	4a7a      	ldr	r2, [pc, #488]	@ (34189518 <RCCEx_GetI3CCLKFreq+0x240>)
3418932e:	4293      	cmp	r3, r2
34189330:	f000 8083 	beq.w	3418943a <RCCEx_GetI3CCLKFreq+0x162>
34189334:	4a78      	ldr	r2, [pc, #480]	@ (34189518 <RCCEx_GetI3CCLKFreq+0x240>)
34189336:	4293      	cmp	r3, r2
34189338:	f200 80d8 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
3418933c:	4a77      	ldr	r2, [pc, #476]	@ (3418951c <RCCEx_GetI3CCLKFreq+0x244>)
3418933e:	4293      	cmp	r3, r2
34189340:	d07b      	beq.n	3418943a <RCCEx_GetI3CCLKFreq+0x162>
34189342:	4a76      	ldr	r2, [pc, #472]	@ (3418951c <RCCEx_GetI3CCLKFreq+0x244>)
34189344:	4293      	cmp	r3, r2
34189346:	f200 80d1 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
3418934a:	4a75      	ldr	r2, [pc, #468]	@ (34189520 <RCCEx_GetI3CCLKFreq+0x248>)
3418934c:	4293      	cmp	r3, r2
3418934e:	d030      	beq.n	341893b2 <RCCEx_GetI3CCLKFreq+0xda>
34189350:	4a73      	ldr	r2, [pc, #460]	@ (34189520 <RCCEx_GetI3CCLKFreq+0x248>)
34189352:	4293      	cmp	r3, r2
34189354:	f200 80ca 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
34189358:	4a72      	ldr	r2, [pc, #456]	@ (34189524 <RCCEx_GetI3CCLKFreq+0x24c>)
3418935a:	4293      	cmp	r3, r2
3418935c:	d029      	beq.n	341893b2 <RCCEx_GetI3CCLKFreq+0xda>
3418935e:	4a71      	ldr	r2, [pc, #452]	@ (34189524 <RCCEx_GetI3CCLKFreq+0x24c>)
34189360:	4293      	cmp	r3, r2
34189362:	f200 80c3 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
34189366:	4a70      	ldr	r2, [pc, #448]	@ (34189528 <RCCEx_GetI3CCLKFreq+0x250>)
34189368:	4293      	cmp	r3, r2
3418936a:	d01d      	beq.n	341893a8 <RCCEx_GetI3CCLKFreq+0xd0>
3418936c:	4a6e      	ldr	r2, [pc, #440]	@ (34189528 <RCCEx_GetI3CCLKFreq+0x250>)
3418936e:	4293      	cmp	r3, r2
34189370:	f200 80bc 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
34189374:	4a6d      	ldr	r2, [pc, #436]	@ (3418952c <RCCEx_GetI3CCLKFreq+0x254>)
34189376:	4293      	cmp	r3, r2
34189378:	d016      	beq.n	341893a8 <RCCEx_GetI3CCLKFreq+0xd0>
3418937a:	4a6c      	ldr	r2, [pc, #432]	@ (3418952c <RCCEx_GetI3CCLKFreq+0x254>)
3418937c:	4293      	cmp	r3, r2
3418937e:	f200 80b5 	bhi.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
34189382:	4a6b      	ldr	r2, [pc, #428]	@ (34189530 <RCCEx_GetI3CCLKFreq+0x258>)
34189384:	4293      	cmp	r3, r2
34189386:	d003      	beq.n	34189390 <RCCEx_GetI3CCLKFreq+0xb8>
34189388:	4a6a      	ldr	r2, [pc, #424]	@ (34189534 <RCCEx_GetI3CCLKFreq+0x25c>)
3418938a:	4293      	cmp	r3, r2
3418938c:	f040 80ae 	bne.w	341894ec <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189390:	f7f9 feb6 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34189394:	4603      	mov	r3, r0
34189396:	4618      	mov	r0, r3
34189398:	f7fe fe42 	bl	34188020 <RCCEx_GetHCLKFreq>
3418939c:	4603      	mov	r3, r0
3418939e:	4618      	mov	r0, r3
341893a0:	f7fe fe4f 	bl	34188042 <RCCEx_GetPCLK1Freq>
341893a4:	60f8      	str	r0, [r7, #12]
      break;
341893a6:	e0aa      	b.n	341894fe <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341893a8:	2007      	movs	r0, #7
341893aa:	f7ff f925 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
341893ae:	60f8      	str	r0, [r7, #12]
      break;
341893b0:	e0a5      	b.n	341894fe <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
341893b2:	f7fb fb09 	bl	341849c8 <LL_RCC_IC10_IsEnabled>
341893b6:	4603      	mov	r3, r0
341893b8:	2b00      	cmp	r3, #0
341893ba:	f000 8099 	beq.w	341894f0 <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
341893be:	f7fb fb25 	bl	34184a0c <LL_RCC_IC10_GetDivider>
341893c2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
341893c4:	f7fb fb14 	bl	341849f0 <LL_RCC_IC10_GetSource>
341893c8:	4603      	mov	r3, r0
341893ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341893ce:	d029      	beq.n	34189424 <RCCEx_GetI3CCLKFreq+0x14c>
341893d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341893d4:	d82f      	bhi.n	34189436 <RCCEx_GetI3CCLKFreq+0x15e>
341893d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341893da:	d01a      	beq.n	34189412 <RCCEx_GetI3CCLKFreq+0x13a>
341893dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341893e0:	d829      	bhi.n	34189436 <RCCEx_GetI3CCLKFreq+0x15e>
341893e2:	2b00      	cmp	r3, #0
341893e4:	d003      	beq.n	341893ee <RCCEx_GetI3CCLKFreq+0x116>
341893e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341893ea:	d009      	beq.n	34189400 <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
341893ec:	e023      	b.n	34189436 <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341893ee:	f7fe fcff 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341893f2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
341893f4:	68fa      	ldr	r2, [r7, #12]
341893f6:	68bb      	ldr	r3, [r7, #8]
341893f8:	fbb2 f3f3 	udiv	r3, r2, r3
341893fc:	60fb      	str	r3, [r7, #12]
            break;
341893fe:	e01b      	b.n	34189438 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189400:	f7fe fd3c 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34189404:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189406:	68fa      	ldr	r2, [r7, #12]
34189408:	68bb      	ldr	r3, [r7, #8]
3418940a:	fbb2 f3f3 	udiv	r3, r2, r3
3418940e:	60fb      	str	r3, [r7, #12]
            break;
34189410:	e012      	b.n	34189438 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189412:	f7fe fd79 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34189416:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34189418:	68fa      	ldr	r2, [r7, #12]
3418941a:	68bb      	ldr	r3, [r7, #8]
3418941c:	fbb2 f3f3 	udiv	r3, r2, r3
34189420:	60fb      	str	r3, [r7, #12]
            break;
34189422:	e009      	b.n	34189438 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189424:	f7fe fdb6 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34189428:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418942a:	68fa      	ldr	r2, [r7, #12]
3418942c:	68bb      	ldr	r3, [r7, #8]
3418942e:	fbb2 f3f3 	udiv	r3, r2, r3
34189432:	60fb      	str	r3, [r7, #12]
            break;
34189434:	e000      	b.n	34189438 <RCCEx_GetI3CCLKFreq+0x160>
            break;
34189436:	bf00      	nop
        }
      }
      break;
34189438:	e05a      	b.n	341894f0 <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418943a:	f7fb fbc5 	bl	34184bc8 <LL_RCC_IC15_IsEnabled>
3418943e:	4603      	mov	r3, r0
34189440:	2b00      	cmp	r3, #0
34189442:	d057      	beq.n	341894f4 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34189444:	f7fb fbe2 	bl	34184c0c <LL_RCC_IC15_GetDivider>
34189448:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418944a:	f7fb fbd1 	bl	34184bf0 <LL_RCC_IC15_GetSource>
3418944e:	4603      	mov	r3, r0
34189450:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189454:	d029      	beq.n	341894aa <RCCEx_GetI3CCLKFreq+0x1d2>
34189456:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418945a:	d82f      	bhi.n	341894bc <RCCEx_GetI3CCLKFreq+0x1e4>
3418945c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189460:	d01a      	beq.n	34189498 <RCCEx_GetI3CCLKFreq+0x1c0>
34189462:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189466:	d829      	bhi.n	341894bc <RCCEx_GetI3CCLKFreq+0x1e4>
34189468:	2b00      	cmp	r3, #0
3418946a:	d003      	beq.n	34189474 <RCCEx_GetI3CCLKFreq+0x19c>
3418946c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189470:	d009      	beq.n	34189486 <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34189472:	e023      	b.n	341894bc <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189474:	f7fe fcbc 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34189478:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418947a:	68fa      	ldr	r2, [r7, #12]
3418947c:	68bb      	ldr	r3, [r7, #8]
3418947e:	fbb2 f3f3 	udiv	r3, r2, r3
34189482:	60fb      	str	r3, [r7, #12]
            break;
34189484:	e01b      	b.n	341894be <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189486:	f7fe fcf9 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418948a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418948c:	68fa      	ldr	r2, [r7, #12]
3418948e:	68bb      	ldr	r3, [r7, #8]
34189490:	fbb2 f3f3 	udiv	r3, r2, r3
34189494:	60fb      	str	r3, [r7, #12]
            break;
34189496:	e012      	b.n	341894be <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189498:	f7fe fd36 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418949c:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
3418949e:	68fa      	ldr	r2, [r7, #12]
341894a0:	68bb      	ldr	r3, [r7, #8]
341894a2:	fbb2 f3f3 	udiv	r3, r2, r3
341894a6:	60fb      	str	r3, [r7, #12]
            break;
341894a8:	e009      	b.n	341894be <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341894aa:	f7fe fd73 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
341894ae:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
341894b0:	68fa      	ldr	r2, [r7, #12]
341894b2:	68bb      	ldr	r3, [r7, #8]
341894b4:	fbb2 f3f3 	udiv	r3, r2, r3
341894b8:	60fb      	str	r3, [r7, #12]
            break;
341894ba:	e000      	b.n	341894be <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
341894bc:	bf00      	nop
        }
      }
      break;
341894be:	e019      	b.n	341894f4 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
341894c0:	f7fa fa1e 	bl	34183900 <LL_RCC_HSI_IsReady>
341894c4:	4603      	mov	r3, r0
341894c6:	2b00      	cmp	r3, #0
341894c8:	d016      	beq.n	341894f8 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341894ca:	f7fa fa2b 	bl	34183924 <LL_RCC_HSI_GetDivider>
341894ce:	4603      	mov	r3, r0
341894d0:	09db      	lsrs	r3, r3, #7
341894d2:	4a19      	ldr	r2, [pc, #100]	@ (34189538 <RCCEx_GetI3CCLKFreq+0x260>)
341894d4:	fa22 f303 	lsr.w	r3, r2, r3
341894d8:	60fb      	str	r3, [r7, #12]
      }
      break;
341894da:	e00d      	b.n	341894f8 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
341894dc:	f7fa fa30 	bl	34183940 <LL_RCC_MSI_IsReady>
341894e0:	4603      	mov	r3, r0
341894e2:	2b00      	cmp	r3, #0
341894e4:	d00a      	beq.n	341894fc <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
341894e6:	4b15      	ldr	r3, [pc, #84]	@ (3418953c <RCCEx_GetI3CCLKFreq+0x264>)
341894e8:	60fb      	str	r3, [r7, #12]
      }
      break;
341894ea:	e007      	b.n	341894fc <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
341894ec:	bf00      	nop
341894ee:	e006      	b.n	341894fe <RCCEx_GetI3CCLKFreq+0x226>
      break;
341894f0:	bf00      	nop
341894f2:	e004      	b.n	341894fe <RCCEx_GetI3CCLKFreq+0x226>
      break;
341894f4:	bf00      	nop
341894f6:	e002      	b.n	341894fe <RCCEx_GetI3CCLKFreq+0x226>
      break;
341894f8:	bf00      	nop
341894fa:	e000      	b.n	341894fe <RCCEx_GetI3CCLKFreq+0x226>
      break;
341894fc:	bf00      	nop
  }

  return i3c_frequency;
341894fe:	68fb      	ldr	r3, [r7, #12]
}
34189500:	4618      	mov	r0, r3
34189502:	3710      	adds	r7, #16
34189504:	46bd      	mov	sp, r7
34189506:	bd80      	pop	{r7, pc}
34189508:	0705140c 	.word	0x0705140c
3418950c:	0705100c 	.word	0x0705100c
34189510:	0704140c 	.word	0x0704140c
34189514:	0704100c 	.word	0x0704100c
34189518:	0703140c 	.word	0x0703140c
3418951c:	0703100c 	.word	0x0703100c
34189520:	0702140c 	.word	0x0702140c
34189524:	0702100c 	.word	0x0702100c
34189528:	0701140c 	.word	0x0701140c
3418952c:	0701100c 	.word	0x0701100c
34189530:	0700100c 	.word	0x0700100c
34189534:	0700140c 	.word	0x0700140c
34189538:	03d09000 	.word	0x03d09000
3418953c:	003d0900 	.word	0x003d0900

34189540 <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
34189540:	b590      	push	{r4, r7, lr}
34189542:	b085      	sub	sp, #20
34189544:	af00      	add	r7, sp, #0
34189546:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34189548:	2300      	movs	r3, #0
3418954a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3418954c:	6878      	ldr	r0, [r7, #4]
3418954e:	f7fa fd35 	bl	34183fbc <LL_RCC_GetLPTIMClockSource>
34189552:	4603      	mov	r3, r0
34189554:	4aa1      	ldr	r2, [pc, #644]	@ (341897dc <RCCEx_GetLPTIMCLKFreq+0x29c>)
34189556:	4293      	cmp	r3, r2
34189558:	f000 8185 	beq.w	34189866 <RCCEx_GetLPTIMCLKFreq+0x326>
3418955c:	4a9f      	ldr	r2, [pc, #636]	@ (341897dc <RCCEx_GetLPTIMCLKFreq+0x29c>)
3418955e:	4293      	cmp	r3, r2
34189560:	f200 818b 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189564:	4a9e      	ldr	r2, [pc, #632]	@ (341897e0 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34189566:	4293      	cmp	r3, r2
34189568:	f000 817d 	beq.w	34189866 <RCCEx_GetLPTIMCLKFreq+0x326>
3418956c:	4a9c      	ldr	r2, [pc, #624]	@ (341897e0 <RCCEx_GetLPTIMCLKFreq+0x2a0>)
3418956e:	4293      	cmp	r3, r2
34189570:	f200 8183 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189574:	4a9b      	ldr	r2, [pc, #620]	@ (341897e4 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34189576:	4293      	cmp	r3, r2
34189578:	f000 8175 	beq.w	34189866 <RCCEx_GetLPTIMCLKFreq+0x326>
3418957c:	4a99      	ldr	r2, [pc, #612]	@ (341897e4 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
3418957e:	4293      	cmp	r3, r2
34189580:	f200 817b 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189584:	4a98      	ldr	r2, [pc, #608]	@ (341897e8 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34189586:	4293      	cmp	r3, r2
34189588:	f000 816d 	beq.w	34189866 <RCCEx_GetLPTIMCLKFreq+0x326>
3418958c:	4a96      	ldr	r2, [pc, #600]	@ (341897e8 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
3418958e:	4293      	cmp	r3, r2
34189590:	f200 8173 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189594:	4a95      	ldr	r2, [pc, #596]	@ (341897ec <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34189596:	4293      	cmp	r3, r2
34189598:	f000 8165 	beq.w	34189866 <RCCEx_GetLPTIMCLKFreq+0x326>
3418959c:	4a93      	ldr	r2, [pc, #588]	@ (341897ec <RCCEx_GetLPTIMCLKFreq+0x2ac>)
3418959e:	4293      	cmp	r3, r2
341895a0:	f200 816b 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341895a4:	4a92      	ldr	r2, [pc, #584]	@ (341897f0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
341895a6:	4293      	cmp	r3, r2
341895a8:	f000 8154 	beq.w	34189854 <RCCEx_GetLPTIMCLKFreq+0x314>
341895ac:	4a90      	ldr	r2, [pc, #576]	@ (341897f0 <RCCEx_GetLPTIMCLKFreq+0x2b0>)
341895ae:	4293      	cmp	r3, r2
341895b0:	f200 8163 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341895b4:	4a8f      	ldr	r2, [pc, #572]	@ (341897f4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
341895b6:	4293      	cmp	r3, r2
341895b8:	f000 814c 	beq.w	34189854 <RCCEx_GetLPTIMCLKFreq+0x314>
341895bc:	4a8d      	ldr	r2, [pc, #564]	@ (341897f4 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
341895be:	4293      	cmp	r3, r2
341895c0:	f200 815b 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341895c4:	4a8c      	ldr	r2, [pc, #560]	@ (341897f8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
341895c6:	4293      	cmp	r3, r2
341895c8:	f000 8144 	beq.w	34189854 <RCCEx_GetLPTIMCLKFreq+0x314>
341895cc:	4a8a      	ldr	r2, [pc, #552]	@ (341897f8 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
341895ce:	4293      	cmp	r3, r2
341895d0:	f200 8153 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341895d4:	4a89      	ldr	r2, [pc, #548]	@ (341897fc <RCCEx_GetLPTIMCLKFreq+0x2bc>)
341895d6:	4293      	cmp	r3, r2
341895d8:	f000 813c 	beq.w	34189854 <RCCEx_GetLPTIMCLKFreq+0x314>
341895dc:	4a87      	ldr	r2, [pc, #540]	@ (341897fc <RCCEx_GetLPTIMCLKFreq+0x2bc>)
341895de:	4293      	cmp	r3, r2
341895e0:	f200 814b 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341895e4:	4a86      	ldr	r2, [pc, #536]	@ (34189800 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
341895e6:	4293      	cmp	r3, r2
341895e8:	f000 8134 	beq.w	34189854 <RCCEx_GetLPTIMCLKFreq+0x314>
341895ec:	4a84      	ldr	r2, [pc, #528]	@ (34189800 <RCCEx_GetLPTIMCLKFreq+0x2c0>)
341895ee:	4293      	cmp	r3, r2
341895f0:	f200 8143 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341895f4:	4a83      	ldr	r2, [pc, #524]	@ (34189804 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
341895f6:	4293      	cmp	r3, r2
341895f8:	f000 80e7 	beq.w	341897ca <RCCEx_GetLPTIMCLKFreq+0x28a>
341895fc:	4a81      	ldr	r2, [pc, #516]	@ (34189804 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
341895fe:	4293      	cmp	r3, r2
34189600:	f200 813b 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189604:	4a80      	ldr	r2, [pc, #512]	@ (34189808 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34189606:	4293      	cmp	r3, r2
34189608:	f000 80df 	beq.w	341897ca <RCCEx_GetLPTIMCLKFreq+0x28a>
3418960c:	4a7e      	ldr	r2, [pc, #504]	@ (34189808 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
3418960e:	4293      	cmp	r3, r2
34189610:	f200 8133 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189614:	4a7d      	ldr	r2, [pc, #500]	@ (3418980c <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34189616:	4293      	cmp	r3, r2
34189618:	f000 80d7 	beq.w	341897ca <RCCEx_GetLPTIMCLKFreq+0x28a>
3418961c:	4a7b      	ldr	r2, [pc, #492]	@ (3418980c <RCCEx_GetLPTIMCLKFreq+0x2cc>)
3418961e:	4293      	cmp	r3, r2
34189620:	f200 812b 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189624:	4a7a      	ldr	r2, [pc, #488]	@ (34189810 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34189626:	4293      	cmp	r3, r2
34189628:	f000 80cf 	beq.w	341897ca <RCCEx_GetLPTIMCLKFreq+0x28a>
3418962c:	4a78      	ldr	r2, [pc, #480]	@ (34189810 <RCCEx_GetLPTIMCLKFreq+0x2d0>)
3418962e:	4293      	cmp	r3, r2
34189630:	f200 8123 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189634:	4a77      	ldr	r2, [pc, #476]	@ (34189814 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34189636:	4293      	cmp	r3, r2
34189638:	f000 80c7 	beq.w	341897ca <RCCEx_GetLPTIMCLKFreq+0x28a>
3418963c:	4a75      	ldr	r2, [pc, #468]	@ (34189814 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
3418963e:	4293      	cmp	r3, r2
34189640:	f200 811b 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189644:	4a74      	ldr	r2, [pc, #464]	@ (34189818 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34189646:	4293      	cmp	r3, r2
34189648:	d07b      	beq.n	34189742 <RCCEx_GetLPTIMCLKFreq+0x202>
3418964a:	4a73      	ldr	r2, [pc, #460]	@ (34189818 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
3418964c:	4293      	cmp	r3, r2
3418964e:	f200 8114 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189652:	4a72      	ldr	r2, [pc, #456]	@ (3418981c <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34189654:	4293      	cmp	r3, r2
34189656:	d074      	beq.n	34189742 <RCCEx_GetLPTIMCLKFreq+0x202>
34189658:	4a70      	ldr	r2, [pc, #448]	@ (3418981c <RCCEx_GetLPTIMCLKFreq+0x2dc>)
3418965a:	4293      	cmp	r3, r2
3418965c:	f200 810d 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189660:	4a6f      	ldr	r2, [pc, #444]	@ (34189820 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34189662:	4293      	cmp	r3, r2
34189664:	d06d      	beq.n	34189742 <RCCEx_GetLPTIMCLKFreq+0x202>
34189666:	4a6e      	ldr	r2, [pc, #440]	@ (34189820 <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34189668:	4293      	cmp	r3, r2
3418966a:	f200 8106 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418966e:	4a6d      	ldr	r2, [pc, #436]	@ (34189824 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34189670:	4293      	cmp	r3, r2
34189672:	d066      	beq.n	34189742 <RCCEx_GetLPTIMCLKFreq+0x202>
34189674:	4a6b      	ldr	r2, [pc, #428]	@ (34189824 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34189676:	4293      	cmp	r3, r2
34189678:	f200 80ff 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418967c:	4a6a      	ldr	r2, [pc, #424]	@ (34189828 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
3418967e:	4293      	cmp	r3, r2
34189680:	d05f      	beq.n	34189742 <RCCEx_GetLPTIMCLKFreq+0x202>
34189682:	4a69      	ldr	r2, [pc, #420]	@ (34189828 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34189684:	4293      	cmp	r3, r2
34189686:	f200 80f8 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
3418968a:	4a68      	ldr	r2, [pc, #416]	@ (3418982c <RCCEx_GetLPTIMCLKFreq+0x2ec>)
3418968c:	4293      	cmp	r3, r2
3418968e:	d053      	beq.n	34189738 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34189690:	4a66      	ldr	r2, [pc, #408]	@ (3418982c <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34189692:	4293      	cmp	r3, r2
34189694:	f200 80f1 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
34189698:	4a65      	ldr	r2, [pc, #404]	@ (34189830 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
3418969a:	4293      	cmp	r3, r2
3418969c:	d04c      	beq.n	34189738 <RCCEx_GetLPTIMCLKFreq+0x1f8>
3418969e:	4a64      	ldr	r2, [pc, #400]	@ (34189830 <RCCEx_GetLPTIMCLKFreq+0x2f0>)
341896a0:	4293      	cmp	r3, r2
341896a2:	f200 80ea 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341896a6:	4a63      	ldr	r2, [pc, #396]	@ (34189834 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
341896a8:	4293      	cmp	r3, r2
341896aa:	d045      	beq.n	34189738 <RCCEx_GetLPTIMCLKFreq+0x1f8>
341896ac:	4a61      	ldr	r2, [pc, #388]	@ (34189834 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
341896ae:	4293      	cmp	r3, r2
341896b0:	f200 80e3 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341896b4:	4a60      	ldr	r2, [pc, #384]	@ (34189838 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
341896b6:	4293      	cmp	r3, r2
341896b8:	d03e      	beq.n	34189738 <RCCEx_GetLPTIMCLKFreq+0x1f8>
341896ba:	4a5f      	ldr	r2, [pc, #380]	@ (34189838 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
341896bc:	4293      	cmp	r3, r2
341896be:	f200 80dc 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341896c2:	4a5e      	ldr	r2, [pc, #376]	@ (3418983c <RCCEx_GetLPTIMCLKFreq+0x2fc>)
341896c4:	4293      	cmp	r3, r2
341896c6:	d037      	beq.n	34189738 <RCCEx_GetLPTIMCLKFreq+0x1f8>
341896c8:	4a5c      	ldr	r2, [pc, #368]	@ (3418983c <RCCEx_GetLPTIMCLKFreq+0x2fc>)
341896ca:	4293      	cmp	r3, r2
341896cc:	f200 80d5 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341896d0:	4a5b      	ldr	r2, [pc, #364]	@ (34189840 <RCCEx_GetLPTIMCLKFreq+0x300>)
341896d2:	4293      	cmp	r3, r2
341896d4:	d024      	beq.n	34189720 <RCCEx_GetLPTIMCLKFreq+0x1e0>
341896d6:	4a5a      	ldr	r2, [pc, #360]	@ (34189840 <RCCEx_GetLPTIMCLKFreq+0x300>)
341896d8:	4293      	cmp	r3, r2
341896da:	f200 80ce 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341896de:	4a59      	ldr	r2, [pc, #356]	@ (34189844 <RCCEx_GetLPTIMCLKFreq+0x304>)
341896e0:	4293      	cmp	r3, r2
341896e2:	d01d      	beq.n	34189720 <RCCEx_GetLPTIMCLKFreq+0x1e0>
341896e4:	4a57      	ldr	r2, [pc, #348]	@ (34189844 <RCCEx_GetLPTIMCLKFreq+0x304>)
341896e6:	4293      	cmp	r3, r2
341896e8:	f200 80c7 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341896ec:	4a56      	ldr	r2, [pc, #344]	@ (34189848 <RCCEx_GetLPTIMCLKFreq+0x308>)
341896ee:	4293      	cmp	r3, r2
341896f0:	d016      	beq.n	34189720 <RCCEx_GetLPTIMCLKFreq+0x1e0>
341896f2:	4a55      	ldr	r2, [pc, #340]	@ (34189848 <RCCEx_GetLPTIMCLKFreq+0x308>)
341896f4:	4293      	cmp	r3, r2
341896f6:	f200 80c0 	bhi.w	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
341896fa:	4a54      	ldr	r2, [pc, #336]	@ (3418984c <RCCEx_GetLPTIMCLKFreq+0x30c>)
341896fc:	4293      	cmp	r3, r2
341896fe:	d003      	beq.n	34189708 <RCCEx_GetLPTIMCLKFreq+0x1c8>
34189700:	4a53      	ldr	r2, [pc, #332]	@ (34189850 <RCCEx_GetLPTIMCLKFreq+0x310>)
34189702:	4293      	cmp	r3, r2
34189704:	d00c      	beq.n	34189720 <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34189706:	e0b8      	b.n	3418987a <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189708:	f7f9 fcfa 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418970c:	4603      	mov	r3, r0
3418970e:	4618      	mov	r0, r3
34189710:	f7fe fc86 	bl	34188020 <RCCEx_GetHCLKFreq>
34189714:	4603      	mov	r3, r0
34189716:	4618      	mov	r0, r3
34189718:	f7fe fc93 	bl	34188042 <RCCEx_GetPCLK1Freq>
3418971c:	60f8      	str	r0, [r7, #12]
      break;
3418971e:	e0b3      	b.n	34189888 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189720:	f7f9 fcee 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34189724:	4603      	mov	r3, r0
34189726:	4618      	mov	r0, r3
34189728:	f7fe fc7a 	bl	34188020 <RCCEx_GetHCLKFreq>
3418972c:	4603      	mov	r3, r0
3418972e:	4618      	mov	r0, r3
34189730:	f7fe fca8 	bl	34188084 <RCCEx_GetPCLK4Freq>
34189734:	60f8      	str	r0, [r7, #12]
      break;
34189736:	e0a7      	b.n	34189888 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189738:	2007      	movs	r0, #7
3418973a:	f7fe ff5d 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418973e:	60f8      	str	r0, [r7, #12]
      break;
34189740:	e0a2      	b.n	34189888 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34189742:	f7fb fa41 	bl	34184bc8 <LL_RCC_IC15_IsEnabled>
34189746:	4603      	mov	r3, r0
34189748:	2b00      	cmp	r3, #0
3418974a:	f000 8098 	beq.w	3418987e <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
3418974e:	f7fb fa5d 	bl	34184c0c <LL_RCC_IC15_GetDivider>
34189752:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34189754:	f7fb fa4c 	bl	34184bf0 <LL_RCC_IC15_GetSource>
34189758:	4603      	mov	r3, r0
3418975a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418975e:	d029      	beq.n	341897b4 <RCCEx_GetLPTIMCLKFreq+0x274>
34189760:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189764:	d82f      	bhi.n	341897c6 <RCCEx_GetLPTIMCLKFreq+0x286>
34189766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418976a:	d01a      	beq.n	341897a2 <RCCEx_GetLPTIMCLKFreq+0x262>
3418976c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189770:	d829      	bhi.n	341897c6 <RCCEx_GetLPTIMCLKFreq+0x286>
34189772:	2b00      	cmp	r3, #0
34189774:	d003      	beq.n	3418977e <RCCEx_GetLPTIMCLKFreq+0x23e>
34189776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418977a:	d009      	beq.n	34189790 <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
3418977c:	e023      	b.n	341897c6 <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418977e:	f7fe fb37 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34189782:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34189784:	68fa      	ldr	r2, [r7, #12]
34189786:	68bb      	ldr	r3, [r7, #8]
34189788:	fbb2 f3f3 	udiv	r3, r2, r3
3418978c:	60fb      	str	r3, [r7, #12]
            break;
3418978e:	e01b      	b.n	341897c8 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189790:	f7fe fb74 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34189794:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34189796:	68fa      	ldr	r2, [r7, #12]
34189798:	68bb      	ldr	r3, [r7, #8]
3418979a:	fbb2 f3f3 	udiv	r3, r2, r3
3418979e:	60fb      	str	r3, [r7, #12]
            break;
341897a0:	e012      	b.n	341897c8 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341897a2:	f7fe fbb1 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
341897a6:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
341897a8:	68fa      	ldr	r2, [r7, #12]
341897aa:	68bb      	ldr	r3, [r7, #8]
341897ac:	fbb2 f3f3 	udiv	r3, r2, r3
341897b0:	60fb      	str	r3, [r7, #12]
            break;
341897b2:	e009      	b.n	341897c8 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341897b4:	f7fe fbee 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
341897b8:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
341897ba:	68fa      	ldr	r2, [r7, #12]
341897bc:	68bb      	ldr	r3, [r7, #8]
341897be:	fbb2 f3f3 	udiv	r3, r2, r3
341897c2:	60fb      	str	r3, [r7, #12]
            break;
341897c4:	e000      	b.n	341897c8 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
341897c6:	bf00      	nop
      break;
341897c8:	e059      	b.n	3418987e <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
341897ca:	f7fa f8d9 	bl	34183980 <LL_RCC_LSE_IsReady>
341897ce:	4603      	mov	r3, r0
341897d0:	2b00      	cmp	r3, #0
341897d2:	d056      	beq.n	34189882 <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
341897d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
341897d8:	60fb      	str	r3, [r7, #12]
      break;
341897da:	e052      	b.n	34189882 <RCCEx_GetLPTIMCLKFreq+0x342>
341897dc:	0705182c 	.word	0x0705182c
341897e0:	0705142c 	.word	0x0705142c
341897e4:	0705102c 	.word	0x0705102c
341897e8:	07050c2c 	.word	0x07050c2c
341897ec:	0705082c 	.word	0x0705082c
341897f0:	0704182c 	.word	0x0704182c
341897f4:	0704142c 	.word	0x0704142c
341897f8:	0704102c 	.word	0x0704102c
341897fc:	07040c2c 	.word	0x07040c2c
34189800:	0704082c 	.word	0x0704082c
34189804:	0703182c 	.word	0x0703182c
34189808:	0703142c 	.word	0x0703142c
3418980c:	0703102c 	.word	0x0703102c
34189810:	07030c2c 	.word	0x07030c2c
34189814:	0703082c 	.word	0x0703082c
34189818:	0702182c 	.word	0x0702182c
3418981c:	0702142c 	.word	0x0702142c
34189820:	0702102c 	.word	0x0702102c
34189824:	07020c2c 	.word	0x07020c2c
34189828:	0702082c 	.word	0x0702082c
3418982c:	0701182c 	.word	0x0701182c
34189830:	0701142c 	.word	0x0701142c
34189834:	0701102c 	.word	0x0701102c
34189838:	07010c2c 	.word	0x07010c2c
3418983c:	0701082c 	.word	0x0701082c
34189840:	0700182c 	.word	0x0700182c
34189844:	0700142c 	.word	0x0700142c
34189848:	0700102c 	.word	0x0700102c
3418984c:	0700082c 	.word	0x0700082c
34189850:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
34189854:	f7fa f8a6 	bl	341839a4 <LL_RCC_LSI_IsReady>
34189858:	4603      	mov	r3, r0
3418985a:	2b00      	cmp	r3, #0
3418985c:	d013      	beq.n	34189886 <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
3418985e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34189862:	60fb      	str	r3, [r7, #12]
      break;
34189864:	e00f      	b.n	34189886 <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34189866:	f7f9 fc4b 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418986a:	4604      	mov	r4, r0
3418986c:	f7fa fcb0 	bl	341841d0 <LL_RCC_GetTIMPrescaler>
34189870:	4603      	mov	r3, r0
34189872:	fa24 f303 	lsr.w	r3, r4, r3
34189876:	60fb      	str	r3, [r7, #12]
      break;
34189878:	e006      	b.n	34189888 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418987a:	bf00      	nop
3418987c:	e004      	b.n	34189888 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
3418987e:	bf00      	nop
34189880:	e002      	b.n	34189888 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34189882:	bf00      	nop
34189884:	e000      	b.n	34189888 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34189886:	bf00      	nop
  }

  return lptim_frequency;
34189888:	68fb      	ldr	r3, [r7, #12]
}
3418988a:	4618      	mov	r0, r3
3418988c:	3714      	adds	r7, #20
3418988e:	46bd      	mov	sp, r7
34189890:	bd90      	pop	{r4, r7, pc}
34189892:	bf00      	nop

34189894 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
34189894:	b580      	push	{r7, lr}
34189896:	b084      	sub	sp, #16
34189898:	af00      	add	r7, sp, #0
3418989a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418989c:	2300      	movs	r3, #0
3418989e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
341898a0:	6878      	ldr	r0, [r7, #4]
341898a2:	f7fa fb97 	bl	34183fd4 <LL_RCC_GetLPUARTClockSource>
341898a6:	4603      	mov	r3, r0
341898a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
341898ac:	f000 80c0 	beq.w	34189a30 <RCCEx_GetLPUARTCLKFreq+0x19c>
341898b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
341898b4:	f200 80db 	bhi.w	34189a6e <RCCEx_GetLPUARTCLKFreq+0x1da>
341898b8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
341898bc:	f000 80c6 	beq.w	34189a4c <RCCEx_GetLPUARTCLKFreq+0x1b8>
341898c0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
341898c4:	f200 80d3 	bhi.w	34189a6e <RCCEx_GetLPUARTCLKFreq+0x1da>
341898c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
341898cc:	f000 80c6 	beq.w	34189a5c <RCCEx_GetLPUARTCLKFreq+0x1c8>
341898d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
341898d4:	f200 80cb 	bhi.w	34189a6e <RCCEx_GetLPUARTCLKFreq+0x1da>
341898d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341898dc:	d065      	beq.n	341899aa <RCCEx_GetLPUARTCLKFreq+0x116>
341898de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341898e2:	f200 80c4 	bhi.w	34189a6e <RCCEx_GetLPUARTCLKFreq+0x1da>
341898e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341898ea:	d01a      	beq.n	34189922 <RCCEx_GetLPUARTCLKFreq+0x8e>
341898ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
341898f0:	f200 80bd 	bhi.w	34189a6e <RCCEx_GetLPUARTCLKFreq+0x1da>
341898f4:	2b00      	cmp	r3, #0
341898f6:	d003      	beq.n	34189900 <RCCEx_GetLPUARTCLKFreq+0x6c>
341898f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
341898fc:	d00c      	beq.n	34189918 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
341898fe:	e0b6      	b.n	34189a6e <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189900:	f7f9 fbfe 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34189904:	4603      	mov	r3, r0
34189906:	4618      	mov	r0, r3
34189908:	f7fe fb8a 	bl	34188020 <RCCEx_GetHCLKFreq>
3418990c:	4603      	mov	r3, r0
3418990e:	4618      	mov	r0, r3
34189910:	f7fe fbb8 	bl	34188084 <RCCEx_GetPCLK4Freq>
34189914:	60f8      	str	r0, [r7, #12]
      break;
34189916:	e0b5      	b.n	34189a84 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189918:	2007      	movs	r0, #7
3418991a:	f7fe fe6d 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418991e:	60f8      	str	r0, [r7, #12]
      break;
34189920:	e0b0      	b.n	34189a84 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34189922:	f7fb f811 	bl	34184948 <LL_RCC_IC9_IsEnabled>
34189926:	4603      	mov	r3, r0
34189928:	2b00      	cmp	r3, #0
3418992a:	f000 80a2 	beq.w	34189a72 <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
3418992e:	f7fb f82d 	bl	3418498c <LL_RCC_IC9_GetDivider>
34189932:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34189934:	f7fb f81c 	bl	34184970 <LL_RCC_IC9_GetSource>
34189938:	4603      	mov	r3, r0
3418993a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418993e:	d029      	beq.n	34189994 <RCCEx_GetLPUARTCLKFreq+0x100>
34189940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189944:	d82f      	bhi.n	341899a6 <RCCEx_GetLPUARTCLKFreq+0x112>
34189946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418994a:	d01a      	beq.n	34189982 <RCCEx_GetLPUARTCLKFreq+0xee>
3418994c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189950:	d829      	bhi.n	341899a6 <RCCEx_GetLPUARTCLKFreq+0x112>
34189952:	2b00      	cmp	r3, #0
34189954:	d003      	beq.n	3418995e <RCCEx_GetLPUARTCLKFreq+0xca>
34189956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418995a:	d009      	beq.n	34189970 <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
3418995c:	e023      	b.n	341899a6 <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418995e:	f7fe fa47 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34189962:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189964:	68fa      	ldr	r2, [r7, #12]
34189966:	68bb      	ldr	r3, [r7, #8]
34189968:	fbb2 f3f3 	udiv	r3, r2, r3
3418996c:	60fb      	str	r3, [r7, #12]
            break;
3418996e:	e01b      	b.n	341899a8 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189970:	f7fe fa84 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34189974:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189976:	68fa      	ldr	r2, [r7, #12]
34189978:	68bb      	ldr	r3, [r7, #8]
3418997a:	fbb2 f3f3 	udiv	r3, r2, r3
3418997e:	60fb      	str	r3, [r7, #12]
            break;
34189980:	e012      	b.n	341899a8 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189982:	f7fe fac1 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34189986:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189988:	68fa      	ldr	r2, [r7, #12]
3418998a:	68bb      	ldr	r3, [r7, #8]
3418998c:	fbb2 f3f3 	udiv	r3, r2, r3
34189990:	60fb      	str	r3, [r7, #12]
            break;
34189992:	e009      	b.n	341899a8 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189994:	f7fe fafe 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34189998:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
3418999a:	68fa      	ldr	r2, [r7, #12]
3418999c:	68bb      	ldr	r3, [r7, #8]
3418999e:	fbb2 f3f3 	udiv	r3, r2, r3
341899a2:	60fb      	str	r3, [r7, #12]
            break;
341899a4:	e000      	b.n	341899a8 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
341899a6:	bf00      	nop
      break;
341899a8:	e063      	b.n	34189a72 <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
341899aa:	f7fb f8cd 	bl	34184b48 <LL_RCC_IC14_IsEnabled>
341899ae:	4603      	mov	r3, r0
341899b0:	2b00      	cmp	r3, #0
341899b2:	d060      	beq.n	34189a76 <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
341899b4:	f7fb f8ea 	bl	34184b8c <LL_RCC_IC14_GetDivider>
341899b8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
341899ba:	f7fb f8d9 	bl	34184b70 <LL_RCC_IC14_GetSource>
341899be:	4603      	mov	r3, r0
341899c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341899c4:	d029      	beq.n	34189a1a <RCCEx_GetLPUARTCLKFreq+0x186>
341899c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341899ca:	d82f      	bhi.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x198>
341899cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341899d0:	d01a      	beq.n	34189a08 <RCCEx_GetLPUARTCLKFreq+0x174>
341899d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341899d6:	d829      	bhi.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x198>
341899d8:	2b00      	cmp	r3, #0
341899da:	d003      	beq.n	341899e4 <RCCEx_GetLPUARTCLKFreq+0x150>
341899dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
341899e0:	d009      	beq.n	341899f6 <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
341899e2:	e023      	b.n	34189a2c <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341899e4:	f7fe fa04 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
341899e8:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341899ea:	68fa      	ldr	r2, [r7, #12]
341899ec:	68bb      	ldr	r3, [r7, #8]
341899ee:	fbb2 f3f3 	udiv	r3, r2, r3
341899f2:	60fb      	str	r3, [r7, #12]
            break;
341899f4:	e01b      	b.n	34189a2e <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341899f6:	f7fe fa41 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
341899fa:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
341899fc:	68fa      	ldr	r2, [r7, #12]
341899fe:	68bb      	ldr	r3, [r7, #8]
34189a00:	fbb2 f3f3 	udiv	r3, r2, r3
34189a04:	60fb      	str	r3, [r7, #12]
            break;
34189a06:	e012      	b.n	34189a2e <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189a08:	f7fe fa7e 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34189a0c:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189a0e:	68fa      	ldr	r2, [r7, #12]
34189a10:	68bb      	ldr	r3, [r7, #8]
34189a12:	fbb2 f3f3 	udiv	r3, r2, r3
34189a16:	60fb      	str	r3, [r7, #12]
            break;
34189a18:	e009      	b.n	34189a2e <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189a1a:	f7fe fabb 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34189a1e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34189a20:	68fa      	ldr	r2, [r7, #12]
34189a22:	68bb      	ldr	r3, [r7, #8]
34189a24:	fbb2 f3f3 	udiv	r3, r2, r3
34189a28:	60fb      	str	r3, [r7, #12]
            break;
34189a2a:	e000      	b.n	34189a2e <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
34189a2c:	bf00      	nop
      break;
34189a2e:	e022      	b.n	34189a76 <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
34189a30:	f7f9 ff66 	bl	34183900 <LL_RCC_HSI_IsReady>
34189a34:	4603      	mov	r3, r0
34189a36:	2b00      	cmp	r3, #0
34189a38:	d01f      	beq.n	34189a7a <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189a3a:	f7f9 ff73 	bl	34183924 <LL_RCC_HSI_GetDivider>
34189a3e:	4603      	mov	r3, r0
34189a40:	09db      	lsrs	r3, r3, #7
34189a42:	4a13      	ldr	r2, [pc, #76]	@ (34189a90 <RCCEx_GetLPUARTCLKFreq+0x1fc>)
34189a44:	fa22 f303 	lsr.w	r3, r2, r3
34189a48:	60fb      	str	r3, [r7, #12]
      break;
34189a4a:	e016      	b.n	34189a7a <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
34189a4c:	f7f9 ff78 	bl	34183940 <LL_RCC_MSI_IsReady>
34189a50:	4603      	mov	r3, r0
34189a52:	2b00      	cmp	r3, #0
34189a54:	d013      	beq.n	34189a7e <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
34189a56:	4b0f      	ldr	r3, [pc, #60]	@ (34189a94 <RCCEx_GetLPUARTCLKFreq+0x200>)
34189a58:	60fb      	str	r3, [r7, #12]
      break;
34189a5a:	e010      	b.n	34189a7e <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
34189a5c:	f7f9 ff90 	bl	34183980 <LL_RCC_LSE_IsReady>
34189a60:	4603      	mov	r3, r0
34189a62:	2b00      	cmp	r3, #0
34189a64:	d00d      	beq.n	34189a82 <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
34189a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34189a6a:	60fb      	str	r3, [r7, #12]
      break;
34189a6c:	e009      	b.n	34189a82 <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
34189a6e:	bf00      	nop
34189a70:	e008      	b.n	34189a84 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a72:	bf00      	nop
34189a74:	e006      	b.n	34189a84 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a76:	bf00      	nop
34189a78:	e004      	b.n	34189a84 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a7a:	bf00      	nop
34189a7c:	e002      	b.n	34189a84 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a7e:	bf00      	nop
34189a80:	e000      	b.n	34189a84 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34189a82:	bf00      	nop
  }

  return lpuart_frequency;
34189a84:	68fb      	ldr	r3, [r7, #12]
}
34189a86:	4618      	mov	r0, r3
34189a88:	3710      	adds	r7, #16
34189a8a:	46bd      	mov	sp, r7
34189a8c:	bd80      	pop	{r7, pc}
34189a8e:	bf00      	nop
34189a90:	03d09000 	.word	0x03d09000
34189a94:	003d0900 	.word	0x003d0900

34189a98 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34189a98:	b580      	push	{r7, lr}
34189a9a:	b084      	sub	sp, #16
34189a9c:	af00      	add	r7, sp, #0
34189a9e:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
34189aa0:	2300      	movs	r3, #0
34189aa2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34189aa4:	6878      	ldr	r0, [r7, #4]
34189aa6:	f7fa faa7 	bl	34183ff8 <LL_RCC_GetLTDCClockSource>
34189aaa:	4603      	mov	r3, r0
34189aac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34189ab0:	d062      	beq.n	34189b78 <RCCEx_GetLTDCCLKFreq+0xe0>
34189ab2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34189ab6:	d86d      	bhi.n	34189b94 <RCCEx_GetLTDCCLKFreq+0xfc>
34189ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34189abc:	d019      	beq.n	34189af2 <RCCEx_GetLTDCCLKFreq+0x5a>
34189abe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34189ac2:	d867      	bhi.n	34189b94 <RCCEx_GetLTDCCLKFreq+0xfc>
34189ac4:	2b00      	cmp	r3, #0
34189ac6:	d003      	beq.n	34189ad0 <RCCEx_GetLTDCCLKFreq+0x38>
34189ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34189acc:	d00c      	beq.n	34189ae8 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189ace:	e061      	b.n	34189b94 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34189ad0:	f7f9 fb16 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34189ad4:	4603      	mov	r3, r0
34189ad6:	4618      	mov	r0, r3
34189ad8:	f7fe faa2 	bl	34188020 <RCCEx_GetHCLKFreq>
34189adc:	4603      	mov	r3, r0
34189ade:	4618      	mov	r0, r3
34189ae0:	f7fe fae1 	bl	341880a6 <RCCEx_GetPCLK5Freq>
34189ae4:	60f8      	str	r0, [r7, #12]
      break;
34189ae6:	e05a      	b.n	34189b9e <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189ae8:	2007      	movs	r0, #7
34189aea:	f7fe fd85 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34189aee:	60f8      	str	r0, [r7, #12]
      break;
34189af0:	e055      	b.n	34189b9e <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
34189af2:	f7fb f8a9 	bl	34184c48 <LL_RCC_IC16_IsEnabled>
34189af6:	4603      	mov	r3, r0
34189af8:	2b00      	cmp	r3, #0
34189afa:	d04d      	beq.n	34189b98 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
34189afc:	f7fb f8c6 	bl	34184c8c <LL_RCC_IC16_GetDivider>
34189b00:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
34189b02:	f7fb f8b5 	bl	34184c70 <LL_RCC_IC16_GetSource>
34189b06:	4603      	mov	r3, r0
34189b08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189b0c:	d029      	beq.n	34189b62 <RCCEx_GetLTDCCLKFreq+0xca>
34189b0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189b12:	d82f      	bhi.n	34189b74 <RCCEx_GetLTDCCLKFreq+0xdc>
34189b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189b18:	d01a      	beq.n	34189b50 <RCCEx_GetLTDCCLKFreq+0xb8>
34189b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189b1e:	d829      	bhi.n	34189b74 <RCCEx_GetLTDCCLKFreq+0xdc>
34189b20:	2b00      	cmp	r3, #0
34189b22:	d003      	beq.n	34189b2c <RCCEx_GetLTDCCLKFreq+0x94>
34189b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189b28:	d009      	beq.n	34189b3e <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
34189b2a:	e023      	b.n	34189b74 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189b2c:	f7fe f960 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34189b30:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189b32:	68fa      	ldr	r2, [r7, #12]
34189b34:	68bb      	ldr	r3, [r7, #8]
34189b36:	fbb2 f3f3 	udiv	r3, r2, r3
34189b3a:	60fb      	str	r3, [r7, #12]
            break;
34189b3c:	e01b      	b.n	34189b76 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189b3e:	f7fe f99d 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34189b42:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189b44:	68fa      	ldr	r2, [r7, #12]
34189b46:	68bb      	ldr	r3, [r7, #8]
34189b48:	fbb2 f3f3 	udiv	r3, r2, r3
34189b4c:	60fb      	str	r3, [r7, #12]
            break;
34189b4e:	e012      	b.n	34189b76 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189b50:	f7fe f9da 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34189b54:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189b56:	68fa      	ldr	r2, [r7, #12]
34189b58:	68bb      	ldr	r3, [r7, #8]
34189b5a:	fbb2 f3f3 	udiv	r3, r2, r3
34189b5e:	60fb      	str	r3, [r7, #12]
            break;
34189b60:	e009      	b.n	34189b76 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189b62:	f7fe fa17 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34189b66:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34189b68:	68fa      	ldr	r2, [r7, #12]
34189b6a:	68bb      	ldr	r3, [r7, #8]
34189b6c:	fbb2 f3f3 	udiv	r3, r2, r3
34189b70:	60fb      	str	r3, [r7, #12]
            break;
34189b72:	e000      	b.n	34189b76 <RCCEx_GetLTDCCLKFreq+0xde>
            break;
34189b74:	bf00      	nop
      break;
34189b76:	e00f      	b.n	34189b98 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34189b78:	f7f9 fec2 	bl	34183900 <LL_RCC_HSI_IsReady>
34189b7c:	4603      	mov	r3, r0
34189b7e:	2b00      	cmp	r3, #0
34189b80:	d00c      	beq.n	34189b9c <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189b82:	f7f9 fecf 	bl	34183924 <LL_RCC_HSI_GetDivider>
34189b86:	4603      	mov	r3, r0
34189b88:	09db      	lsrs	r3, r3, #7
34189b8a:	4a07      	ldr	r2, [pc, #28]	@ (34189ba8 <RCCEx_GetLTDCCLKFreq+0x110>)
34189b8c:	fa22 f303 	lsr.w	r3, r2, r3
34189b90:	60fb      	str	r3, [r7, #12]
      break;
34189b92:	e003      	b.n	34189b9c <RCCEx_GetLTDCCLKFreq+0x104>
      break;
34189b94:	bf00      	nop
34189b96:	e002      	b.n	34189b9e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34189b98:	bf00      	nop
34189b9a:	e000      	b.n	34189b9e <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34189b9c:	bf00      	nop
  }

  return ltdc_frequency;
34189b9e:	68fb      	ldr	r3, [r7, #12]
}
34189ba0:	4618      	mov	r0, r3
34189ba2:	3710      	adds	r7, #16
34189ba4:	46bd      	mov	sp, r7
34189ba6:	bd80      	pop	{r7, pc}
34189ba8:	03d09000 	.word	0x03d09000

34189bac <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
34189bac:	b590      	push	{r4, r7, lr}
34189bae:	b085      	sub	sp, #20
34189bb0:	af00      	add	r7, sp, #0
34189bb2:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34189bb4:	2300      	movs	r3, #0
34189bb6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34189bb8:	6878      	ldr	r0, [r7, #4]
34189bba:	f7fa fa2f 	bl	3418401c <LL_RCC_GetMDFClockSource>
34189bbe:	4603      	mov	r3, r0
34189bc0:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34189bc4:	f000 80dd 	beq.w	34189d82 <RCCEx_GetMDFCLKFreq+0x1d6>
34189bc8:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34189bcc:	f200 80e3 	bhi.w	34189d96 <RCCEx_GetMDFCLKFreq+0x1ea>
34189bd0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34189bd4:	f000 80d2 	beq.w	34189d7c <RCCEx_GetMDFCLKFreq+0x1d0>
34189bd8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34189bdc:	f200 80db 	bhi.w	34189d96 <RCCEx_GetMDFCLKFreq+0x1ea>
34189be0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34189be4:	f000 80b4 	beq.w	34189d50 <RCCEx_GetMDFCLKFreq+0x1a4>
34189be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34189bec:	f200 80d3 	bhi.w	34189d96 <RCCEx_GetMDFCLKFreq+0x1ea>
34189bf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34189bf4:	f000 80ba 	beq.w	34189d6c <RCCEx_GetMDFCLKFreq+0x1c0>
34189bf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34189bfc:	f200 80cb 	bhi.w	34189d96 <RCCEx_GetMDFCLKFreq+0x1ea>
34189c00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34189c04:	d061      	beq.n	34189cca <RCCEx_GetMDFCLKFreq+0x11e>
34189c06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34189c0a:	f200 80c4 	bhi.w	34189d96 <RCCEx_GetMDFCLKFreq+0x1ea>
34189c0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34189c12:	d016      	beq.n	34189c42 <RCCEx_GetMDFCLKFreq+0x96>
34189c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34189c18:	f200 80bd 	bhi.w	34189d96 <RCCEx_GetMDFCLKFreq+0x1ea>
34189c1c:	2b00      	cmp	r3, #0
34189c1e:	d003      	beq.n	34189c28 <RCCEx_GetMDFCLKFreq+0x7c>
34189c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34189c24:	d008      	beq.n	34189c38 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34189c26:	e0b6      	b.n	34189d96 <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189c28:	f7f9 fa6a 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34189c2c:	4603      	mov	r3, r0
34189c2e:	4618      	mov	r0, r3
34189c30:	f7fe f9f6 	bl	34188020 <RCCEx_GetHCLKFreq>
34189c34:	60f8      	str	r0, [r7, #12]
      break;
34189c36:	e0b7      	b.n	34189da8 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189c38:	2007      	movs	r0, #7
34189c3a:	f7fe fcdd 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34189c3e:	60f8      	str	r0, [r7, #12]
      break;
34189c40:	e0b2      	b.n	34189da8 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34189c42:	f7fa fe01 	bl	34184848 <LL_RCC_IC7_IsEnabled>
34189c46:	4603      	mov	r3, r0
34189c48:	2b00      	cmp	r3, #0
34189c4a:	f000 80a6 	beq.w	34189d9a <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
34189c4e:	f7fa fe1d 	bl	3418488c <LL_RCC_IC7_GetDivider>
34189c52:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34189c54:	f7fa fe0c 	bl	34184870 <LL_RCC_IC7_GetSource>
34189c58:	4603      	mov	r3, r0
34189c5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c5e:	d029      	beq.n	34189cb4 <RCCEx_GetMDFCLKFreq+0x108>
34189c60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189c64:	d82f      	bhi.n	34189cc6 <RCCEx_GetMDFCLKFreq+0x11a>
34189c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c6a:	d01a      	beq.n	34189ca2 <RCCEx_GetMDFCLKFreq+0xf6>
34189c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189c70:	d829      	bhi.n	34189cc6 <RCCEx_GetMDFCLKFreq+0x11a>
34189c72:	2b00      	cmp	r3, #0
34189c74:	d003      	beq.n	34189c7e <RCCEx_GetMDFCLKFreq+0xd2>
34189c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189c7a:	d009      	beq.n	34189c90 <RCCEx_GetMDFCLKFreq+0xe4>
            break;
34189c7c:	e023      	b.n	34189cc6 <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189c7e:	f7fe f8b7 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34189c82:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189c84:	68fa      	ldr	r2, [r7, #12]
34189c86:	68bb      	ldr	r3, [r7, #8]
34189c88:	fbb2 f3f3 	udiv	r3, r2, r3
34189c8c:	60fb      	str	r3, [r7, #12]
            break;
34189c8e:	e01b      	b.n	34189cc8 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189c90:	f7fe f8f4 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34189c94:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189c96:	68fa      	ldr	r2, [r7, #12]
34189c98:	68bb      	ldr	r3, [r7, #8]
34189c9a:	fbb2 f3f3 	udiv	r3, r2, r3
34189c9e:	60fb      	str	r3, [r7, #12]
            break;
34189ca0:	e012      	b.n	34189cc8 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189ca2:	f7fe f931 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34189ca6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189ca8:	68fa      	ldr	r2, [r7, #12]
34189caa:	68bb      	ldr	r3, [r7, #8]
34189cac:	fbb2 f3f3 	udiv	r3, r2, r3
34189cb0:	60fb      	str	r3, [r7, #12]
            break;
34189cb2:	e009      	b.n	34189cc8 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189cb4:	f7fe f96e 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34189cb8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189cba:	68fa      	ldr	r2, [r7, #12]
34189cbc:	68bb      	ldr	r3, [r7, #8]
34189cbe:	fbb2 f3f3 	udiv	r3, r2, r3
34189cc2:	60fb      	str	r3, [r7, #12]
            break;
34189cc4:	e000      	b.n	34189cc8 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
34189cc6:	bf00      	nop
      break;
34189cc8:	e067      	b.n	34189d9a <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34189cca:	f7fa fdfd 	bl	341848c8 <LL_RCC_IC8_IsEnabled>
34189cce:	4603      	mov	r3, r0
34189cd0:	2b00      	cmp	r3, #0
34189cd2:	d064      	beq.n	34189d9e <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
34189cd4:	f7fa fe1a 	bl	3418490c <LL_RCC_IC8_GetDivider>
34189cd8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34189cda:	f7fa fe09 	bl	341848f0 <LL_RCC_IC8_GetSource>
34189cde:	4603      	mov	r3, r0
34189ce0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189ce4:	d029      	beq.n	34189d3a <RCCEx_GetMDFCLKFreq+0x18e>
34189ce6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189cea:	d82f      	bhi.n	34189d4c <RCCEx_GetMDFCLKFreq+0x1a0>
34189cec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189cf0:	d01a      	beq.n	34189d28 <RCCEx_GetMDFCLKFreq+0x17c>
34189cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189cf6:	d829      	bhi.n	34189d4c <RCCEx_GetMDFCLKFreq+0x1a0>
34189cf8:	2b00      	cmp	r3, #0
34189cfa:	d003      	beq.n	34189d04 <RCCEx_GetMDFCLKFreq+0x158>
34189cfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189d00:	d009      	beq.n	34189d16 <RCCEx_GetMDFCLKFreq+0x16a>
            break;
34189d02:	e023      	b.n	34189d4c <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189d04:	f7fe f874 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34189d08:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189d0a:	68fa      	ldr	r2, [r7, #12]
34189d0c:	68bb      	ldr	r3, [r7, #8]
34189d0e:	fbb2 f3f3 	udiv	r3, r2, r3
34189d12:	60fb      	str	r3, [r7, #12]
            break;
34189d14:	e01b      	b.n	34189d4e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189d16:	f7fe f8b1 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34189d1a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189d1c:	68fa      	ldr	r2, [r7, #12]
34189d1e:	68bb      	ldr	r3, [r7, #8]
34189d20:	fbb2 f3f3 	udiv	r3, r2, r3
34189d24:	60fb      	str	r3, [r7, #12]
            break;
34189d26:	e012      	b.n	34189d4e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189d28:	f7fe f8ee 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34189d2c:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189d2e:	68fa      	ldr	r2, [r7, #12]
34189d30:	68bb      	ldr	r3, [r7, #8]
34189d32:	fbb2 f3f3 	udiv	r3, r2, r3
34189d36:	60fb      	str	r3, [r7, #12]
            break;
34189d38:	e009      	b.n	34189d4e <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189d3a:	f7fe f92b 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34189d3e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34189d40:	68fa      	ldr	r2, [r7, #12]
34189d42:	68bb      	ldr	r3, [r7, #8]
34189d44:	fbb2 f3f3 	udiv	r3, r2, r3
34189d48:	60fb      	str	r3, [r7, #12]
            break;
34189d4a:	e000      	b.n	34189d4e <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34189d4c:	bf00      	nop
      break;
34189d4e:	e026      	b.n	34189d9e <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
34189d50:	f7f9 fdd6 	bl	34183900 <LL_RCC_HSI_IsReady>
34189d54:	4603      	mov	r3, r0
34189d56:	2b00      	cmp	r3, #0
34189d58:	d023      	beq.n	34189da2 <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189d5a:	f7f9 fde3 	bl	34183924 <LL_RCC_HSI_GetDivider>
34189d5e:	4603      	mov	r3, r0
34189d60:	09db      	lsrs	r3, r3, #7
34189d62:	4a14      	ldr	r2, [pc, #80]	@ (34189db4 <RCCEx_GetMDFCLKFreq+0x208>)
34189d64:	fa22 f303 	lsr.w	r3, r2, r3
34189d68:	60fb      	str	r3, [r7, #12]
      break;
34189d6a:	e01a      	b.n	34189da2 <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
34189d6c:	f7f9 fde8 	bl	34183940 <LL_RCC_MSI_IsReady>
34189d70:	4603      	mov	r3, r0
34189d72:	2b00      	cmp	r3, #0
34189d74:	d017      	beq.n	34189da6 <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
34189d76:	4b10      	ldr	r3, [pc, #64]	@ (34189db8 <RCCEx_GetMDFCLKFreq+0x20c>)
34189d78:	60fb      	str	r3, [r7, #12]
      break;
34189d7a:	e014      	b.n	34189da6 <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34189d7c:	4b0f      	ldr	r3, [pc, #60]	@ (34189dbc <RCCEx_GetMDFCLKFreq+0x210>)
34189d7e:	60fb      	str	r3, [r7, #12]
      break;
34189d80:	e012      	b.n	34189da8 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34189d82:	f7f9 f9bd 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34189d86:	4604      	mov	r4, r0
34189d88:	f7fa fa22 	bl	341841d0 <LL_RCC_GetTIMPrescaler>
34189d8c:	4603      	mov	r3, r0
34189d8e:	fa24 f303 	lsr.w	r3, r4, r3
34189d92:	60fb      	str	r3, [r7, #12]
      break;
34189d94:	e008      	b.n	34189da8 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189d96:	bf00      	nop
34189d98:	e006      	b.n	34189da8 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189d9a:	bf00      	nop
34189d9c:	e004      	b.n	34189da8 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189d9e:	bf00      	nop
34189da0:	e002      	b.n	34189da8 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189da2:	bf00      	nop
34189da4:	e000      	b.n	34189da8 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34189da6:	bf00      	nop
  }

  return adf_frequency;
34189da8:	68fb      	ldr	r3, [r7, #12]
}
34189daa:	4618      	mov	r0, r3
34189dac:	3714      	adds	r7, #20
34189dae:	46bd      	mov	sp, r7
34189db0:	bd90      	pop	{r4, r7, pc}
34189db2:	bf00      	nop
34189db4:	03d09000 	.word	0x03d09000
34189db8:	003d0900 	.word	0x003d0900
34189dbc:	00bb8000 	.word	0x00bb8000

34189dc0 <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
34189dc0:	b580      	push	{r7, lr}
34189dc2:	b084      	sub	sp, #16
34189dc4:	af00      	add	r7, sp, #0
34189dc6:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
34189dc8:	2300      	movs	r3, #0
34189dca:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34189dcc:	6878      	ldr	r0, [r7, #4]
34189dce:	f7fa f937 	bl	34184040 <LL_RCC_GetPSSIClockSource>
34189dd2:	4603      	mov	r3, r0
34189dd4:	2b30      	cmp	r3, #48	@ 0x30
34189dd6:	d05a      	beq.n	34189e8e <RCCEx_GetPSSICLKFreq+0xce>
34189dd8:	2b30      	cmp	r3, #48	@ 0x30
34189dda:	d866      	bhi.n	34189eaa <RCCEx_GetPSSICLKFreq+0xea>
34189ddc:	2b20      	cmp	r3, #32
34189dde:	d013      	beq.n	34189e08 <RCCEx_GetPSSICLKFreq+0x48>
34189de0:	2b20      	cmp	r3, #32
34189de2:	d862      	bhi.n	34189eaa <RCCEx_GetPSSICLKFreq+0xea>
34189de4:	2b00      	cmp	r3, #0
34189de6:	d002      	beq.n	34189dee <RCCEx_GetPSSICLKFreq+0x2e>
34189de8:	2b10      	cmp	r3, #16
34189dea:	d008      	beq.n	34189dfe <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189dec:	e05d      	b.n	34189eaa <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34189dee:	f7f9 f987 	bl	34183100 <HAL_RCC_GetSysClockFreq>
34189df2:	4603      	mov	r3, r0
34189df4:	4618      	mov	r0, r3
34189df6:	f7fe f913 	bl	34188020 <RCCEx_GetHCLKFreq>
34189dfa:	60f8      	str	r0, [r7, #12]
      break;
34189dfc:	e05a      	b.n	34189eb4 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34189dfe:	2007      	movs	r0, #7
34189e00:	f7fe fbfa 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
34189e04:	60f8      	str	r0, [r7, #12]
      break;
34189e06:	e055      	b.n	34189eb4 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
34189e08:	f7fb f81e 	bl	34184e48 <LL_RCC_IC20_IsEnabled>
34189e0c:	4603      	mov	r3, r0
34189e0e:	2b00      	cmp	r3, #0
34189e10:	d04d      	beq.n	34189eae <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
34189e12:	f7fb f83b 	bl	34184e8c <LL_RCC_IC20_GetDivider>
34189e16:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
34189e18:	f7fb f82a 	bl	34184e70 <LL_RCC_IC20_GetSource>
34189e1c:	4603      	mov	r3, r0
34189e1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189e22:	d029      	beq.n	34189e78 <RCCEx_GetPSSICLKFreq+0xb8>
34189e24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34189e28:	d82f      	bhi.n	34189e8a <RCCEx_GetPSSICLKFreq+0xca>
34189e2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189e2e:	d01a      	beq.n	34189e66 <RCCEx_GetPSSICLKFreq+0xa6>
34189e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34189e34:	d829      	bhi.n	34189e8a <RCCEx_GetPSSICLKFreq+0xca>
34189e36:	2b00      	cmp	r3, #0
34189e38:	d003      	beq.n	34189e42 <RCCEx_GetPSSICLKFreq+0x82>
34189e3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34189e3e:	d009      	beq.n	34189e54 <RCCEx_GetPSSICLKFreq+0x94>
            break;
34189e40:	e023      	b.n	34189e8a <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34189e42:	f7fd ffd5 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
34189e46:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34189e48:	68fa      	ldr	r2, [r7, #12]
34189e4a:	68bb      	ldr	r3, [r7, #8]
34189e4c:	fbb2 f3f3 	udiv	r3, r2, r3
34189e50:	60fb      	str	r3, [r7, #12]
            break;
34189e52:	e01b      	b.n	34189e8c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34189e54:	f7fe f812 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
34189e58:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34189e5a:	68fa      	ldr	r2, [r7, #12]
34189e5c:	68bb      	ldr	r3, [r7, #8]
34189e5e:	fbb2 f3f3 	udiv	r3, r2, r3
34189e62:	60fb      	str	r3, [r7, #12]
            break;
34189e64:	e012      	b.n	34189e8c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34189e66:	f7fe f84f 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
34189e6a:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34189e6c:	68fa      	ldr	r2, [r7, #12]
34189e6e:	68bb      	ldr	r3, [r7, #8]
34189e70:	fbb2 f3f3 	udiv	r3, r2, r3
34189e74:	60fb      	str	r3, [r7, #12]
            break;
34189e76:	e009      	b.n	34189e8c <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34189e78:	f7fe f88c 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
34189e7c:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34189e7e:	68fa      	ldr	r2, [r7, #12]
34189e80:	68bb      	ldr	r3, [r7, #8]
34189e82:	fbb2 f3f3 	udiv	r3, r2, r3
34189e86:	60fb      	str	r3, [r7, #12]
            break;
34189e88:	e000      	b.n	34189e8c <RCCEx_GetPSSICLKFreq+0xcc>
            break;
34189e8a:	bf00      	nop
      break;
34189e8c:	e00f      	b.n	34189eae <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
34189e8e:	f7f9 fd37 	bl	34183900 <LL_RCC_HSI_IsReady>
34189e92:	4603      	mov	r3, r0
34189e94:	2b00      	cmp	r3, #0
34189e96:	d00c      	beq.n	34189eb2 <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34189e98:	f7f9 fd44 	bl	34183924 <LL_RCC_HSI_GetDivider>
34189e9c:	4603      	mov	r3, r0
34189e9e:	09db      	lsrs	r3, r3, #7
34189ea0:	4a07      	ldr	r2, [pc, #28]	@ (34189ec0 <RCCEx_GetPSSICLKFreq+0x100>)
34189ea2:	fa22 f303 	lsr.w	r3, r2, r3
34189ea6:	60fb      	str	r3, [r7, #12]
      break;
34189ea8:	e003      	b.n	34189eb2 <RCCEx_GetPSSICLKFreq+0xf2>
      break;
34189eaa:	bf00      	nop
34189eac:	e002      	b.n	34189eb4 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34189eae:	bf00      	nop
34189eb0:	e000      	b.n	34189eb4 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
34189eb2:	bf00      	nop
  }

  return pssi_frequency;
34189eb4:	68fb      	ldr	r3, [r7, #12]
}
34189eb6:	4618      	mov	r0, r3
34189eb8:	3710      	adds	r7, #16
34189eba:	46bd      	mov	sp, r7
34189ebc:	bd80      	pop	{r7, pc}
34189ebe:	bf00      	nop
34189ec0:	03d09000 	.word	0x03d09000

34189ec4 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
34189ec4:	b580      	push	{r7, lr}
34189ec6:	b082      	sub	sp, #8
34189ec8:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
34189eca:	2300      	movs	r3, #0
34189ecc:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
34189ece:	f7fa f945 	bl	3418415c <LL_RCC_GetRTCClockSource>
34189ed2:	4603      	mov	r3, r0
34189ed4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34189ed8:	d020      	beq.n	34189f1c <RCCEx_GetRTCCLKFreq+0x58>
34189eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34189ede:	d830      	bhi.n	34189f42 <RCCEx_GetRTCCLKFreq+0x7e>
34189ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189ee4:	d011      	beq.n	34189f0a <RCCEx_GetRTCCLKFreq+0x46>
34189ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34189eea:	d82a      	bhi.n	34189f42 <RCCEx_GetRTCCLKFreq+0x7e>
34189eec:	2b00      	cmp	r3, #0
34189eee:	d02a      	beq.n	34189f46 <RCCEx_GetRTCCLKFreq+0x82>
34189ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34189ef4:	d000      	beq.n	34189ef8 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
34189ef6:	e024      	b.n	34189f42 <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
34189ef8:	f7f9 fd42 	bl	34183980 <LL_RCC_LSE_IsReady>
34189efc:	4603      	mov	r3, r0
34189efe:	2b00      	cmp	r3, #0
34189f00:	d023      	beq.n	34189f4a <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
34189f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34189f06:	607b      	str	r3, [r7, #4]
      break;
34189f08:	e01f      	b.n	34189f4a <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
34189f0a:	f7f9 fd4b 	bl	341839a4 <LL_RCC_LSI_IsReady>
34189f0e:	4603      	mov	r3, r0
34189f10:	2b00      	cmp	r3, #0
34189f12:	d01c      	beq.n	34189f4e <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
34189f14:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34189f18:	607b      	str	r3, [r7, #4]
      break;
34189f1a:	e018      	b.n	34189f4e <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
34189f1c:	f7f9 fcde 	bl	341838dc <LL_RCC_HSE_IsReady>
34189f20:	4603      	mov	r3, r0
34189f22:	2b00      	cmp	r3, #0
34189f24:	d015      	beq.n	34189f52 <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34189f26:	4b0e      	ldr	r3, [pc, #56]	@ (34189f60 <RCCEx_GetRTCCLKFreq+0x9c>)
34189f28:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34189f2c:	0b1b      	lsrs	r3, r3, #12
34189f2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34189f32:	3301      	adds	r3, #1
34189f34:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
34189f36:	4a0b      	ldr	r2, [pc, #44]	@ (34189f64 <RCCEx_GetRTCCLKFreq+0xa0>)
34189f38:	683b      	ldr	r3, [r7, #0]
34189f3a:	fbb2 f3f3 	udiv	r3, r2, r3
34189f3e:	607b      	str	r3, [r7, #4]
      break;
34189f40:	e007      	b.n	34189f52 <RCCEx_GetRTCCLKFreq+0x8e>
      break;
34189f42:	bf00      	nop
34189f44:	e006      	b.n	34189f54 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189f46:	bf00      	nop
34189f48:	e004      	b.n	34189f54 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189f4a:	bf00      	nop
34189f4c:	e002      	b.n	34189f54 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189f4e:	bf00      	nop
34189f50:	e000      	b.n	34189f54 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34189f52:	bf00      	nop
  }

  return rtc_frequency;
34189f54:	687b      	ldr	r3, [r7, #4]
}
34189f56:	4618      	mov	r0, r3
34189f58:	3708      	adds	r7, #8
34189f5a:	46bd      	mov	sp, r7
34189f5c:	bd80      	pop	{r7, pc}
34189f5e:	bf00      	nop
34189f60:	56028000 	.word	0x56028000
34189f64:	02dc6c00 	.word	0x02dc6c00

34189f68 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34189f68:	b580      	push	{r7, lr}
34189f6a:	b084      	sub	sp, #16
34189f6c:	af00      	add	r7, sp, #0
34189f6e:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34189f70:	2300      	movs	r3, #0
34189f72:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34189f74:	6878      	ldr	r0, [r7, #4]
34189f76:	f7fa f875 	bl	34184064 <LL_RCC_GetSAIClockSource>
34189f7a:	4603      	mov	r3, r0
34189f7c:	4a9a      	ldr	r2, [pc, #616]	@ (3418a1e8 <RCCEx_GetSAICLKFreq+0x280>)
34189f7e:	4293      	cmp	r3, r2
34189f80:	f000 811f 	beq.w	3418a1c2 <RCCEx_GetSAICLKFreq+0x25a>
34189f84:	4a98      	ldr	r2, [pc, #608]	@ (3418a1e8 <RCCEx_GetSAICLKFreq+0x280>)
34189f86:	4293      	cmp	r3, r2
34189f88:	f200 8120 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
34189f8c:	4a97      	ldr	r2, [pc, #604]	@ (3418a1ec <RCCEx_GetSAICLKFreq+0x284>)
34189f8e:	4293      	cmp	r3, r2
34189f90:	f000 8117 	beq.w	3418a1c2 <RCCEx_GetSAICLKFreq+0x25a>
34189f94:	4a95      	ldr	r2, [pc, #596]	@ (3418a1ec <RCCEx_GetSAICLKFreq+0x284>)
34189f96:	4293      	cmp	r3, r2
34189f98:	f200 8118 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
34189f9c:	4a94      	ldr	r2, [pc, #592]	@ (3418a1f0 <RCCEx_GetSAICLKFreq+0x288>)
34189f9e:	4293      	cmp	r3, r2
34189fa0:	f000 810c 	beq.w	3418a1bc <RCCEx_GetSAICLKFreq+0x254>
34189fa4:	4a92      	ldr	r2, [pc, #584]	@ (3418a1f0 <RCCEx_GetSAICLKFreq+0x288>)
34189fa6:	4293      	cmp	r3, r2
34189fa8:	f200 8110 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
34189fac:	4a91      	ldr	r2, [pc, #580]	@ (3418a1f4 <RCCEx_GetSAICLKFreq+0x28c>)
34189fae:	4293      	cmp	r3, r2
34189fb0:	f000 8104 	beq.w	3418a1bc <RCCEx_GetSAICLKFreq+0x254>
34189fb4:	4a8f      	ldr	r2, [pc, #572]	@ (3418a1f4 <RCCEx_GetSAICLKFreq+0x28c>)
34189fb6:	4293      	cmp	r3, r2
34189fb8:	f200 8108 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
34189fbc:	4a8e      	ldr	r2, [pc, #568]	@ (3418a1f8 <RCCEx_GetSAICLKFreq+0x290>)
34189fbe:	4293      	cmp	r3, r2
34189fc0:	f000 80e6 	beq.w	3418a190 <RCCEx_GetSAICLKFreq+0x228>
34189fc4:	4a8c      	ldr	r2, [pc, #560]	@ (3418a1f8 <RCCEx_GetSAICLKFreq+0x290>)
34189fc6:	4293      	cmp	r3, r2
34189fc8:	f200 8100 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
34189fcc:	4a8b      	ldr	r2, [pc, #556]	@ (3418a1fc <RCCEx_GetSAICLKFreq+0x294>)
34189fce:	4293      	cmp	r3, r2
34189fd0:	f000 80de 	beq.w	3418a190 <RCCEx_GetSAICLKFreq+0x228>
34189fd4:	4a89      	ldr	r2, [pc, #548]	@ (3418a1fc <RCCEx_GetSAICLKFreq+0x294>)
34189fd6:	4293      	cmp	r3, r2
34189fd8:	f200 80f8 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
34189fdc:	4a88      	ldr	r2, [pc, #544]	@ (3418a200 <RCCEx_GetSAICLKFreq+0x298>)
34189fde:	4293      	cmp	r3, r2
34189fe0:	f000 80e4 	beq.w	3418a1ac <RCCEx_GetSAICLKFreq+0x244>
34189fe4:	4a86      	ldr	r2, [pc, #536]	@ (3418a200 <RCCEx_GetSAICLKFreq+0x298>)
34189fe6:	4293      	cmp	r3, r2
34189fe8:	f200 80f0 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
34189fec:	4a85      	ldr	r2, [pc, #532]	@ (3418a204 <RCCEx_GetSAICLKFreq+0x29c>)
34189fee:	4293      	cmp	r3, r2
34189ff0:	f000 80dc 	beq.w	3418a1ac <RCCEx_GetSAICLKFreq+0x244>
34189ff4:	4a83      	ldr	r2, [pc, #524]	@ (3418a204 <RCCEx_GetSAICLKFreq+0x29c>)
34189ff6:	4293      	cmp	r3, r2
34189ff8:	f200 80e8 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
34189ffc:	4a82      	ldr	r2, [pc, #520]	@ (3418a208 <RCCEx_GetSAICLKFreq+0x2a0>)
34189ffe:	4293      	cmp	r3, r2
3418a000:	f000 8083 	beq.w	3418a10a <RCCEx_GetSAICLKFreq+0x1a2>
3418a004:	4a80      	ldr	r2, [pc, #512]	@ (3418a208 <RCCEx_GetSAICLKFreq+0x2a0>)
3418a006:	4293      	cmp	r3, r2
3418a008:	f200 80e0 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
3418a00c:	4a7f      	ldr	r2, [pc, #508]	@ (3418a20c <RCCEx_GetSAICLKFreq+0x2a4>)
3418a00e:	4293      	cmp	r3, r2
3418a010:	d07b      	beq.n	3418a10a <RCCEx_GetSAICLKFreq+0x1a2>
3418a012:	4a7e      	ldr	r2, [pc, #504]	@ (3418a20c <RCCEx_GetSAICLKFreq+0x2a4>)
3418a014:	4293      	cmp	r3, r2
3418a016:	f200 80d9 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
3418a01a:	4a7d      	ldr	r2, [pc, #500]	@ (3418a210 <RCCEx_GetSAICLKFreq+0x2a8>)
3418a01c:	4293      	cmp	r3, r2
3418a01e:	d030      	beq.n	3418a082 <RCCEx_GetSAICLKFreq+0x11a>
3418a020:	4a7b      	ldr	r2, [pc, #492]	@ (3418a210 <RCCEx_GetSAICLKFreq+0x2a8>)
3418a022:	4293      	cmp	r3, r2
3418a024:	f200 80d2 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
3418a028:	4a7a      	ldr	r2, [pc, #488]	@ (3418a214 <RCCEx_GetSAICLKFreq+0x2ac>)
3418a02a:	4293      	cmp	r3, r2
3418a02c:	d029      	beq.n	3418a082 <RCCEx_GetSAICLKFreq+0x11a>
3418a02e:	4a79      	ldr	r2, [pc, #484]	@ (3418a214 <RCCEx_GetSAICLKFreq+0x2ac>)
3418a030:	4293      	cmp	r3, r2
3418a032:	f200 80cb 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
3418a036:	4a78      	ldr	r2, [pc, #480]	@ (3418a218 <RCCEx_GetSAICLKFreq+0x2b0>)
3418a038:	4293      	cmp	r3, r2
3418a03a:	d01d      	beq.n	3418a078 <RCCEx_GetSAICLKFreq+0x110>
3418a03c:	4a76      	ldr	r2, [pc, #472]	@ (3418a218 <RCCEx_GetSAICLKFreq+0x2b0>)
3418a03e:	4293      	cmp	r3, r2
3418a040:	f200 80c4 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
3418a044:	4a75      	ldr	r2, [pc, #468]	@ (3418a21c <RCCEx_GetSAICLKFreq+0x2b4>)
3418a046:	4293      	cmp	r3, r2
3418a048:	d016      	beq.n	3418a078 <RCCEx_GetSAICLKFreq+0x110>
3418a04a:	4a74      	ldr	r2, [pc, #464]	@ (3418a21c <RCCEx_GetSAICLKFreq+0x2b4>)
3418a04c:	4293      	cmp	r3, r2
3418a04e:	f200 80bd 	bhi.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
3418a052:	4a73      	ldr	r2, [pc, #460]	@ (3418a220 <RCCEx_GetSAICLKFreq+0x2b8>)
3418a054:	4293      	cmp	r3, r2
3418a056:	d003      	beq.n	3418a060 <RCCEx_GetSAICLKFreq+0xf8>
3418a058:	4a72      	ldr	r2, [pc, #456]	@ (3418a224 <RCCEx_GetSAICLKFreq+0x2bc>)
3418a05a:	4293      	cmp	r3, r2
3418a05c:	f040 80b6 	bne.w	3418a1cc <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a060:	f7f9 f84e 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418a064:	4603      	mov	r3, r0
3418a066:	4618      	mov	r0, r3
3418a068:	f7fd ffda 	bl	34188020 <RCCEx_GetHCLKFreq>
3418a06c:	4603      	mov	r3, r0
3418a06e:	4618      	mov	r0, r3
3418a070:	f7fd fff7 	bl	34188062 <RCCEx_GetPCLK2Freq>
3418a074:	60f8      	str	r0, [r7, #12]
      break;
3418a076:	e0b2      	b.n	3418a1de <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a078:	2007      	movs	r0, #7
3418a07a:	f7fe fabd 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418a07e:	60f8      	str	r0, [r7, #12]
      break;
3418a080:	e0ad      	b.n	3418a1de <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418a082:	f7fa fbe1 	bl	34184848 <LL_RCC_IC7_IsEnabled>
3418a086:	4603      	mov	r3, r0
3418a088:	2b00      	cmp	r3, #0
3418a08a:	f000 80a1 	beq.w	3418a1d0 <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418a08e:	f7fa fbfd 	bl	3418488c <LL_RCC_IC7_GetDivider>
3418a092:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418a094:	f7fa fbec 	bl	34184870 <LL_RCC_IC7_GetSource>
3418a098:	4603      	mov	r3, r0
3418a09a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a09e:	d029      	beq.n	3418a0f4 <RCCEx_GetSAICLKFreq+0x18c>
3418a0a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a0a4:	d82f      	bhi.n	3418a106 <RCCEx_GetSAICLKFreq+0x19e>
3418a0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a0aa:	d01a      	beq.n	3418a0e2 <RCCEx_GetSAICLKFreq+0x17a>
3418a0ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a0b0:	d829      	bhi.n	3418a106 <RCCEx_GetSAICLKFreq+0x19e>
3418a0b2:	2b00      	cmp	r3, #0
3418a0b4:	d003      	beq.n	3418a0be <RCCEx_GetSAICLKFreq+0x156>
3418a0b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a0ba:	d009      	beq.n	3418a0d0 <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a0bc:	e023      	b.n	3418a106 <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a0be:	f7fd fe97 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a0c2:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a0c4:	68fa      	ldr	r2, [r7, #12]
3418a0c6:	68bb      	ldr	r3, [r7, #8]
3418a0c8:	fbb2 f3f3 	udiv	r3, r2, r3
3418a0cc:	60fb      	str	r3, [r7, #12]
            break;
3418a0ce:	e01b      	b.n	3418a108 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a0d0:	f7fd fed4 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418a0d4:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a0d6:	68fa      	ldr	r2, [r7, #12]
3418a0d8:	68bb      	ldr	r3, [r7, #8]
3418a0da:	fbb2 f3f3 	udiv	r3, r2, r3
3418a0de:	60fb      	str	r3, [r7, #12]
            break;
3418a0e0:	e012      	b.n	3418a108 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a0e2:	f7fd ff11 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418a0e6:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a0e8:	68fa      	ldr	r2, [r7, #12]
3418a0ea:	68bb      	ldr	r3, [r7, #8]
3418a0ec:	fbb2 f3f3 	udiv	r3, r2, r3
3418a0f0:	60fb      	str	r3, [r7, #12]
            break;
3418a0f2:	e009      	b.n	3418a108 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a0f4:	f7fd ff4e 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418a0f8:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a0fa:	68fa      	ldr	r2, [r7, #12]
3418a0fc:	68bb      	ldr	r3, [r7, #8]
3418a0fe:	fbb2 f3f3 	udiv	r3, r2, r3
3418a102:	60fb      	str	r3, [r7, #12]
            break;
3418a104:	e000      	b.n	3418a108 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
3418a106:	bf00      	nop
        }
      }
      break;
3418a108:	e062      	b.n	3418a1d0 <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418a10a:	f7fa fbdd 	bl	341848c8 <LL_RCC_IC8_IsEnabled>
3418a10e:	4603      	mov	r3, r0
3418a110:	2b00      	cmp	r3, #0
3418a112:	d05f      	beq.n	3418a1d4 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418a114:	f7fa fbfa 	bl	3418490c <LL_RCC_IC8_GetDivider>
3418a118:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418a11a:	f7fa fbe9 	bl	341848f0 <LL_RCC_IC8_GetSource>
3418a11e:	4603      	mov	r3, r0
3418a120:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a124:	d029      	beq.n	3418a17a <RCCEx_GetSAICLKFreq+0x212>
3418a126:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a12a:	d82f      	bhi.n	3418a18c <RCCEx_GetSAICLKFreq+0x224>
3418a12c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a130:	d01a      	beq.n	3418a168 <RCCEx_GetSAICLKFreq+0x200>
3418a132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a136:	d829      	bhi.n	3418a18c <RCCEx_GetSAICLKFreq+0x224>
3418a138:	2b00      	cmp	r3, #0
3418a13a:	d003      	beq.n	3418a144 <RCCEx_GetSAICLKFreq+0x1dc>
3418a13c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a140:	d009      	beq.n	3418a156 <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a142:	e023      	b.n	3418a18c <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a144:	f7fd fe54 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a148:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a14a:	68fa      	ldr	r2, [r7, #12]
3418a14c:	68bb      	ldr	r3, [r7, #8]
3418a14e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a152:	60fb      	str	r3, [r7, #12]
            break;
3418a154:	e01b      	b.n	3418a18e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a156:	f7fd fe91 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418a15a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a15c:	68fa      	ldr	r2, [r7, #12]
3418a15e:	68bb      	ldr	r3, [r7, #8]
3418a160:	fbb2 f3f3 	udiv	r3, r2, r3
3418a164:	60fb      	str	r3, [r7, #12]
            break;
3418a166:	e012      	b.n	3418a18e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a168:	f7fd fece 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418a16c:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a16e:	68fa      	ldr	r2, [r7, #12]
3418a170:	68bb      	ldr	r3, [r7, #8]
3418a172:	fbb2 f3f3 	udiv	r3, r2, r3
3418a176:	60fb      	str	r3, [r7, #12]
            break;
3418a178:	e009      	b.n	3418a18e <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a17a:	f7fd ff0b 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418a17e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3418a180:	68fa      	ldr	r2, [r7, #12]
3418a182:	68bb      	ldr	r3, [r7, #8]
3418a184:	fbb2 f3f3 	udiv	r3, r2, r3
3418a188:	60fb      	str	r3, [r7, #12]
            break;
3418a18a:	e000      	b.n	3418a18e <RCCEx_GetSAICLKFreq+0x226>
            break;
3418a18c:	bf00      	nop
        }
      }
      break;
3418a18e:	e021      	b.n	3418a1d4 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418a190:	f7f9 fbb6 	bl	34183900 <LL_RCC_HSI_IsReady>
3418a194:	4603      	mov	r3, r0
3418a196:	2b00      	cmp	r3, #0
3418a198:	d01e      	beq.n	3418a1d8 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a19a:	f7f9 fbc3 	bl	34183924 <LL_RCC_HSI_GetDivider>
3418a19e:	4603      	mov	r3, r0
3418a1a0:	09db      	lsrs	r3, r3, #7
3418a1a2:	4a21      	ldr	r2, [pc, #132]	@ (3418a228 <RCCEx_GetSAICLKFreq+0x2c0>)
3418a1a4:	fa22 f303 	lsr.w	r3, r2, r3
3418a1a8:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a1aa:	e015      	b.n	3418a1d8 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418a1ac:	f7f9 fbc8 	bl	34183940 <LL_RCC_MSI_IsReady>
3418a1b0:	4603      	mov	r3, r0
3418a1b2:	2b00      	cmp	r3, #0
3418a1b4:	d012      	beq.n	3418a1dc <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
3418a1b6:	4b1d      	ldr	r3, [pc, #116]	@ (3418a22c <RCCEx_GetSAICLKFreq+0x2c4>)
3418a1b8:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a1ba:	e00f      	b.n	3418a1dc <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
3418a1bc:	4b1c      	ldr	r3, [pc, #112]	@ (3418a230 <RCCEx_GetSAICLKFreq+0x2c8>)
3418a1be:	60fb      	str	r3, [r7, #12]
      break;
3418a1c0:	e00d      	b.n	3418a1de <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3418a1c2:	2007      	movs	r0, #7
3418a1c4:	f000 f920 	bl	3418a408 <RCCEx_GetSPDIFRXCLKFreq>
3418a1c8:	60f8      	str	r0, [r7, #12]
      break;
3418a1ca:	e008      	b.n	3418a1de <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
3418a1cc:	bf00      	nop
3418a1ce:	e006      	b.n	3418a1de <RCCEx_GetSAICLKFreq+0x276>
      break;
3418a1d0:	bf00      	nop
3418a1d2:	e004      	b.n	3418a1de <RCCEx_GetSAICLKFreq+0x276>
      break;
3418a1d4:	bf00      	nop
3418a1d6:	e002      	b.n	3418a1de <RCCEx_GetSAICLKFreq+0x276>
      break;
3418a1d8:	bf00      	nop
3418a1da:	e000      	b.n	3418a1de <RCCEx_GetSAICLKFreq+0x276>
      break;
3418a1dc:	bf00      	nop
  }

  return sai_frequency;
3418a1de:	68fb      	ldr	r3, [r7, #12]
}
3418a1e0:	4618      	mov	r0, r3
3418a1e2:	3710      	adds	r7, #16
3418a1e4:	46bd      	mov	sp, r7
3418a1e6:	bd80      	pop	{r7, pc}
3418a1e8:	07071818 	.word	0x07071818
3418a1ec:	07071418 	.word	0x07071418
3418a1f0:	07061818 	.word	0x07061818
3418a1f4:	07061418 	.word	0x07061418
3418a1f8:	07051818 	.word	0x07051818
3418a1fc:	07051418 	.word	0x07051418
3418a200:	07041818 	.word	0x07041818
3418a204:	07041418 	.word	0x07041418
3418a208:	07031818 	.word	0x07031818
3418a20c:	07031418 	.word	0x07031418
3418a210:	07021818 	.word	0x07021818
3418a214:	07021418 	.word	0x07021418
3418a218:	07011818 	.word	0x07011818
3418a21c:	07011418 	.word	0x07011418
3418a220:	07001418 	.word	0x07001418
3418a224:	07001818 	.word	0x07001818
3418a228:	03d09000 	.word	0x03d09000
3418a22c:	003d0900 	.word	0x003d0900
3418a230:	00bb8000 	.word	0x00bb8000

3418a234 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
3418a234:	b580      	push	{r7, lr}
3418a236:	b084      	sub	sp, #16
3418a238:	af00      	add	r7, sp, #0
3418a23a:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a23c:	2300      	movs	r3, #0
3418a23e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
3418a240:	6878      	ldr	r0, [r7, #4]
3418a242:	f7f9 ff1b 	bl	3418407c <LL_RCC_GetSDMMCClockSource>
3418a246:	4603      	mov	r3, r0
3418a248:	4a67      	ldr	r2, [pc, #412]	@ (3418a3e8 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418a24a:	4293      	cmp	r3, r2
3418a24c:	d07e      	beq.n	3418a34c <RCCEx_GetSDMMCCLKFreq+0x118>
3418a24e:	4a66      	ldr	r2, [pc, #408]	@ (3418a3e8 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3418a250:	4293      	cmp	r3, r2
3418a252:	f200 80be 	bhi.w	3418a3d2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a256:	4a65      	ldr	r2, [pc, #404]	@ (3418a3ec <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418a258:	4293      	cmp	r3, r2
3418a25a:	d077      	beq.n	3418a34c <RCCEx_GetSDMMCCLKFreq+0x118>
3418a25c:	4a63      	ldr	r2, [pc, #396]	@ (3418a3ec <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3418a25e:	4293      	cmp	r3, r2
3418a260:	f200 80b7 	bhi.w	3418a3d2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a264:	4a62      	ldr	r2, [pc, #392]	@ (3418a3f0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418a266:	4293      	cmp	r3, r2
3418a268:	d02c      	beq.n	3418a2c4 <RCCEx_GetSDMMCCLKFreq+0x90>
3418a26a:	4a61      	ldr	r2, [pc, #388]	@ (3418a3f0 <RCCEx_GetSDMMCCLKFreq+0x1bc>)
3418a26c:	4293      	cmp	r3, r2
3418a26e:	f200 80b0 	bhi.w	3418a3d2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a272:	4a60      	ldr	r2, [pc, #384]	@ (3418a3f4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418a274:	4293      	cmp	r3, r2
3418a276:	d025      	beq.n	3418a2c4 <RCCEx_GetSDMMCCLKFreq+0x90>
3418a278:	4a5e      	ldr	r2, [pc, #376]	@ (3418a3f4 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
3418a27a:	4293      	cmp	r3, r2
3418a27c:	f200 80a9 	bhi.w	3418a3d2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a280:	4a5d      	ldr	r2, [pc, #372]	@ (3418a3f8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418a282:	4293      	cmp	r3, r2
3418a284:	d019      	beq.n	3418a2ba <RCCEx_GetSDMMCCLKFreq+0x86>
3418a286:	4a5c      	ldr	r2, [pc, #368]	@ (3418a3f8 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3418a288:	4293      	cmp	r3, r2
3418a28a:	f200 80a2 	bhi.w	3418a3d2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a28e:	4a5b      	ldr	r2, [pc, #364]	@ (3418a3fc <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418a290:	4293      	cmp	r3, r2
3418a292:	d012      	beq.n	3418a2ba <RCCEx_GetSDMMCCLKFreq+0x86>
3418a294:	4a59      	ldr	r2, [pc, #356]	@ (3418a3fc <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3418a296:	4293      	cmp	r3, r2
3418a298:	f200 809b 	bhi.w	3418a3d2 <RCCEx_GetSDMMCCLKFreq+0x19e>
3418a29c:	4a58      	ldr	r2, [pc, #352]	@ (3418a400 <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3418a29e:	4293      	cmp	r3, r2
3418a2a0:	d003      	beq.n	3418a2aa <RCCEx_GetSDMMCCLKFreq+0x76>
3418a2a2:	4a58      	ldr	r2, [pc, #352]	@ (3418a404 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
3418a2a4:	4293      	cmp	r3, r2
3418a2a6:	f040 8094 	bne.w	3418a3d2 <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418a2aa:	f7f8 ff29 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418a2ae:	4603      	mov	r3, r0
3418a2b0:	4618      	mov	r0, r3
3418a2b2:	f7fd feb5 	bl	34188020 <RCCEx_GetHCLKFreq>
3418a2b6:	60f8      	str	r0, [r7, #12]
      break;
3418a2b8:	e090      	b.n	3418a3dc <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a2ba:	2007      	movs	r0, #7
3418a2bc:	f7fe f99c 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418a2c0:	60f8      	str	r0, [r7, #12]
      break;
3418a2c2:	e08b      	b.n	3418a3dc <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418a2c4:	f7fa fa40 	bl	34184748 <LL_RCC_IC4_IsEnabled>
3418a2c8:	4603      	mov	r3, r0
3418a2ca:	2b00      	cmp	r3, #0
3418a2cc:	f000 8083 	beq.w	3418a3d6 <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418a2d0:	f7fa fa5c 	bl	3418478c <LL_RCC_IC4_GetDivider>
3418a2d4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418a2d6:	f7fa fa4b 	bl	34184770 <LL_RCC_IC4_GetSource>
3418a2da:	4603      	mov	r3, r0
3418a2dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a2e0:	d029      	beq.n	3418a336 <RCCEx_GetSDMMCCLKFreq+0x102>
3418a2e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a2e6:	d82f      	bhi.n	3418a348 <RCCEx_GetSDMMCCLKFreq+0x114>
3418a2e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a2ec:	d01a      	beq.n	3418a324 <RCCEx_GetSDMMCCLKFreq+0xf0>
3418a2ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a2f2:	d829      	bhi.n	3418a348 <RCCEx_GetSDMMCCLKFreq+0x114>
3418a2f4:	2b00      	cmp	r3, #0
3418a2f6:	d003      	beq.n	3418a300 <RCCEx_GetSDMMCCLKFreq+0xcc>
3418a2f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a2fc:	d009      	beq.n	3418a312 <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a2fe:	e023      	b.n	3418a348 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a300:	f7fd fd76 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a304:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a306:	68fa      	ldr	r2, [r7, #12]
3418a308:	68bb      	ldr	r3, [r7, #8]
3418a30a:	fbb2 f3f3 	udiv	r3, r2, r3
3418a30e:	60fb      	str	r3, [r7, #12]
            break;
3418a310:	e01b      	b.n	3418a34a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a312:	f7fd fdb3 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418a316:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a318:	68fa      	ldr	r2, [r7, #12]
3418a31a:	68bb      	ldr	r3, [r7, #8]
3418a31c:	fbb2 f3f3 	udiv	r3, r2, r3
3418a320:	60fb      	str	r3, [r7, #12]
            break;
3418a322:	e012      	b.n	3418a34a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a324:	f7fd fdf0 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418a328:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a32a:	68fa      	ldr	r2, [r7, #12]
3418a32c:	68bb      	ldr	r3, [r7, #8]
3418a32e:	fbb2 f3f3 	udiv	r3, r2, r3
3418a332:	60fb      	str	r3, [r7, #12]
            break;
3418a334:	e009      	b.n	3418a34a <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a336:	f7fd fe2d 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418a33a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a33c:	68fa      	ldr	r2, [r7, #12]
3418a33e:	68bb      	ldr	r3, [r7, #8]
3418a340:	fbb2 f3f3 	udiv	r3, r2, r3
3418a344:	60fb      	str	r3, [r7, #12]
            break;
3418a346:	e000      	b.n	3418a34a <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
3418a348:	bf00      	nop
        }
      }
      break;
3418a34a:	e044      	b.n	3418a3d6 <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
3418a34c:	f7fa fa3c 	bl	341847c8 <LL_RCC_IC5_IsEnabled>
3418a350:	4603      	mov	r3, r0
3418a352:	2b00      	cmp	r3, #0
3418a354:	d041      	beq.n	3418a3da <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
3418a356:	f7fa fa59 	bl	3418480c <LL_RCC_IC5_GetDivider>
3418a35a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
3418a35c:	f7fa fa48 	bl	341847f0 <LL_RCC_IC5_GetSource>
3418a360:	4603      	mov	r3, r0
3418a362:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a366:	d029      	beq.n	3418a3bc <RCCEx_GetSDMMCCLKFreq+0x188>
3418a368:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a36c:	d82f      	bhi.n	3418a3ce <RCCEx_GetSDMMCCLKFreq+0x19a>
3418a36e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a372:	d01a      	beq.n	3418a3aa <RCCEx_GetSDMMCCLKFreq+0x176>
3418a374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a378:	d829      	bhi.n	3418a3ce <RCCEx_GetSDMMCCLKFreq+0x19a>
3418a37a:	2b00      	cmp	r3, #0
3418a37c:	d003      	beq.n	3418a386 <RCCEx_GetSDMMCCLKFreq+0x152>
3418a37e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a382:	d009      	beq.n	3418a398 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a384:	e023      	b.n	3418a3ce <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a386:	f7fd fd33 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a38a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a38c:	68fa      	ldr	r2, [r7, #12]
3418a38e:	68bb      	ldr	r3, [r7, #8]
3418a390:	fbb2 f3f3 	udiv	r3, r2, r3
3418a394:	60fb      	str	r3, [r7, #12]
            break;
3418a396:	e01b      	b.n	3418a3d0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a398:	f7fd fd70 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418a39c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a39e:	68fa      	ldr	r2, [r7, #12]
3418a3a0:	68bb      	ldr	r3, [r7, #8]
3418a3a2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3a6:	60fb      	str	r3, [r7, #12]
            break;
3418a3a8:	e012      	b.n	3418a3d0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a3aa:	f7fd fdad 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418a3ae:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a3b0:	68fa      	ldr	r2, [r7, #12]
3418a3b2:	68bb      	ldr	r3, [r7, #8]
3418a3b4:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3b8:	60fb      	str	r3, [r7, #12]
            break;
3418a3ba:	e009      	b.n	3418a3d0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a3bc:	f7fd fdea 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418a3c0:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
3418a3c2:	68fa      	ldr	r2, [r7, #12]
3418a3c4:	68bb      	ldr	r3, [r7, #8]
3418a3c6:	fbb2 f3f3 	udiv	r3, r2, r3
3418a3ca:	60fb      	str	r3, [r7, #12]
            break;
3418a3cc:	e000      	b.n	3418a3d0 <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
3418a3ce:	bf00      	nop
        }
      }
      break;
3418a3d0:	e003      	b.n	3418a3da <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
3418a3d2:	bf00      	nop
3418a3d4:	e002      	b.n	3418a3dc <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418a3d6:	bf00      	nop
3418a3d8:	e000      	b.n	3418a3dc <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
3418a3da:	bf00      	nop
  }

  return sdmmc_frequency;
3418a3dc:	68fb      	ldr	r3, [r7, #12]
}
3418a3de:	4618      	mov	r0, r3
3418a3e0:	3710      	adds	r7, #16
3418a3e2:	46bd      	mov	sp, r7
3418a3e4:	bd80      	pop	{r7, pc}
3418a3e6:	bf00      	nop
3418a3e8:	0303041c 	.word	0x0303041c
3418a3ec:	0303001c 	.word	0x0303001c
3418a3f0:	0302041c 	.word	0x0302041c
3418a3f4:	0302001c 	.word	0x0302001c
3418a3f8:	0301041c 	.word	0x0301041c
3418a3fc:	0301001c 	.word	0x0301001c
3418a400:	0300001c 	.word	0x0300001c
3418a404:	0300041c 	.word	0x0300041c

3418a408 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
3418a408:	b580      	push	{r7, lr}
3418a40a:	b084      	sub	sp, #16
3418a40c:	af00      	add	r7, sp, #0
3418a40e:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a410:	2300      	movs	r3, #0
3418a412:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
3418a414:	6878      	ldr	r0, [r7, #4]
3418a416:	f7f9 fe3d 	bl	34184094 <LL_RCC_GetSPDIFRXClockSource>
3418a41a:	4603      	mov	r3, r0
3418a41c:	2b06      	cmp	r3, #6
3418a41e:	f200 80c2 	bhi.w	3418a5a6 <RCCEx_GetSPDIFRXCLKFreq+0x19e>
3418a422:	a201      	add	r2, pc, #4	@ (adr r2, 3418a428 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
3418a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418a428:	3418a445 	.word	0x3418a445
3418a42c:	3418a45d 	.word	0x3418a45d
3418a430:	3418a467 	.word	0x3418a467
3418a434:	3418a4ef 	.word	0x3418a4ef
3418a438:	3418a591 	.word	0x3418a591
3418a43c:	3418a575 	.word	0x3418a575
3418a440:	3418a5a1 	.word	0x3418a5a1
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a444:	f7f8 fe5c 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418a448:	4603      	mov	r3, r0
3418a44a:	4618      	mov	r0, r3
3418a44c:	f7fd fde8 	bl	34188020 <RCCEx_GetHCLKFreq>
3418a450:	4603      	mov	r3, r0
3418a452:	4618      	mov	r0, r3
3418a454:	f7fd fdf5 	bl	34188042 <RCCEx_GetPCLK1Freq>
3418a458:	60f8      	str	r0, [r7, #12]
      break;
3418a45a:	e0ad      	b.n	3418a5b8 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a45c:	2007      	movs	r0, #7
3418a45e:	f7fe f8cb 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418a462:	60f8      	str	r0, [r7, #12]
      break;
3418a464:	e0a8      	b.n	3418a5b8 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418a466:	f7fa f9ef 	bl	34184848 <LL_RCC_IC7_IsEnabled>
3418a46a:	4603      	mov	r3, r0
3418a46c:	2b00      	cmp	r3, #0
3418a46e:	f000 809c 	beq.w	3418a5aa <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3418a472:	f7fa fa0b 	bl	3418488c <LL_RCC_IC7_GetDivider>
3418a476:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
3418a478:	f7fa f9fa 	bl	34184870 <LL_RCC_IC7_GetSource>
3418a47c:	4603      	mov	r3, r0
3418a47e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a482:	d029      	beq.n	3418a4d8 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
3418a484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a488:	d82f      	bhi.n	3418a4ea <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418a48a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a48e:	d01a      	beq.n	3418a4c6 <RCCEx_GetSPDIFRXCLKFreq+0xbe>
3418a490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a494:	d829      	bhi.n	3418a4ea <RCCEx_GetSPDIFRXCLKFreq+0xe2>
3418a496:	2b00      	cmp	r3, #0
3418a498:	d003      	beq.n	3418a4a2 <RCCEx_GetSPDIFRXCLKFreq+0x9a>
3418a49a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a49e:	d009      	beq.n	3418a4b4 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a4a0:	e023      	b.n	3418a4ea <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a4a2:	f7fd fca5 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a4a6:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a4a8:	68fa      	ldr	r2, [r7, #12]
3418a4aa:	68bb      	ldr	r3, [r7, #8]
3418a4ac:	fbb2 f3f3 	udiv	r3, r2, r3
3418a4b0:	60fb      	str	r3, [r7, #12]
            break;
3418a4b2:	e01b      	b.n	3418a4ec <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a4b4:	f7fd fce2 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418a4b8:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a4ba:	68fa      	ldr	r2, [r7, #12]
3418a4bc:	68bb      	ldr	r3, [r7, #8]
3418a4be:	fbb2 f3f3 	udiv	r3, r2, r3
3418a4c2:	60fb      	str	r3, [r7, #12]
            break;
3418a4c4:	e012      	b.n	3418a4ec <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a4c6:	f7fd fd1f 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418a4ca:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a4cc:	68fa      	ldr	r2, [r7, #12]
3418a4ce:	68bb      	ldr	r3, [r7, #8]
3418a4d0:	fbb2 f3f3 	udiv	r3, r2, r3
3418a4d4:	60fb      	str	r3, [r7, #12]
            break;
3418a4d6:	e009      	b.n	3418a4ec <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a4d8:	f7fd fd5c 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418a4dc:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a4de:	68fa      	ldr	r2, [r7, #12]
3418a4e0:	68bb      	ldr	r3, [r7, #8]
3418a4e2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a4e6:	60fb      	str	r3, [r7, #12]
            break;
3418a4e8:	e000      	b.n	3418a4ec <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
3418a4ea:	bf00      	nop
        }
      }
      break;
3418a4ec:	e05d      	b.n	3418a5aa <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418a4ee:	f7fa f9eb 	bl	341848c8 <LL_RCC_IC8_IsEnabled>
3418a4f2:	4603      	mov	r3, r0
3418a4f4:	2b00      	cmp	r3, #0
3418a4f6:	d05a      	beq.n	3418a5ae <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418a4f8:	f7fa fa08 	bl	3418490c <LL_RCC_IC8_GetDivider>
3418a4fc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418a4fe:	f7fa f9f7 	bl	341848f0 <LL_RCC_IC8_GetSource>
3418a502:	4603      	mov	r3, r0
3418a504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a508:	d029      	beq.n	3418a55e <RCCEx_GetSPDIFRXCLKFreq+0x156>
3418a50a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a50e:	d82f      	bhi.n	3418a570 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418a510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a514:	d01a      	beq.n	3418a54c <RCCEx_GetSPDIFRXCLKFreq+0x144>
3418a516:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a51a:	d829      	bhi.n	3418a570 <RCCEx_GetSPDIFRXCLKFreq+0x168>
3418a51c:	2b00      	cmp	r3, #0
3418a51e:	d003      	beq.n	3418a528 <RCCEx_GetSPDIFRXCLKFreq+0x120>
3418a520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a524:	d009      	beq.n	3418a53a <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a526:	e023      	b.n	3418a570 <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a528:	f7fd fc62 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a52c:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a52e:	68fa      	ldr	r2, [r7, #12]
3418a530:	68bb      	ldr	r3, [r7, #8]
3418a532:	fbb2 f3f3 	udiv	r3, r2, r3
3418a536:	60fb      	str	r3, [r7, #12]
            break;
3418a538:	e01b      	b.n	3418a572 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a53a:	f7fd fc9f 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418a53e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a540:	68fa      	ldr	r2, [r7, #12]
3418a542:	68bb      	ldr	r3, [r7, #8]
3418a544:	fbb2 f3f3 	udiv	r3, r2, r3
3418a548:	60fb      	str	r3, [r7, #12]
            break;
3418a54a:	e012      	b.n	3418a572 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a54c:	f7fd fcdc 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418a550:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a552:	68fa      	ldr	r2, [r7, #12]
3418a554:	68bb      	ldr	r3, [r7, #8]
3418a556:	fbb2 f3f3 	udiv	r3, r2, r3
3418a55a:	60fb      	str	r3, [r7, #12]
            break;
3418a55c:	e009      	b.n	3418a572 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a55e:	f7fd fd19 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418a562:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
3418a564:	68fa      	ldr	r2, [r7, #12]
3418a566:	68bb      	ldr	r3, [r7, #8]
3418a568:	fbb2 f3f3 	udiv	r3, r2, r3
3418a56c:	60fb      	str	r3, [r7, #12]
            break;
3418a56e:	e000      	b.n	3418a572 <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
3418a570:	bf00      	nop
        }
      }
      break;
3418a572:	e01c      	b.n	3418a5ae <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418a574:	f7f9 f9c4 	bl	34183900 <LL_RCC_HSI_IsReady>
3418a578:	4603      	mov	r3, r0
3418a57a:	2b00      	cmp	r3, #0
3418a57c:	d019      	beq.n	3418a5b2 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418a57e:	f7f9 f9d1 	bl	34183924 <LL_RCC_HSI_GetDivider>
3418a582:	4603      	mov	r3, r0
3418a584:	09db      	lsrs	r3, r3, #7
3418a586:	4a0f      	ldr	r2, [pc, #60]	@ (3418a5c4 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
3418a588:	fa22 f303 	lsr.w	r3, r2, r3
3418a58c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a58e:	e010      	b.n	3418a5b2 <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418a590:	f7f9 f9d6 	bl	34183940 <LL_RCC_MSI_IsReady>
3418a594:	4603      	mov	r3, r0
3418a596:	2b00      	cmp	r3, #0
3418a598:	d00d      	beq.n	3418a5b6 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
3418a59a:	4b0b      	ldr	r3, [pc, #44]	@ (3418a5c8 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
3418a59c:	60fb      	str	r3, [r7, #12]
      }
      break;
3418a59e:	e00a      	b.n	3418a5b6 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
3418a5a0:	4b0a      	ldr	r3, [pc, #40]	@ (3418a5cc <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
3418a5a2:	60fb      	str	r3, [r7, #12]
      break;
3418a5a4:	e008      	b.n	3418a5b8 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
3418a5a6:	bf00      	nop
3418a5a8:	e006      	b.n	3418a5b8 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418a5aa:	bf00      	nop
3418a5ac:	e004      	b.n	3418a5b8 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418a5ae:	bf00      	nop
3418a5b0:	e002      	b.n	3418a5b8 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418a5b2:	bf00      	nop
3418a5b4:	e000      	b.n	3418a5b8 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
3418a5b6:	bf00      	nop
  }

  return spdifrx_frequency;
3418a5b8:	68fb      	ldr	r3, [r7, #12]
}
3418a5ba:	4618      	mov	r0, r3
3418a5bc:	3710      	adds	r7, #16
3418a5be:	46bd      	mov	sp, r7
3418a5c0:	bd80      	pop	{r7, pc}
3418a5c2:	bf00      	nop
3418a5c4:	03d09000 	.word	0x03d09000
3418a5c8:	003d0900 	.word	0x003d0900
3418a5cc:	00bb8000 	.word	0x00bb8000

3418a5d0 <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
3418a5d0:	b580      	push	{r7, lr}
3418a5d2:	b084      	sub	sp, #16
3418a5d4:	af00      	add	r7, sp, #0
3418a5d6:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418a5d8:	2300      	movs	r3, #0
3418a5da:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
3418a5dc:	6878      	ldr	r0, [r7, #4]
3418a5de:	f7f9 fd6b 	bl	341840b8 <LL_RCC_GetSPIClockSource>
3418a5e2:	4603      	mov	r3, r0
3418a5e4:	4aa7      	ldr	r2, [pc, #668]	@ (3418a884 <RCCEx_GetSPICLKFreq+0x2b4>)
3418a5e6:	4293      	cmp	r3, r2
3418a5e8:	f000 829e 	beq.w	3418ab28 <RCCEx_GetSPICLKFreq+0x558>
3418a5ec:	4aa5      	ldr	r2, [pc, #660]	@ (3418a884 <RCCEx_GetSPICLKFreq+0x2b4>)
3418a5ee:	4293      	cmp	r3, r2
3418a5f0:	f200 82a5 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a5f4:	4aa4      	ldr	r2, [pc, #656]	@ (3418a888 <RCCEx_GetSPICLKFreq+0x2b8>)
3418a5f6:	4293      	cmp	r3, r2
3418a5f8:	f000 8299 	beq.w	3418ab2e <RCCEx_GetSPICLKFreq+0x55e>
3418a5fc:	4aa2      	ldr	r2, [pc, #648]	@ (3418a888 <RCCEx_GetSPICLKFreq+0x2b8>)
3418a5fe:	4293      	cmp	r3, r2
3418a600:	f200 829d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a604:	4aa1      	ldr	r2, [pc, #644]	@ (3418a88c <RCCEx_GetSPICLKFreq+0x2bc>)
3418a606:	4293      	cmp	r3, r2
3418a608:	f000 8291 	beq.w	3418ab2e <RCCEx_GetSPICLKFreq+0x55e>
3418a60c:	4a9f      	ldr	r2, [pc, #636]	@ (3418a88c <RCCEx_GetSPICLKFreq+0x2bc>)
3418a60e:	4293      	cmp	r3, r2
3418a610:	f200 8295 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a614:	4a9e      	ldr	r2, [pc, #632]	@ (3418a890 <RCCEx_GetSPICLKFreq+0x2c0>)
3418a616:	4293      	cmp	r3, r2
3418a618:	f000 8286 	beq.w	3418ab28 <RCCEx_GetSPICLKFreq+0x558>
3418a61c:	4a9c      	ldr	r2, [pc, #624]	@ (3418a890 <RCCEx_GetSPICLKFreq+0x2c0>)
3418a61e:	4293      	cmp	r3, r2
3418a620:	f200 828d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a624:	4a9b      	ldr	r2, [pc, #620]	@ (3418a894 <RCCEx_GetSPICLKFreq+0x2c4>)
3418a626:	4293      	cmp	r3, r2
3418a628:	f000 827e 	beq.w	3418ab28 <RCCEx_GetSPICLKFreq+0x558>
3418a62c:	4a99      	ldr	r2, [pc, #612]	@ (3418a894 <RCCEx_GetSPICLKFreq+0x2c4>)
3418a62e:	4293      	cmp	r3, r2
3418a630:	f200 8285 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a634:	4a98      	ldr	r2, [pc, #608]	@ (3418a898 <RCCEx_GetSPICLKFreq+0x2c8>)
3418a636:	4293      	cmp	r3, r2
3418a638:	f000 8276 	beq.w	3418ab28 <RCCEx_GetSPICLKFreq+0x558>
3418a63c:	4a96      	ldr	r2, [pc, #600]	@ (3418a898 <RCCEx_GetSPICLKFreq+0x2c8>)
3418a63e:	4293      	cmp	r3, r2
3418a640:	f200 827d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a644:	4a95      	ldr	r2, [pc, #596]	@ (3418a89c <RCCEx_GetSPICLKFreq+0x2cc>)
3418a646:	4293      	cmp	r3, r2
3418a648:	f000 8258 	beq.w	3418aafc <RCCEx_GetSPICLKFreq+0x52c>
3418a64c:	4a93      	ldr	r2, [pc, #588]	@ (3418a89c <RCCEx_GetSPICLKFreq+0x2cc>)
3418a64e:	4293      	cmp	r3, r2
3418a650:	f200 8275 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a654:	4a92      	ldr	r2, [pc, #584]	@ (3418a8a0 <RCCEx_GetSPICLKFreq+0x2d0>)
3418a656:	4293      	cmp	r3, r2
3418a658:	f000 8250 	beq.w	3418aafc <RCCEx_GetSPICLKFreq+0x52c>
3418a65c:	4a90      	ldr	r2, [pc, #576]	@ (3418a8a0 <RCCEx_GetSPICLKFreq+0x2d0>)
3418a65e:	4293      	cmp	r3, r2
3418a660:	f200 826d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a664:	4a8f      	ldr	r2, [pc, #572]	@ (3418a8a4 <RCCEx_GetSPICLKFreq+0x2d4>)
3418a666:	4293      	cmp	r3, r2
3418a668:	f000 8248 	beq.w	3418aafc <RCCEx_GetSPICLKFreq+0x52c>
3418a66c:	4a8d      	ldr	r2, [pc, #564]	@ (3418a8a4 <RCCEx_GetSPICLKFreq+0x2d4>)
3418a66e:	4293      	cmp	r3, r2
3418a670:	f200 8265 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a674:	4a8c      	ldr	r2, [pc, #560]	@ (3418a8a8 <RCCEx_GetSPICLKFreq+0x2d8>)
3418a676:	4293      	cmp	r3, r2
3418a678:	f000 8240 	beq.w	3418aafc <RCCEx_GetSPICLKFreq+0x52c>
3418a67c:	4a8a      	ldr	r2, [pc, #552]	@ (3418a8a8 <RCCEx_GetSPICLKFreq+0x2d8>)
3418a67e:	4293      	cmp	r3, r2
3418a680:	f200 825d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a684:	4a89      	ldr	r2, [pc, #548]	@ (3418a8ac <RCCEx_GetSPICLKFreq+0x2dc>)
3418a686:	4293      	cmp	r3, r2
3418a688:	f000 8238 	beq.w	3418aafc <RCCEx_GetSPICLKFreq+0x52c>
3418a68c:	4a87      	ldr	r2, [pc, #540]	@ (3418a8ac <RCCEx_GetSPICLKFreq+0x2dc>)
3418a68e:	4293      	cmp	r3, r2
3418a690:	f200 8255 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a694:	4a86      	ldr	r2, [pc, #536]	@ (3418a8b0 <RCCEx_GetSPICLKFreq+0x2e0>)
3418a696:	4293      	cmp	r3, r2
3418a698:	f000 8230 	beq.w	3418aafc <RCCEx_GetSPICLKFreq+0x52c>
3418a69c:	4a84      	ldr	r2, [pc, #528]	@ (3418a8b0 <RCCEx_GetSPICLKFreq+0x2e0>)
3418a69e:	4293      	cmp	r3, r2
3418a6a0:	f200 824d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a6a4:	4a83      	ldr	r2, [pc, #524]	@ (3418a8b4 <RCCEx_GetSPICLKFreq+0x2e4>)
3418a6a6:	4293      	cmp	r3, r2
3418a6a8:	f000 8236 	beq.w	3418ab18 <RCCEx_GetSPICLKFreq+0x548>
3418a6ac:	4a81      	ldr	r2, [pc, #516]	@ (3418a8b4 <RCCEx_GetSPICLKFreq+0x2e4>)
3418a6ae:	4293      	cmp	r3, r2
3418a6b0:	f200 8245 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a6b4:	4a80      	ldr	r2, [pc, #512]	@ (3418a8b8 <RCCEx_GetSPICLKFreq+0x2e8>)
3418a6b6:	4293      	cmp	r3, r2
3418a6b8:	f000 822e 	beq.w	3418ab18 <RCCEx_GetSPICLKFreq+0x548>
3418a6bc:	4a7e      	ldr	r2, [pc, #504]	@ (3418a8b8 <RCCEx_GetSPICLKFreq+0x2e8>)
3418a6be:	4293      	cmp	r3, r2
3418a6c0:	f200 823d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a6c4:	4a7d      	ldr	r2, [pc, #500]	@ (3418a8bc <RCCEx_GetSPICLKFreq+0x2ec>)
3418a6c6:	4293      	cmp	r3, r2
3418a6c8:	f000 8226 	beq.w	3418ab18 <RCCEx_GetSPICLKFreq+0x548>
3418a6cc:	4a7b      	ldr	r2, [pc, #492]	@ (3418a8bc <RCCEx_GetSPICLKFreq+0x2ec>)
3418a6ce:	4293      	cmp	r3, r2
3418a6d0:	f200 8235 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a6d4:	4a7a      	ldr	r2, [pc, #488]	@ (3418a8c0 <RCCEx_GetSPICLKFreq+0x2f0>)
3418a6d6:	4293      	cmp	r3, r2
3418a6d8:	f000 821e 	beq.w	3418ab18 <RCCEx_GetSPICLKFreq+0x548>
3418a6dc:	4a78      	ldr	r2, [pc, #480]	@ (3418a8c0 <RCCEx_GetSPICLKFreq+0x2f0>)
3418a6de:	4293      	cmp	r3, r2
3418a6e0:	f200 822d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a6e4:	4a77      	ldr	r2, [pc, #476]	@ (3418a8c4 <RCCEx_GetSPICLKFreq+0x2f4>)
3418a6e6:	4293      	cmp	r3, r2
3418a6e8:	f000 8216 	beq.w	3418ab18 <RCCEx_GetSPICLKFreq+0x548>
3418a6ec:	4a75      	ldr	r2, [pc, #468]	@ (3418a8c4 <RCCEx_GetSPICLKFreq+0x2f4>)
3418a6ee:	4293      	cmp	r3, r2
3418a6f0:	f200 8225 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a6f4:	4a74      	ldr	r2, [pc, #464]	@ (3418a8c8 <RCCEx_GetSPICLKFreq+0x2f8>)
3418a6f6:	4293      	cmp	r3, r2
3418a6f8:	f000 820e 	beq.w	3418ab18 <RCCEx_GetSPICLKFreq+0x548>
3418a6fc:	4a72      	ldr	r2, [pc, #456]	@ (3418a8c8 <RCCEx_GetSPICLKFreq+0x2f8>)
3418a6fe:	4293      	cmp	r3, r2
3418a700:	f200 821d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a704:	4a71      	ldr	r2, [pc, #452]	@ (3418a8cc <RCCEx_GetSPICLKFreq+0x2fc>)
3418a706:	4293      	cmp	r3, r2
3418a708:	f000 8171 	beq.w	3418a9ee <RCCEx_GetSPICLKFreq+0x41e>
3418a70c:	4a6f      	ldr	r2, [pc, #444]	@ (3418a8cc <RCCEx_GetSPICLKFreq+0x2fc>)
3418a70e:	4293      	cmp	r3, r2
3418a710:	f200 8215 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a714:	4a6e      	ldr	r2, [pc, #440]	@ (3418a8d0 <RCCEx_GetSPICLKFreq+0x300>)
3418a716:	4293      	cmp	r3, r2
3418a718:	f000 81ad 	beq.w	3418aa76 <RCCEx_GetSPICLKFreq+0x4a6>
3418a71c:	4a6c      	ldr	r2, [pc, #432]	@ (3418a8d0 <RCCEx_GetSPICLKFreq+0x300>)
3418a71e:	4293      	cmp	r3, r2
3418a720:	f200 820d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a724:	4a6b      	ldr	r2, [pc, #428]	@ (3418a8d4 <RCCEx_GetSPICLKFreq+0x304>)
3418a726:	4293      	cmp	r3, r2
3418a728:	f000 81a5 	beq.w	3418aa76 <RCCEx_GetSPICLKFreq+0x4a6>
3418a72c:	4a69      	ldr	r2, [pc, #420]	@ (3418a8d4 <RCCEx_GetSPICLKFreq+0x304>)
3418a72e:	4293      	cmp	r3, r2
3418a730:	f200 8205 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a734:	4a68      	ldr	r2, [pc, #416]	@ (3418a8d8 <RCCEx_GetSPICLKFreq+0x308>)
3418a736:	4293      	cmp	r3, r2
3418a738:	f000 8159 	beq.w	3418a9ee <RCCEx_GetSPICLKFreq+0x41e>
3418a73c:	4a66      	ldr	r2, [pc, #408]	@ (3418a8d8 <RCCEx_GetSPICLKFreq+0x308>)
3418a73e:	4293      	cmp	r3, r2
3418a740:	f200 81fd 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a744:	4a65      	ldr	r2, [pc, #404]	@ (3418a8dc <RCCEx_GetSPICLKFreq+0x30c>)
3418a746:	4293      	cmp	r3, r2
3418a748:	f000 8151 	beq.w	3418a9ee <RCCEx_GetSPICLKFreq+0x41e>
3418a74c:	4a63      	ldr	r2, [pc, #396]	@ (3418a8dc <RCCEx_GetSPICLKFreq+0x30c>)
3418a74e:	4293      	cmp	r3, r2
3418a750:	f200 81f5 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a754:	4a62      	ldr	r2, [pc, #392]	@ (3418a8e0 <RCCEx_GetSPICLKFreq+0x310>)
3418a756:	4293      	cmp	r3, r2
3418a758:	f000 8149 	beq.w	3418a9ee <RCCEx_GetSPICLKFreq+0x41e>
3418a75c:	4a60      	ldr	r2, [pc, #384]	@ (3418a8e0 <RCCEx_GetSPICLKFreq+0x310>)
3418a75e:	4293      	cmp	r3, r2
3418a760:	f200 81ed 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a764:	4a5f      	ldr	r2, [pc, #380]	@ (3418a8e4 <RCCEx_GetSPICLKFreq+0x314>)
3418a766:	4293      	cmp	r3, r2
3418a768:	f000 80fd 	beq.w	3418a966 <RCCEx_GetSPICLKFreq+0x396>
3418a76c:	4a5d      	ldr	r2, [pc, #372]	@ (3418a8e4 <RCCEx_GetSPICLKFreq+0x314>)
3418a76e:	4293      	cmp	r3, r2
3418a770:	f200 81e5 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a774:	4a5c      	ldr	r2, [pc, #368]	@ (3418a8e8 <RCCEx_GetSPICLKFreq+0x318>)
3418a776:	4293      	cmp	r3, r2
3418a778:	f000 8139 	beq.w	3418a9ee <RCCEx_GetSPICLKFreq+0x41e>
3418a77c:	4a5a      	ldr	r2, [pc, #360]	@ (3418a8e8 <RCCEx_GetSPICLKFreq+0x318>)
3418a77e:	4293      	cmp	r3, r2
3418a780:	f200 81dd 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a784:	4a59      	ldr	r2, [pc, #356]	@ (3418a8ec <RCCEx_GetSPICLKFreq+0x31c>)
3418a786:	4293      	cmp	r3, r2
3418a788:	f000 8131 	beq.w	3418a9ee <RCCEx_GetSPICLKFreq+0x41e>
3418a78c:	4a57      	ldr	r2, [pc, #348]	@ (3418a8ec <RCCEx_GetSPICLKFreq+0x31c>)
3418a78e:	4293      	cmp	r3, r2
3418a790:	f200 81d5 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a794:	4a56      	ldr	r2, [pc, #344]	@ (3418a8f0 <RCCEx_GetSPICLKFreq+0x320>)
3418a796:	4293      	cmp	r3, r2
3418a798:	f000 80e5 	beq.w	3418a966 <RCCEx_GetSPICLKFreq+0x396>
3418a79c:	4a54      	ldr	r2, [pc, #336]	@ (3418a8f0 <RCCEx_GetSPICLKFreq+0x320>)
3418a79e:	4293      	cmp	r3, r2
3418a7a0:	f200 81cd 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a7a4:	4a53      	ldr	r2, [pc, #332]	@ (3418a8f4 <RCCEx_GetSPICLKFreq+0x324>)
3418a7a6:	4293      	cmp	r3, r2
3418a7a8:	f000 80dd 	beq.w	3418a966 <RCCEx_GetSPICLKFreq+0x396>
3418a7ac:	4a51      	ldr	r2, [pc, #324]	@ (3418a8f4 <RCCEx_GetSPICLKFreq+0x324>)
3418a7ae:	4293      	cmp	r3, r2
3418a7b0:	f200 81c5 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a7b4:	4a50      	ldr	r2, [pc, #320]	@ (3418a8f8 <RCCEx_GetSPICLKFreq+0x328>)
3418a7b6:	4293      	cmp	r3, r2
3418a7b8:	f000 80d5 	beq.w	3418a966 <RCCEx_GetSPICLKFreq+0x396>
3418a7bc:	4a4e      	ldr	r2, [pc, #312]	@ (3418a8f8 <RCCEx_GetSPICLKFreq+0x328>)
3418a7be:	4293      	cmp	r3, r2
3418a7c0:	f200 81bd 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a7c4:	4a4d      	ldr	r2, [pc, #308]	@ (3418a8fc <RCCEx_GetSPICLKFreq+0x32c>)
3418a7c6:	4293      	cmp	r3, r2
3418a7c8:	f000 80c8 	beq.w	3418a95c <RCCEx_GetSPICLKFreq+0x38c>
3418a7cc:	4a4b      	ldr	r2, [pc, #300]	@ (3418a8fc <RCCEx_GetSPICLKFreq+0x32c>)
3418a7ce:	4293      	cmp	r3, r2
3418a7d0:	f200 81b5 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a7d4:	4a4a      	ldr	r2, [pc, #296]	@ (3418a900 <RCCEx_GetSPICLKFreq+0x330>)
3418a7d6:	4293      	cmp	r3, r2
3418a7d8:	f000 80c0 	beq.w	3418a95c <RCCEx_GetSPICLKFreq+0x38c>
3418a7dc:	4a48      	ldr	r2, [pc, #288]	@ (3418a900 <RCCEx_GetSPICLKFreq+0x330>)
3418a7de:	4293      	cmp	r3, r2
3418a7e0:	f200 81ad 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a7e4:	4a47      	ldr	r2, [pc, #284]	@ (3418a904 <RCCEx_GetSPICLKFreq+0x334>)
3418a7e6:	4293      	cmp	r3, r2
3418a7e8:	f000 80b8 	beq.w	3418a95c <RCCEx_GetSPICLKFreq+0x38c>
3418a7ec:	4a45      	ldr	r2, [pc, #276]	@ (3418a904 <RCCEx_GetSPICLKFreq+0x334>)
3418a7ee:	4293      	cmp	r3, r2
3418a7f0:	f200 81a5 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a7f4:	4a44      	ldr	r2, [pc, #272]	@ (3418a908 <RCCEx_GetSPICLKFreq+0x338>)
3418a7f6:	4293      	cmp	r3, r2
3418a7f8:	f000 80b0 	beq.w	3418a95c <RCCEx_GetSPICLKFreq+0x38c>
3418a7fc:	4a42      	ldr	r2, [pc, #264]	@ (3418a908 <RCCEx_GetSPICLKFreq+0x338>)
3418a7fe:	4293      	cmp	r3, r2
3418a800:	f200 819d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a804:	4a41      	ldr	r2, [pc, #260]	@ (3418a90c <RCCEx_GetSPICLKFreq+0x33c>)
3418a806:	4293      	cmp	r3, r2
3418a808:	f000 80a8 	beq.w	3418a95c <RCCEx_GetSPICLKFreq+0x38c>
3418a80c:	4a3f      	ldr	r2, [pc, #252]	@ (3418a90c <RCCEx_GetSPICLKFreq+0x33c>)
3418a80e:	4293      	cmp	r3, r2
3418a810:	f200 8195 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a814:	4a3e      	ldr	r2, [pc, #248]	@ (3418a910 <RCCEx_GetSPICLKFreq+0x340>)
3418a816:	4293      	cmp	r3, r2
3418a818:	f000 80a0 	beq.w	3418a95c <RCCEx_GetSPICLKFreq+0x38c>
3418a81c:	4a3c      	ldr	r2, [pc, #240]	@ (3418a910 <RCCEx_GetSPICLKFreq+0x340>)
3418a81e:	4293      	cmp	r3, r2
3418a820:	f200 818d 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a824:	4a3b      	ldr	r2, [pc, #236]	@ (3418a914 <RCCEx_GetSPICLKFreq+0x344>)
3418a826:	4293      	cmp	r3, r2
3418a828:	f000 808c 	beq.w	3418a944 <RCCEx_GetSPICLKFreq+0x374>
3418a82c:	4a39      	ldr	r2, [pc, #228]	@ (3418a914 <RCCEx_GetSPICLKFreq+0x344>)
3418a82e:	4293      	cmp	r3, r2
3418a830:	f200 8185 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a834:	4a38      	ldr	r2, [pc, #224]	@ (3418a918 <RCCEx_GetSPICLKFreq+0x348>)
3418a836:	4293      	cmp	r3, r2
3418a838:	d078      	beq.n	3418a92c <RCCEx_GetSPICLKFreq+0x35c>
3418a83a:	4a37      	ldr	r2, [pc, #220]	@ (3418a918 <RCCEx_GetSPICLKFreq+0x348>)
3418a83c:	4293      	cmp	r3, r2
3418a83e:	f200 817e 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a842:	4a36      	ldr	r2, [pc, #216]	@ (3418a91c <RCCEx_GetSPICLKFreq+0x34c>)
3418a844:	4293      	cmp	r3, r2
3418a846:	d071      	beq.n	3418a92c <RCCEx_GetSPICLKFreq+0x35c>
3418a848:	4a34      	ldr	r2, [pc, #208]	@ (3418a91c <RCCEx_GetSPICLKFreq+0x34c>)
3418a84a:	4293      	cmp	r3, r2
3418a84c:	f200 8177 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a850:	4a33      	ldr	r2, [pc, #204]	@ (3418a920 <RCCEx_GetSPICLKFreq+0x350>)
3418a852:	4293      	cmp	r3, r2
3418a854:	d00a      	beq.n	3418a86c <RCCEx_GetSPICLKFreq+0x29c>
3418a856:	4a32      	ldr	r2, [pc, #200]	@ (3418a920 <RCCEx_GetSPICLKFreq+0x350>)
3418a858:	4293      	cmp	r3, r2
3418a85a:	f200 8170 	bhi.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
3418a85e:	4a31      	ldr	r2, [pc, #196]	@ (3418a924 <RCCEx_GetSPICLKFreq+0x354>)
3418a860:	4293      	cmp	r3, r2
3418a862:	d063      	beq.n	3418a92c <RCCEx_GetSPICLKFreq+0x35c>
3418a864:	4a30      	ldr	r2, [pc, #192]	@ (3418a928 <RCCEx_GetSPICLKFreq+0x358>)
3418a866:	4293      	cmp	r3, r2
3418a868:	f040 8169 	bne.w	3418ab3e <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a86c:	f7f8 fc48 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418a870:	4603      	mov	r3, r0
3418a872:	4618      	mov	r0, r3
3418a874:	f7fd fbd4 	bl	34188020 <RCCEx_GetHCLKFreq>
3418a878:	4603      	mov	r3, r0
3418a87a:	4618      	mov	r0, r3
3418a87c:	f7fd fbe1 	bl	34188042 <RCCEx_GetPCLK1Freq>
3418a880:	60f8      	str	r0, [r7, #12]
      break;
3418a882:	e169      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>
3418a884:	07061820 	.word	0x07061820
3418a888:	07061420 	.word	0x07061420
3418a88c:	07061020 	.word	0x07061020
3418a890:	07060c20 	.word	0x07060c20
3418a894:	07060820 	.word	0x07060820
3418a898:	07060420 	.word	0x07060420
3418a89c:	07051820 	.word	0x07051820
3418a8a0:	07051420 	.word	0x07051420
3418a8a4:	07051020 	.word	0x07051020
3418a8a8:	07050c20 	.word	0x07050c20
3418a8ac:	07050820 	.word	0x07050820
3418a8b0:	07050420 	.word	0x07050420
3418a8b4:	07041820 	.word	0x07041820
3418a8b8:	07041420 	.word	0x07041420
3418a8bc:	07041020 	.word	0x07041020
3418a8c0:	07040c20 	.word	0x07040c20
3418a8c4:	07040820 	.word	0x07040820
3418a8c8:	07040420 	.word	0x07040420
3418a8cc:	07031820 	.word	0x07031820
3418a8d0:	07031420 	.word	0x07031420
3418a8d4:	07031020 	.word	0x07031020
3418a8d8:	07030c20 	.word	0x07030c20
3418a8dc:	07030820 	.word	0x07030820
3418a8e0:	07030420 	.word	0x07030420
3418a8e4:	07021820 	.word	0x07021820
3418a8e8:	07021420 	.word	0x07021420
3418a8ec:	07021020 	.word	0x07021020
3418a8f0:	07020c20 	.word	0x07020c20
3418a8f4:	07020820 	.word	0x07020820
3418a8f8:	07020420 	.word	0x07020420
3418a8fc:	07011820 	.word	0x07011820
3418a900:	07011420 	.word	0x07011420
3418a904:	07011020 	.word	0x07011020
3418a908:	07010c20 	.word	0x07010c20
3418a90c:	07010820 	.word	0x07010820
3418a910:	07010420 	.word	0x07010420
3418a914:	07001820 	.word	0x07001820
3418a918:	07001420 	.word	0x07001420
3418a91c:	07001020 	.word	0x07001020
3418a920:	07000c20 	.word	0x07000c20
3418a924:	07000420 	.word	0x07000420
3418a928:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a92c:	f7f8 fbe8 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418a930:	4603      	mov	r3, r0
3418a932:	4618      	mov	r0, r3
3418a934:	f7fd fb74 	bl	34188020 <RCCEx_GetHCLKFreq>
3418a938:	4603      	mov	r3, r0
3418a93a:	4618      	mov	r0, r3
3418a93c:	f7fd fb91 	bl	34188062 <RCCEx_GetPCLK2Freq>
3418a940:	60f8      	str	r0, [r7, #12]
      break;
3418a942:	e109      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418a944:	f7f8 fbdc 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418a948:	4603      	mov	r3, r0
3418a94a:	4618      	mov	r0, r3
3418a94c:	f7fd fb68 	bl	34188020 <RCCEx_GetHCLKFreq>
3418a950:	4603      	mov	r3, r0
3418a952:	4618      	mov	r0, r3
3418a954:	f7fd fb96 	bl	34188084 <RCCEx_GetPCLK4Freq>
3418a958:	60f8      	str	r0, [r7, #12]
      break;
3418a95a:	e0fd      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418a95c:	2007      	movs	r0, #7
3418a95e:	f7fd fe4b 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418a962:	60f8      	str	r0, [r7, #12]
      break;
3418a964:	e0f8      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
3418a966:	f7f9 ffaf 	bl	341848c8 <LL_RCC_IC8_IsEnabled>
3418a96a:	4603      	mov	r3, r0
3418a96c:	2b00      	cmp	r3, #0
3418a96e:	f000 80e8 	beq.w	3418ab42 <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3418a972:	f7f9 ffcb 	bl	3418490c <LL_RCC_IC8_GetDivider>
3418a976:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
3418a978:	f7f9 ffba 	bl	341848f0 <LL_RCC_IC8_GetSource>
3418a97c:	4603      	mov	r3, r0
3418a97e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a982:	d029      	beq.n	3418a9d8 <RCCEx_GetSPICLKFreq+0x408>
3418a984:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418a988:	d82f      	bhi.n	3418a9ea <RCCEx_GetSPICLKFreq+0x41a>
3418a98a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a98e:	d01a      	beq.n	3418a9c6 <RCCEx_GetSPICLKFreq+0x3f6>
3418a990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418a994:	d829      	bhi.n	3418a9ea <RCCEx_GetSPICLKFreq+0x41a>
3418a996:	2b00      	cmp	r3, #0
3418a998:	d003      	beq.n	3418a9a2 <RCCEx_GetSPICLKFreq+0x3d2>
3418a99a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a99e:	d009      	beq.n	3418a9b4 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418a9a0:	e023      	b.n	3418a9ea <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418a9a2:	f7fd fa25 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418a9a6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a9a8:	68fa      	ldr	r2, [r7, #12]
3418a9aa:	68bb      	ldr	r3, [r7, #8]
3418a9ac:	fbb2 f3f3 	udiv	r3, r2, r3
3418a9b0:	60fb      	str	r3, [r7, #12]
            break;
3418a9b2:	e01b      	b.n	3418a9ec <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418a9b4:	f7fd fa62 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418a9b8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a9ba:	68fa      	ldr	r2, [r7, #12]
3418a9bc:	68bb      	ldr	r3, [r7, #8]
3418a9be:	fbb2 f3f3 	udiv	r3, r2, r3
3418a9c2:	60fb      	str	r3, [r7, #12]
            break;
3418a9c4:	e012      	b.n	3418a9ec <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418a9c6:	f7fd fa9f 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418a9ca:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a9cc:	68fa      	ldr	r2, [r7, #12]
3418a9ce:	68bb      	ldr	r3, [r7, #8]
3418a9d0:	fbb2 f3f3 	udiv	r3, r2, r3
3418a9d4:	60fb      	str	r3, [r7, #12]
            break;
3418a9d6:	e009      	b.n	3418a9ec <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418a9d8:	f7fd fadc 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418a9dc:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418a9de:	68fa      	ldr	r2, [r7, #12]
3418a9e0:	68bb      	ldr	r3, [r7, #8]
3418a9e2:	fbb2 f3f3 	udiv	r3, r2, r3
3418a9e6:	60fb      	str	r3, [r7, #12]
            break;
3418a9e8:	e000      	b.n	3418a9ec <RCCEx_GetSPICLKFreq+0x41c>
            break;
3418a9ea:	bf00      	nop
        }
      }
      break;
3418a9ec:	e0a9      	b.n	3418ab42 <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418a9ee:	f7f9 ffab 	bl	34184948 <LL_RCC_IC9_IsEnabled>
3418a9f2:	4603      	mov	r3, r0
3418a9f4:	2b00      	cmp	r3, #0
3418a9f6:	f000 80a6 	beq.w	3418ab46 <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418a9fa:	f7f9 ffc7 	bl	3418498c <LL_RCC_IC9_GetDivider>
3418a9fe:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418aa00:	f7f9 ffb6 	bl	34184970 <LL_RCC_IC9_GetSource>
3418aa04:	4603      	mov	r3, r0
3418aa06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aa0a:	d029      	beq.n	3418aa60 <RCCEx_GetSPICLKFreq+0x490>
3418aa0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aa10:	d82f      	bhi.n	3418aa72 <RCCEx_GetSPICLKFreq+0x4a2>
3418aa12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aa16:	d01a      	beq.n	3418aa4e <RCCEx_GetSPICLKFreq+0x47e>
3418aa18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aa1c:	d829      	bhi.n	3418aa72 <RCCEx_GetSPICLKFreq+0x4a2>
3418aa1e:	2b00      	cmp	r3, #0
3418aa20:	d003      	beq.n	3418aa2a <RCCEx_GetSPICLKFreq+0x45a>
3418aa22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aa26:	d009      	beq.n	3418aa3c <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418aa28:	e023      	b.n	3418aa72 <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418aa2a:	f7fd f9e1 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418aa2e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa30:	68fa      	ldr	r2, [r7, #12]
3418aa32:	68bb      	ldr	r3, [r7, #8]
3418aa34:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa38:	60fb      	str	r3, [r7, #12]
            break;
3418aa3a:	e01b      	b.n	3418aa74 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aa3c:	f7fd fa1e 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418aa40:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa42:	68fa      	ldr	r2, [r7, #12]
3418aa44:	68bb      	ldr	r3, [r7, #8]
3418aa46:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa4a:	60fb      	str	r3, [r7, #12]
            break;
3418aa4c:	e012      	b.n	3418aa74 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418aa4e:	f7fd fa5b 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418aa52:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa54:	68fa      	ldr	r2, [r7, #12]
3418aa56:	68bb      	ldr	r3, [r7, #8]
3418aa58:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa5c:	60fb      	str	r3, [r7, #12]
            break;
3418aa5e:	e009      	b.n	3418aa74 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418aa60:	f7fd fa98 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418aa64:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aa66:	68fa      	ldr	r2, [r7, #12]
3418aa68:	68bb      	ldr	r3, [r7, #8]
3418aa6a:	fbb2 f3f3 	udiv	r3, r2, r3
3418aa6e:	60fb      	str	r3, [r7, #12]
            break;
3418aa70:	e000      	b.n	3418aa74 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3418aa72:	bf00      	nop
        }
      }
      break;
3418aa74:	e067      	b.n	3418ab46 <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418aa76:	f7fa f867 	bl	34184b48 <LL_RCC_IC14_IsEnabled>
3418aa7a:	4603      	mov	r3, r0
3418aa7c:	2b00      	cmp	r3, #0
3418aa7e:	d064      	beq.n	3418ab4a <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418aa80:	f7fa f884 	bl	34184b8c <LL_RCC_IC14_GetDivider>
3418aa84:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418aa86:	f7fa f873 	bl	34184b70 <LL_RCC_IC14_GetSource>
3418aa8a:	4603      	mov	r3, r0
3418aa8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aa90:	d029      	beq.n	3418aae6 <RCCEx_GetSPICLKFreq+0x516>
3418aa92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aa96:	d82f      	bhi.n	3418aaf8 <RCCEx_GetSPICLKFreq+0x528>
3418aa98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aa9c:	d01a      	beq.n	3418aad4 <RCCEx_GetSPICLKFreq+0x504>
3418aa9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418aaa2:	d829      	bhi.n	3418aaf8 <RCCEx_GetSPICLKFreq+0x528>
3418aaa4:	2b00      	cmp	r3, #0
3418aaa6:	d003      	beq.n	3418aab0 <RCCEx_GetSPICLKFreq+0x4e0>
3418aaa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418aaac:	d009      	beq.n	3418aac2 <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418aaae:	e023      	b.n	3418aaf8 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418aab0:	f7fd f99e 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418aab4:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aab6:	68fa      	ldr	r2, [r7, #12]
3418aab8:	68bb      	ldr	r3, [r7, #8]
3418aaba:	fbb2 f3f3 	udiv	r3, r2, r3
3418aabe:	60fb      	str	r3, [r7, #12]
            break;
3418aac0:	e01b      	b.n	3418aafa <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aac2:	f7fd f9db 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418aac6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aac8:	68fa      	ldr	r2, [r7, #12]
3418aaca:	68bb      	ldr	r3, [r7, #8]
3418aacc:	fbb2 f3f3 	udiv	r3, r2, r3
3418aad0:	60fb      	str	r3, [r7, #12]
            break;
3418aad2:	e012      	b.n	3418aafa <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418aad4:	f7fd fa18 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418aad8:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aada:	68fa      	ldr	r2, [r7, #12]
3418aadc:	68bb      	ldr	r3, [r7, #8]
3418aade:	fbb2 f3f3 	udiv	r3, r2, r3
3418aae2:	60fb      	str	r3, [r7, #12]
            break;
3418aae4:	e009      	b.n	3418aafa <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418aae6:	f7fd fa55 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418aaea:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3418aaec:	68fa      	ldr	r2, [r7, #12]
3418aaee:	68bb      	ldr	r3, [r7, #8]
3418aaf0:	fbb2 f3f3 	udiv	r3, r2, r3
3418aaf4:	60fb      	str	r3, [r7, #12]
            break;
3418aaf6:	e000      	b.n	3418aafa <RCCEx_GetSPICLKFreq+0x52a>
            break;
3418aaf8:	bf00      	nop
        }
      }
      break;
3418aafa:	e026      	b.n	3418ab4a <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418aafc:	f7f8 ff00 	bl	34183900 <LL_RCC_HSI_IsReady>
3418ab00:	4603      	mov	r3, r0
3418ab02:	2b00      	cmp	r3, #0
3418ab04:	d023      	beq.n	3418ab4e <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418ab06:	f7f8 ff0d 	bl	34183924 <LL_RCC_HSI_GetDivider>
3418ab0a:	4603      	mov	r3, r0
3418ab0c:	09db      	lsrs	r3, r3, #7
3418ab0e:	4a15      	ldr	r2, [pc, #84]	@ (3418ab64 <RCCEx_GetSPICLKFreq+0x594>)
3418ab10:	fa22 f303 	lsr.w	r3, r2, r3
3418ab14:	60fb      	str	r3, [r7, #12]
      }
      break;
3418ab16:	e01a      	b.n	3418ab4e <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418ab18:	f7f8 ff12 	bl	34183940 <LL_RCC_MSI_IsReady>
3418ab1c:	4603      	mov	r3, r0
3418ab1e:	2b00      	cmp	r3, #0
3418ab20:	d017      	beq.n	3418ab52 <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
3418ab22:	4b11      	ldr	r3, [pc, #68]	@ (3418ab68 <RCCEx_GetSPICLKFreq+0x598>)
3418ab24:	60fb      	str	r3, [r7, #12]
      }
      break;
3418ab26:	e014      	b.n	3418ab52 <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
3418ab28:	4b10      	ldr	r3, [pc, #64]	@ (3418ab6c <RCCEx_GetSPICLKFreq+0x59c>)
3418ab2a:	60fb      	str	r3, [r7, #12]
      break;
3418ab2c:	e014      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3418ab2e:	f7f8 fed5 	bl	341838dc <LL_RCC_HSE_IsReady>
3418ab32:	4603      	mov	r3, r0
3418ab34:	2b00      	cmp	r3, #0
3418ab36:	d00e      	beq.n	3418ab56 <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
3418ab38:	4b0d      	ldr	r3, [pc, #52]	@ (3418ab70 <RCCEx_GetSPICLKFreq+0x5a0>)
3418ab3a:	60fb      	str	r3, [r7, #12]
      }
      break;
3418ab3c:	e00b      	b.n	3418ab56 <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
3418ab3e:	bf00      	nop
3418ab40:	e00a      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418ab42:	bf00      	nop
3418ab44:	e008      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418ab46:	bf00      	nop
3418ab48:	e006      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418ab4a:	bf00      	nop
3418ab4c:	e004      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418ab4e:	bf00      	nop
3418ab50:	e002      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418ab52:	bf00      	nop
3418ab54:	e000      	b.n	3418ab58 <RCCEx_GetSPICLKFreq+0x588>
      break;
3418ab56:	bf00      	nop
  }

  return spi_frequency;
3418ab58:	68fb      	ldr	r3, [r7, #12]
}
3418ab5a:	4618      	mov	r0, r3
3418ab5c:	3710      	adds	r7, #16
3418ab5e:	46bd      	mov	sp, r7
3418ab60:	bd80      	pop	{r7, pc}
3418ab62:	bf00      	nop
3418ab64:	03d09000 	.word	0x03d09000
3418ab68:	003d0900 	.word	0x003d0900
3418ab6c:	00bb8000 	.word	0x00bb8000
3418ab70:	02dc6c00 	.word	0x02dc6c00

3418ab74 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
3418ab74:	b580      	push	{r7, lr}
3418ab76:	b084      	sub	sp, #16
3418ab78:	af00      	add	r7, sp, #0
3418ab7a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418ab7c:	2300      	movs	r3, #0
3418ab7e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418ab80:	6878      	ldr	r0, [r7, #4]
3418ab82:	f7f9 fab1 	bl	341840e8 <LL_RCC_GetUARTClockSource>
3418ab86:	4603      	mov	r3, r0
3418ab88:	4aa2      	ldr	r2, [pc, #648]	@ (3418ae14 <RCCEx_GetUARTCLKFreq+0x2a0>)
3418ab8a:	4293      	cmp	r3, r2
3418ab8c:	f000 81e8 	beq.w	3418af60 <RCCEx_GetUARTCLKFreq+0x3ec>
3418ab90:	4aa0      	ldr	r2, [pc, #640]	@ (3418ae14 <RCCEx_GetUARTCLKFreq+0x2a0>)
3418ab92:	4293      	cmp	r3, r2
3418ab94:	f200 8203 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ab98:	4a9f      	ldr	r2, [pc, #636]	@ (3418ae18 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418ab9a:	4293      	cmp	r3, r2
3418ab9c:	f000 81e0 	beq.w	3418af60 <RCCEx_GetUARTCLKFreq+0x3ec>
3418aba0:	4a9d      	ldr	r2, [pc, #628]	@ (3418ae18 <RCCEx_GetUARTCLKFreq+0x2a4>)
3418aba2:	4293      	cmp	r3, r2
3418aba4:	f200 81fb 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418aba8:	4a9c      	ldr	r2, [pc, #624]	@ (3418ae1c <RCCEx_GetUARTCLKFreq+0x2a8>)
3418abaa:	4293      	cmp	r3, r2
3418abac:	f000 81d8 	beq.w	3418af60 <RCCEx_GetUARTCLKFreq+0x3ec>
3418abb0:	4a9a      	ldr	r2, [pc, #616]	@ (3418ae1c <RCCEx_GetUARTCLKFreq+0x2a8>)
3418abb2:	4293      	cmp	r3, r2
3418abb4:	f200 81f3 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418abb8:	4a99      	ldr	r2, [pc, #612]	@ (3418ae20 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418abba:	4293      	cmp	r3, r2
3418abbc:	f000 81d0 	beq.w	3418af60 <RCCEx_GetUARTCLKFreq+0x3ec>
3418abc0:	4a97      	ldr	r2, [pc, #604]	@ (3418ae20 <RCCEx_GetUARTCLKFreq+0x2ac>)
3418abc2:	4293      	cmp	r3, r2
3418abc4:	f200 81eb 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418abc8:	4a96      	ldr	r2, [pc, #600]	@ (3418ae24 <RCCEx_GetUARTCLKFreq+0x2b0>)
3418abca:	4293      	cmp	r3, r2
3418abcc:	f000 81c8 	beq.w	3418af60 <RCCEx_GetUARTCLKFreq+0x3ec>
3418abd0:	4a94      	ldr	r2, [pc, #592]	@ (3418ae24 <RCCEx_GetUARTCLKFreq+0x2b0>)
3418abd2:	4293      	cmp	r3, r2
3418abd4:	f200 81e3 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418abd8:	4a93      	ldr	r2, [pc, #588]	@ (3418ae28 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418abda:	4293      	cmp	r3, r2
3418abdc:	f000 81ce 	beq.w	3418af7c <RCCEx_GetUARTCLKFreq+0x408>
3418abe0:	4a91      	ldr	r2, [pc, #580]	@ (3418ae28 <RCCEx_GetUARTCLKFreq+0x2b4>)
3418abe2:	4293      	cmp	r3, r2
3418abe4:	f200 81db 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418abe8:	4a90      	ldr	r2, [pc, #576]	@ (3418ae2c <RCCEx_GetUARTCLKFreq+0x2b8>)
3418abea:	4293      	cmp	r3, r2
3418abec:	f000 81c6 	beq.w	3418af7c <RCCEx_GetUARTCLKFreq+0x408>
3418abf0:	4a8e      	ldr	r2, [pc, #568]	@ (3418ae2c <RCCEx_GetUARTCLKFreq+0x2b8>)
3418abf2:	4293      	cmp	r3, r2
3418abf4:	f200 81d3 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418abf8:	4a8d      	ldr	r2, [pc, #564]	@ (3418ae30 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418abfa:	4293      	cmp	r3, r2
3418abfc:	f000 81be 	beq.w	3418af7c <RCCEx_GetUARTCLKFreq+0x408>
3418ac00:	4a8b      	ldr	r2, [pc, #556]	@ (3418ae30 <RCCEx_GetUARTCLKFreq+0x2bc>)
3418ac02:	4293      	cmp	r3, r2
3418ac04:	f200 81cb 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac08:	4a8a      	ldr	r2, [pc, #552]	@ (3418ae34 <RCCEx_GetUARTCLKFreq+0x2c0>)
3418ac0a:	4293      	cmp	r3, r2
3418ac0c:	f000 81b6 	beq.w	3418af7c <RCCEx_GetUARTCLKFreq+0x408>
3418ac10:	4a88      	ldr	r2, [pc, #544]	@ (3418ae34 <RCCEx_GetUARTCLKFreq+0x2c0>)
3418ac12:	4293      	cmp	r3, r2
3418ac14:	f200 81c3 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac18:	4a87      	ldr	r2, [pc, #540]	@ (3418ae38 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418ac1a:	4293      	cmp	r3, r2
3418ac1c:	f000 81ae 	beq.w	3418af7c <RCCEx_GetUARTCLKFreq+0x408>
3418ac20:	4a85      	ldr	r2, [pc, #532]	@ (3418ae38 <RCCEx_GetUARTCLKFreq+0x2c4>)
3418ac22:	4293      	cmp	r3, r2
3418ac24:	f200 81bb 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac28:	4a84      	ldr	r2, [pc, #528]	@ (3418ae3c <RCCEx_GetUARTCLKFreq+0x2c8>)
3418ac2a:	4293      	cmp	r3, r2
3418ac2c:	f000 81ae 	beq.w	3418af8c <RCCEx_GetUARTCLKFreq+0x418>
3418ac30:	4a82      	ldr	r2, [pc, #520]	@ (3418ae3c <RCCEx_GetUARTCLKFreq+0x2c8>)
3418ac32:	4293      	cmp	r3, r2
3418ac34:	f200 81b3 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac38:	4a81      	ldr	r2, [pc, #516]	@ (3418ae40 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418ac3a:	4293      	cmp	r3, r2
3418ac3c:	f000 81a6 	beq.w	3418af8c <RCCEx_GetUARTCLKFreq+0x418>
3418ac40:	4a7f      	ldr	r2, [pc, #508]	@ (3418ae40 <RCCEx_GetUARTCLKFreq+0x2cc>)
3418ac42:	4293      	cmp	r3, r2
3418ac44:	f200 81ab 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac48:	4a7e      	ldr	r2, [pc, #504]	@ (3418ae44 <RCCEx_GetUARTCLKFreq+0x2d0>)
3418ac4a:	4293      	cmp	r3, r2
3418ac4c:	f000 819e 	beq.w	3418af8c <RCCEx_GetUARTCLKFreq+0x418>
3418ac50:	4a7c      	ldr	r2, [pc, #496]	@ (3418ae44 <RCCEx_GetUARTCLKFreq+0x2d0>)
3418ac52:	4293      	cmp	r3, r2
3418ac54:	f200 81a3 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac58:	4a7b      	ldr	r2, [pc, #492]	@ (3418ae48 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418ac5a:	4293      	cmp	r3, r2
3418ac5c:	f000 8196 	beq.w	3418af8c <RCCEx_GetUARTCLKFreq+0x418>
3418ac60:	4a79      	ldr	r2, [pc, #484]	@ (3418ae48 <RCCEx_GetUARTCLKFreq+0x2d4>)
3418ac62:	4293      	cmp	r3, r2
3418ac64:	f200 819b 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac68:	4a78      	ldr	r2, [pc, #480]	@ (3418ae4c <RCCEx_GetUARTCLKFreq+0x2d8>)
3418ac6a:	4293      	cmp	r3, r2
3418ac6c:	f000 818e 	beq.w	3418af8c <RCCEx_GetUARTCLKFreq+0x418>
3418ac70:	4a76      	ldr	r2, [pc, #472]	@ (3418ae4c <RCCEx_GetUARTCLKFreq+0x2d8>)
3418ac72:	4293      	cmp	r3, r2
3418ac74:	f200 8193 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac78:	4a75      	ldr	r2, [pc, #468]	@ (3418ae50 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418ac7a:	4293      	cmp	r3, r2
3418ac7c:	f000 812d 	beq.w	3418aeda <RCCEx_GetUARTCLKFreq+0x366>
3418ac80:	4a73      	ldr	r2, [pc, #460]	@ (3418ae50 <RCCEx_GetUARTCLKFreq+0x2dc>)
3418ac82:	4293      	cmp	r3, r2
3418ac84:	f200 818b 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac88:	4a72      	ldr	r2, [pc, #456]	@ (3418ae54 <RCCEx_GetUARTCLKFreq+0x2e0>)
3418ac8a:	4293      	cmp	r3, r2
3418ac8c:	f000 8125 	beq.w	3418aeda <RCCEx_GetUARTCLKFreq+0x366>
3418ac90:	4a70      	ldr	r2, [pc, #448]	@ (3418ae54 <RCCEx_GetUARTCLKFreq+0x2e0>)
3418ac92:	4293      	cmp	r3, r2
3418ac94:	f200 8183 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ac98:	4a6f      	ldr	r2, [pc, #444]	@ (3418ae58 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418ac9a:	4293      	cmp	r3, r2
3418ac9c:	f000 811d 	beq.w	3418aeda <RCCEx_GetUARTCLKFreq+0x366>
3418aca0:	4a6d      	ldr	r2, [pc, #436]	@ (3418ae58 <RCCEx_GetUARTCLKFreq+0x2e4>)
3418aca2:	4293      	cmp	r3, r2
3418aca4:	f200 817b 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418aca8:	4a6c      	ldr	r2, [pc, #432]	@ (3418ae5c <RCCEx_GetUARTCLKFreq+0x2e8>)
3418acaa:	4293      	cmp	r3, r2
3418acac:	f000 8115 	beq.w	3418aeda <RCCEx_GetUARTCLKFreq+0x366>
3418acb0:	4a6a      	ldr	r2, [pc, #424]	@ (3418ae5c <RCCEx_GetUARTCLKFreq+0x2e8>)
3418acb2:	4293      	cmp	r3, r2
3418acb4:	f200 8173 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418acb8:	4a69      	ldr	r2, [pc, #420]	@ (3418ae60 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418acba:	4293      	cmp	r3, r2
3418acbc:	f000 810d 	beq.w	3418aeda <RCCEx_GetUARTCLKFreq+0x366>
3418acc0:	4a67      	ldr	r2, [pc, #412]	@ (3418ae60 <RCCEx_GetUARTCLKFreq+0x2ec>)
3418acc2:	4293      	cmp	r3, r2
3418acc4:	f200 816b 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418acc8:	4a66      	ldr	r2, [pc, #408]	@ (3418ae64 <RCCEx_GetUARTCLKFreq+0x2f0>)
3418acca:	4293      	cmp	r3, r2
3418accc:	d07b      	beq.n	3418adc6 <RCCEx_GetUARTCLKFreq+0x252>
3418acce:	4a65      	ldr	r2, [pc, #404]	@ (3418ae64 <RCCEx_GetUARTCLKFreq+0x2f0>)
3418acd0:	4293      	cmp	r3, r2
3418acd2:	f200 8164 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418acd6:	4a64      	ldr	r2, [pc, #400]	@ (3418ae68 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418acd8:	4293      	cmp	r3, r2
3418acda:	d074      	beq.n	3418adc6 <RCCEx_GetUARTCLKFreq+0x252>
3418acdc:	4a62      	ldr	r2, [pc, #392]	@ (3418ae68 <RCCEx_GetUARTCLKFreq+0x2f4>)
3418acde:	4293      	cmp	r3, r2
3418ace0:	f200 815d 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ace4:	4a61      	ldr	r2, [pc, #388]	@ (3418ae6c <RCCEx_GetUARTCLKFreq+0x2f8>)
3418ace6:	4293      	cmp	r3, r2
3418ace8:	d06d      	beq.n	3418adc6 <RCCEx_GetUARTCLKFreq+0x252>
3418acea:	4a60      	ldr	r2, [pc, #384]	@ (3418ae6c <RCCEx_GetUARTCLKFreq+0x2f8>)
3418acec:	4293      	cmp	r3, r2
3418acee:	f200 8156 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418acf2:	4a5f      	ldr	r2, [pc, #380]	@ (3418ae70 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418acf4:	4293      	cmp	r3, r2
3418acf6:	d066      	beq.n	3418adc6 <RCCEx_GetUARTCLKFreq+0x252>
3418acf8:	4a5d      	ldr	r2, [pc, #372]	@ (3418ae70 <RCCEx_GetUARTCLKFreq+0x2fc>)
3418acfa:	4293      	cmp	r3, r2
3418acfc:	f200 814f 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad00:	4a5c      	ldr	r2, [pc, #368]	@ (3418ae74 <RCCEx_GetUARTCLKFreq+0x300>)
3418ad02:	4293      	cmp	r3, r2
3418ad04:	d05f      	beq.n	3418adc6 <RCCEx_GetUARTCLKFreq+0x252>
3418ad06:	4a5b      	ldr	r2, [pc, #364]	@ (3418ae74 <RCCEx_GetUARTCLKFreq+0x300>)
3418ad08:	4293      	cmp	r3, r2
3418ad0a:	f200 8148 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad0e:	4a5a      	ldr	r2, [pc, #360]	@ (3418ae78 <RCCEx_GetUARTCLKFreq+0x304>)
3418ad10:	4293      	cmp	r3, r2
3418ad12:	d053      	beq.n	3418adbc <RCCEx_GetUARTCLKFreq+0x248>
3418ad14:	4a58      	ldr	r2, [pc, #352]	@ (3418ae78 <RCCEx_GetUARTCLKFreq+0x304>)
3418ad16:	4293      	cmp	r3, r2
3418ad18:	f200 8141 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad1c:	4a57      	ldr	r2, [pc, #348]	@ (3418ae7c <RCCEx_GetUARTCLKFreq+0x308>)
3418ad1e:	4293      	cmp	r3, r2
3418ad20:	d04c      	beq.n	3418adbc <RCCEx_GetUARTCLKFreq+0x248>
3418ad22:	4a56      	ldr	r2, [pc, #344]	@ (3418ae7c <RCCEx_GetUARTCLKFreq+0x308>)
3418ad24:	4293      	cmp	r3, r2
3418ad26:	f200 813a 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad2a:	4a55      	ldr	r2, [pc, #340]	@ (3418ae80 <RCCEx_GetUARTCLKFreq+0x30c>)
3418ad2c:	4293      	cmp	r3, r2
3418ad2e:	d045      	beq.n	3418adbc <RCCEx_GetUARTCLKFreq+0x248>
3418ad30:	4a53      	ldr	r2, [pc, #332]	@ (3418ae80 <RCCEx_GetUARTCLKFreq+0x30c>)
3418ad32:	4293      	cmp	r3, r2
3418ad34:	f200 8133 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad38:	4a52      	ldr	r2, [pc, #328]	@ (3418ae84 <RCCEx_GetUARTCLKFreq+0x310>)
3418ad3a:	4293      	cmp	r3, r2
3418ad3c:	d03e      	beq.n	3418adbc <RCCEx_GetUARTCLKFreq+0x248>
3418ad3e:	4a51      	ldr	r2, [pc, #324]	@ (3418ae84 <RCCEx_GetUARTCLKFreq+0x310>)
3418ad40:	4293      	cmp	r3, r2
3418ad42:	f200 812c 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad46:	4a50      	ldr	r2, [pc, #320]	@ (3418ae88 <RCCEx_GetUARTCLKFreq+0x314>)
3418ad48:	4293      	cmp	r3, r2
3418ad4a:	d037      	beq.n	3418adbc <RCCEx_GetUARTCLKFreq+0x248>
3418ad4c:	4a4e      	ldr	r2, [pc, #312]	@ (3418ae88 <RCCEx_GetUARTCLKFreq+0x314>)
3418ad4e:	4293      	cmp	r3, r2
3418ad50:	f200 8125 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad54:	4a4d      	ldr	r2, [pc, #308]	@ (3418ae8c <RCCEx_GetUARTCLKFreq+0x318>)
3418ad56:	4293      	cmp	r3, r2
3418ad58:	d018      	beq.n	3418ad8c <RCCEx_GetUARTCLKFreq+0x218>
3418ad5a:	4a4c      	ldr	r2, [pc, #304]	@ (3418ae8c <RCCEx_GetUARTCLKFreq+0x318>)
3418ad5c:	4293      	cmp	r3, r2
3418ad5e:	f200 811e 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad62:	4a4b      	ldr	r2, [pc, #300]	@ (3418ae90 <RCCEx_GetUARTCLKFreq+0x31c>)
3418ad64:	4293      	cmp	r3, r2
3418ad66:	d011      	beq.n	3418ad8c <RCCEx_GetUARTCLKFreq+0x218>
3418ad68:	4a49      	ldr	r2, [pc, #292]	@ (3418ae90 <RCCEx_GetUARTCLKFreq+0x31c>)
3418ad6a:	4293      	cmp	r3, r2
3418ad6c:	f200 8117 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad70:	4a48      	ldr	r2, [pc, #288]	@ (3418ae94 <RCCEx_GetUARTCLKFreq+0x320>)
3418ad72:	4293      	cmp	r3, r2
3418ad74:	d00a      	beq.n	3418ad8c <RCCEx_GetUARTCLKFreq+0x218>
3418ad76:	4a47      	ldr	r2, [pc, #284]	@ (3418ae94 <RCCEx_GetUARTCLKFreq+0x320>)
3418ad78:	4293      	cmp	r3, r2
3418ad7a:	f200 8110 	bhi.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
3418ad7e:	4a46      	ldr	r2, [pc, #280]	@ (3418ae98 <RCCEx_GetUARTCLKFreq+0x324>)
3418ad80:	4293      	cmp	r3, r2
3418ad82:	d00f      	beq.n	3418ada4 <RCCEx_GetUARTCLKFreq+0x230>
3418ad84:	4a45      	ldr	r2, [pc, #276]	@ (3418ae9c <RCCEx_GetUARTCLKFreq+0x328>)
3418ad86:	4293      	cmp	r3, r2
3418ad88:	f040 8109 	bne.w	3418af9e <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ad8c:	f7f8 f9b8 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418ad90:	4603      	mov	r3, r0
3418ad92:	4618      	mov	r0, r3
3418ad94:	f7fd f944 	bl	34188020 <RCCEx_GetHCLKFreq>
3418ad98:	4603      	mov	r3, r0
3418ad9a:	4618      	mov	r0, r3
3418ad9c:	f7fd f951 	bl	34188042 <RCCEx_GetPCLK1Freq>
3418ada0:	60f8      	str	r0, [r7, #12]
      break;
3418ada2:	e107      	b.n	3418afb4 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418ada4:	f7f8 f9ac 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418ada8:	4603      	mov	r3, r0
3418adaa:	4618      	mov	r0, r3
3418adac:	f7fd f938 	bl	34188020 <RCCEx_GetHCLKFreq>
3418adb0:	4603      	mov	r3, r0
3418adb2:	4618      	mov	r0, r3
3418adb4:	f7fd f955 	bl	34188062 <RCCEx_GetPCLK2Freq>
3418adb8:	60f8      	str	r0, [r7, #12]
      break;
3418adba:	e0fb      	b.n	3418afb4 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418adbc:	2007      	movs	r0, #7
3418adbe:	f7fd fc1b 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418adc2:	60f8      	str	r0, [r7, #12]
      break;
3418adc4:	e0f6      	b.n	3418afb4 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418adc6:	f7f9 fdbf 	bl	34184948 <LL_RCC_IC9_IsEnabled>
3418adca:	4603      	mov	r3, r0
3418adcc:	2b00      	cmp	r3, #0
3418adce:	f000 80e8 	beq.w	3418afa2 <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3418add2:	f7f9 fddb 	bl	3418498c <LL_RCC_IC9_GetDivider>
3418add6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418add8:	f7f9 fdca 	bl	34184970 <LL_RCC_IC9_GetSource>
3418addc:	4603      	mov	r3, r0
3418adde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ade2:	d06f      	beq.n	3418aec4 <RCCEx_GetUARTCLKFreq+0x350>
3418ade4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418ade8:	d875      	bhi.n	3418aed6 <RCCEx_GetUARTCLKFreq+0x362>
3418adea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418adee:	d060      	beq.n	3418aeb2 <RCCEx_GetUARTCLKFreq+0x33e>
3418adf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418adf4:	d86f      	bhi.n	3418aed6 <RCCEx_GetUARTCLKFreq+0x362>
3418adf6:	2b00      	cmp	r3, #0
3418adf8:	d003      	beq.n	3418ae02 <RCCEx_GetUARTCLKFreq+0x28e>
3418adfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418adfe:	d04f      	beq.n	3418aea0 <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418ae00:	e069      	b.n	3418aed6 <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418ae02:	f7fc fff5 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418ae06:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418ae08:	68fa      	ldr	r2, [r7, #12]
3418ae0a:	68bb      	ldr	r3, [r7, #8]
3418ae0c:	fbb2 f3f3 	udiv	r3, r2, r3
3418ae10:	60fb      	str	r3, [r7, #12]
            break;
3418ae12:	e061      	b.n	3418aed8 <RCCEx_GetUARTCLKFreq+0x364>
3418ae14:	07061c30 	.word	0x07061c30
3418ae18:	07061830 	.word	0x07061830
3418ae1c:	07061030 	.word	0x07061030
3418ae20:	07060c30 	.word	0x07060c30
3418ae24:	07060034 	.word	0x07060034
3418ae28:	07051c30 	.word	0x07051c30
3418ae2c:	07051830 	.word	0x07051830
3418ae30:	07051030 	.word	0x07051030
3418ae34:	07050c30 	.word	0x07050c30
3418ae38:	07050034 	.word	0x07050034
3418ae3c:	07041c30 	.word	0x07041c30
3418ae40:	07041830 	.word	0x07041830
3418ae44:	07041030 	.word	0x07041030
3418ae48:	07040c30 	.word	0x07040c30
3418ae4c:	07040034 	.word	0x07040034
3418ae50:	07031c30 	.word	0x07031c30
3418ae54:	07031830 	.word	0x07031830
3418ae58:	07031030 	.word	0x07031030
3418ae5c:	07030c30 	.word	0x07030c30
3418ae60:	07030034 	.word	0x07030034
3418ae64:	07021c30 	.word	0x07021c30
3418ae68:	07021830 	.word	0x07021830
3418ae6c:	07021030 	.word	0x07021030
3418ae70:	07020c30 	.word	0x07020c30
3418ae74:	07020034 	.word	0x07020034
3418ae78:	07011c30 	.word	0x07011c30
3418ae7c:	07011830 	.word	0x07011830
3418ae80:	07011030 	.word	0x07011030
3418ae84:	07010c30 	.word	0x07010c30
3418ae88:	07010034 	.word	0x07010034
3418ae8c:	07001c30 	.word	0x07001c30
3418ae90:	07001830 	.word	0x07001830
3418ae94:	07001030 	.word	0x07001030
3418ae98:	07000034 	.word	0x07000034
3418ae9c:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418aea0:	f7fc ffec 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418aea4:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418aea6:	68fa      	ldr	r2, [r7, #12]
3418aea8:	68bb      	ldr	r3, [r7, #8]
3418aeaa:	fbb2 f3f3 	udiv	r3, r2, r3
3418aeae:	60fb      	str	r3, [r7, #12]
            break;
3418aeb0:	e012      	b.n	3418aed8 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418aeb2:	f7fd f829 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418aeb6:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418aeb8:	68fa      	ldr	r2, [r7, #12]
3418aeba:	68bb      	ldr	r3, [r7, #8]
3418aebc:	fbb2 f3f3 	udiv	r3, r2, r3
3418aec0:	60fb      	str	r3, [r7, #12]
            break;
3418aec2:	e009      	b.n	3418aed8 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418aec4:	f7fd f866 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418aec8:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418aeca:	68fa      	ldr	r2, [r7, #12]
3418aecc:	68bb      	ldr	r3, [r7, #8]
3418aece:	fbb2 f3f3 	udiv	r3, r2, r3
3418aed2:	60fb      	str	r3, [r7, #12]
            break;
3418aed4:	e000      	b.n	3418aed8 <RCCEx_GetUARTCLKFreq+0x364>
            break;
3418aed6:	bf00      	nop
        }
      }
      break;
3418aed8:	e063      	b.n	3418afa2 <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418aeda:	f7f9 fe35 	bl	34184b48 <LL_RCC_IC14_IsEnabled>
3418aede:	4603      	mov	r3, r0
3418aee0:	2b00      	cmp	r3, #0
3418aee2:	d060      	beq.n	3418afa6 <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3418aee4:	f7f9 fe52 	bl	34184b8c <LL_RCC_IC14_GetDivider>
3418aee8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418aeea:	f7f9 fe41 	bl	34184b70 <LL_RCC_IC14_GetSource>
3418aeee:	4603      	mov	r3, r0
3418aef0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aef4:	d029      	beq.n	3418af4a <RCCEx_GetUARTCLKFreq+0x3d6>
3418aef6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418aefa:	d82f      	bhi.n	3418af5c <RCCEx_GetUARTCLKFreq+0x3e8>
3418aefc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418af00:	d01a      	beq.n	3418af38 <RCCEx_GetUARTCLKFreq+0x3c4>
3418af02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418af06:	d829      	bhi.n	3418af5c <RCCEx_GetUARTCLKFreq+0x3e8>
3418af08:	2b00      	cmp	r3, #0
3418af0a:	d003      	beq.n	3418af14 <RCCEx_GetUARTCLKFreq+0x3a0>
3418af0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418af10:	d009      	beq.n	3418af26 <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418af12:	e023      	b.n	3418af5c <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418af14:	f7fc ff6c 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418af18:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418af1a:	68fa      	ldr	r2, [r7, #12]
3418af1c:	68bb      	ldr	r3, [r7, #8]
3418af1e:	fbb2 f3f3 	udiv	r3, r2, r3
3418af22:	60fb      	str	r3, [r7, #12]
            break;
3418af24:	e01b      	b.n	3418af5e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418af26:	f7fc ffa9 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418af2a:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418af2c:	68fa      	ldr	r2, [r7, #12]
3418af2e:	68bb      	ldr	r3, [r7, #8]
3418af30:	fbb2 f3f3 	udiv	r3, r2, r3
3418af34:	60fb      	str	r3, [r7, #12]
            break;
3418af36:	e012      	b.n	3418af5e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418af38:	f7fc ffe6 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418af3c:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418af3e:	68fa      	ldr	r2, [r7, #12]
3418af40:	68bb      	ldr	r3, [r7, #8]
3418af42:	fbb2 f3f3 	udiv	r3, r2, r3
3418af46:	60fb      	str	r3, [r7, #12]
            break;
3418af48:	e009      	b.n	3418af5e <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418af4a:	f7fd f823 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418af4e:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3418af50:	68fa      	ldr	r2, [r7, #12]
3418af52:	68bb      	ldr	r3, [r7, #8]
3418af54:	fbb2 f3f3 	udiv	r3, r2, r3
3418af58:	60fb      	str	r3, [r7, #12]
            break;
3418af5a:	e000      	b.n	3418af5e <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
3418af5c:	bf00      	nop
        }
      }
      break;
3418af5e:	e022      	b.n	3418afa6 <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3418af60:	f7f8 fcce 	bl	34183900 <LL_RCC_HSI_IsReady>
3418af64:	4603      	mov	r3, r0
3418af66:	2b00      	cmp	r3, #0
3418af68:	d01f      	beq.n	3418afaa <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418af6a:	f7f8 fcdb 	bl	34183924 <LL_RCC_HSI_GetDivider>
3418af6e:	4603      	mov	r3, r0
3418af70:	09db      	lsrs	r3, r3, #7
3418af72:	4a13      	ldr	r2, [pc, #76]	@ (3418afc0 <RCCEx_GetUARTCLKFreq+0x44c>)
3418af74:	fa22 f303 	lsr.w	r3, r2, r3
3418af78:	60fb      	str	r3, [r7, #12]
      }
      break;
3418af7a:	e016      	b.n	3418afaa <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
3418af7c:	f7f8 fce0 	bl	34183940 <LL_RCC_MSI_IsReady>
3418af80:	4603      	mov	r3, r0
3418af82:	2b00      	cmp	r3, #0
3418af84:	d013      	beq.n	3418afae <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
3418af86:	4b0f      	ldr	r3, [pc, #60]	@ (3418afc4 <RCCEx_GetUARTCLKFreq+0x450>)
3418af88:	60fb      	str	r3, [r7, #12]
      }
      break;
3418af8a:	e010      	b.n	3418afae <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
3418af8c:	f7f8 fcf8 	bl	34183980 <LL_RCC_LSE_IsReady>
3418af90:	4603      	mov	r3, r0
3418af92:	2b00      	cmp	r3, #0
3418af94:	d00d      	beq.n	3418afb2 <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
3418af96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418af9a:	60fb      	str	r3, [r7, #12]
      }
      break;
3418af9c:	e009      	b.n	3418afb2 <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3418af9e:	bf00      	nop
3418afa0:	e008      	b.n	3418afb4 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418afa2:	bf00      	nop
3418afa4:	e006      	b.n	3418afb4 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418afa6:	bf00      	nop
3418afa8:	e004      	b.n	3418afb4 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418afaa:	bf00      	nop
3418afac:	e002      	b.n	3418afb4 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418afae:	bf00      	nop
3418afb0:	e000      	b.n	3418afb4 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3418afb2:	bf00      	nop
  }

  return uart_frequency;
3418afb4:	68fb      	ldr	r3, [r7, #12]
}
3418afb6:	4618      	mov	r0, r3
3418afb8:	3710      	adds	r7, #16
3418afba:	46bd      	mov	sp, r7
3418afbc:	bd80      	pop	{r7, pc}
3418afbe:	bf00      	nop
3418afc0:	03d09000 	.word	0x03d09000
3418afc4:	003d0900 	.word	0x003d0900

3418afc8 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
3418afc8:	b580      	push	{r7, lr}
3418afca:	b084      	sub	sp, #16
3418afcc:	af00      	add	r7, sp, #0
3418afce:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3418afd0:	2300      	movs	r3, #0
3418afd2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418afd4:	6878      	ldr	r0, [r7, #4]
3418afd6:	f7f9 f87b 	bl	341840d0 <LL_RCC_GetUSARTClockSource>
3418afda:	4603      	mov	r3, r0
3418afdc:	4aa2      	ldr	r2, [pc, #648]	@ (3418b268 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418afde:	4293      	cmp	r3, r2
3418afe0:	f000 81e8 	beq.w	3418b3b4 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418afe4:	4aa0      	ldr	r2, [pc, #640]	@ (3418b268 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3418afe6:	4293      	cmp	r3, r2
3418afe8:	f200 8203 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418afec:	4a9f      	ldr	r2, [pc, #636]	@ (3418b26c <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418afee:	4293      	cmp	r3, r2
3418aff0:	f000 81e0 	beq.w	3418b3b4 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418aff4:	4a9d      	ldr	r2, [pc, #628]	@ (3418b26c <RCCEx_GetUSARTCLKFreq+0x2a4>)
3418aff6:	4293      	cmp	r3, r2
3418aff8:	f200 81fb 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418affc:	4a9c      	ldr	r2, [pc, #624]	@ (3418b270 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418affe:	4293      	cmp	r3, r2
3418b000:	f000 81d8 	beq.w	3418b3b4 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418b004:	4a9a      	ldr	r2, [pc, #616]	@ (3418b270 <RCCEx_GetUSARTCLKFreq+0x2a8>)
3418b006:	4293      	cmp	r3, r2
3418b008:	f200 81f3 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b00c:	4a99      	ldr	r2, [pc, #612]	@ (3418b274 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418b00e:	4293      	cmp	r3, r2
3418b010:	f000 81d0 	beq.w	3418b3b4 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418b014:	4a97      	ldr	r2, [pc, #604]	@ (3418b274 <RCCEx_GetUSARTCLKFreq+0x2ac>)
3418b016:	4293      	cmp	r3, r2
3418b018:	f200 81eb 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b01c:	4a96      	ldr	r2, [pc, #600]	@ (3418b278 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418b01e:	4293      	cmp	r3, r2
3418b020:	f000 81c8 	beq.w	3418b3b4 <RCCEx_GetUSARTCLKFreq+0x3ec>
3418b024:	4a94      	ldr	r2, [pc, #592]	@ (3418b278 <RCCEx_GetUSARTCLKFreq+0x2b0>)
3418b026:	4293      	cmp	r3, r2
3418b028:	f200 81e3 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b02c:	4a93      	ldr	r2, [pc, #588]	@ (3418b27c <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418b02e:	4293      	cmp	r3, r2
3418b030:	f000 81ce 	beq.w	3418b3d0 <RCCEx_GetUSARTCLKFreq+0x408>
3418b034:	4a91      	ldr	r2, [pc, #580]	@ (3418b27c <RCCEx_GetUSARTCLKFreq+0x2b4>)
3418b036:	4293      	cmp	r3, r2
3418b038:	f200 81db 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b03c:	4a90      	ldr	r2, [pc, #576]	@ (3418b280 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418b03e:	4293      	cmp	r3, r2
3418b040:	f000 81c6 	beq.w	3418b3d0 <RCCEx_GetUSARTCLKFreq+0x408>
3418b044:	4a8e      	ldr	r2, [pc, #568]	@ (3418b280 <RCCEx_GetUSARTCLKFreq+0x2b8>)
3418b046:	4293      	cmp	r3, r2
3418b048:	f200 81d3 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b04c:	4a8d      	ldr	r2, [pc, #564]	@ (3418b284 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418b04e:	4293      	cmp	r3, r2
3418b050:	f000 81be 	beq.w	3418b3d0 <RCCEx_GetUSARTCLKFreq+0x408>
3418b054:	4a8b      	ldr	r2, [pc, #556]	@ (3418b284 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3418b056:	4293      	cmp	r3, r2
3418b058:	f200 81cb 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b05c:	4a8a      	ldr	r2, [pc, #552]	@ (3418b288 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418b05e:	4293      	cmp	r3, r2
3418b060:	f000 81b6 	beq.w	3418b3d0 <RCCEx_GetUSARTCLKFreq+0x408>
3418b064:	4a88      	ldr	r2, [pc, #544]	@ (3418b288 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3418b066:	4293      	cmp	r3, r2
3418b068:	f200 81c3 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b06c:	4a87      	ldr	r2, [pc, #540]	@ (3418b28c <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418b06e:	4293      	cmp	r3, r2
3418b070:	f000 81ae 	beq.w	3418b3d0 <RCCEx_GetUSARTCLKFreq+0x408>
3418b074:	4a85      	ldr	r2, [pc, #532]	@ (3418b28c <RCCEx_GetUSARTCLKFreq+0x2c4>)
3418b076:	4293      	cmp	r3, r2
3418b078:	f200 81bb 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b07c:	4a84      	ldr	r2, [pc, #528]	@ (3418b290 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418b07e:	4293      	cmp	r3, r2
3418b080:	f000 81ae 	beq.w	3418b3e0 <RCCEx_GetUSARTCLKFreq+0x418>
3418b084:	4a82      	ldr	r2, [pc, #520]	@ (3418b290 <RCCEx_GetUSARTCLKFreq+0x2c8>)
3418b086:	4293      	cmp	r3, r2
3418b088:	f200 81b3 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b08c:	4a81      	ldr	r2, [pc, #516]	@ (3418b294 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418b08e:	4293      	cmp	r3, r2
3418b090:	f000 81a6 	beq.w	3418b3e0 <RCCEx_GetUSARTCLKFreq+0x418>
3418b094:	4a7f      	ldr	r2, [pc, #508]	@ (3418b294 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3418b096:	4293      	cmp	r3, r2
3418b098:	f200 81ab 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b09c:	4a7e      	ldr	r2, [pc, #504]	@ (3418b298 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418b09e:	4293      	cmp	r3, r2
3418b0a0:	f000 819e 	beq.w	3418b3e0 <RCCEx_GetUSARTCLKFreq+0x418>
3418b0a4:	4a7c      	ldr	r2, [pc, #496]	@ (3418b298 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3418b0a6:	4293      	cmp	r3, r2
3418b0a8:	f200 81a3 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0ac:	4a7b      	ldr	r2, [pc, #492]	@ (3418b29c <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418b0ae:	4293      	cmp	r3, r2
3418b0b0:	f000 8196 	beq.w	3418b3e0 <RCCEx_GetUSARTCLKFreq+0x418>
3418b0b4:	4a79      	ldr	r2, [pc, #484]	@ (3418b29c <RCCEx_GetUSARTCLKFreq+0x2d4>)
3418b0b6:	4293      	cmp	r3, r2
3418b0b8:	f200 819b 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0bc:	4a78      	ldr	r2, [pc, #480]	@ (3418b2a0 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418b0be:	4293      	cmp	r3, r2
3418b0c0:	f000 818e 	beq.w	3418b3e0 <RCCEx_GetUSARTCLKFreq+0x418>
3418b0c4:	4a76      	ldr	r2, [pc, #472]	@ (3418b2a0 <RCCEx_GetUSARTCLKFreq+0x2d8>)
3418b0c6:	4293      	cmp	r3, r2
3418b0c8:	f200 8193 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0cc:	4a75      	ldr	r2, [pc, #468]	@ (3418b2a4 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418b0ce:	4293      	cmp	r3, r2
3418b0d0:	f000 812d 	beq.w	3418b32e <RCCEx_GetUSARTCLKFreq+0x366>
3418b0d4:	4a73      	ldr	r2, [pc, #460]	@ (3418b2a4 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3418b0d6:	4293      	cmp	r3, r2
3418b0d8:	f200 818b 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0dc:	4a72      	ldr	r2, [pc, #456]	@ (3418b2a8 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418b0de:	4293      	cmp	r3, r2
3418b0e0:	f000 8125 	beq.w	3418b32e <RCCEx_GetUSARTCLKFreq+0x366>
3418b0e4:	4a70      	ldr	r2, [pc, #448]	@ (3418b2a8 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3418b0e6:	4293      	cmp	r3, r2
3418b0e8:	f200 8183 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0ec:	4a6f      	ldr	r2, [pc, #444]	@ (3418b2ac <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418b0ee:	4293      	cmp	r3, r2
3418b0f0:	f000 811d 	beq.w	3418b32e <RCCEx_GetUSARTCLKFreq+0x366>
3418b0f4:	4a6d      	ldr	r2, [pc, #436]	@ (3418b2ac <RCCEx_GetUSARTCLKFreq+0x2e4>)
3418b0f6:	4293      	cmp	r3, r2
3418b0f8:	f200 817b 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b0fc:	4a6c      	ldr	r2, [pc, #432]	@ (3418b2b0 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418b0fe:	4293      	cmp	r3, r2
3418b100:	f000 8115 	beq.w	3418b32e <RCCEx_GetUSARTCLKFreq+0x366>
3418b104:	4a6a      	ldr	r2, [pc, #424]	@ (3418b2b0 <RCCEx_GetUSARTCLKFreq+0x2e8>)
3418b106:	4293      	cmp	r3, r2
3418b108:	f200 8173 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b10c:	4a69      	ldr	r2, [pc, #420]	@ (3418b2b4 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418b10e:	4293      	cmp	r3, r2
3418b110:	f000 810d 	beq.w	3418b32e <RCCEx_GetUSARTCLKFreq+0x366>
3418b114:	4a67      	ldr	r2, [pc, #412]	@ (3418b2b4 <RCCEx_GetUSARTCLKFreq+0x2ec>)
3418b116:	4293      	cmp	r3, r2
3418b118:	f200 816b 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b11c:	4a66      	ldr	r2, [pc, #408]	@ (3418b2b8 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418b11e:	4293      	cmp	r3, r2
3418b120:	d07b      	beq.n	3418b21a <RCCEx_GetUSARTCLKFreq+0x252>
3418b122:	4a65      	ldr	r2, [pc, #404]	@ (3418b2b8 <RCCEx_GetUSARTCLKFreq+0x2f0>)
3418b124:	4293      	cmp	r3, r2
3418b126:	f200 8164 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b12a:	4a64      	ldr	r2, [pc, #400]	@ (3418b2bc <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418b12c:	4293      	cmp	r3, r2
3418b12e:	d074      	beq.n	3418b21a <RCCEx_GetUSARTCLKFreq+0x252>
3418b130:	4a62      	ldr	r2, [pc, #392]	@ (3418b2bc <RCCEx_GetUSARTCLKFreq+0x2f4>)
3418b132:	4293      	cmp	r3, r2
3418b134:	f200 815d 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b138:	4a61      	ldr	r2, [pc, #388]	@ (3418b2c0 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418b13a:	4293      	cmp	r3, r2
3418b13c:	d06d      	beq.n	3418b21a <RCCEx_GetUSARTCLKFreq+0x252>
3418b13e:	4a60      	ldr	r2, [pc, #384]	@ (3418b2c0 <RCCEx_GetUSARTCLKFreq+0x2f8>)
3418b140:	4293      	cmp	r3, r2
3418b142:	f200 8156 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b146:	4a5f      	ldr	r2, [pc, #380]	@ (3418b2c4 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418b148:	4293      	cmp	r3, r2
3418b14a:	d066      	beq.n	3418b21a <RCCEx_GetUSARTCLKFreq+0x252>
3418b14c:	4a5d      	ldr	r2, [pc, #372]	@ (3418b2c4 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3418b14e:	4293      	cmp	r3, r2
3418b150:	f200 814f 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b154:	4a5c      	ldr	r2, [pc, #368]	@ (3418b2c8 <RCCEx_GetUSARTCLKFreq+0x300>)
3418b156:	4293      	cmp	r3, r2
3418b158:	d05f      	beq.n	3418b21a <RCCEx_GetUSARTCLKFreq+0x252>
3418b15a:	4a5b      	ldr	r2, [pc, #364]	@ (3418b2c8 <RCCEx_GetUSARTCLKFreq+0x300>)
3418b15c:	4293      	cmp	r3, r2
3418b15e:	f200 8148 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b162:	4a5a      	ldr	r2, [pc, #360]	@ (3418b2cc <RCCEx_GetUSARTCLKFreq+0x304>)
3418b164:	4293      	cmp	r3, r2
3418b166:	d053      	beq.n	3418b210 <RCCEx_GetUSARTCLKFreq+0x248>
3418b168:	4a58      	ldr	r2, [pc, #352]	@ (3418b2cc <RCCEx_GetUSARTCLKFreq+0x304>)
3418b16a:	4293      	cmp	r3, r2
3418b16c:	f200 8141 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b170:	4a57      	ldr	r2, [pc, #348]	@ (3418b2d0 <RCCEx_GetUSARTCLKFreq+0x308>)
3418b172:	4293      	cmp	r3, r2
3418b174:	d04c      	beq.n	3418b210 <RCCEx_GetUSARTCLKFreq+0x248>
3418b176:	4a56      	ldr	r2, [pc, #344]	@ (3418b2d0 <RCCEx_GetUSARTCLKFreq+0x308>)
3418b178:	4293      	cmp	r3, r2
3418b17a:	f200 813a 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b17e:	4a55      	ldr	r2, [pc, #340]	@ (3418b2d4 <RCCEx_GetUSARTCLKFreq+0x30c>)
3418b180:	4293      	cmp	r3, r2
3418b182:	d045      	beq.n	3418b210 <RCCEx_GetUSARTCLKFreq+0x248>
3418b184:	4a53      	ldr	r2, [pc, #332]	@ (3418b2d4 <RCCEx_GetUSARTCLKFreq+0x30c>)
3418b186:	4293      	cmp	r3, r2
3418b188:	f200 8133 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b18c:	4a52      	ldr	r2, [pc, #328]	@ (3418b2d8 <RCCEx_GetUSARTCLKFreq+0x310>)
3418b18e:	4293      	cmp	r3, r2
3418b190:	d03e      	beq.n	3418b210 <RCCEx_GetUSARTCLKFreq+0x248>
3418b192:	4a51      	ldr	r2, [pc, #324]	@ (3418b2d8 <RCCEx_GetUSARTCLKFreq+0x310>)
3418b194:	4293      	cmp	r3, r2
3418b196:	f200 812c 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b19a:	4a50      	ldr	r2, [pc, #320]	@ (3418b2dc <RCCEx_GetUSARTCLKFreq+0x314>)
3418b19c:	4293      	cmp	r3, r2
3418b19e:	d037      	beq.n	3418b210 <RCCEx_GetUSARTCLKFreq+0x248>
3418b1a0:	4a4e      	ldr	r2, [pc, #312]	@ (3418b2dc <RCCEx_GetUSARTCLKFreq+0x314>)
3418b1a2:	4293      	cmp	r3, r2
3418b1a4:	f200 8125 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b1a8:	4a4d      	ldr	r2, [pc, #308]	@ (3418b2e0 <RCCEx_GetUSARTCLKFreq+0x318>)
3418b1aa:	4293      	cmp	r3, r2
3418b1ac:	d018      	beq.n	3418b1e0 <RCCEx_GetUSARTCLKFreq+0x218>
3418b1ae:	4a4c      	ldr	r2, [pc, #304]	@ (3418b2e0 <RCCEx_GetUSARTCLKFreq+0x318>)
3418b1b0:	4293      	cmp	r3, r2
3418b1b2:	f200 811e 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b1b6:	4a4b      	ldr	r2, [pc, #300]	@ (3418b2e4 <RCCEx_GetUSARTCLKFreq+0x31c>)
3418b1b8:	4293      	cmp	r3, r2
3418b1ba:	d01d      	beq.n	3418b1f8 <RCCEx_GetUSARTCLKFreq+0x230>
3418b1bc:	4a49      	ldr	r2, [pc, #292]	@ (3418b2e4 <RCCEx_GetUSARTCLKFreq+0x31c>)
3418b1be:	4293      	cmp	r3, r2
3418b1c0:	f200 8117 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b1c4:	4a48      	ldr	r2, [pc, #288]	@ (3418b2e8 <RCCEx_GetUSARTCLKFreq+0x320>)
3418b1c6:	4293      	cmp	r3, r2
3418b1c8:	d00a      	beq.n	3418b1e0 <RCCEx_GetUSARTCLKFreq+0x218>
3418b1ca:	4a47      	ldr	r2, [pc, #284]	@ (3418b2e8 <RCCEx_GetUSARTCLKFreq+0x320>)
3418b1cc:	4293      	cmp	r3, r2
3418b1ce:	f200 8110 	bhi.w	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
3418b1d2:	4a46      	ldr	r2, [pc, #280]	@ (3418b2ec <RCCEx_GetUSARTCLKFreq+0x324>)
3418b1d4:	4293      	cmp	r3, r2
3418b1d6:	d003      	beq.n	3418b1e0 <RCCEx_GetUSARTCLKFreq+0x218>
3418b1d8:	4a45      	ldr	r2, [pc, #276]	@ (3418b2f0 <RCCEx_GetUSARTCLKFreq+0x328>)
3418b1da:	4293      	cmp	r3, r2
3418b1dc:	d00c      	beq.n	3418b1f8 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b1de:	e108      	b.n	3418b3f2 <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b1e0:	f7f7 ff8e 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418b1e4:	4603      	mov	r3, r0
3418b1e6:	4618      	mov	r0, r3
3418b1e8:	f7fc ff1a 	bl	34188020 <RCCEx_GetHCLKFreq>
3418b1ec:	4603      	mov	r3, r0
3418b1ee:	4618      	mov	r0, r3
3418b1f0:	f7fc ff37 	bl	34188062 <RCCEx_GetPCLK2Freq>
3418b1f4:	60f8      	str	r0, [r7, #12]
      break;
3418b1f6:	e107      	b.n	3418b408 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418b1f8:	f7f7 ff82 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418b1fc:	4603      	mov	r3, r0
3418b1fe:	4618      	mov	r0, r3
3418b200:	f7fc ff0e 	bl	34188020 <RCCEx_GetHCLKFreq>
3418b204:	4603      	mov	r3, r0
3418b206:	4618      	mov	r0, r3
3418b208:	f7fc ff1b 	bl	34188042 <RCCEx_GetPCLK1Freq>
3418b20c:	60f8      	str	r0, [r7, #12]
      break;
3418b20e:	e0fb      	b.n	3418b408 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b210:	2007      	movs	r0, #7
3418b212:	f7fd f9f1 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418b216:	60f8      	str	r0, [r7, #12]
      break;
3418b218:	e0f6      	b.n	3418b408 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
3418b21a:	f7f9 fb95 	bl	34184948 <LL_RCC_IC9_IsEnabled>
3418b21e:	4603      	mov	r3, r0
3418b220:	2b00      	cmp	r3, #0
3418b222:	f000 80e8 	beq.w	3418b3f6 <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
3418b226:	f7f9 fbb1 	bl	3418498c <LL_RCC_IC9_GetDivider>
3418b22a:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
3418b22c:	f7f9 fba0 	bl	34184970 <LL_RCC_IC9_GetSource>
3418b230:	4603      	mov	r3, r0
3418b232:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b236:	d06f      	beq.n	3418b318 <RCCEx_GetUSARTCLKFreq+0x350>
3418b238:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b23c:	d875      	bhi.n	3418b32a <RCCEx_GetUSARTCLKFreq+0x362>
3418b23e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b242:	d060      	beq.n	3418b306 <RCCEx_GetUSARTCLKFreq+0x33e>
3418b244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b248:	d86f      	bhi.n	3418b32a <RCCEx_GetUSARTCLKFreq+0x362>
3418b24a:	2b00      	cmp	r3, #0
3418b24c:	d003      	beq.n	3418b256 <RCCEx_GetUSARTCLKFreq+0x28e>
3418b24e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b252:	d04f      	beq.n	3418b2f4 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
3418b254:	e069      	b.n	3418b32a <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b256:	f7fc fdcb 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b25a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b25c:	68fa      	ldr	r2, [r7, #12]
3418b25e:	68bb      	ldr	r3, [r7, #8]
3418b260:	fbb2 f3f3 	udiv	r3, r2, r3
3418b264:	60fb      	str	r3, [r7, #12]
            break;
3418b266:	e061      	b.n	3418b32c <RCCEx_GetUSARTCLKFreq+0x364>
3418b268:	07061430 	.word	0x07061430
3418b26c:	07060830 	.word	0x07060830
3418b270:	07060434 	.word	0x07060434
3418b274:	07060430 	.word	0x07060430
3418b278:	07060030 	.word	0x07060030
3418b27c:	07051430 	.word	0x07051430
3418b280:	07050830 	.word	0x07050830
3418b284:	07050434 	.word	0x07050434
3418b288:	07050430 	.word	0x07050430
3418b28c:	07050030 	.word	0x07050030
3418b290:	07041430 	.word	0x07041430
3418b294:	07040830 	.word	0x07040830
3418b298:	07040434 	.word	0x07040434
3418b29c:	07040430 	.word	0x07040430
3418b2a0:	07040030 	.word	0x07040030
3418b2a4:	07031430 	.word	0x07031430
3418b2a8:	07030830 	.word	0x07030830
3418b2ac:	07030434 	.word	0x07030434
3418b2b0:	07030430 	.word	0x07030430
3418b2b4:	07030030 	.word	0x07030030
3418b2b8:	07021430 	.word	0x07021430
3418b2bc:	07020830 	.word	0x07020830
3418b2c0:	07020434 	.word	0x07020434
3418b2c4:	07020430 	.word	0x07020430
3418b2c8:	07020030 	.word	0x07020030
3418b2cc:	07011430 	.word	0x07011430
3418b2d0:	07010830 	.word	0x07010830
3418b2d4:	07010434 	.word	0x07010434
3418b2d8:	07010430 	.word	0x07010430
3418b2dc:	07010030 	.word	0x07010030
3418b2e0:	07001430 	.word	0x07001430
3418b2e4:	07000830 	.word	0x07000830
3418b2e8:	07000434 	.word	0x07000434
3418b2ec:	07000030 	.word	0x07000030
3418b2f0:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b2f4:	f7fc fdc2 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418b2f8:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b2fa:	68fa      	ldr	r2, [r7, #12]
3418b2fc:	68bb      	ldr	r3, [r7, #8]
3418b2fe:	fbb2 f3f3 	udiv	r3, r2, r3
3418b302:	60fb      	str	r3, [r7, #12]
            break;
3418b304:	e012      	b.n	3418b32c <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b306:	f7fc fdff 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418b30a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b30c:	68fa      	ldr	r2, [r7, #12]
3418b30e:	68bb      	ldr	r3, [r7, #8]
3418b310:	fbb2 f3f3 	udiv	r3, r2, r3
3418b314:	60fb      	str	r3, [r7, #12]
            break;
3418b316:	e009      	b.n	3418b32c <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b318:	f7fc fe3c 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418b31c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b31e:	68fa      	ldr	r2, [r7, #12]
3418b320:	68bb      	ldr	r3, [r7, #8]
3418b322:	fbb2 f3f3 	udiv	r3, r2, r3
3418b326:	60fb      	str	r3, [r7, #12]
            break;
3418b328:	e000      	b.n	3418b32c <RCCEx_GetUSARTCLKFreq+0x364>
            break;
3418b32a:	bf00      	nop
      break;
3418b32c:	e063      	b.n	3418b3f6 <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
3418b32e:	f7f9 fc0b 	bl	34184b48 <LL_RCC_IC14_IsEnabled>
3418b332:	4603      	mov	r3, r0
3418b334:	2b00      	cmp	r3, #0
3418b336:	d060      	beq.n	3418b3fa <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
3418b338:	f7f9 fc28 	bl	34184b8c <LL_RCC_IC14_GetDivider>
3418b33c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
3418b33e:	f7f9 fc17 	bl	34184b70 <LL_RCC_IC14_GetSource>
3418b342:	4603      	mov	r3, r0
3418b344:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b348:	d029      	beq.n	3418b39e <RCCEx_GetUSARTCLKFreq+0x3d6>
3418b34a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b34e:	d82f      	bhi.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418b350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b354:	d01a      	beq.n	3418b38c <RCCEx_GetUSARTCLKFreq+0x3c4>
3418b356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b35a:	d829      	bhi.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x3e8>
3418b35c:	2b00      	cmp	r3, #0
3418b35e:	d003      	beq.n	3418b368 <RCCEx_GetUSARTCLKFreq+0x3a0>
3418b360:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b364:	d009      	beq.n	3418b37a <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
3418b366:	e023      	b.n	3418b3b0 <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b368:	f7fc fd42 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b36c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b36e:	68fa      	ldr	r2, [r7, #12]
3418b370:	68bb      	ldr	r3, [r7, #8]
3418b372:	fbb2 f3f3 	udiv	r3, r2, r3
3418b376:	60fb      	str	r3, [r7, #12]
            break;
3418b378:	e01b      	b.n	3418b3b2 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b37a:	f7fc fd7f 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418b37e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b380:	68fa      	ldr	r2, [r7, #12]
3418b382:	68bb      	ldr	r3, [r7, #8]
3418b384:	fbb2 f3f3 	udiv	r3, r2, r3
3418b388:	60fb      	str	r3, [r7, #12]
            break;
3418b38a:	e012      	b.n	3418b3b2 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b38c:	f7fc fdbc 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418b390:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b392:	68fa      	ldr	r2, [r7, #12]
3418b394:	68bb      	ldr	r3, [r7, #8]
3418b396:	fbb2 f3f3 	udiv	r3, r2, r3
3418b39a:	60fb      	str	r3, [r7, #12]
            break;
3418b39c:	e009      	b.n	3418b3b2 <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b39e:	f7fc fdf9 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418b3a2:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
3418b3a4:	68fa      	ldr	r2, [r7, #12]
3418b3a6:	68bb      	ldr	r3, [r7, #8]
3418b3a8:	fbb2 f3f3 	udiv	r3, r2, r3
3418b3ac:	60fb      	str	r3, [r7, #12]
            break;
3418b3ae:	e000      	b.n	3418b3b2 <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
3418b3b0:	bf00      	nop
      break;
3418b3b2:	e022      	b.n	3418b3fa <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
3418b3b4:	f7f8 faa4 	bl	34183900 <LL_RCC_HSI_IsReady>
3418b3b8:	4603      	mov	r3, r0
3418b3ba:	2b00      	cmp	r3, #0
3418b3bc:	d01f      	beq.n	3418b3fe <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418b3be:	f7f8 fab1 	bl	34183924 <LL_RCC_HSI_GetDivider>
3418b3c2:	4603      	mov	r3, r0
3418b3c4:	09db      	lsrs	r3, r3, #7
3418b3c6:	4a13      	ldr	r2, [pc, #76]	@ (3418b414 <RCCEx_GetUSARTCLKFreq+0x44c>)
3418b3c8:	fa22 f303 	lsr.w	r3, r2, r3
3418b3cc:	60fb      	str	r3, [r7, #12]
      break;
3418b3ce:	e016      	b.n	3418b3fe <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
3418b3d0:	f7f8 fab6 	bl	34183940 <LL_RCC_MSI_IsReady>
3418b3d4:	4603      	mov	r3, r0
3418b3d6:	2b00      	cmp	r3, #0
3418b3d8:	d013      	beq.n	3418b402 <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
3418b3da:	4b0f      	ldr	r3, [pc, #60]	@ (3418b418 <RCCEx_GetUSARTCLKFreq+0x450>)
3418b3dc:	60fb      	str	r3, [r7, #12]
      break;
3418b3de:	e010      	b.n	3418b402 <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
3418b3e0:	f7f8 face 	bl	34183980 <LL_RCC_LSE_IsReady>
3418b3e4:	4603      	mov	r3, r0
3418b3e6:	2b00      	cmp	r3, #0
3418b3e8:	d00d      	beq.n	3418b406 <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
3418b3ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418b3ee:	60fb      	str	r3, [r7, #12]
      break;
3418b3f0:	e009      	b.n	3418b406 <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
3418b3f2:	bf00      	nop
3418b3f4:	e008      	b.n	3418b408 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b3f6:	bf00      	nop
3418b3f8:	e006      	b.n	3418b408 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b3fa:	bf00      	nop
3418b3fc:	e004      	b.n	3418b408 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b3fe:	bf00      	nop
3418b400:	e002      	b.n	3418b408 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b402:	bf00      	nop
3418b404:	e000      	b.n	3418b408 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
3418b406:	bf00      	nop
  }

  return usart_frequency;
3418b408:	68fb      	ldr	r3, [r7, #12]
}
3418b40a:	4618      	mov	r0, r3
3418b40c:	3710      	adds	r7, #16
3418b40e:	46bd      	mov	sp, r7
3418b410:	bd80      	pop	{r7, pc}
3418b412:	bf00      	nop
3418b414:	03d09000 	.word	0x03d09000
3418b418:	003d0900 	.word	0x003d0900

3418b41c <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
3418b41c:	b580      	push	{r7, lr}
3418b41e:	b084      	sub	sp, #16
3418b420:	af00      	add	r7, sp, #0
3418b422:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b424:	2300      	movs	r3, #0
3418b426:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
3418b428:	6878      	ldr	r0, [r7, #4]
3418b42a:	f7f8 fe69 	bl	34184100 <LL_RCC_GetUSBClockSource>
3418b42e:	4603      	mov	r3, r0
3418b430:	4a4b      	ldr	r2, [pc, #300]	@ (3418b560 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418b432:	4293      	cmp	r3, r2
3418b434:	d035      	beq.n	3418b4a2 <RCCEx_GetOTGPHYCLKFreq+0x86>
3418b436:	4a4a      	ldr	r2, [pc, #296]	@ (3418b560 <RCCEx_GetOTGPHYCLKFreq+0x144>)
3418b438:	4293      	cmp	r3, r2
3418b43a:	f200 8085 	bhi.w	3418b548 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b43e:	4a49      	ldr	r2, [pc, #292]	@ (3418b564 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418b440:	4293      	cmp	r3, r2
3418b442:	d02e      	beq.n	3418b4a2 <RCCEx_GetOTGPHYCLKFreq+0x86>
3418b444:	4a47      	ldr	r2, [pc, #284]	@ (3418b564 <RCCEx_GetOTGPHYCLKFreq+0x148>)
3418b446:	4293      	cmp	r3, r2
3418b448:	d87e      	bhi.n	3418b548 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b44a:	4a47      	ldr	r2, [pc, #284]	@ (3418b568 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418b44c:	4293      	cmp	r3, r2
3418b44e:	d038      	beq.n	3418b4c2 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418b450:	4a45      	ldr	r2, [pc, #276]	@ (3418b568 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
3418b452:	4293      	cmp	r3, r2
3418b454:	d878      	bhi.n	3418b548 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b456:	4a45      	ldr	r2, [pc, #276]	@ (3418b56c <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418b458:	4293      	cmp	r3, r2
3418b45a:	d032      	beq.n	3418b4c2 <RCCEx_GetOTGPHYCLKFreq+0xa6>
3418b45c:	4a43      	ldr	r2, [pc, #268]	@ (3418b56c <RCCEx_GetOTGPHYCLKFreq+0x150>)
3418b45e:	4293      	cmp	r3, r2
3418b460:	d872      	bhi.n	3418b548 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b462:	4a43      	ldr	r2, [pc, #268]	@ (3418b570 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418b464:	4293      	cmp	r3, r2
3418b466:	d00f      	beq.n	3418b488 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418b468:	4a41      	ldr	r2, [pc, #260]	@ (3418b570 <RCCEx_GetOTGPHYCLKFreq+0x154>)
3418b46a:	4293      	cmp	r3, r2
3418b46c:	d86c      	bhi.n	3418b548 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b46e:	4a41      	ldr	r2, [pc, #260]	@ (3418b574 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418b470:	4293      	cmp	r3, r2
3418b472:	d009      	beq.n	3418b488 <RCCEx_GetOTGPHYCLKFreq+0x6c>
3418b474:	4a3f      	ldr	r2, [pc, #252]	@ (3418b574 <RCCEx_GetOTGPHYCLKFreq+0x158>)
3418b476:	4293      	cmp	r3, r2
3418b478:	d866      	bhi.n	3418b548 <RCCEx_GetOTGPHYCLKFreq+0x12c>
3418b47a:	4a3f      	ldr	r2, [pc, #252]	@ (3418b578 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
3418b47c:	4293      	cmp	r3, r2
3418b47e:	d008      	beq.n	3418b492 <RCCEx_GetOTGPHYCLKFreq+0x76>
3418b480:	4a3e      	ldr	r2, [pc, #248]	@ (3418b57c <RCCEx_GetOTGPHYCLKFreq+0x160>)
3418b482:	4293      	cmp	r3, r2
3418b484:	d005      	beq.n	3418b492 <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
3418b486:	e05f      	b.n	3418b548 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b488:	2007      	movs	r0, #7
3418b48a:	f7fd f8b5 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418b48e:	60f8      	str	r0, [r7, #12]
      break;
3418b490:	e061      	b.n	3418b556 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b492:	f7f8 fa23 	bl	341838dc <LL_RCC_HSE_IsReady>
3418b496:	4603      	mov	r3, r0
3418b498:	2b00      	cmp	r3, #0
3418b49a:	d057      	beq.n	3418b54c <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
3418b49c:	4b38      	ldr	r3, [pc, #224]	@ (3418b580 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418b49e:	60fb      	str	r3, [r7, #12]
      break;
3418b4a0:	e054      	b.n	3418b54c <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b4a2:	f7f8 fa1b 	bl	341838dc <LL_RCC_HSE_IsReady>
3418b4a6:	4603      	mov	r3, r0
3418b4a8:	2b00      	cmp	r3, #0
3418b4aa:	d051      	beq.n	3418b550 <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418b4ac:	f7f8 fa04 	bl	341838b8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418b4b0:	4603      	mov	r3, r0
3418b4b2:	2b00      	cmp	r3, #0
3418b4b4:	d102      	bne.n	3418b4bc <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
3418b4b6:	4b33      	ldr	r3, [pc, #204]	@ (3418b584 <RCCEx_GetOTGPHYCLKFreq+0x168>)
3418b4b8:	60fb      	str	r3, [r7, #12]
      break;
3418b4ba:	e049      	b.n	3418b550 <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
3418b4bc:	4b30      	ldr	r3, [pc, #192]	@ (3418b580 <RCCEx_GetOTGPHYCLKFreq+0x164>)
3418b4be:	60fb      	str	r3, [r7, #12]
      break;
3418b4c0:	e046      	b.n	3418b550 <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
3418b4c2:	f7f9 fb81 	bl	34184bc8 <LL_RCC_IC15_IsEnabled>
3418b4c6:	4603      	mov	r3, r0
3418b4c8:	2b00      	cmp	r3, #0
3418b4ca:	d043      	beq.n	3418b554 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
3418b4cc:	f7f9 fb9e 	bl	34184c0c <LL_RCC_IC15_GetDivider>
3418b4d0:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3418b4d2:	f7f9 fb8d 	bl	34184bf0 <LL_RCC_IC15_GetSource>
3418b4d6:	4603      	mov	r3, r0
3418b4d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b4dc:	d029      	beq.n	3418b532 <RCCEx_GetOTGPHYCLKFreq+0x116>
3418b4de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b4e2:	d82f      	bhi.n	3418b544 <RCCEx_GetOTGPHYCLKFreq+0x128>
3418b4e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b4e8:	d01a      	beq.n	3418b520 <RCCEx_GetOTGPHYCLKFreq+0x104>
3418b4ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b4ee:	d829      	bhi.n	3418b544 <RCCEx_GetOTGPHYCLKFreq+0x128>
3418b4f0:	2b00      	cmp	r3, #0
3418b4f2:	d003      	beq.n	3418b4fc <RCCEx_GetOTGPHYCLKFreq+0xe0>
3418b4f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b4f8:	d009      	beq.n	3418b50e <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
3418b4fa:	e023      	b.n	3418b544 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b4fc:	f7fc fc78 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b500:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418b502:	68fa      	ldr	r2, [r7, #12]
3418b504:	68bb      	ldr	r3, [r7, #8]
3418b506:	fbb2 f3f3 	udiv	r3, r2, r3
3418b50a:	60fb      	str	r3, [r7, #12]
            break;
3418b50c:	e01b      	b.n	3418b546 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b50e:	f7fc fcb5 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418b512:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418b514:	68fa      	ldr	r2, [r7, #12]
3418b516:	68bb      	ldr	r3, [r7, #8]
3418b518:	fbb2 f3f3 	udiv	r3, r2, r3
3418b51c:	60fb      	str	r3, [r7, #12]
            break;
3418b51e:	e012      	b.n	3418b546 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b520:	f7fc fcf2 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418b524:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418b526:	68fa      	ldr	r2, [r7, #12]
3418b528:	68bb      	ldr	r3, [r7, #8]
3418b52a:	fbb2 f3f3 	udiv	r3, r2, r3
3418b52e:	60fb      	str	r3, [r7, #12]
            break;
3418b530:	e009      	b.n	3418b546 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b532:	f7fc fd2f 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418b536:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
3418b538:	68fa      	ldr	r2, [r7, #12]
3418b53a:	68bb      	ldr	r3, [r7, #8]
3418b53c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b540:	60fb      	str	r3, [r7, #12]
            break;
3418b542:	e000      	b.n	3418b546 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
3418b544:	bf00      	nop
      break;
3418b546:	e005      	b.n	3418b554 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
3418b548:	bf00      	nop
3418b54a:	e004      	b.n	3418b556 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418b54c:	bf00      	nop
3418b54e:	e002      	b.n	3418b556 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418b550:	bf00      	nop
3418b552:	e000      	b.n	3418b556 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
3418b554:	bf00      	nop
  }

  return usb_frequency;
3418b556:	68fb      	ldr	r3, [r7, #12]
}
3418b558:	4618      	mov	r0, r3
3418b55a:	3710      	adds	r7, #16
3418b55c:	46bd      	mov	sp, r7
3418b55e:	bd80      	pop	{r7, pc}
3418b560:	03031414 	.word	0x03031414
3418b564:	03030c14 	.word	0x03030c14
3418b568:	03021414 	.word	0x03021414
3418b56c:	03020c14 	.word	0x03020c14
3418b570:	03011414 	.word	0x03011414
3418b574:	03010c14 	.word	0x03010c14
3418b578:	03000c14 	.word	0x03000c14
3418b57c:	03001414 	.word	0x03001414
3418b580:	016e3600 	.word	0x016e3600
3418b584:	02dc6c00 	.word	0x02dc6c00

3418b588 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
3418b588:	b580      	push	{r7, lr}
3418b58a:	b084      	sub	sp, #16
3418b58c:	af00      	add	r7, sp, #0
3418b58e:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b590:	2300      	movs	r3, #0
3418b592:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
3418b594:	6878      	ldr	r0, [r7, #4]
3418b596:	f7f8 fdb3 	bl	34184100 <LL_RCC_GetUSBClockSource>
3418b59a:	4603      	mov	r3, r0
3418b59c:	4a1a      	ldr	r2, [pc, #104]	@ (3418b608 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418b59e:	4293      	cmp	r3, r2
3418b5a0:	d00f      	beq.n	3418b5c2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418b5a2:	4a19      	ldr	r2, [pc, #100]	@ (3418b608 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
3418b5a4:	4293      	cmp	r3, r2
3418b5a6:	d826      	bhi.n	3418b5f6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418b5a8:	4a18      	ldr	r2, [pc, #96]	@ (3418b60c <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418b5aa:	4293      	cmp	r3, r2
3418b5ac:	d009      	beq.n	3418b5c2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
3418b5ae:	4a17      	ldr	r2, [pc, #92]	@ (3418b60c <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
3418b5b0:	4293      	cmp	r3, r2
3418b5b2:	d820      	bhi.n	3418b5f6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
3418b5b4:	4a16      	ldr	r2, [pc, #88]	@ (3418b610 <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
3418b5b6:	4293      	cmp	r3, r2
3418b5b8:	d013      	beq.n	3418b5e2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
3418b5ba:	4a16      	ldr	r2, [pc, #88]	@ (3418b614 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
3418b5bc:	4293      	cmp	r3, r2
3418b5be:	d015      	beq.n	3418b5ec <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
3418b5c0:	e019      	b.n	3418b5f6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
3418b5c2:	f7f8 f98b 	bl	341838dc <LL_RCC_HSE_IsReady>
3418b5c6:	4603      	mov	r3, r0
3418b5c8:	2b00      	cmp	r3, #0
3418b5ca:	d016      	beq.n	3418b5fa <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
3418b5cc:	f7f8 f974 	bl	341838b8 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418b5d0:	4603      	mov	r3, r0
3418b5d2:	2b00      	cmp	r3, #0
3418b5d4:	d102      	bne.n	3418b5dc <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
3418b5d6:	4b10      	ldr	r3, [pc, #64]	@ (3418b618 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
3418b5d8:	60fb      	str	r3, [r7, #12]
      break;
3418b5da:	e00e      	b.n	3418b5fa <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
3418b5dc:	4b0f      	ldr	r3, [pc, #60]	@ (3418b61c <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
3418b5de:	60fb      	str	r3, [r7, #12]
      break;
3418b5e0:	e00b      	b.n	3418b5fa <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
3418b5e2:	480f      	ldr	r0, [pc, #60]	@ (3418b620 <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
3418b5e4:	f7ff ff1a 	bl	3418b41c <RCCEx_GetOTGPHYCLKFreq>
3418b5e8:	60f8      	str	r0, [r7, #12]
      break;
3418b5ea:	e007      	b.n	3418b5fc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
3418b5ec:	480d      	ldr	r0, [pc, #52]	@ (3418b624 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
3418b5ee:	f7ff ff15 	bl	3418b41c <RCCEx_GetOTGPHYCLKFreq>
3418b5f2:	60f8      	str	r0, [r7, #12]
      break;
3418b5f4:	e002      	b.n	3418b5fc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418b5f6:	bf00      	nop
3418b5f8:	e000      	b.n	3418b5fc <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
3418b5fa:	bf00      	nop
  }

  return usb_frequency;
3418b5fc:	68fb      	ldr	r3, [r7, #12]
}
3418b5fe:	4618      	mov	r0, r3
3418b600:	3710      	adds	r7, #16
3418b602:	46bd      	mov	sp, r7
3418b604:	bd80      	pop	{r7, pc}
3418b606:	bf00      	nop
3418b608:	01011814 	.word	0x01011814
3418b60c:	01011014 	.word	0x01011014
3418b610:	01001014 	.word	0x01001014
3418b614:	01001814 	.word	0x01001814
3418b618:	02dc6c00 	.word	0x02dc6c00
3418b61c:	016e3600 	.word	0x016e3600
3418b620:	03000c14 	.word	0x03000c14
3418b624:	03001414 	.word	0x03001414

3418b628 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
3418b628:	b580      	push	{r7, lr}
3418b62a:	b084      	sub	sp, #16
3418b62c:	af00      	add	r7, sp, #0
3418b62e:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
3418b630:	2300      	movs	r3, #0
3418b632:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418b634:	6878      	ldr	r0, [r7, #4]
3418b636:	f7f8 fd6f 	bl	34184118 <LL_RCC_GetXSPIClockSource>
3418b63a:	4603      	mov	r3, r0
3418b63c:	4a76      	ldr	r2, [pc, #472]	@ (3418b818 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418b63e:	4293      	cmp	r3, r2
3418b640:	f000 809d 	beq.w	3418b77e <RCCEx_GetXSPICLKFreq+0x156>
3418b644:	4a74      	ldr	r2, [pc, #464]	@ (3418b818 <RCCEx_GetXSPICLKFreq+0x1f0>)
3418b646:	4293      	cmp	r3, r2
3418b648:	f200 80dc 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b64c:	4a73      	ldr	r2, [pc, #460]	@ (3418b81c <RCCEx_GetXSPICLKFreq+0x1f4>)
3418b64e:	4293      	cmp	r3, r2
3418b650:	f000 8095 	beq.w	3418b77e <RCCEx_GetXSPICLKFreq+0x156>
3418b654:	4a71      	ldr	r2, [pc, #452]	@ (3418b81c <RCCEx_GetXSPICLKFreq+0x1f4>)
3418b656:	4293      	cmp	r3, r2
3418b658:	f200 80d4 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b65c:	4a70      	ldr	r2, [pc, #448]	@ (3418b820 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418b65e:	4293      	cmp	r3, r2
3418b660:	f000 808d 	beq.w	3418b77e <RCCEx_GetXSPICLKFreq+0x156>
3418b664:	4a6e      	ldr	r2, [pc, #440]	@ (3418b820 <RCCEx_GetXSPICLKFreq+0x1f8>)
3418b666:	4293      	cmp	r3, r2
3418b668:	f200 80cc 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b66c:	4a6d      	ldr	r2, [pc, #436]	@ (3418b824 <RCCEx_GetXSPICLKFreq+0x1fc>)
3418b66e:	4293      	cmp	r3, r2
3418b670:	d041      	beq.n	3418b6f6 <RCCEx_GetXSPICLKFreq+0xce>
3418b672:	4a6c      	ldr	r2, [pc, #432]	@ (3418b824 <RCCEx_GetXSPICLKFreq+0x1fc>)
3418b674:	4293      	cmp	r3, r2
3418b676:	f200 80c5 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b67a:	4a6b      	ldr	r2, [pc, #428]	@ (3418b828 <RCCEx_GetXSPICLKFreq+0x200>)
3418b67c:	4293      	cmp	r3, r2
3418b67e:	d03a      	beq.n	3418b6f6 <RCCEx_GetXSPICLKFreq+0xce>
3418b680:	4a69      	ldr	r2, [pc, #420]	@ (3418b828 <RCCEx_GetXSPICLKFreq+0x200>)
3418b682:	4293      	cmp	r3, r2
3418b684:	f200 80be 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b688:	4a68      	ldr	r2, [pc, #416]	@ (3418b82c <RCCEx_GetXSPICLKFreq+0x204>)
3418b68a:	4293      	cmp	r3, r2
3418b68c:	d033      	beq.n	3418b6f6 <RCCEx_GetXSPICLKFreq+0xce>
3418b68e:	4a67      	ldr	r2, [pc, #412]	@ (3418b82c <RCCEx_GetXSPICLKFreq+0x204>)
3418b690:	4293      	cmp	r3, r2
3418b692:	f200 80b7 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b696:	4a66      	ldr	r2, [pc, #408]	@ (3418b830 <RCCEx_GetXSPICLKFreq+0x208>)
3418b698:	4293      	cmp	r3, r2
3418b69a:	d027      	beq.n	3418b6ec <RCCEx_GetXSPICLKFreq+0xc4>
3418b69c:	4a64      	ldr	r2, [pc, #400]	@ (3418b830 <RCCEx_GetXSPICLKFreq+0x208>)
3418b69e:	4293      	cmp	r3, r2
3418b6a0:	f200 80b0 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b6a4:	4a63      	ldr	r2, [pc, #396]	@ (3418b834 <RCCEx_GetXSPICLKFreq+0x20c>)
3418b6a6:	4293      	cmp	r3, r2
3418b6a8:	d020      	beq.n	3418b6ec <RCCEx_GetXSPICLKFreq+0xc4>
3418b6aa:	4a62      	ldr	r2, [pc, #392]	@ (3418b834 <RCCEx_GetXSPICLKFreq+0x20c>)
3418b6ac:	4293      	cmp	r3, r2
3418b6ae:	f200 80a9 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b6b2:	4a61      	ldr	r2, [pc, #388]	@ (3418b838 <RCCEx_GetXSPICLKFreq+0x210>)
3418b6b4:	4293      	cmp	r3, r2
3418b6b6:	d019      	beq.n	3418b6ec <RCCEx_GetXSPICLKFreq+0xc4>
3418b6b8:	4a5f      	ldr	r2, [pc, #380]	@ (3418b838 <RCCEx_GetXSPICLKFreq+0x210>)
3418b6ba:	4293      	cmp	r3, r2
3418b6bc:	f200 80a2 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b6c0:	4a5e      	ldr	r2, [pc, #376]	@ (3418b83c <RCCEx_GetXSPICLKFreq+0x214>)
3418b6c2:	4293      	cmp	r3, r2
3418b6c4:	d00a      	beq.n	3418b6dc <RCCEx_GetXSPICLKFreq+0xb4>
3418b6c6:	4a5d      	ldr	r2, [pc, #372]	@ (3418b83c <RCCEx_GetXSPICLKFreq+0x214>)
3418b6c8:	4293      	cmp	r3, r2
3418b6ca:	f200 809b 	bhi.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
3418b6ce:	4a5c      	ldr	r2, [pc, #368]	@ (3418b840 <RCCEx_GetXSPICLKFreq+0x218>)
3418b6d0:	4293      	cmp	r3, r2
3418b6d2:	d003      	beq.n	3418b6dc <RCCEx_GetXSPICLKFreq+0xb4>
3418b6d4:	4a5b      	ldr	r2, [pc, #364]	@ (3418b844 <RCCEx_GetXSPICLKFreq+0x21c>)
3418b6d6:	4293      	cmp	r3, r2
3418b6d8:	f040 8094 	bne.w	3418b804 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418b6dc:	f7f7 fd10 	bl	34183100 <HAL_RCC_GetSysClockFreq>
3418b6e0:	4603      	mov	r3, r0
3418b6e2:	4618      	mov	r0, r3
3418b6e4:	f7fc fc9c 	bl	34188020 <RCCEx_GetHCLKFreq>
3418b6e8:	60f8      	str	r0, [r7, #12]
      break;
3418b6ea:	e090      	b.n	3418b80e <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418b6ec:	2007      	movs	r0, #7
3418b6ee:	f7fc ff83 	bl	341885f8 <RCCEx_GetCLKPCLKFreq>
3418b6f2:	60f8      	str	r0, [r7, #12]
      break;
3418b6f4:	e08b      	b.n	3418b80e <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
3418b6f6:	f7f8 ffe7 	bl	341846c8 <LL_RCC_IC3_IsEnabled>
3418b6fa:	4603      	mov	r3, r0
3418b6fc:	2b00      	cmp	r3, #0
3418b6fe:	f000 8083 	beq.w	3418b808 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
3418b702:	f7f9 f803 	bl	3418470c <LL_RCC_IC3_GetDivider>
3418b706:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
3418b708:	f7f8 fff2 	bl	341846f0 <LL_RCC_IC3_GetSource>
3418b70c:	4603      	mov	r3, r0
3418b70e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b712:	d029      	beq.n	3418b768 <RCCEx_GetXSPICLKFreq+0x140>
3418b714:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b718:	d82f      	bhi.n	3418b77a <RCCEx_GetXSPICLKFreq+0x152>
3418b71a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b71e:	d01a      	beq.n	3418b756 <RCCEx_GetXSPICLKFreq+0x12e>
3418b720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b724:	d829      	bhi.n	3418b77a <RCCEx_GetXSPICLKFreq+0x152>
3418b726:	2b00      	cmp	r3, #0
3418b728:	d003      	beq.n	3418b732 <RCCEx_GetXSPICLKFreq+0x10a>
3418b72a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b72e:	d009      	beq.n	3418b744 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b730:	e023      	b.n	3418b77a <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b732:	f7fc fb5d 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b736:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b738:	68fa      	ldr	r2, [r7, #12]
3418b73a:	68bb      	ldr	r3, [r7, #8]
3418b73c:	fbb2 f3f3 	udiv	r3, r2, r3
3418b740:	60fb      	str	r3, [r7, #12]
            break;
3418b742:	e01b      	b.n	3418b77c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b744:	f7fc fb9a 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418b748:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b74a:	68fa      	ldr	r2, [r7, #12]
3418b74c:	68bb      	ldr	r3, [r7, #8]
3418b74e:	fbb2 f3f3 	udiv	r3, r2, r3
3418b752:	60fb      	str	r3, [r7, #12]
            break;
3418b754:	e012      	b.n	3418b77c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b756:	f7fc fbd7 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418b75a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b75c:	68fa      	ldr	r2, [r7, #12]
3418b75e:	68bb      	ldr	r3, [r7, #8]
3418b760:	fbb2 f3f3 	udiv	r3, r2, r3
3418b764:	60fb      	str	r3, [r7, #12]
            break;
3418b766:	e009      	b.n	3418b77c <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b768:	f7fc fc14 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418b76c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b76e:	68fa      	ldr	r2, [r7, #12]
3418b770:	68bb      	ldr	r3, [r7, #8]
3418b772:	fbb2 f3f3 	udiv	r3, r2, r3
3418b776:	60fb      	str	r3, [r7, #12]
            break;
3418b778:	e000      	b.n	3418b77c <RCCEx_GetXSPICLKFreq+0x154>
            break;
3418b77a:	bf00      	nop
        }
      }
      break;
3418b77c:	e044      	b.n	3418b808 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
3418b77e:	f7f8 ffe3 	bl	34184748 <LL_RCC_IC4_IsEnabled>
3418b782:	4603      	mov	r3, r0
3418b784:	2b00      	cmp	r3, #0
3418b786:	d041      	beq.n	3418b80c <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3418b788:	f7f9 f800 	bl	3418478c <LL_RCC_IC4_GetDivider>
3418b78c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
3418b78e:	f7f8 ffef 	bl	34184770 <LL_RCC_IC4_GetSource>
3418b792:	4603      	mov	r3, r0
3418b794:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b798:	d029      	beq.n	3418b7ee <RCCEx_GetXSPICLKFreq+0x1c6>
3418b79a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418b79e:	d82f      	bhi.n	3418b800 <RCCEx_GetXSPICLKFreq+0x1d8>
3418b7a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b7a4:	d01a      	beq.n	3418b7dc <RCCEx_GetXSPICLKFreq+0x1b4>
3418b7a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3418b7aa:	d829      	bhi.n	3418b800 <RCCEx_GetXSPICLKFreq+0x1d8>
3418b7ac:	2b00      	cmp	r3, #0
3418b7ae:	d003      	beq.n	3418b7b8 <RCCEx_GetXSPICLKFreq+0x190>
3418b7b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418b7b4:	d009      	beq.n	3418b7ca <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3418b7b6:	e023      	b.n	3418b800 <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418b7b8:	f7fc fb1a 	bl	34187df0 <HAL_RCCEx_GetPLL1CLKFreq>
3418b7bc:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b7be:	68fa      	ldr	r2, [r7, #12]
3418b7c0:	68bb      	ldr	r3, [r7, #8]
3418b7c2:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7c6:	60fb      	str	r3, [r7, #12]
            break;
3418b7c8:	e01b      	b.n	3418b802 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418b7ca:	f7fc fb57 	bl	34187e7c <HAL_RCCEx_GetPLL2CLKFreq>
3418b7ce:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b7d0:	68fa      	ldr	r2, [r7, #12]
3418b7d2:	68bb      	ldr	r3, [r7, #8]
3418b7d4:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7d8:	60fb      	str	r3, [r7, #12]
            break;
3418b7da:	e012      	b.n	3418b802 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418b7dc:	f7fc fb94 	bl	34187f08 <HAL_RCCEx_GetPLL3CLKFreq>
3418b7e0:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b7e2:	68fa      	ldr	r2, [r7, #12]
3418b7e4:	68bb      	ldr	r3, [r7, #8]
3418b7e6:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7ea:	60fb      	str	r3, [r7, #12]
            break;
3418b7ec:	e009      	b.n	3418b802 <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418b7ee:	f7fc fbd1 	bl	34187f94 <HAL_RCCEx_GetPLL4CLKFreq>
3418b7f2:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
3418b7f4:	68fa      	ldr	r2, [r7, #12]
3418b7f6:	68bb      	ldr	r3, [r7, #8]
3418b7f8:	fbb2 f3f3 	udiv	r3, r2, r3
3418b7fc:	60fb      	str	r3, [r7, #12]
            break;
3418b7fe:	e000      	b.n	3418b802 <RCCEx_GetXSPICLKFreq+0x1da>
            break;
3418b800:	bf00      	nop
        }
      }
      break;
3418b802:	e003      	b.n	3418b80c <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
3418b804:	bf00      	nop
3418b806:	e002      	b.n	3418b80e <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418b808:	bf00      	nop
3418b80a:	e000      	b.n	3418b80e <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
3418b80c:	bf00      	nop
  }

  return xspi_frequency;
3418b80e:	68fb      	ldr	r3, [r7, #12]
}
3418b810:	4618      	mov	r0, r3
3418b812:	3710      	adds	r7, #16
3418b814:	46bd      	mov	sp, r7
3418b816:	bd80      	pop	{r7, pc}
3418b818:	03030814 	.word	0x03030814
3418b81c:	03030414 	.word	0x03030414
3418b820:	03030014 	.word	0x03030014
3418b824:	03020814 	.word	0x03020814
3418b828:	03020414 	.word	0x03020414
3418b82c:	03020014 	.word	0x03020014
3418b830:	03010814 	.word	0x03010814
3418b834:	03010414 	.word	0x03010414
3418b838:	03010014 	.word	0x03010014
3418b83c:	03000814 	.word	0x03000814
3418b840:	03000014 	.word	0x03000014
3418b844:	03000414 	.word	0x03000414

3418b848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
3418b848:	b580      	push	{r7, lr}
3418b84a:	b082      	sub	sp, #8
3418b84c:	af00      	add	r7, sp, #0
3418b84e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
3418b850:	687b      	ldr	r3, [r7, #4]
3418b852:	2b00      	cmp	r3, #0
3418b854:	d101      	bne.n	3418b85a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
3418b856:	2301      	movs	r3, #1
3418b858:	e042      	b.n	3418b8e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
3418b85a:	687b      	ldr	r3, [r7, #4]
3418b85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418b860:	2b00      	cmp	r3, #0
3418b862:	d106      	bne.n	3418b872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
3418b864:	687b      	ldr	r3, [r7, #4]
3418b866:	2200      	movs	r2, #0
3418b868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
3418b86c:	6878      	ldr	r0, [r7, #4]
3418b86e:	f7f5 fb05 	bl	34180e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
3418b872:	687b      	ldr	r3, [r7, #4]
3418b874:	2224      	movs	r2, #36	@ 0x24
3418b876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
3418b87a:	687b      	ldr	r3, [r7, #4]
3418b87c:	681b      	ldr	r3, [r3, #0]
3418b87e:	681a      	ldr	r2, [r3, #0]
3418b880:	687b      	ldr	r3, [r7, #4]
3418b882:	681b      	ldr	r3, [r3, #0]
3418b884:	f022 0201 	bic.w	r2, r2, #1
3418b888:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3418b88a:	687b      	ldr	r3, [r7, #4]
3418b88c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418b88e:	2b00      	cmp	r3, #0
3418b890:	d002      	beq.n	3418b898 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
3418b892:	6878      	ldr	r0, [r7, #4]
3418b894:	f000 faa2 	bl	3418bddc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
3418b898:	6878      	ldr	r0, [r7, #4]
3418b89a:	f000 f8b3 	bl	3418ba04 <UART_SetConfig>
3418b89e:	4603      	mov	r3, r0
3418b8a0:	2b01      	cmp	r3, #1
3418b8a2:	d101      	bne.n	3418b8a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
3418b8a4:	2301      	movs	r3, #1
3418b8a6:	e01b      	b.n	3418b8e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3418b8a8:	687b      	ldr	r3, [r7, #4]
3418b8aa:	681b      	ldr	r3, [r3, #0]
3418b8ac:	685a      	ldr	r2, [r3, #4]
3418b8ae:	687b      	ldr	r3, [r7, #4]
3418b8b0:	681b      	ldr	r3, [r3, #0]
3418b8b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
3418b8b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
3418b8b8:	687b      	ldr	r3, [r7, #4]
3418b8ba:	681b      	ldr	r3, [r3, #0]
3418b8bc:	689a      	ldr	r2, [r3, #8]
3418b8be:	687b      	ldr	r3, [r7, #4]
3418b8c0:	681b      	ldr	r3, [r3, #0]
3418b8c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
3418b8c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
3418b8c8:	687b      	ldr	r3, [r7, #4]
3418b8ca:	681b      	ldr	r3, [r3, #0]
3418b8cc:	681a      	ldr	r2, [r3, #0]
3418b8ce:	687b      	ldr	r3, [r7, #4]
3418b8d0:	681b      	ldr	r3, [r3, #0]
3418b8d2:	f042 0201 	orr.w	r2, r2, #1
3418b8d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
3418b8d8:	6878      	ldr	r0, [r7, #4]
3418b8da:	f000 fb21 	bl	3418bf20 <UART_CheckIdleState>
3418b8de:	4603      	mov	r3, r0
}
3418b8e0:	4618      	mov	r0, r3
3418b8e2:	3708      	adds	r7, #8
3418b8e4:	46bd      	mov	sp, r7
3418b8e6:	bd80      	pop	{r7, pc}

3418b8e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
3418b8e8:	b580      	push	{r7, lr}
3418b8ea:	b08a      	sub	sp, #40	@ 0x28
3418b8ec:	af02      	add	r7, sp, #8
3418b8ee:	60f8      	str	r0, [r7, #12]
3418b8f0:	60b9      	str	r1, [r7, #8]
3418b8f2:	603b      	str	r3, [r7, #0]
3418b8f4:	4613      	mov	r3, r2
3418b8f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
3418b8f8:	68fb      	ldr	r3, [r7, #12]
3418b8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3418b8fe:	2b20      	cmp	r3, #32
3418b900:	d17b      	bne.n	3418b9fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
3418b902:	68bb      	ldr	r3, [r7, #8]
3418b904:	2b00      	cmp	r3, #0
3418b906:	d002      	beq.n	3418b90e <HAL_UART_Transmit+0x26>
3418b908:	88fb      	ldrh	r3, [r7, #6]
3418b90a:	2b00      	cmp	r3, #0
3418b90c:	d101      	bne.n	3418b912 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
3418b90e:	2301      	movs	r3, #1
3418b910:	e074      	b.n	3418b9fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
3418b912:	68fb      	ldr	r3, [r7, #12]
3418b914:	2200      	movs	r2, #0
3418b916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
3418b91a:	68fb      	ldr	r3, [r7, #12]
3418b91c:	2221      	movs	r2, #33	@ 0x21
3418b91e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
3418b922:	f7f5 ff75 	bl	34181810 <HAL_GetTick>
3418b926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
3418b928:	68fb      	ldr	r3, [r7, #12]
3418b92a:	88fa      	ldrh	r2, [r7, #6]
3418b92c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
3418b930:	68fb      	ldr	r3, [r7, #12]
3418b932:	88fa      	ldrh	r2, [r7, #6]
3418b934:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3418b938:	68fb      	ldr	r3, [r7, #12]
3418b93a:	689b      	ldr	r3, [r3, #8]
3418b93c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418b940:	d108      	bne.n	3418b954 <HAL_UART_Transmit+0x6c>
3418b942:	68fb      	ldr	r3, [r7, #12]
3418b944:	691b      	ldr	r3, [r3, #16]
3418b946:	2b00      	cmp	r3, #0
3418b948:	d104      	bne.n	3418b954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
3418b94a:	2300      	movs	r3, #0
3418b94c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
3418b94e:	68bb      	ldr	r3, [r7, #8]
3418b950:	61bb      	str	r3, [r7, #24]
3418b952:	e003      	b.n	3418b95c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
3418b954:	68bb      	ldr	r3, [r7, #8]
3418b956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
3418b958:	2300      	movs	r3, #0
3418b95a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
3418b95c:	e030      	b.n	3418b9c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3418b95e:	683b      	ldr	r3, [r7, #0]
3418b960:	9300      	str	r3, [sp, #0]
3418b962:	697b      	ldr	r3, [r7, #20]
3418b964:	2200      	movs	r2, #0
3418b966:	2180      	movs	r1, #128	@ 0x80
3418b968:	68f8      	ldr	r0, [r7, #12]
3418b96a:	f000 fb83 	bl	3418c074 <UART_WaitOnFlagUntilTimeout>
3418b96e:	4603      	mov	r3, r0
3418b970:	2b00      	cmp	r3, #0
3418b972:	d005      	beq.n	3418b980 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
3418b974:	68fb      	ldr	r3, [r7, #12]
3418b976:	2220      	movs	r2, #32
3418b978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
3418b97c:	2303      	movs	r3, #3
3418b97e:	e03d      	b.n	3418b9fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
3418b980:	69fb      	ldr	r3, [r7, #28]
3418b982:	2b00      	cmp	r3, #0
3418b984:	d10b      	bne.n	3418b99e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3418b986:	69bb      	ldr	r3, [r7, #24]
3418b988:	881b      	ldrh	r3, [r3, #0]
3418b98a:	461a      	mov	r2, r3
3418b98c:	68fb      	ldr	r3, [r7, #12]
3418b98e:	681b      	ldr	r3, [r3, #0]
3418b990:	f3c2 0208 	ubfx	r2, r2, #0, #9
3418b994:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
3418b996:	69bb      	ldr	r3, [r7, #24]
3418b998:	3302      	adds	r3, #2
3418b99a:	61bb      	str	r3, [r7, #24]
3418b99c:	e007      	b.n	3418b9ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3418b99e:	69fb      	ldr	r3, [r7, #28]
3418b9a0:	781a      	ldrb	r2, [r3, #0]
3418b9a2:	68fb      	ldr	r3, [r7, #12]
3418b9a4:	681b      	ldr	r3, [r3, #0]
3418b9a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
3418b9a8:	69fb      	ldr	r3, [r7, #28]
3418b9aa:	3301      	adds	r3, #1
3418b9ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
3418b9ae:	68fb      	ldr	r3, [r7, #12]
3418b9b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3418b9b4:	b29b      	uxth	r3, r3
3418b9b6:	3b01      	subs	r3, #1
3418b9b8:	b29a      	uxth	r2, r3
3418b9ba:	68fb      	ldr	r3, [r7, #12]
3418b9bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
3418b9c0:	68fb      	ldr	r3, [r7, #12]
3418b9c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3418b9c6:	b29b      	uxth	r3, r3
3418b9c8:	2b00      	cmp	r3, #0
3418b9ca:	d1c8      	bne.n	3418b95e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3418b9cc:	683b      	ldr	r3, [r7, #0]
3418b9ce:	9300      	str	r3, [sp, #0]
3418b9d0:	697b      	ldr	r3, [r7, #20]
3418b9d2:	2200      	movs	r2, #0
3418b9d4:	2140      	movs	r1, #64	@ 0x40
3418b9d6:	68f8      	ldr	r0, [r7, #12]
3418b9d8:	f000 fb4c 	bl	3418c074 <UART_WaitOnFlagUntilTimeout>
3418b9dc:	4603      	mov	r3, r0
3418b9de:	2b00      	cmp	r3, #0
3418b9e0:	d005      	beq.n	3418b9ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
3418b9e2:	68fb      	ldr	r3, [r7, #12]
3418b9e4:	2220      	movs	r2, #32
3418b9e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
3418b9ea:	2303      	movs	r3, #3
3418b9ec:	e006      	b.n	3418b9fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
3418b9ee:	68fb      	ldr	r3, [r7, #12]
3418b9f0:	2220      	movs	r2, #32
3418b9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
3418b9f6:	2300      	movs	r3, #0
3418b9f8:	e000      	b.n	3418b9fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
3418b9fa:	2302      	movs	r3, #2
  }
}
3418b9fc:	4618      	mov	r0, r3
3418b9fe:	3720      	adds	r7, #32
3418ba00:	46bd      	mov	sp, r7
3418ba02:	bd80      	pop	{r7, pc}

3418ba04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
3418ba04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3418ba08:	b090      	sub	sp, #64	@ 0x40
3418ba0a:	af00      	add	r7, sp, #0
3418ba0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
3418ba0e:	2300      	movs	r3, #0
3418ba10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
3418ba14:	697b      	ldr	r3, [r7, #20]
3418ba16:	681b      	ldr	r3, [r3, #0]
3418ba18:	4aa3      	ldr	r2, [pc, #652]	@ (3418bca8 <UART_SetConfig+0x2a4>)
3418ba1a:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3418ba1c:	697b      	ldr	r3, [r7, #20]
3418ba1e:	689a      	ldr	r2, [r3, #8]
3418ba20:	697b      	ldr	r3, [r7, #20]
3418ba22:	691b      	ldr	r3, [r3, #16]
3418ba24:	431a      	orrs	r2, r3
3418ba26:	697b      	ldr	r3, [r7, #20]
3418ba28:	695b      	ldr	r3, [r3, #20]
3418ba2a:	431a      	orrs	r2, r3
3418ba2c:	697b      	ldr	r3, [r7, #20]
3418ba2e:	69db      	ldr	r3, [r3, #28]
3418ba30:	4313      	orrs	r3, r2
3418ba32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3418ba34:	697b      	ldr	r3, [r7, #20]
3418ba36:	681b      	ldr	r3, [r3, #0]
3418ba38:	681a      	ldr	r2, [r3, #0]
3418ba3a:	4b9c      	ldr	r3, [pc, #624]	@ (3418bcac <UART_SetConfig+0x2a8>)
3418ba3c:	4013      	ands	r3, r2
3418ba3e:	697a      	ldr	r2, [r7, #20]
3418ba40:	6812      	ldr	r2, [r2, #0]
3418ba42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418ba44:	430b      	orrs	r3, r1
3418ba46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3418ba48:	697b      	ldr	r3, [r7, #20]
3418ba4a:	681b      	ldr	r3, [r3, #0]
3418ba4c:	685b      	ldr	r3, [r3, #4]
3418ba4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
3418ba52:	697b      	ldr	r3, [r7, #20]
3418ba54:	68da      	ldr	r2, [r3, #12]
3418ba56:	697b      	ldr	r3, [r7, #20]
3418ba58:	681b      	ldr	r3, [r3, #0]
3418ba5a:	430a      	orrs	r2, r1
3418ba5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3418ba5e:	697b      	ldr	r3, [r7, #20]
3418ba60:	699b      	ldr	r3, [r3, #24]
3418ba62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
3418ba64:	697b      	ldr	r3, [r7, #20]
3418ba66:	681b      	ldr	r3, [r3, #0]
3418ba68:	4a8f      	ldr	r2, [pc, #572]	@ (3418bca8 <UART_SetConfig+0x2a4>)
3418ba6a:	4293      	cmp	r3, r2
3418ba6c:	d009      	beq.n	3418ba82 <UART_SetConfig+0x7e>
3418ba6e:	697b      	ldr	r3, [r7, #20]
3418ba70:	681b      	ldr	r3, [r3, #0]
3418ba72:	4a8f      	ldr	r2, [pc, #572]	@ (3418bcb0 <UART_SetConfig+0x2ac>)
3418ba74:	4293      	cmp	r3, r2
3418ba76:	d004      	beq.n	3418ba82 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
3418ba78:	697b      	ldr	r3, [r7, #20]
3418ba7a:	6a1b      	ldr	r3, [r3, #32]
3418ba7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
3418ba7e:	4313      	orrs	r3, r2
3418ba80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3418ba82:	697b      	ldr	r3, [r7, #20]
3418ba84:	681b      	ldr	r3, [r3, #0]
3418ba86:	689b      	ldr	r3, [r3, #8]
3418ba88:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
3418ba8c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
3418ba90:	697a      	ldr	r2, [r7, #20]
3418ba92:	6812      	ldr	r2, [r2, #0]
3418ba94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418ba96:	430b      	orrs	r3, r1
3418ba98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3418ba9a:	697b      	ldr	r3, [r7, #20]
3418ba9c:	681b      	ldr	r3, [r3, #0]
3418ba9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418baa0:	f023 010f 	bic.w	r1, r3, #15
3418baa4:	697b      	ldr	r3, [r7, #20]
3418baa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418baa8:	697b      	ldr	r3, [r7, #20]
3418baaa:	681b      	ldr	r3, [r3, #0]
3418baac:	430a      	orrs	r2, r1
3418baae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
3418bab0:	697b      	ldr	r3, [r7, #20]
3418bab2:	681b      	ldr	r3, [r3, #0]
3418bab4:	4a7f      	ldr	r2, [pc, #508]	@ (3418bcb4 <UART_SetConfig+0x2b0>)
3418bab6:	4293      	cmp	r3, r2
3418bab8:	d106      	bne.n	3418bac8 <UART_SetConfig+0xc4>
3418baba:	f04f 0200 	mov.w	r2, #0
3418babe:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418bac2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bac6:	e07d      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bac8:	697b      	ldr	r3, [r7, #20]
3418baca:	681b      	ldr	r3, [r3, #0]
3418bacc:	4a7a      	ldr	r2, [pc, #488]	@ (3418bcb8 <UART_SetConfig+0x2b4>)
3418bace:	4293      	cmp	r3, r2
3418bad0:	d106      	bne.n	3418bae0 <UART_SetConfig+0xdc>
3418bad2:	f04f 0200 	mov.w	r2, #0
3418bad6:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418bada:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bade:	e071      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bae0:	697b      	ldr	r3, [r7, #20]
3418bae2:	681b      	ldr	r3, [r3, #0]
3418bae4:	4a75      	ldr	r2, [pc, #468]	@ (3418bcbc <UART_SetConfig+0x2b8>)
3418bae6:	4293      	cmp	r3, r2
3418bae8:	d106      	bne.n	3418baf8 <UART_SetConfig+0xf4>
3418baea:	f04f 0200 	mov.w	r2, #0
3418baee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418baf2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418baf6:	e065      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418baf8:	697b      	ldr	r3, [r7, #20]
3418bafa:	681b      	ldr	r3, [r3, #0]
3418bafc:	4a70      	ldr	r2, [pc, #448]	@ (3418bcc0 <UART_SetConfig+0x2bc>)
3418bafe:	4293      	cmp	r3, r2
3418bb00:	d106      	bne.n	3418bb10 <UART_SetConfig+0x10c>
3418bb02:	f04f 0200 	mov.w	r2, #0
3418bb06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418bb0a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bb0e:	e059      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bb10:	697b      	ldr	r3, [r7, #20]
3418bb12:	681b      	ldr	r3, [r3, #0]
3418bb14:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3418bb18:	d106      	bne.n	3418bb28 <UART_SetConfig+0x124>
3418bb1a:	f04f 0200 	mov.w	r2, #0
3418bb1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3418bb22:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bb26:	e04d      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bb28:	697b      	ldr	r3, [r7, #20]
3418bb2a:	681b      	ldr	r3, [r3, #0]
3418bb2c:	4a65      	ldr	r2, [pc, #404]	@ (3418bcc4 <UART_SetConfig+0x2c0>)
3418bb2e:	4293      	cmp	r3, r2
3418bb30:	d106      	bne.n	3418bb40 <UART_SetConfig+0x13c>
3418bb32:	f04f 0200 	mov.w	r2, #0
3418bb36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418bb3a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bb3e:	e041      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bb40:	697b      	ldr	r3, [r7, #20]
3418bb42:	681b      	ldr	r3, [r3, #0]
3418bb44:	4a60      	ldr	r2, [pc, #384]	@ (3418bcc8 <UART_SetConfig+0x2c4>)
3418bb46:	4293      	cmp	r3, r2
3418bb48:	d106      	bne.n	3418bb58 <UART_SetConfig+0x154>
3418bb4a:	f04f 0200 	mov.w	r2, #0
3418bb4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3418bb52:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bb56:	e035      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bb58:	697b      	ldr	r3, [r7, #20]
3418bb5a:	681b      	ldr	r3, [r3, #0]
3418bb5c:	4a5b      	ldr	r2, [pc, #364]	@ (3418bccc <UART_SetConfig+0x2c8>)
3418bb5e:	4293      	cmp	r3, r2
3418bb60:	d106      	bne.n	3418bb70 <UART_SetConfig+0x16c>
3418bb62:	f04f 0200 	mov.w	r2, #0
3418bb66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418bb6a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bb6e:	e029      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bb70:	697b      	ldr	r3, [r7, #20]
3418bb72:	681b      	ldr	r3, [r3, #0]
3418bb74:	4a56      	ldr	r2, [pc, #344]	@ (3418bcd0 <UART_SetConfig+0x2cc>)
3418bb76:	4293      	cmp	r3, r2
3418bb78:	d106      	bne.n	3418bb88 <UART_SetConfig+0x184>
3418bb7a:	f04f 0200 	mov.w	r2, #0
3418bb7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3418bb82:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bb86:	e01d      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bb88:	697b      	ldr	r3, [r7, #20]
3418bb8a:	681b      	ldr	r3, [r3, #0]
3418bb8c:	4a51      	ldr	r2, [pc, #324]	@ (3418bcd4 <UART_SetConfig+0x2d0>)
3418bb8e:	4293      	cmp	r3, r2
3418bb90:	d106      	bne.n	3418bba0 <UART_SetConfig+0x19c>
3418bb92:	f04f 0200 	mov.w	r2, #0
3418bb96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
3418bb9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bb9e:	e011      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bba0:	697b      	ldr	r3, [r7, #20]
3418bba2:	681b      	ldr	r3, [r3, #0]
3418bba4:	4a40      	ldr	r2, [pc, #256]	@ (3418bca8 <UART_SetConfig+0x2a4>)
3418bba6:	4293      	cmp	r3, r2
3418bba8:	d106      	bne.n	3418bbb8 <UART_SetConfig+0x1b4>
3418bbaa:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3418bbae:	f04f 0300 	mov.w	r3, #0
3418bbb2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3418bbb6:	e005      	b.n	3418bbc4 <UART_SetConfig+0x1c0>
3418bbb8:	f04f 0200 	mov.w	r2, #0
3418bbbc:	f04f 0300 	mov.w	r3, #0
3418bbc0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
3418bbc4:	697b      	ldr	r3, [r7, #20]
3418bbc6:	681b      	ldr	r3, [r3, #0]
3418bbc8:	4a37      	ldr	r2, [pc, #220]	@ (3418bca8 <UART_SetConfig+0x2a4>)
3418bbca:	4293      	cmp	r3, r2
3418bbcc:	d005      	beq.n	3418bbda <UART_SetConfig+0x1d6>
3418bbce:	697b      	ldr	r3, [r7, #20]
3418bbd0:	681b      	ldr	r3, [r3, #0]
3418bbd2:	4a37      	ldr	r2, [pc, #220]	@ (3418bcb0 <UART_SetConfig+0x2ac>)
3418bbd4:	4293      	cmp	r3, r2
3418bbd6:	f040 8081 	bne.w	3418bcdc <UART_SetConfig+0x2d8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418bbda:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418bbde:	f7fb fc6b 	bl	341874b8 <HAL_RCCEx_GetPeriphCLKFreq>
3418bbe2:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3418bbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418bbe6:	2b00      	cmp	r3, #0
3418bbe8:	f000 80e0 	beq.w	3418bdac <UART_SetConfig+0x3a8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3418bbec:	697b      	ldr	r3, [r7, #20]
3418bbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418bbf0:	4a39      	ldr	r2, [pc, #228]	@ (3418bcd8 <UART_SetConfig+0x2d4>)
3418bbf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418bbf6:	461a      	mov	r2, r3
3418bbf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418bbfa:	fbb3 f3f2 	udiv	r3, r3, r2
3418bbfe:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3418bc00:	697b      	ldr	r3, [r7, #20]
3418bc02:	685a      	ldr	r2, [r3, #4]
3418bc04:	4613      	mov	r3, r2
3418bc06:	005b      	lsls	r3, r3, #1
3418bc08:	4413      	add	r3, r2
3418bc0a:	69fa      	ldr	r2, [r7, #28]
3418bc0c:	429a      	cmp	r2, r3
3418bc0e:	d305      	bcc.n	3418bc1c <UART_SetConfig+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3418bc10:	697b      	ldr	r3, [r7, #20]
3418bc12:	685b      	ldr	r3, [r3, #4]
3418bc14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3418bc16:	69fa      	ldr	r2, [r7, #28]
3418bc18:	429a      	cmp	r2, r3
3418bc1a:	d903      	bls.n	3418bc24 <UART_SetConfig+0x220>
      {
        ret = HAL_ERROR;
3418bc1c:	2301      	movs	r3, #1
3418bc1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418bc22:	e040      	b.n	3418bca6 <UART_SetConfig+0x2a2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418bc24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418bc26:	2200      	movs	r2, #0
3418bc28:	60bb      	str	r3, [r7, #8]
3418bc2a:	60fa      	str	r2, [r7, #12]
3418bc2c:	697b      	ldr	r3, [r7, #20]
3418bc2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418bc30:	4a29      	ldr	r2, [pc, #164]	@ (3418bcd8 <UART_SetConfig+0x2d4>)
3418bc32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418bc36:	b29b      	uxth	r3, r3
3418bc38:	2200      	movs	r2, #0
3418bc3a:	603b      	str	r3, [r7, #0]
3418bc3c:	607a      	str	r2, [r7, #4]
3418bc3e:	e9d7 2300 	ldrd	r2, r3, [r7]
3418bc42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3418bc46:	f7f4 fda1 	bl	3418078c <__aeabi_uldivmod>
3418bc4a:	4602      	mov	r2, r0
3418bc4c:	460b      	mov	r3, r1
3418bc4e:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
3418bc52:	6979      	ldr	r1, [r7, #20]
3418bc54:	6849      	ldr	r1, [r1, #4]
3418bc56:	0849      	lsrs	r1, r1, #1
3418bc58:	2000      	movs	r0, #0
3418bc5a:	460c      	mov	r4, r1
3418bc5c:	4605      	mov	r5, r0
3418bc5e:	eb12 0804 	adds.w	r8, r2, r4
3418bc62:	eb43 0905 	adc.w	r9, r3, r5
3418bc66:	697b      	ldr	r3, [r7, #20]
3418bc68:	685b      	ldr	r3, [r3, #4]
3418bc6a:	2200      	movs	r2, #0
3418bc6c:	469a      	mov	sl, r3
3418bc6e:	4693      	mov	fp, r2
3418bc70:	4652      	mov	r2, sl
3418bc72:	465b      	mov	r3, fp
3418bc74:	4640      	mov	r0, r8
3418bc76:	4649      	mov	r1, r9
3418bc78:	f7f4 fd88 	bl	3418078c <__aeabi_uldivmod>
3418bc7c:	4602      	mov	r2, r0
3418bc7e:	460b      	mov	r3, r1
3418bc80:	4613      	mov	r3, r2
3418bc82:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3418bc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bc86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3418bc8a:	d308      	bcc.n	3418bc9e <UART_SetConfig+0x29a>
3418bc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bc8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418bc92:	d204      	bcs.n	3418bc9e <UART_SetConfig+0x29a>
        {
          huart->Instance->BRR = usartdiv;
3418bc94:	697b      	ldr	r3, [r7, #20]
3418bc96:	681b      	ldr	r3, [r3, #0]
3418bc98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3418bc9a:	60da      	str	r2, [r3, #12]
3418bc9c:	e003      	b.n	3418bca6 <UART_SetConfig+0x2a2>
        }
        else
        {
          ret = HAL_ERROR;
3418bc9e:	2301      	movs	r3, #1
3418bca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
3418bca4:	e082      	b.n	3418bdac <UART_SetConfig+0x3a8>
3418bca6:	e081      	b.n	3418bdac <UART_SetConfig+0x3a8>
3418bca8:	56000c00 	.word	0x56000c00
3418bcac:	cfff69f3 	.word	0xcfff69f3
3418bcb0:	46000c00 	.word	0x46000c00
3418bcb4:	52001000 	.word	0x52001000
3418bcb8:	50004400 	.word	0x50004400
3418bcbc:	50004800 	.word	0x50004800
3418bcc0:	50004c00 	.word	0x50004c00
3418bcc4:	52001400 	.word	0x52001400
3418bcc8:	50007800 	.word	0x50007800
3418bccc:	50007c00 	.word	0x50007c00
3418bcd0:	52001800 	.word	0x52001800
3418bcd4:	52001c00 	.word	0x52001c00
3418bcd8:	34190890 	.word	0x34190890
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3418bcdc:	697b      	ldr	r3, [r7, #20]
3418bcde:	69db      	ldr	r3, [r3, #28]
3418bce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3418bce4:	d138      	bne.n	3418bd58 <UART_SetConfig+0x354>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418bce6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418bcea:	f7fb fbe5 	bl	341874b8 <HAL_RCCEx_GetPeriphCLKFreq>
3418bcee:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
3418bcf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418bcf2:	2b00      	cmp	r3, #0
3418bcf4:	d05a      	beq.n	3418bdac <UART_SetConfig+0x3a8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418bcf6:	697b      	ldr	r3, [r7, #20]
3418bcf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418bcfa:	4a37      	ldr	r2, [pc, #220]	@ (3418bdd8 <UART_SetConfig+0x3d4>)
3418bcfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418bd00:	461a      	mov	r2, r3
3418bd02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418bd04:	fbb3 f3f2 	udiv	r3, r3, r2
3418bd08:	005a      	lsls	r2, r3, #1
3418bd0a:	697b      	ldr	r3, [r7, #20]
3418bd0c:	685b      	ldr	r3, [r3, #4]
3418bd0e:	085b      	lsrs	r3, r3, #1
3418bd10:	441a      	add	r2, r3
3418bd12:	697b      	ldr	r3, [r7, #20]
3418bd14:	685b      	ldr	r3, [r3, #4]
3418bd16:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd1a:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3418bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bd1e:	2b0f      	cmp	r3, #15
3418bd20:	d916      	bls.n	3418bd50 <UART_SetConfig+0x34c>
3418bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bd24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418bd28:	d212      	bcs.n	3418bd50 <UART_SetConfig+0x34c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3418bd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bd2c:	b29b      	uxth	r3, r3
3418bd2e:	f023 030f 	bic.w	r3, r3, #15
3418bd32:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3418bd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bd36:	085b      	lsrs	r3, r3, #1
3418bd38:	b29b      	uxth	r3, r3
3418bd3a:	f003 0307 	and.w	r3, r3, #7
3418bd3e:	b29a      	uxth	r2, r3
3418bd40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
3418bd42:	4313      	orrs	r3, r2
3418bd44:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
3418bd46:	697b      	ldr	r3, [r7, #20]
3418bd48:	681b      	ldr	r3, [r3, #0]
3418bd4a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
3418bd4c:	60da      	str	r2, [r3, #12]
3418bd4e:	e02d      	b.n	3418bdac <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3418bd50:	2301      	movs	r3, #1
3418bd52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3418bd56:	e029      	b.n	3418bdac <UART_SetConfig+0x3a8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3418bd58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3418bd5c:	f7fb fbac 	bl	341874b8 <HAL_RCCEx_GetPeriphCLKFreq>
3418bd60:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
3418bd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418bd64:	2b00      	cmp	r3, #0
3418bd66:	d021      	beq.n	3418bdac <UART_SetConfig+0x3a8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3418bd68:	697b      	ldr	r3, [r7, #20]
3418bd6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418bd6c:	4a1a      	ldr	r2, [pc, #104]	@ (3418bdd8 <UART_SetConfig+0x3d4>)
3418bd6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3418bd72:	461a      	mov	r2, r3
3418bd74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418bd76:	fbb3 f2f2 	udiv	r2, r3, r2
3418bd7a:	697b      	ldr	r3, [r7, #20]
3418bd7c:	685b      	ldr	r3, [r3, #4]
3418bd7e:	085b      	lsrs	r3, r3, #1
3418bd80:	441a      	add	r2, r3
3418bd82:	697b      	ldr	r3, [r7, #20]
3418bd84:	685b      	ldr	r3, [r3, #4]
3418bd86:	fbb2 f3f3 	udiv	r3, r2, r3
3418bd8a:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3418bd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bd8e:	2b0f      	cmp	r3, #15
3418bd90:	d909      	bls.n	3418bda6 <UART_SetConfig+0x3a2>
3418bd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bd94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3418bd98:	d205      	bcs.n	3418bda6 <UART_SetConfig+0x3a2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
3418bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bd9c:	b29a      	uxth	r2, r3
3418bd9e:	697b      	ldr	r3, [r7, #20]
3418bda0:	681b      	ldr	r3, [r3, #0]
3418bda2:	60da      	str	r2, [r3, #12]
3418bda4:	e002      	b.n	3418bdac <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3418bda6:	2301      	movs	r3, #1
3418bda8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
3418bdac:	697b      	ldr	r3, [r7, #20]
3418bdae:	2201      	movs	r2, #1
3418bdb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
3418bdb4:	697b      	ldr	r3, [r7, #20]
3418bdb6:	2201      	movs	r2, #1
3418bdb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
3418bdbc:	697b      	ldr	r3, [r7, #20]
3418bdbe:	2200      	movs	r2, #0
3418bdc0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
3418bdc2:	697b      	ldr	r3, [r7, #20]
3418bdc4:	2200      	movs	r2, #0
3418bdc6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
3418bdc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
3418bdcc:	4618      	mov	r0, r3
3418bdce:	3740      	adds	r7, #64	@ 0x40
3418bdd0:	46bd      	mov	sp, r7
3418bdd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3418bdd6:	bf00      	nop
3418bdd8:	34190890 	.word	0x34190890

3418bddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
3418bddc:	b480      	push	{r7}
3418bdde:	b083      	sub	sp, #12
3418bde0:	af00      	add	r7, sp, #0
3418bde2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3418bde4:	687b      	ldr	r3, [r7, #4]
3418bde6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418bde8:	f003 0308 	and.w	r3, r3, #8
3418bdec:	2b00      	cmp	r3, #0
3418bdee:	d00a      	beq.n	3418be06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3418bdf0:	687b      	ldr	r3, [r7, #4]
3418bdf2:	681b      	ldr	r3, [r3, #0]
3418bdf4:	685b      	ldr	r3, [r3, #4]
3418bdf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
3418bdfa:	687b      	ldr	r3, [r7, #4]
3418bdfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3418bdfe:	687b      	ldr	r3, [r7, #4]
3418be00:	681b      	ldr	r3, [r3, #0]
3418be02:	430a      	orrs	r2, r1
3418be04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3418be06:	687b      	ldr	r3, [r7, #4]
3418be08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418be0a:	f003 0301 	and.w	r3, r3, #1
3418be0e:	2b00      	cmp	r3, #0
3418be10:	d00a      	beq.n	3418be28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3418be12:	687b      	ldr	r3, [r7, #4]
3418be14:	681b      	ldr	r3, [r3, #0]
3418be16:	685b      	ldr	r3, [r3, #4]
3418be18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
3418be1c:	687b      	ldr	r3, [r7, #4]
3418be1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3418be20:	687b      	ldr	r3, [r7, #4]
3418be22:	681b      	ldr	r3, [r3, #0]
3418be24:	430a      	orrs	r2, r1
3418be26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3418be28:	687b      	ldr	r3, [r7, #4]
3418be2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418be2c:	f003 0302 	and.w	r3, r3, #2
3418be30:	2b00      	cmp	r3, #0
3418be32:	d00a      	beq.n	3418be4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3418be34:	687b      	ldr	r3, [r7, #4]
3418be36:	681b      	ldr	r3, [r3, #0]
3418be38:	685b      	ldr	r3, [r3, #4]
3418be3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3418be3e:	687b      	ldr	r3, [r7, #4]
3418be40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3418be42:	687b      	ldr	r3, [r7, #4]
3418be44:	681b      	ldr	r3, [r3, #0]
3418be46:	430a      	orrs	r2, r1
3418be48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3418be4a:	687b      	ldr	r3, [r7, #4]
3418be4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418be4e:	f003 0304 	and.w	r3, r3, #4
3418be52:	2b00      	cmp	r3, #0
3418be54:	d00a      	beq.n	3418be6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3418be56:	687b      	ldr	r3, [r7, #4]
3418be58:	681b      	ldr	r3, [r3, #0]
3418be5a:	685b      	ldr	r3, [r3, #4]
3418be5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
3418be60:	687b      	ldr	r3, [r7, #4]
3418be62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418be64:	687b      	ldr	r3, [r7, #4]
3418be66:	681b      	ldr	r3, [r3, #0]
3418be68:	430a      	orrs	r2, r1
3418be6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3418be6c:	687b      	ldr	r3, [r7, #4]
3418be6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418be70:	f003 0310 	and.w	r3, r3, #16
3418be74:	2b00      	cmp	r3, #0
3418be76:	d00a      	beq.n	3418be8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3418be78:	687b      	ldr	r3, [r7, #4]
3418be7a:	681b      	ldr	r3, [r3, #0]
3418be7c:	689b      	ldr	r3, [r3, #8]
3418be7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
3418be82:	687b      	ldr	r3, [r7, #4]
3418be84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418be86:	687b      	ldr	r3, [r7, #4]
3418be88:	681b      	ldr	r3, [r3, #0]
3418be8a:	430a      	orrs	r2, r1
3418be8c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3418be8e:	687b      	ldr	r3, [r7, #4]
3418be90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418be92:	f003 0320 	and.w	r3, r3, #32
3418be96:	2b00      	cmp	r3, #0
3418be98:	d00a      	beq.n	3418beb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3418be9a:	687b      	ldr	r3, [r7, #4]
3418be9c:	681b      	ldr	r3, [r3, #0]
3418be9e:	689b      	ldr	r3, [r3, #8]
3418bea0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
3418bea4:	687b      	ldr	r3, [r7, #4]
3418bea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3418bea8:	687b      	ldr	r3, [r7, #4]
3418beaa:	681b      	ldr	r3, [r3, #0]
3418beac:	430a      	orrs	r2, r1
3418beae:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3418beb0:	687b      	ldr	r3, [r7, #4]
3418beb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418beb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418beb8:	2b00      	cmp	r3, #0
3418beba:	d01a      	beq.n	3418bef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3418bebc:	687b      	ldr	r3, [r7, #4]
3418bebe:	681b      	ldr	r3, [r3, #0]
3418bec0:	685b      	ldr	r3, [r3, #4]
3418bec2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
3418bec6:	687b      	ldr	r3, [r7, #4]
3418bec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
3418beca:	687b      	ldr	r3, [r7, #4]
3418becc:	681b      	ldr	r3, [r3, #0]
3418bece:	430a      	orrs	r2, r1
3418bed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3418bed2:	687b      	ldr	r3, [r7, #4]
3418bed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418bed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3418beda:	d10a      	bne.n	3418bef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3418bedc:	687b      	ldr	r3, [r7, #4]
3418bede:	681b      	ldr	r3, [r3, #0]
3418bee0:	685b      	ldr	r3, [r3, #4]
3418bee2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
3418bee6:	687b      	ldr	r3, [r7, #4]
3418bee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418beea:	687b      	ldr	r3, [r7, #4]
3418beec:	681b      	ldr	r3, [r3, #0]
3418beee:	430a      	orrs	r2, r1
3418bef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3418bef2:	687b      	ldr	r3, [r7, #4]
3418bef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418bef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418befa:	2b00      	cmp	r3, #0
3418befc:	d00a      	beq.n	3418bf14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3418befe:	687b      	ldr	r3, [r7, #4]
3418bf00:	681b      	ldr	r3, [r3, #0]
3418bf02:	685b      	ldr	r3, [r3, #4]
3418bf04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
3418bf08:	687b      	ldr	r3, [r7, #4]
3418bf0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418bf0c:	687b      	ldr	r3, [r7, #4]
3418bf0e:	681b      	ldr	r3, [r3, #0]
3418bf10:	430a      	orrs	r2, r1
3418bf12:	605a      	str	r2, [r3, #4]
  }
}
3418bf14:	bf00      	nop
3418bf16:	370c      	adds	r7, #12
3418bf18:	46bd      	mov	sp, r7
3418bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418bf1e:	4770      	bx	lr

3418bf20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
3418bf20:	b580      	push	{r7, lr}
3418bf22:	b098      	sub	sp, #96	@ 0x60
3418bf24:	af02      	add	r7, sp, #8
3418bf26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3418bf28:	687b      	ldr	r3, [r7, #4]
3418bf2a:	2200      	movs	r2, #0
3418bf2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
3418bf30:	f7f5 fc6e 	bl	34181810 <HAL_GetTick>
3418bf34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3418bf36:	687b      	ldr	r3, [r7, #4]
3418bf38:	681b      	ldr	r3, [r3, #0]
3418bf3a:	681b      	ldr	r3, [r3, #0]
3418bf3c:	f003 0308 	and.w	r3, r3, #8
3418bf40:	2b08      	cmp	r3, #8
3418bf42:	d12f      	bne.n	3418bfa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418bf44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418bf48:	9300      	str	r3, [sp, #0]
3418bf4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418bf4c:	2200      	movs	r2, #0
3418bf4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3418bf52:	6878      	ldr	r0, [r7, #4]
3418bf54:	f000 f88e 	bl	3418c074 <UART_WaitOnFlagUntilTimeout>
3418bf58:	4603      	mov	r3, r0
3418bf5a:	2b00      	cmp	r3, #0
3418bf5c:	d022      	beq.n	3418bfa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3418bf5e:	687b      	ldr	r3, [r7, #4]
3418bf60:	681b      	ldr	r3, [r3, #0]
3418bf62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418bf64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418bf66:	e853 3f00 	ldrex	r3, [r3]
3418bf6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
3418bf6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418bf6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3418bf72:	653b      	str	r3, [r7, #80]	@ 0x50
3418bf74:	687b      	ldr	r3, [r7, #4]
3418bf76:	681b      	ldr	r3, [r3, #0]
3418bf78:	461a      	mov	r2, r3
3418bf7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418bf7c:	647b      	str	r3, [r7, #68]	@ 0x44
3418bf7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418bf80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
3418bf82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3418bf84:	e841 2300 	strex	r3, r2, [r1]
3418bf88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
3418bf8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3418bf8c:	2b00      	cmp	r3, #0
3418bf8e:	d1e6      	bne.n	3418bf5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
3418bf90:	687b      	ldr	r3, [r7, #4]
3418bf92:	2220      	movs	r2, #32
3418bf94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
3418bf98:	687b      	ldr	r3, [r7, #4]
3418bf9a:	2200      	movs	r2, #0
3418bf9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3418bfa0:	2303      	movs	r3, #3
3418bfa2:	e063      	b.n	3418c06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3418bfa4:	687b      	ldr	r3, [r7, #4]
3418bfa6:	681b      	ldr	r3, [r3, #0]
3418bfa8:	681b      	ldr	r3, [r3, #0]
3418bfaa:	f003 0304 	and.w	r3, r3, #4
3418bfae:	2b04      	cmp	r3, #4
3418bfb0:	d149      	bne.n	3418c046 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418bfb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418bfb6:	9300      	str	r3, [sp, #0]
3418bfb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3418bfba:	2200      	movs	r2, #0
3418bfbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3418bfc0:	6878      	ldr	r0, [r7, #4]
3418bfc2:	f000 f857 	bl	3418c074 <UART_WaitOnFlagUntilTimeout>
3418bfc6:	4603      	mov	r3, r0
3418bfc8:	2b00      	cmp	r3, #0
3418bfca:	d03c      	beq.n	3418c046 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418bfcc:	687b      	ldr	r3, [r7, #4]
3418bfce:	681b      	ldr	r3, [r3, #0]
3418bfd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418bfd4:	e853 3f00 	ldrex	r3, [r3]
3418bfd8:	623b      	str	r3, [r7, #32]
   return(result);
3418bfda:	6a3b      	ldr	r3, [r7, #32]
3418bfdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418bfe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418bfe2:	687b      	ldr	r3, [r7, #4]
3418bfe4:	681b      	ldr	r3, [r3, #0]
3418bfe6:	461a      	mov	r2, r3
3418bfe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418bfea:	633b      	str	r3, [r7, #48]	@ 0x30
3418bfec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418bfee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
3418bff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3418bff2:	e841 2300 	strex	r3, r2, [r1]
3418bff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
3418bff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3418bffa:	2b00      	cmp	r3, #0
3418bffc:	d1e6      	bne.n	3418bfcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3418bffe:	687b      	ldr	r3, [r7, #4]
3418c000:	681b      	ldr	r3, [r3, #0]
3418c002:	3308      	adds	r3, #8
3418c004:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418c006:	693b      	ldr	r3, [r7, #16]
3418c008:	e853 3f00 	ldrex	r3, [r3]
3418c00c:	60fb      	str	r3, [r7, #12]
   return(result);
3418c00e:	68fb      	ldr	r3, [r7, #12]
3418c010:	f023 0301 	bic.w	r3, r3, #1
3418c014:	64bb      	str	r3, [r7, #72]	@ 0x48
3418c016:	687b      	ldr	r3, [r7, #4]
3418c018:	681b      	ldr	r3, [r3, #0]
3418c01a:	3308      	adds	r3, #8
3418c01c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418c01e:	61fa      	str	r2, [r7, #28]
3418c020:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418c022:	69b9      	ldr	r1, [r7, #24]
3418c024:	69fa      	ldr	r2, [r7, #28]
3418c026:	e841 2300 	strex	r3, r2, [r1]
3418c02a:	617b      	str	r3, [r7, #20]
   return(result);
3418c02c:	697b      	ldr	r3, [r7, #20]
3418c02e:	2b00      	cmp	r3, #0
3418c030:	d1e5      	bne.n	3418bffe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
3418c032:	687b      	ldr	r3, [r7, #4]
3418c034:	2220      	movs	r2, #32
3418c036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
3418c03a:	687b      	ldr	r3, [r7, #4]
3418c03c:	2200      	movs	r2, #0
3418c03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3418c042:	2303      	movs	r3, #3
3418c044:	e012      	b.n	3418c06c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
3418c046:	687b      	ldr	r3, [r7, #4]
3418c048:	2220      	movs	r2, #32
3418c04a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3418c04e:	687b      	ldr	r3, [r7, #4]
3418c050:	2220      	movs	r2, #32
3418c052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418c056:	687b      	ldr	r3, [r7, #4]
3418c058:	2200      	movs	r2, #0
3418c05a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3418c05c:	687b      	ldr	r3, [r7, #4]
3418c05e:	2200      	movs	r2, #0
3418c060:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
3418c062:	687b      	ldr	r3, [r7, #4]
3418c064:	2200      	movs	r2, #0
3418c066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418c06a:	2300      	movs	r3, #0
}
3418c06c:	4618      	mov	r0, r3
3418c06e:	3758      	adds	r7, #88	@ 0x58
3418c070:	46bd      	mov	sp, r7
3418c072:	bd80      	pop	{r7, pc}

3418c074 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
3418c074:	b580      	push	{r7, lr}
3418c076:	b084      	sub	sp, #16
3418c078:	af00      	add	r7, sp, #0
3418c07a:	60f8      	str	r0, [r7, #12]
3418c07c:	60b9      	str	r1, [r7, #8]
3418c07e:	603b      	str	r3, [r7, #0]
3418c080:	4613      	mov	r3, r2
3418c082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418c084:	e04f      	b.n	3418c126 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418c086:	69bb      	ldr	r3, [r7, #24]
3418c088:	f1b3 3fff 	cmp.w	r3, #4294967295
3418c08c:	d04b      	beq.n	3418c126 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418c08e:	f7f5 fbbf 	bl	34181810 <HAL_GetTick>
3418c092:	4602      	mov	r2, r0
3418c094:	683b      	ldr	r3, [r7, #0]
3418c096:	1ad3      	subs	r3, r2, r3
3418c098:	69ba      	ldr	r2, [r7, #24]
3418c09a:	429a      	cmp	r2, r3
3418c09c:	d302      	bcc.n	3418c0a4 <UART_WaitOnFlagUntilTimeout+0x30>
3418c09e:	69bb      	ldr	r3, [r7, #24]
3418c0a0:	2b00      	cmp	r3, #0
3418c0a2:	d101      	bne.n	3418c0a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
3418c0a4:	2303      	movs	r3, #3
3418c0a6:	e04e      	b.n	3418c146 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3418c0a8:	68fb      	ldr	r3, [r7, #12]
3418c0aa:	681b      	ldr	r3, [r3, #0]
3418c0ac:	681b      	ldr	r3, [r3, #0]
3418c0ae:	f003 0304 	and.w	r3, r3, #4
3418c0b2:	2b00      	cmp	r3, #0
3418c0b4:	d037      	beq.n	3418c126 <UART_WaitOnFlagUntilTimeout+0xb2>
3418c0b6:	68bb      	ldr	r3, [r7, #8]
3418c0b8:	2b80      	cmp	r3, #128	@ 0x80
3418c0ba:	d034      	beq.n	3418c126 <UART_WaitOnFlagUntilTimeout+0xb2>
3418c0bc:	68bb      	ldr	r3, [r7, #8]
3418c0be:	2b40      	cmp	r3, #64	@ 0x40
3418c0c0:	d031      	beq.n	3418c126 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3418c0c2:	68fb      	ldr	r3, [r7, #12]
3418c0c4:	681b      	ldr	r3, [r3, #0]
3418c0c6:	69db      	ldr	r3, [r3, #28]
3418c0c8:	f003 0308 	and.w	r3, r3, #8
3418c0cc:	2b08      	cmp	r3, #8
3418c0ce:	d110      	bne.n	3418c0f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3418c0d0:	68fb      	ldr	r3, [r7, #12]
3418c0d2:	681b      	ldr	r3, [r3, #0]
3418c0d4:	2208      	movs	r2, #8
3418c0d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418c0d8:	68f8      	ldr	r0, [r7, #12]
3418c0da:	f000 f838 	bl	3418c14e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
3418c0de:	68fb      	ldr	r3, [r7, #12]
3418c0e0:	2208      	movs	r2, #8
3418c0e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418c0e6:	68fb      	ldr	r3, [r7, #12]
3418c0e8:	2200      	movs	r2, #0
3418c0ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
3418c0ee:	2301      	movs	r3, #1
3418c0f0:	e029      	b.n	3418c146 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3418c0f2:	68fb      	ldr	r3, [r7, #12]
3418c0f4:	681b      	ldr	r3, [r3, #0]
3418c0f6:	69db      	ldr	r3, [r3, #28]
3418c0f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3418c0fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3418c100:	d111      	bne.n	3418c126 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3418c102:	68fb      	ldr	r3, [r7, #12]
3418c104:	681b      	ldr	r3, [r3, #0]
3418c106:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418c10a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3418c10c:	68f8      	ldr	r0, [r7, #12]
3418c10e:	f000 f81e 	bl	3418c14e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3418c112:	68fb      	ldr	r3, [r7, #12]
3418c114:	2220      	movs	r2, #32
3418c116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3418c11a:	68fb      	ldr	r3, [r7, #12]
3418c11c:	2200      	movs	r2, #0
3418c11e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3418c122:	2303      	movs	r3, #3
3418c124:	e00f      	b.n	3418c146 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3418c126:	68fb      	ldr	r3, [r7, #12]
3418c128:	681b      	ldr	r3, [r3, #0]
3418c12a:	69da      	ldr	r2, [r3, #28]
3418c12c:	68bb      	ldr	r3, [r7, #8]
3418c12e:	4013      	ands	r3, r2
3418c130:	68ba      	ldr	r2, [r7, #8]
3418c132:	429a      	cmp	r2, r3
3418c134:	bf0c      	ite	eq
3418c136:	2301      	moveq	r3, #1
3418c138:	2300      	movne	r3, #0
3418c13a:	b2db      	uxtb	r3, r3
3418c13c:	461a      	mov	r2, r3
3418c13e:	79fb      	ldrb	r3, [r7, #7]
3418c140:	429a      	cmp	r2, r3
3418c142:	d0a0      	beq.n	3418c086 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
3418c144:	2300      	movs	r3, #0
}
3418c146:	4618      	mov	r0, r3
3418c148:	3710      	adds	r7, #16
3418c14a:	46bd      	mov	sp, r7
3418c14c:	bd80      	pop	{r7, pc}

3418c14e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3418c14e:	b480      	push	{r7}
3418c150:	b095      	sub	sp, #84	@ 0x54
3418c152:	af00      	add	r7, sp, #0
3418c154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3418c156:	687b      	ldr	r3, [r7, #4]
3418c158:	681b      	ldr	r3, [r3, #0]
3418c15a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418c15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418c15e:	e853 3f00 	ldrex	r3, [r3]
3418c162:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
3418c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3418c166:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3418c16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
3418c16c:	687b      	ldr	r3, [r7, #4]
3418c16e:	681b      	ldr	r3, [r3, #0]
3418c170:	461a      	mov	r2, r3
3418c172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3418c174:	643b      	str	r3, [r7, #64]	@ 0x40
3418c176:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418c178:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3418c17a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3418c17c:	e841 2300 	strex	r3, r2, [r1]
3418c180:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
3418c182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3418c184:	2b00      	cmp	r3, #0
3418c186:	d1e6      	bne.n	3418c156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3418c188:	687b      	ldr	r3, [r7, #4]
3418c18a:	681b      	ldr	r3, [r3, #0]
3418c18c:	3308      	adds	r3, #8
3418c18e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418c190:	6a3b      	ldr	r3, [r7, #32]
3418c192:	e853 3f00 	ldrex	r3, [r3]
3418c196:	61fb      	str	r3, [r7, #28]
   return(result);
3418c198:	69fb      	ldr	r3, [r7, #28]
3418c19a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
3418c19e:	f023 0301 	bic.w	r3, r3, #1
3418c1a2:	64bb      	str	r3, [r7, #72]	@ 0x48
3418c1a4:	687b      	ldr	r3, [r7, #4]
3418c1a6:	681b      	ldr	r3, [r3, #0]
3418c1a8:	3308      	adds	r3, #8
3418c1aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3418c1ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
3418c1ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418c1b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418c1b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3418c1b4:	e841 2300 	strex	r3, r2, [r1]
3418c1b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3418c1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418c1bc:	2b00      	cmp	r3, #0
3418c1be:	d1e3      	bne.n	3418c188 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3418c1c0:	687b      	ldr	r3, [r7, #4]
3418c1c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3418c1c4:	2b01      	cmp	r3, #1
3418c1c6:	d118      	bne.n	3418c1fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3418c1c8:	687b      	ldr	r3, [r7, #4]
3418c1ca:	681b      	ldr	r3, [r3, #0]
3418c1cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3418c1ce:	68fb      	ldr	r3, [r7, #12]
3418c1d0:	e853 3f00 	ldrex	r3, [r3]
3418c1d4:	60bb      	str	r3, [r7, #8]
   return(result);
3418c1d6:	68bb      	ldr	r3, [r7, #8]
3418c1d8:	f023 0310 	bic.w	r3, r3, #16
3418c1dc:	647b      	str	r3, [r7, #68]	@ 0x44
3418c1de:	687b      	ldr	r3, [r7, #4]
3418c1e0:	681b      	ldr	r3, [r3, #0]
3418c1e2:	461a      	mov	r2, r3
3418c1e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3418c1e6:	61bb      	str	r3, [r7, #24]
3418c1e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418c1ea:	6979      	ldr	r1, [r7, #20]
3418c1ec:	69ba      	ldr	r2, [r7, #24]
3418c1ee:	e841 2300 	strex	r3, r2, [r1]
3418c1f2:	613b      	str	r3, [r7, #16]
   return(result);
3418c1f4:	693b      	ldr	r3, [r7, #16]
3418c1f6:	2b00      	cmp	r3, #0
3418c1f8:	d1e6      	bne.n	3418c1c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3418c1fa:	687b      	ldr	r3, [r7, #4]
3418c1fc:	2220      	movs	r2, #32
3418c1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3418c202:	687b      	ldr	r3, [r7, #4]
3418c204:	2200      	movs	r2, #0
3418c206:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3418c208:	687b      	ldr	r3, [r7, #4]
3418c20a:	2200      	movs	r2, #0
3418c20c:	675a      	str	r2, [r3, #116]	@ 0x74
}
3418c20e:	bf00      	nop
3418c210:	3754      	adds	r7, #84	@ 0x54
3418c212:	46bd      	mov	sp, r7
3418c214:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c218:	4770      	bx	lr

3418c21a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
3418c21a:	b480      	push	{r7}
3418c21c:	b085      	sub	sp, #20
3418c21e:	af00      	add	r7, sp, #0
3418c220:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
3418c222:	687b      	ldr	r3, [r7, #4]
3418c224:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418c228:	2b01      	cmp	r3, #1
3418c22a:	d101      	bne.n	3418c230 <HAL_UARTEx_DisableFifoMode+0x16>
3418c22c:	2302      	movs	r3, #2
3418c22e:	e027      	b.n	3418c280 <HAL_UARTEx_DisableFifoMode+0x66>
3418c230:	687b      	ldr	r3, [r7, #4]
3418c232:	2201      	movs	r2, #1
3418c234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418c238:	687b      	ldr	r3, [r7, #4]
3418c23a:	2224      	movs	r2, #36	@ 0x24
3418c23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418c240:	687b      	ldr	r3, [r7, #4]
3418c242:	681b      	ldr	r3, [r3, #0]
3418c244:	681b      	ldr	r3, [r3, #0]
3418c246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418c248:	687b      	ldr	r3, [r7, #4]
3418c24a:	681b      	ldr	r3, [r3, #0]
3418c24c:	681a      	ldr	r2, [r3, #0]
3418c24e:	687b      	ldr	r3, [r7, #4]
3418c250:	681b      	ldr	r3, [r3, #0]
3418c252:	f022 0201 	bic.w	r2, r2, #1
3418c256:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
3418c258:	68fb      	ldr	r3, [r7, #12]
3418c25a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
3418c25e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
3418c260:	687b      	ldr	r3, [r7, #4]
3418c262:	2200      	movs	r2, #0
3418c264:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418c266:	687b      	ldr	r3, [r7, #4]
3418c268:	681b      	ldr	r3, [r3, #0]
3418c26a:	68fa      	ldr	r2, [r7, #12]
3418c26c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418c26e:	687b      	ldr	r3, [r7, #4]
3418c270:	2220      	movs	r2, #32
3418c272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418c276:	687b      	ldr	r3, [r7, #4]
3418c278:	2200      	movs	r2, #0
3418c27a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418c27e:	2300      	movs	r3, #0
}
3418c280:	4618      	mov	r0, r3
3418c282:	3714      	adds	r7, #20
3418c284:	46bd      	mov	sp, r7
3418c286:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c28a:	4770      	bx	lr

3418c28c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3418c28c:	b580      	push	{r7, lr}
3418c28e:	b084      	sub	sp, #16
3418c290:	af00      	add	r7, sp, #0
3418c292:	6078      	str	r0, [r7, #4]
3418c294:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3418c296:	687b      	ldr	r3, [r7, #4]
3418c298:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418c29c:	2b01      	cmp	r3, #1
3418c29e:	d101      	bne.n	3418c2a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
3418c2a0:	2302      	movs	r3, #2
3418c2a2:	e02d      	b.n	3418c300 <HAL_UARTEx_SetTxFifoThreshold+0x74>
3418c2a4:	687b      	ldr	r3, [r7, #4]
3418c2a6:	2201      	movs	r2, #1
3418c2a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418c2ac:	687b      	ldr	r3, [r7, #4]
3418c2ae:	2224      	movs	r2, #36	@ 0x24
3418c2b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418c2b4:	687b      	ldr	r3, [r7, #4]
3418c2b6:	681b      	ldr	r3, [r3, #0]
3418c2b8:	681b      	ldr	r3, [r3, #0]
3418c2ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418c2bc:	687b      	ldr	r3, [r7, #4]
3418c2be:	681b      	ldr	r3, [r3, #0]
3418c2c0:	681a      	ldr	r2, [r3, #0]
3418c2c2:	687b      	ldr	r3, [r7, #4]
3418c2c4:	681b      	ldr	r3, [r3, #0]
3418c2c6:	f022 0201 	bic.w	r2, r2, #1
3418c2ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
3418c2cc:	687b      	ldr	r3, [r7, #4]
3418c2ce:	681b      	ldr	r3, [r3, #0]
3418c2d0:	689b      	ldr	r3, [r3, #8]
3418c2d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
3418c2d6:	687b      	ldr	r3, [r7, #4]
3418c2d8:	681b      	ldr	r3, [r3, #0]
3418c2da:	683a      	ldr	r2, [r7, #0]
3418c2dc:	430a      	orrs	r2, r1
3418c2de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3418c2e0:	6878      	ldr	r0, [r7, #4]
3418c2e2:	f000 f84f 	bl	3418c384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418c2e6:	687b      	ldr	r3, [r7, #4]
3418c2e8:	681b      	ldr	r3, [r3, #0]
3418c2ea:	68fa      	ldr	r2, [r7, #12]
3418c2ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418c2ee:	687b      	ldr	r3, [r7, #4]
3418c2f0:	2220      	movs	r2, #32
3418c2f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418c2f6:	687b      	ldr	r3, [r7, #4]
3418c2f8:	2200      	movs	r2, #0
3418c2fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418c2fe:	2300      	movs	r3, #0
}
3418c300:	4618      	mov	r0, r3
3418c302:	3710      	adds	r7, #16
3418c304:	46bd      	mov	sp, r7
3418c306:	bd80      	pop	{r7, pc}

3418c308 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3418c308:	b580      	push	{r7, lr}
3418c30a:	b084      	sub	sp, #16
3418c30c:	af00      	add	r7, sp, #0
3418c30e:	6078      	str	r0, [r7, #4]
3418c310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3418c312:	687b      	ldr	r3, [r7, #4]
3418c314:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3418c318:	2b01      	cmp	r3, #1
3418c31a:	d101      	bne.n	3418c320 <HAL_UARTEx_SetRxFifoThreshold+0x18>
3418c31c:	2302      	movs	r3, #2
3418c31e:	e02d      	b.n	3418c37c <HAL_UARTEx_SetRxFifoThreshold+0x74>
3418c320:	687b      	ldr	r3, [r7, #4]
3418c322:	2201      	movs	r2, #1
3418c324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3418c328:	687b      	ldr	r3, [r7, #4]
3418c32a:	2224      	movs	r2, #36	@ 0x24
3418c32c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418c330:	687b      	ldr	r3, [r7, #4]
3418c332:	681b      	ldr	r3, [r3, #0]
3418c334:	681b      	ldr	r3, [r3, #0]
3418c336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3418c338:	687b      	ldr	r3, [r7, #4]
3418c33a:	681b      	ldr	r3, [r3, #0]
3418c33c:	681a      	ldr	r2, [r3, #0]
3418c33e:	687b      	ldr	r3, [r7, #4]
3418c340:	681b      	ldr	r3, [r3, #0]
3418c342:	f022 0201 	bic.w	r2, r2, #1
3418c346:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
3418c348:	687b      	ldr	r3, [r7, #4]
3418c34a:	681b      	ldr	r3, [r3, #0]
3418c34c:	689b      	ldr	r3, [r3, #8]
3418c34e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
3418c352:	687b      	ldr	r3, [r7, #4]
3418c354:	681b      	ldr	r3, [r3, #0]
3418c356:	683a      	ldr	r2, [r7, #0]
3418c358:	430a      	orrs	r2, r1
3418c35a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3418c35c:	6878      	ldr	r0, [r7, #4]
3418c35e:	f000 f811 	bl	3418c384 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3418c362:	687b      	ldr	r3, [r7, #4]
3418c364:	681b      	ldr	r3, [r3, #0]
3418c366:	68fa      	ldr	r2, [r7, #12]
3418c368:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3418c36a:	687b      	ldr	r3, [r7, #4]
3418c36c:	2220      	movs	r2, #32
3418c36e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3418c372:	687b      	ldr	r3, [r7, #4]
3418c374:	2200      	movs	r2, #0
3418c376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3418c37a:	2300      	movs	r3, #0
}
3418c37c:	4618      	mov	r0, r3
3418c37e:	3710      	adds	r7, #16
3418c380:	46bd      	mov	sp, r7
3418c382:	bd80      	pop	{r7, pc}

3418c384 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
3418c384:	b480      	push	{r7}
3418c386:	b085      	sub	sp, #20
3418c388:	af00      	add	r7, sp, #0
3418c38a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
3418c38c:	687b      	ldr	r3, [r7, #4]
3418c38e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3418c390:	2b00      	cmp	r3, #0
3418c392:	d108      	bne.n	3418c3a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
3418c394:	687b      	ldr	r3, [r7, #4]
3418c396:	2201      	movs	r2, #1
3418c398:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
3418c39c:	687b      	ldr	r3, [r7, #4]
3418c39e:	2201      	movs	r2, #1
3418c3a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
3418c3a4:	e031      	b.n	3418c40a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
3418c3a6:	2310      	movs	r3, #16
3418c3a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
3418c3aa:	2310      	movs	r3, #16
3418c3ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
3418c3ae:	687b      	ldr	r3, [r7, #4]
3418c3b0:	681b      	ldr	r3, [r3, #0]
3418c3b2:	689b      	ldr	r3, [r3, #8]
3418c3b4:	0e5b      	lsrs	r3, r3, #25
3418c3b6:	b2db      	uxtb	r3, r3
3418c3b8:	f003 0307 	and.w	r3, r3, #7
3418c3bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
3418c3be:	687b      	ldr	r3, [r7, #4]
3418c3c0:	681b      	ldr	r3, [r3, #0]
3418c3c2:	689b      	ldr	r3, [r3, #8]
3418c3c4:	0f5b      	lsrs	r3, r3, #29
3418c3c6:	b2db      	uxtb	r3, r3
3418c3c8:	f003 0307 	and.w	r3, r3, #7
3418c3cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418c3ce:	7bbb      	ldrb	r3, [r7, #14]
3418c3d0:	7b3a      	ldrb	r2, [r7, #12]
3418c3d2:	4911      	ldr	r1, [pc, #68]	@ (3418c418 <UARTEx_SetNbDataToProcess+0x94>)
3418c3d4:	5c8a      	ldrb	r2, [r1, r2]
3418c3d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
3418c3da:	7b3a      	ldrb	r2, [r7, #12]
3418c3dc:	490f      	ldr	r1, [pc, #60]	@ (3418c41c <UARTEx_SetNbDataToProcess+0x98>)
3418c3de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418c3e0:	fb93 f3f2 	sdiv	r3, r3, r2
3418c3e4:	b29a      	uxth	r2, r3
3418c3e6:	687b      	ldr	r3, [r7, #4]
3418c3e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418c3ec:	7bfb      	ldrb	r3, [r7, #15]
3418c3ee:	7b7a      	ldrb	r2, [r7, #13]
3418c3f0:	4909      	ldr	r1, [pc, #36]	@ (3418c418 <UARTEx_SetNbDataToProcess+0x94>)
3418c3f2:	5c8a      	ldrb	r2, [r1, r2]
3418c3f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
3418c3f8:	7b7a      	ldrb	r2, [r7, #13]
3418c3fa:	4908      	ldr	r1, [pc, #32]	@ (3418c41c <UARTEx_SetNbDataToProcess+0x98>)
3418c3fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418c3fe:	fb93 f3f2 	sdiv	r3, r3, r2
3418c402:	b29a      	uxth	r2, r3
3418c404:	687b      	ldr	r3, [r7, #4]
3418c406:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
3418c40a:	bf00      	nop
3418c40c:	3714      	adds	r7, #20
3418c40e:	46bd      	mov	sp, r7
3418c410:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c414:	4770      	bx	lr
3418c416:	bf00      	nop
3418c418:	341908a8 	.word	0x341908a8
3418c41c:	341908b0 	.word	0x341908b0

3418c420 <LL_AHB5_GRP1_IsEnabledClock>:
{
3418c420:	b480      	push	{r7}
3418c422:	b083      	sub	sp, #12
3418c424:	af00      	add	r7, sp, #0
3418c426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->AHB5ENR, Periphs) == Periphs) ? 1UL : 0UL);
3418c428:	4b08      	ldr	r3, [pc, #32]	@ (3418c44c <LL_AHB5_GRP1_IsEnabledClock+0x2c>)
3418c42a:	f8d3 2260 	ldr.w	r2, [r3, #608]	@ 0x260
3418c42e:	687b      	ldr	r3, [r7, #4]
3418c430:	4013      	ands	r3, r2
3418c432:	687a      	ldr	r2, [r7, #4]
3418c434:	429a      	cmp	r2, r3
3418c436:	d101      	bne.n	3418c43c <LL_AHB5_GRP1_IsEnabledClock+0x1c>
3418c438:	2301      	movs	r3, #1
3418c43a:	e000      	b.n	3418c43e <LL_AHB5_GRP1_IsEnabledClock+0x1e>
3418c43c:	2300      	movs	r3, #0
}
3418c43e:	4618      	mov	r0, r3
3418c440:	370c      	adds	r7, #12
3418c442:	46bd      	mov	sp, r7
3418c444:	f85d 7b04 	ldr.w	r7, [sp], #4
3418c448:	4770      	bx	lr
3418c44a:	bf00      	nop
3418c44c:	56028000 	.word	0x56028000

3418c450 <HAL_XSPI_Init>:
  *         in the XSPI_InitTypeDef and initialize the associated handle.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Init(XSPI_HandleTypeDef *hxspi)
{
3418c450:	b580      	push	{r7, lr}
3418c452:	b086      	sub	sp, #24
3418c454:	af02      	add	r7, sp, #8
3418c456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418c458:	2300      	movs	r3, #0
3418c45a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418c45c:	f7f5 f9d8 	bl	34181810 <HAL_GetTick>
3418c460:	60b8      	str	r0, [r7, #8]

  /* Check the XSPI handle allocation */
  if (hxspi == NULL)
3418c462:	687b      	ldr	r3, [r7, #4]
3418c464:	2b00      	cmp	r3, #0
3418c466:	d102      	bne.n	3418c46e <HAL_XSPI_Init+0x1e>
  {
    status = HAL_ERROR;
3418c468:	2301      	movs	r3, #1
3418c46a:	73fb      	strb	r3, [r7, #15]
3418c46c:	e0ef      	b.n	3418c64e <HAL_XSPI_Init+0x1fe>
    assert_param(IS_XSPI_FIFO_THRESHOLD_BYTE(hxspi->Init.FifoThresholdByte));
    assert_param(IS_XSPI_MAXTRAN(hxspi->Init.MaxTran));
    assert_param(IS_XSPI_CSSEL(hxspi->Init.MemorySelect));
    assert_param(IS_XSPI_EXTENDMEM(hxspi->Init.MemoryExtended));
    /* Initialize error code */
    hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418c46e:	687b      	ldr	r3, [r7, #4]
3418c470:	2200      	movs	r2, #0
3418c472:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if the state is the reset state */
    if (hxspi->State == HAL_XSPI_STATE_RESET)
3418c474:	687b      	ldr	r3, [r7, #4]
3418c476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418c478:	2b00      	cmp	r3, #0
3418c47a:	f040 80e8 	bne.w	3418c64e <HAL_XSPI_Init+0x1fe>

      /* Init the low level hardware */
      hxspi->MspInitCallback(hxspi);
#else
      /* Initialization of the low level hardware */
      HAL_XSPI_MspInit(hxspi);
3418c47e:	6878      	ldr	r0, [r7, #4]
3418c480:	f7f4 fd62 	bl	34180f48 <HAL_XSPI_MspInit>
#endif /* defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the XSPI memory access */
      (void)HAL_XSPI_SetTimeout(hxspi, HAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418c484:	f241 3188 	movw	r1, #5000	@ 0x1388
3418c488:	6878      	ldr	r0, [r7, #4]
3418c48a:	f000 fc16 	bl	3418ccba <HAL_XSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, free running clock, clock mode */
      MODIFY_REG(hxspi->Instance->DCR1,
3418c48e:	687b      	ldr	r3, [r7, #4]
3418c490:	681b      	ldr	r3, [r3, #0]
3418c492:	689a      	ldr	r2, [r3, #8]
3418c494:	4b70      	ldr	r3, [pc, #448]	@ (3418c658 <HAL_XSPI_Init+0x208>)
3418c496:	4013      	ands	r3, r2
3418c498:	687a      	ldr	r2, [r7, #4]
3418c49a:	68d1      	ldr	r1, [r2, #12]
3418c49c:	687a      	ldr	r2, [r7, #4]
3418c49e:	6912      	ldr	r2, [r2, #16]
3418c4a0:	0412      	lsls	r2, r2, #16
3418c4a2:	4311      	orrs	r1, r2
3418c4a4:	687a      	ldr	r2, [r7, #4]
3418c4a6:	6952      	ldr	r2, [r2, #20]
3418c4a8:	3a01      	subs	r2, #1
3418c4aa:	0212      	lsls	r2, r2, #8
3418c4ac:	4311      	orrs	r1, r2
3418c4ae:	687a      	ldr	r2, [r7, #4]
3418c4b0:	69d2      	ldr	r2, [r2, #28]
3418c4b2:	4311      	orrs	r1, r2
3418c4b4:	687a      	ldr	r2, [r7, #4]
3418c4b6:	6812      	ldr	r2, [r2, #0]
3418c4b8:	430b      	orrs	r3, r1
3418c4ba:	6093      	str	r3, [r2, #8]
                 (XSPI_DCR1_MTYP | XSPI_DCR1_DEVSIZE | XSPI_DCR1_CSHT | XSPI_DCR1_FRCK | XSPI_DCR1_CKMODE),
                 (hxspi->Init.MemoryType | ((hxspi->Init.MemorySize) << XSPI_DCR1_DEVSIZE_Pos) |
                  ((hxspi->Init.ChipSelectHighTimeCycle - 1U) << XSPI_DCR1_CSHT_Pos) | hxspi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_WRAPSIZE, hxspi->Init.WrapSize);
3418c4bc:	687b      	ldr	r3, [r7, #4]
3418c4be:	681b      	ldr	r3, [r3, #0]
3418c4c0:	68db      	ldr	r3, [r3, #12]
3418c4c2:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
3418c4c6:	687b      	ldr	r3, [r7, #4]
3418c4c8:	6a1a      	ldr	r2, [r3, #32]
3418c4ca:	687b      	ldr	r3, [r7, #4]
3418c4cc:	681b      	ldr	r3, [r3, #0]
3418c4ce:	430a      	orrs	r2, r1
3418c4d0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_CSBOUND, (hxspi->Init.ChipSelectBoundary << XSPI_DCR3_CSBOUND_Pos));
3418c4d2:	687b      	ldr	r3, [r7, #4]
3418c4d4:	681b      	ldr	r3, [r3, #0]
3418c4d6:	691b      	ldr	r3, [r3, #16]
3418c4d8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418c4dc:	687b      	ldr	r3, [r7, #4]
3418c4de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418c4e0:	041a      	lsls	r2, r3, #16
3418c4e2:	687b      	ldr	r3, [r7, #4]
3418c4e4:	681b      	ldr	r3, [r3, #0]
3418c4e6:	430a      	orrs	r2, r1
3418c4e8:	611a      	str	r2, [r3, #16]

      /* Configure maximum transfer */
      MODIFY_REG(hxspi->Instance->DCR3, XSPI_DCR3_MAXTRAN, \
3418c4ea:	687b      	ldr	r3, [r7, #4]
3418c4ec:	681b      	ldr	r3, [r3, #0]
3418c4ee:	691b      	ldr	r3, [r3, #16]
3418c4f0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418c4f4:	687b      	ldr	r3, [r7, #4]
3418c4f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3418c4f8:	687b      	ldr	r3, [r7, #4]
3418c4fa:	681b      	ldr	r3, [r3, #0]
3418c4fc:	430a      	orrs	r2, r1
3418c4fe:	611a      	str	r2, [r3, #16]
                 (hxspi->Init.MaxTran << XSPI_DCR3_MAXTRAN_Pos));

      /* Configure refresh */
      hxspi->Instance->DCR4 = hxspi->Init.Refresh;
3418c500:	687b      	ldr	r3, [r7, #4]
3418c502:	681b      	ldr	r3, [r3, #0]
3418c504:	687a      	ldr	r2, [r7, #4]
3418c506:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418c508:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FTHRES, ((hxspi->Init.FifoThresholdByte - 1U) << XSPI_CR_FTHRES_Pos));
3418c50a:	687b      	ldr	r3, [r7, #4]
3418c50c:	681b      	ldr	r3, [r3, #0]
3418c50e:	681b      	ldr	r3, [r3, #0]
3418c510:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
3418c514:	687b      	ldr	r3, [r7, #4]
3418c516:	685b      	ldr	r3, [r3, #4]
3418c518:	3b01      	subs	r3, #1
3418c51a:	021a      	lsls	r2, r3, #8
3418c51c:	687b      	ldr	r3, [r7, #4]
3418c51e:	681b      	ldr	r3, [r3, #0]
3418c520:	430a      	orrs	r2, r1
3418c522:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418c524:	687b      	ldr	r3, [r7, #4]
3418c526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c528:	9300      	str	r3, [sp, #0]
3418c52a:	68bb      	ldr	r3, [r7, #8]
3418c52c:	2200      	movs	r2, #0
3418c52e:	2120      	movs	r1, #32
3418c530:	6878      	ldr	r0, [r7, #4]
3418c532:	f000 fcfd 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418c536:	4603      	mov	r3, r0
3418c538:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418c53a:	7bfb      	ldrb	r3, [r7, #15]
3418c53c:	2b00      	cmp	r3, #0
3418c53e:	f040 8086 	bne.w	3418c64e <HAL_XSPI_Init+0x1fe>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER,
3418c542:	687b      	ldr	r3, [r7, #4]
3418c544:	681b      	ldr	r3, [r3, #0]
3418c546:	68db      	ldr	r3, [r3, #12]
3418c548:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418c54c:	687b      	ldr	r3, [r7, #4]
3418c54e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3418c550:	687b      	ldr	r3, [r7, #4]
3418c552:	681b      	ldr	r3, [r3, #0]
3418c554:	430a      	orrs	r2, r1
3418c556:	60da      	str	r2, [r3, #12]
                   ((hxspi->Init.ClockPrescaler) << XSPI_DCR2_PRESCALER_Pos));

        if (IS_XSPI_ALL_INSTANCE(hxspi->Instance))
3418c558:	687b      	ldr	r3, [r7, #4]
3418c55a:	681b      	ldr	r3, [r3, #0]
3418c55c:	4a3f      	ldr	r2, [pc, #252]	@ (3418c65c <HAL_XSPI_Init+0x20c>)
3418c55e:	4293      	cmp	r3, r2
3418c560:	d018      	beq.n	3418c594 <HAL_XSPI_Init+0x144>
3418c562:	687b      	ldr	r3, [r7, #4]
3418c564:	681b      	ldr	r3, [r3, #0]
3418c566:	4a3e      	ldr	r2, [pc, #248]	@ (3418c660 <HAL_XSPI_Init+0x210>)
3418c568:	4293      	cmp	r3, r2
3418c56a:	d013      	beq.n	3418c594 <HAL_XSPI_Init+0x144>
3418c56c:	687b      	ldr	r3, [r7, #4]
3418c56e:	681b      	ldr	r3, [r3, #0]
3418c570:	4a3c      	ldr	r2, [pc, #240]	@ (3418c664 <HAL_XSPI_Init+0x214>)
3418c572:	4293      	cmp	r3, r2
3418c574:	d00e      	beq.n	3418c594 <HAL_XSPI_Init+0x144>
3418c576:	687b      	ldr	r3, [r7, #4]
3418c578:	681b      	ldr	r3, [r3, #0]
3418c57a:	4a3b      	ldr	r2, [pc, #236]	@ (3418c668 <HAL_XSPI_Init+0x218>)
3418c57c:	4293      	cmp	r3, r2
3418c57e:	d009      	beq.n	3418c594 <HAL_XSPI_Init+0x144>
3418c580:	687b      	ldr	r3, [r7, #4]
3418c582:	681b      	ldr	r3, [r3, #0]
3418c584:	4a39      	ldr	r2, [pc, #228]	@ (3418c66c <HAL_XSPI_Init+0x21c>)
3418c586:	4293      	cmp	r3, r2
3418c588:	d004      	beq.n	3418c594 <HAL_XSPI_Init+0x144>
3418c58a:	687b      	ldr	r3, [r7, #4]
3418c58c:	681b      	ldr	r3, [r3, #0]
3418c58e:	4a38      	ldr	r2, [pc, #224]	@ (3418c670 <HAL_XSPI_Init+0x220>)
3418c590:	4293      	cmp	r3, r2
3418c592:	d10f      	bne.n	3418c5b4 <HAL_XSPI_Init+0x164>
        {
          /* The configuration of clock prescaler trigger automatically a calibration process.
          So it is necessary to wait the calibration is complete */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418c594:	687b      	ldr	r3, [r7, #4]
3418c596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418c598:	9300      	str	r3, [sp, #0]
3418c59a:	68bb      	ldr	r3, [r7, #8]
3418c59c:	2200      	movs	r2, #0
3418c59e:	2120      	movs	r1, #32
3418c5a0:	6878      	ldr	r0, [r7, #4]
3418c5a2:	f000 fcc5 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418c5a6:	4603      	mov	r3, r0
3418c5a8:	73fb      	strb	r3, [r7, #15]
          if (status != HAL_OK)
3418c5aa:	7bfb      	ldrb	r3, [r7, #15]
3418c5ac:	2b00      	cmp	r3, #0
3418c5ae:	d001      	beq.n	3418c5b4 <HAL_XSPI_Init+0x164>
          {
            return status;
3418c5b0:	7bfb      	ldrb	r3, [r7, #15]
3418c5b2:	e04d      	b.n	3418c650 <HAL_XSPI_Init+0x200>
          }
        }
        /* Configure Dual Memory mode and CS Selection */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_DMM | XSPI_CR_CSSEL),
3418c5b4:	687b      	ldr	r3, [r7, #4]
3418c5b6:	681b      	ldr	r3, [r3, #0]
3418c5b8:	681b      	ldr	r3, [r3, #0]
3418c5ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
3418c5be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
3418c5c2:	687a      	ldr	r2, [r7, #4]
3418c5c4:	6891      	ldr	r1, [r2, #8]
3418c5c6:	687a      	ldr	r2, [r7, #4]
3418c5c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
3418c5ca:	4311      	orrs	r1, r2
3418c5cc:	687a      	ldr	r2, [r7, #4]
3418c5ce:	6812      	ldr	r2, [r2, #0]
3418c5d0:	430b      	orrs	r3, r1
3418c5d2:	6013      	str	r3, [r2, #0]
                   (hxspi->Init.MemoryMode | hxspi->Init.MemorySelect));

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hxspi->Instance->TCR, (XSPI_TCR_SSHIFT | XSPI_TCR_DHQC),
3418c5d4:	687b      	ldr	r3, [r7, #4]
3418c5d6:	681b      	ldr	r3, [r3, #0]
3418c5d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
3418c5dc:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
3418c5e0:	687b      	ldr	r3, [r7, #4]
3418c5e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418c5e4:	687b      	ldr	r3, [r7, #4]
3418c5e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418c5e8:	431a      	orrs	r2, r3
3418c5ea:	687b      	ldr	r3, [r7, #4]
3418c5ec:	681b      	ldr	r3, [r3, #0]
3418c5ee:	430a      	orrs	r2, r1
3418c5f0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hxspi->Init.SampleShifting | hxspi->Init.DelayHoldQuarterCycle));

        /* Enable XSPI */
        HAL_XSPI_ENABLE(hxspi);
3418c5f4:	687b      	ldr	r3, [r7, #4]
3418c5f6:	681b      	ldr	r3, [r3, #0]
3418c5f8:	681a      	ldr	r2, [r3, #0]
3418c5fa:	687b      	ldr	r3, [r7, #4]
3418c5fc:	681b      	ldr	r3, [r3, #0]
3418c5fe:	f042 0201 	orr.w	r2, r2, #1
3418c602:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after XSPI enable */
        if (hxspi->Init.FreeRunningClock == HAL_XSPI_FREERUNCLK_ENABLE)
3418c604:	687b      	ldr	r3, [r7, #4]
3418c606:	699b      	ldr	r3, [r3, #24]
3418c608:	2b02      	cmp	r3, #2
3418c60a:	d107      	bne.n	3418c61c <HAL_XSPI_Init+0x1cc>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_FRCK);
3418c60c:	687b      	ldr	r3, [r7, #4]
3418c60e:	681b      	ldr	r3, [r3, #0]
3418c610:	689a      	ldr	r2, [r3, #8]
3418c612:	687b      	ldr	r3, [r7, #4]
3418c614:	681b      	ldr	r3, [r3, #0]
3418c616:	f042 0202 	orr.w	r2, r2, #2
3418c61a:	609a      	str	r2, [r3, #8]
        }

        if (hxspi->Init.MemoryExtended == HAL_XSPI_CSSEL_HW)
3418c61c:	687b      	ldr	r3, [r7, #4]
3418c61e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c620:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3418c624:	d107      	bne.n	3418c636 <HAL_XSPI_Init+0x1e6>
        {
          SET_BIT(hxspi->Instance->DCR1, XSPI_DCR1_EXTENDMEM);
3418c626:	687b      	ldr	r3, [r7, #4]
3418c628:	681b      	ldr	r3, [r3, #0]
3418c62a:	689a      	ldr	r2, [r3, #8]
3418c62c:	687b      	ldr	r3, [r7, #4]
3418c62e:	681b      	ldr	r3, [r3, #0]
3418c630:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
3418c634:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the XSPI state */
        if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418c636:	687b      	ldr	r3, [r7, #4]
3418c638:	68db      	ldr	r3, [r3, #12]
3418c63a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418c63e:	d103      	bne.n	3418c648 <HAL_XSPI_Init+0x1f8>
        {
          hxspi->State = HAL_XSPI_STATE_HYPERBUS_INIT;
3418c640:	687b      	ldr	r3, [r7, #4]
3418c642:	2201      	movs	r2, #1
3418c644:	659a      	str	r2, [r3, #88]	@ 0x58
3418c646:	e002      	b.n	3418c64e <HAL_XSPI_Init+0x1fe>
        }
        else
        {
          hxspi->State = HAL_XSPI_STATE_READY;
3418c648:	687b      	ldr	r3, [r7, #4]
3418c64a:	2202      	movs	r2, #2
3418c64c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
      }
    }
  }
  return status;
3418c64e:	7bfb      	ldrb	r3, [r7, #15]
}
3418c650:	4618      	mov	r0, r3
3418c652:	3710      	adds	r7, #16
3418c654:	46bd      	mov	sp, r7
3418c656:	bd80      	pop	{r7, pc}
3418c658:	f8e0c0fc 	.word	0xf8e0c0fc
3418c65c:	58025000 	.word	0x58025000
3418c660:	48025000 	.word	0x48025000
3418c664:	5802a000 	.word	0x5802a000
3418c668:	4802a000 	.word	0x4802a000
3418c66c:	5802d000 	.word	0x5802d000
3418c670:	4802d000 	.word	0x4802d000

3418c674 <HAL_XSPI_Command>:
  * @param  pCmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Command(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *const pCmd, uint32_t Timeout)
{
3418c674:	b580      	push	{r7, lr}
3418c676:	b08a      	sub	sp, #40	@ 0x28
3418c678:	af02      	add	r7, sp, #8
3418c67a:	60f8      	str	r0, [r7, #12]
3418c67c:	60b9      	str	r1, [r7, #8]
3418c67e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
3418c680:	f7f5 f8c6 	bl	34181810 <HAL_GetTick>
3418c684:	61b8      	str	r0, [r7, #24]
    assert_param(IS_XSPI_ALT_BYTES_DTR_MODE(pCmd->AlternateBytesDTRMode));
  }

  assert_param(IS_XSPI_DATA_MODE(hxspi->Init.MemoryType, pCmd->DataMode));

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418c686:	68bb      	ldr	r3, [r7, #8]
3418c688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c68a:	2b00      	cmp	r3, #0
  }

  assert_param(IS_XSPI_DQS_MODE(pCmd->DQSMode));

  /* Check the state of the driver */
  state = hxspi->State;
3418c68c:	68fb      	ldr	r3, [r7, #12]
3418c68e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418c690:	617b      	str	r3, [r7, #20]
  if (((state == HAL_XSPI_STATE_READY)         && (hxspi->Init.MemoryType != HAL_XSPI_MEMTYPE_HYPERBUS)) ||
3418c692:	697b      	ldr	r3, [r7, #20]
3418c694:	2b02      	cmp	r3, #2
3418c696:	d104      	bne.n	3418c6a2 <HAL_XSPI_Command+0x2e>
3418c698:	68fb      	ldr	r3, [r7, #12]
3418c69a:	68db      	ldr	r3, [r3, #12]
3418c69c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418c6a0:	d115      	bne.n	3418c6ce <HAL_XSPI_Command+0x5a>
3418c6a2:	697b      	ldr	r3, [r7, #20]
3418c6a4:	2b14      	cmp	r3, #20
3418c6a6:	d107      	bne.n	3418c6b8 <HAL_XSPI_Command+0x44>
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418c6a8:	68bb      	ldr	r3, [r7, #8]
3418c6aa:	681b      	ldr	r3, [r3, #0]
3418c6ac:	2b02      	cmp	r3, #2
3418c6ae:	d00e      	beq.n	3418c6ce <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418c6b0:	68bb      	ldr	r3, [r7, #8]
3418c6b2:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_READ_CMD_CFG)  && ((pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG) ||
3418c6b4:	2b03      	cmp	r3, #3
3418c6b6:	d00a      	beq.n	3418c6ce <HAL_XSPI_Command+0x5a>
                                                   (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))) ||
3418c6b8:	697b      	ldr	r3, [r7, #20]
3418c6ba:	2b24      	cmp	r3, #36	@ 0x24
3418c6bc:	d15e      	bne.n	3418c77c <HAL_XSPI_Command+0x108>
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418c6be:	68bb      	ldr	r3, [r7, #8]
3418c6c0:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_XSPI_STATE_WRITE_CMD_CFG) &&
3418c6c2:	2b01      	cmp	r3, #1
3418c6c4:	d003      	beq.n	3418c6ce <HAL_XSPI_Command+0x5a>
        (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG))))
3418c6c6:	68bb      	ldr	r3, [r7, #8]
3418c6c8:	681b      	ldr	r3, [r3, #0]
       ((pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)  ||
3418c6ca:	2b03      	cmp	r3, #3
3418c6cc:	d156      	bne.n	3418c77c <HAL_XSPI_Command+0x108>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418c6ce:	687b      	ldr	r3, [r7, #4]
3418c6d0:	9300      	str	r3, [sp, #0]
3418c6d2:	69bb      	ldr	r3, [r7, #24]
3418c6d4:	2200      	movs	r2, #0
3418c6d6:	2120      	movs	r1, #32
3418c6d8:	68f8      	ldr	r0, [r7, #12]
3418c6da:	f000 fc29 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418c6de:	4603      	mov	r3, r0
3418c6e0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418c6e2:	7ffb      	ldrb	r3, [r7, #31]
3418c6e4:	2b00      	cmp	r3, #0
3418c6e6:	d146      	bne.n	3418c776 <HAL_XSPI_Command+0x102>
    {
      /* Initialize error code */
      hxspi->ErrorCode = HAL_XSPI_ERROR_NONE;
3418c6e8:	68fb      	ldr	r3, [r7, #12]
3418c6ea:	2200      	movs	r2, #0
3418c6ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Configure the registers */
      status = XSPI_ConfigCmd(hxspi, pCmd);
3418c6ee:	68b9      	ldr	r1, [r7, #8]
3418c6f0:	68f8      	ldr	r0, [r7, #12]
3418c6f2:	f000 fc53 	bl	3418cf9c <XSPI_ConfigCmd>
3418c6f6:	4603      	mov	r3, r0
3418c6f8:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418c6fa:	7ffb      	ldrb	r3, [r7, #31]
3418c6fc:	2b00      	cmp	r3, #0
3418c6fe:	d143      	bne.n	3418c788 <HAL_XSPI_Command+0x114>
      {
        if (pCmd->DataMode == HAL_XSPI_DATA_NONE)
3418c700:	68bb      	ldr	r3, [r7, #8]
3418c702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418c704:	2b00      	cmp	r3, #0
3418c706:	d10e      	bne.n	3418c726 <HAL_XSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418c708:	687b      	ldr	r3, [r7, #4]
3418c70a:	9300      	str	r3, [sp, #0]
3418c70c:	69bb      	ldr	r3, [r7, #24]
3418c70e:	2201      	movs	r2, #1
3418c710:	2102      	movs	r1, #2
3418c712:	68f8      	ldr	r0, [r7, #12]
3418c714:	f000 fc0c 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418c718:	4603      	mov	r3, r0
3418c71a:	77fb      	strb	r3, [r7, #31]

          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418c71c:	68fb      	ldr	r3, [r7, #12]
3418c71e:	681b      	ldr	r3, [r3, #0]
3418c720:	2202      	movs	r2, #2
3418c722:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
3418c724:	e030      	b.n	3418c788 <HAL_XSPI_Command+0x114>
        }
        else
        {
          /* Update the state */
          if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418c726:	68bb      	ldr	r3, [r7, #8]
3418c728:	681b      	ldr	r3, [r3, #0]
3418c72a:	2b00      	cmp	r3, #0
3418c72c:	d103      	bne.n	3418c736 <HAL_XSPI_Command+0xc2>
          {
            hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418c72e:	68fb      	ldr	r3, [r7, #12]
3418c730:	2204      	movs	r2, #4
3418c732:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418c734:	e028      	b.n	3418c788 <HAL_XSPI_Command+0x114>
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_READ_CFG)
3418c736:	68bb      	ldr	r3, [r7, #8]
3418c738:	681b      	ldr	r3, [r3, #0]
3418c73a:	2b01      	cmp	r3, #1
3418c73c:	d10b      	bne.n	3418c756 <HAL_XSPI_Command+0xe2>
          {
            if (hxspi->State == HAL_XSPI_STATE_WRITE_CMD_CFG)
3418c73e:	68fb      	ldr	r3, [r7, #12]
3418c740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418c742:	2b24      	cmp	r3, #36	@ 0x24
3418c744:	d103      	bne.n	3418c74e <HAL_XSPI_Command+0xda>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418c746:	68fb      	ldr	r3, [r7, #12]
3418c748:	2204      	movs	r2, #4
3418c74a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418c74c:	e01c      	b.n	3418c788 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_READ_CMD_CFG;
3418c74e:	68fb      	ldr	r3, [r7, #12]
3418c750:	2214      	movs	r2, #20
3418c752:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418c754:	e018      	b.n	3418c788 <HAL_XSPI_Command+0x114>
            }
          }
          else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418c756:	68bb      	ldr	r3, [r7, #8]
3418c758:	681b      	ldr	r3, [r3, #0]
3418c75a:	2b02      	cmp	r3, #2
3418c75c:	d114      	bne.n	3418c788 <HAL_XSPI_Command+0x114>
          {
            if (hxspi->State == HAL_XSPI_STATE_READ_CMD_CFG)
3418c75e:	68fb      	ldr	r3, [r7, #12]
3418c760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418c762:	2b14      	cmp	r3, #20
3418c764:	d103      	bne.n	3418c76e <HAL_XSPI_Command+0xfa>
            {
              hxspi->State = HAL_XSPI_STATE_CMD_CFG;
3418c766:	68fb      	ldr	r3, [r7, #12]
3418c768:	2204      	movs	r2, #4
3418c76a:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418c76c:	e00c      	b.n	3418c788 <HAL_XSPI_Command+0x114>
            }
            else
            {
              hxspi->State = HAL_XSPI_STATE_WRITE_CMD_CFG;
3418c76e:	68fb      	ldr	r3, [r7, #12]
3418c770:	2224      	movs	r2, #36	@ 0x24
3418c772:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418c774:	e008      	b.n	3418c788 <HAL_XSPI_Command+0x114>
        }
      }
    }
    else
    {
      status = HAL_BUSY;
3418c776:	2302      	movs	r3, #2
3418c778:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418c77a:	e005      	b.n	3418c788 <HAL_XSPI_Command+0x114>
    }
  }
  else
  {
    status = HAL_ERROR;
3418c77c:	2301      	movs	r3, #1
3418c77e:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418c780:	68fb      	ldr	r3, [r7, #12]
3418c782:	2210      	movs	r2, #16
3418c784:	65da      	str	r2, [r3, #92]	@ 0x5c
3418c786:	e000      	b.n	3418c78a <HAL_XSPI_Command+0x116>
    if (status == HAL_OK)
3418c788:	bf00      	nop
  }

  return status;
3418c78a:	7ffb      	ldrb	r3, [r7, #31]
}
3418c78c:	4618      	mov	r0, r3
3418c78e:	3720      	adds	r7, #32
3418c790:	46bd      	mov	sp, r7
3418c792:	bd80      	pop	{r7, pc}

3418c794 <HAL_XSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Transmit(XSPI_HandleTypeDef *hxspi, const uint8_t *pData, uint32_t Timeout)
{
3418c794:	b580      	push	{r7, lr}
3418c796:	b08a      	sub	sp, #40	@ 0x28
3418c798:	af02      	add	r7, sp, #8
3418c79a:	60f8      	str	r0, [r7, #12]
3418c79c:	60b9      	str	r1, [r7, #8]
3418c79e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418c7a0:	f7f5 f836 	bl	34181810 <HAL_GetTick>
3418c7a4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418c7a6:	68fb      	ldr	r3, [r7, #12]
3418c7a8:	681b      	ldr	r3, [r3, #0]
3418c7aa:	3350      	adds	r3, #80	@ 0x50
3418c7ac:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418c7ae:	68bb      	ldr	r3, [r7, #8]
3418c7b0:	2b00      	cmp	r3, #0
3418c7b2:	d105      	bne.n	3418c7c0 <HAL_XSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
3418c7b4:	2301      	movs	r3, #1
3418c7b6:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418c7b8:	68fb      	ldr	r3, [r7, #12]
3418c7ba:	2208      	movs	r2, #8
3418c7bc:	65da      	str	r2, [r3, #92]	@ 0x5c
3418c7be:	e057      	b.n	3418c870 <HAL_XSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418c7c0:	68fb      	ldr	r3, [r7, #12]
3418c7c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418c7c4:	2b04      	cmp	r3, #4
3418c7c6:	d14e      	bne.n	3418c866 <HAL_XSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418c7c8:	68fb      	ldr	r3, [r7, #12]
3418c7ca:	681b      	ldr	r3, [r3, #0]
3418c7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c7ce:	1c5a      	adds	r2, r3, #1
3418c7d0:	68fb      	ldr	r3, [r7, #12]
3418c7d2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418c7d4:	68fb      	ldr	r3, [r7, #12]
3418c7d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418c7d8:	68fb      	ldr	r3, [r7, #12]
3418c7da:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = (uint8_t *)pData;
3418c7dc:	68fb      	ldr	r3, [r7, #12]
3418c7de:	68ba      	ldr	r2, [r7, #8]
3418c7e0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
3418c7e2:	68fb      	ldr	r3, [r7, #12]
3418c7e4:	681b      	ldr	r3, [r3, #0]
3418c7e6:	681a      	ldr	r2, [r3, #0]
3418c7e8:	68fb      	ldr	r3, [r7, #12]
3418c7ea:	681b      	ldr	r3, [r3, #0]
3418c7ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418c7f0:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_FT, SET, tickstart, Timeout);
3418c7f2:	687b      	ldr	r3, [r7, #4]
3418c7f4:	9300      	str	r3, [sp, #0]
3418c7f6:	69bb      	ldr	r3, [r7, #24]
3418c7f8:	2201      	movs	r2, #1
3418c7fa:	2104      	movs	r1, #4
3418c7fc:	68f8      	ldr	r0, [r7, #12]
3418c7fe:	f000 fb97 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418c802:	4603      	mov	r3, r0
3418c804:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
3418c806:	7ffb      	ldrb	r3, [r7, #31]
3418c808:	2b00      	cmp	r3, #0
3418c80a:	d113      	bne.n	3418c834 <HAL_XSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hxspi->pBuffPtr;
3418c80c:	68fb      	ldr	r3, [r7, #12]
3418c80e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c810:	781a      	ldrb	r2, [r3, #0]
3418c812:	697b      	ldr	r3, [r7, #20]
3418c814:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418c816:	68fb      	ldr	r3, [r7, #12]
3418c818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c81a:	1c5a      	adds	r2, r3, #1
3418c81c:	68fb      	ldr	r3, [r7, #12]
3418c81e:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418c820:	68fb      	ldr	r3, [r7, #12]
3418c822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c824:	1e5a      	subs	r2, r3, #1
3418c826:	68fb      	ldr	r3, [r7, #12]
3418c828:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418c82a:	68fb      	ldr	r3, [r7, #12]
3418c82c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c82e:	2b00      	cmp	r3, #0
3418c830:	d1df      	bne.n	3418c7f2 <HAL_XSPI_Transmit+0x5e>
3418c832:	e000      	b.n	3418c836 <HAL_XSPI_Transmit+0xa2>
          break;
3418c834:	bf00      	nop

      if (status == HAL_OK)
3418c836:	7ffb      	ldrb	r3, [r7, #31]
3418c838:	2b00      	cmp	r3, #0
3418c83a:	d119      	bne.n	3418c870 <HAL_XSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418c83c:	687b      	ldr	r3, [r7, #4]
3418c83e:	9300      	str	r3, [sp, #0]
3418c840:	69bb      	ldr	r3, [r7, #24]
3418c842:	2201      	movs	r2, #1
3418c844:	2102      	movs	r1, #2
3418c846:	68f8      	ldr	r0, [r7, #12]
3418c848:	f000 fb72 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418c84c:	4603      	mov	r3, r0
3418c84e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
3418c850:	7ffb      	ldrb	r3, [r7, #31]
3418c852:	2b00      	cmp	r3, #0
3418c854:	d10c      	bne.n	3418c870 <HAL_XSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418c856:	68fb      	ldr	r3, [r7, #12]
3418c858:	681b      	ldr	r3, [r3, #0]
3418c85a:	2202      	movs	r2, #2
3418c85c:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418c85e:	68fb      	ldr	r3, [r7, #12]
3418c860:	2202      	movs	r2, #2
3418c862:	659a      	str	r2, [r3, #88]	@ 0x58
3418c864:	e004      	b.n	3418c870 <HAL_XSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418c866:	2301      	movs	r3, #1
3418c868:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418c86a:	68fb      	ldr	r3, [r7, #12]
3418c86c:	2210      	movs	r2, #16
3418c86e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418c870:	7ffb      	ldrb	r3, [r7, #31]
}
3418c872:	4618      	mov	r0, r3
3418c874:	3720      	adds	r7, #32
3418c876:	46bd      	mov	sp, r7
3418c878:	bd80      	pop	{r7, pc}

3418c87a <HAL_XSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Receive(XSPI_HandleTypeDef *hxspi, uint8_t *const pData, uint32_t Timeout)
{
3418c87a:	b580      	push	{r7, lr}
3418c87c:	b08c      	sub	sp, #48	@ 0x30
3418c87e:	af02      	add	r7, sp, #8
3418c880:	60f8      	str	r0, [r7, #12]
3418c882:	60b9      	str	r1, [r7, #8]
3418c884:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418c886:	f7f4 ffc3 	bl	34181810 <HAL_GetTick>
3418c88a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hxspi->Instance->DR;
3418c88c:	68fb      	ldr	r3, [r7, #12]
3418c88e:	681b      	ldr	r3, [r3, #0]
3418c890:	3350      	adds	r3, #80	@ 0x50
3418c892:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hxspi->Instance->AR;
3418c894:	68fb      	ldr	r3, [r7, #12]
3418c896:	681b      	ldr	r3, [r3, #0]
3418c898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418c89a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hxspi->Instance->IR;
3418c89c:	68fb      	ldr	r3, [r7, #12]
3418c89e:	681b      	ldr	r3, [r3, #0]
3418c8a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418c8a4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
3418c8a6:	68bb      	ldr	r3, [r7, #8]
3418c8a8:	2b00      	cmp	r3, #0
3418c8aa:	d106      	bne.n	3418c8ba <HAL_XSPI_Receive+0x40>
  {
    status = HAL_ERROR;
3418c8ac:	2301      	movs	r3, #1
3418c8ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418c8b2:	68fb      	ldr	r3, [r7, #12]
3418c8b4:	2208      	movs	r2, #8
3418c8b6:	65da      	str	r2, [r3, #92]	@ 0x5c
3418c8b8:	e07c      	b.n	3418c9b4 <HAL_XSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418c8ba:	68fb      	ldr	r3, [r7, #12]
3418c8bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418c8be:	2b04      	cmp	r3, #4
3418c8c0:	d172      	bne.n	3418c9a8 <HAL_XSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hxspi->XferCount = READ_REG(hxspi->Instance->DLR) + 1U;
3418c8c2:	68fb      	ldr	r3, [r7, #12]
3418c8c4:	681b      	ldr	r3, [r3, #0]
3418c8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418c8c8:	1c5a      	adds	r2, r3, #1
3418c8ca:	68fb      	ldr	r3, [r7, #12]
3418c8cc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hxspi->XferSize  = hxspi->XferCount;
3418c8ce:	68fb      	ldr	r3, [r7, #12]
3418c8d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3418c8d2:	68fb      	ldr	r3, [r7, #12]
3418c8d4:	649a      	str	r2, [r3, #72]	@ 0x48
      hxspi->pBuffPtr  = pData;
3418c8d6:	68fb      	ldr	r3, [r7, #12]
3418c8d8:	68ba      	ldr	r2, [r7, #8]
3418c8da:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, XSPI_FUNCTIONAL_MODE_INDIRECT_READ);
3418c8dc:	68fb      	ldr	r3, [r7, #12]
3418c8de:	681b      	ldr	r3, [r3, #0]
3418c8e0:	681b      	ldr	r3, [r3, #0]
3418c8e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
3418c8e6:	68fb      	ldr	r3, [r7, #12]
3418c8e8:	681b      	ldr	r3, [r3, #0]
3418c8ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
3418c8ee:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418c8f0:	68fb      	ldr	r3, [r7, #12]
3418c8f2:	68db      	ldr	r3, [r3, #12]
3418c8f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418c8f8:	d104      	bne.n	3418c904 <HAL_XSPI_Receive+0x8a>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418c8fa:	68fb      	ldr	r3, [r7, #12]
3418c8fc:	681b      	ldr	r3, [r3, #0]
3418c8fe:	69ba      	ldr	r2, [r7, #24]
3418c900:	649a      	str	r2, [r3, #72]	@ 0x48
3418c902:	e011      	b.n	3418c928 <HAL_XSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418c904:	68fb      	ldr	r3, [r7, #12]
3418c906:	681b      	ldr	r3, [r3, #0]
3418c908:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418c90c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418c910:	2b00      	cmp	r3, #0
3418c912:	d004      	beq.n	3418c91e <HAL_XSPI_Receive+0xa4>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418c914:	68fb      	ldr	r3, [r7, #12]
3418c916:	681b      	ldr	r3, [r3, #0]
3418c918:	69ba      	ldr	r2, [r7, #24]
3418c91a:	649a      	str	r2, [r3, #72]	@ 0x48
3418c91c:	e004      	b.n	3418c928 <HAL_XSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418c91e:	68fb      	ldr	r3, [r7, #12]
3418c920:	681b      	ldr	r3, [r3, #0]
3418c922:	697a      	ldr	r2, [r7, #20]
3418c924:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, (HAL_XSPI_FLAG_FT | HAL_XSPI_FLAG_TC), SET, tickstart, Timeout);
3418c928:	687b      	ldr	r3, [r7, #4]
3418c92a:	9300      	str	r3, [sp, #0]
3418c92c:	6a3b      	ldr	r3, [r7, #32]
3418c92e:	2201      	movs	r2, #1
3418c930:	2106      	movs	r1, #6
3418c932:	68f8      	ldr	r0, [r7, #12]
3418c934:	f000 fafc 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418c938:	4603      	mov	r3, r0
3418c93a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
3418c93e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418c942:	2b00      	cmp	r3, #0
3418c944:	d114      	bne.n	3418c970 <HAL_XSPI_Receive+0xf6>
        {
          break;
        }

        *hxspi->pBuffPtr = *((__IO uint8_t *)data_reg);
3418c946:	68fb      	ldr	r3, [r7, #12]
3418c948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c94a:	69fa      	ldr	r2, [r7, #28]
3418c94c:	7812      	ldrb	r2, [r2, #0]
3418c94e:	b2d2      	uxtb	r2, r2
3418c950:	701a      	strb	r2, [r3, #0]
        hxspi->pBuffPtr++;
3418c952:	68fb      	ldr	r3, [r7, #12]
3418c954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418c956:	1c5a      	adds	r2, r3, #1
3418c958:	68fb      	ldr	r3, [r7, #12]
3418c95a:	645a      	str	r2, [r3, #68]	@ 0x44
        hxspi->XferCount--;
3418c95c:	68fb      	ldr	r3, [r7, #12]
3418c95e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c960:	1e5a      	subs	r2, r3, #1
3418c962:	68fb      	ldr	r3, [r7, #12]
3418c964:	64da      	str	r2, [r3, #76]	@ 0x4c
      } while (hxspi->XferCount > 0U);
3418c966:	68fb      	ldr	r3, [r7, #12]
3418c968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3418c96a:	2b00      	cmp	r3, #0
3418c96c:	d1dc      	bne.n	3418c928 <HAL_XSPI_Receive+0xae>
3418c96e:	e000      	b.n	3418c972 <HAL_XSPI_Receive+0xf8>
          break;
3418c970:	bf00      	nop

      if (status == HAL_OK)
3418c972:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418c976:	2b00      	cmp	r3, #0
3418c978:	d11c      	bne.n	3418c9b4 <HAL_XSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, Timeout);
3418c97a:	687b      	ldr	r3, [r7, #4]
3418c97c:	9300      	str	r3, [sp, #0]
3418c97e:	6a3b      	ldr	r3, [r7, #32]
3418c980:	2201      	movs	r2, #1
3418c982:	2102      	movs	r1, #2
3418c984:	68f8      	ldr	r0, [r7, #12]
3418c986:	f000 fad3 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418c98a:	4603      	mov	r3, r0
3418c98c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
3418c990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418c994:	2b00      	cmp	r3, #0
3418c996:	d10d      	bne.n	3418c9b4 <HAL_XSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418c998:	68fb      	ldr	r3, [r7, #12]
3418c99a:	681b      	ldr	r3, [r3, #0]
3418c99c:	2202      	movs	r2, #2
3418c99e:	625a      	str	r2, [r3, #36]	@ 0x24

          hxspi->State = HAL_XSPI_STATE_READY;
3418c9a0:	68fb      	ldr	r3, [r7, #12]
3418c9a2:	2202      	movs	r2, #2
3418c9a4:	659a      	str	r2, [r3, #88]	@ 0x58
3418c9a6:	e005      	b.n	3418c9b4 <HAL_XSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
3418c9a8:	2301      	movs	r3, #1
3418c9aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418c9ae:	68fb      	ldr	r3, [r7, #12]
3418c9b0:	2210      	movs	r2, #16
3418c9b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418c9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418c9b8:	4618      	mov	r0, r3
3418c9ba:	3728      	adds	r7, #40	@ 0x28
3418c9bc:	46bd      	mov	sp, r7
3418c9be:	bd80      	pop	{r7, pc}

3418c9c0 <HAL_XSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_AutoPolling(XSPI_HandleTypeDef *hxspi, XSPI_AutoPollingTypeDef *const pCfg,
                                       uint32_t Timeout)
{
3418c9c0:	b580      	push	{r7, lr}
3418c9c2:	b08a      	sub	sp, #40	@ 0x28
3418c9c4:	af02      	add	r7, sp, #8
3418c9c6:	60f8      	str	r0, [r7, #12]
3418c9c8:	60b9      	str	r1, [r7, #8]
3418c9ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418c9cc:	f7f4 ff20 	bl	34181810 <HAL_GetTick>
3418c9d0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hxspi->Instance->AR;
3418c9d2:	68fb      	ldr	r3, [r7, #12]
3418c9d4:	681b      	ldr	r3, [r3, #0]
3418c9d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418c9d8:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hxspi->Instance->IR;
3418c9da:	68fb      	ldr	r3, [r7, #12]
3418c9dc:	681b      	ldr	r3, [r3, #0]
3418c9de:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3418c9e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_XSPI_AUTOMATIC_STOP(pCfg->AutomaticStop));
  assert_param(IS_XSPI_INTERVAL(pCfg->IntervalTime));
  assert_param(IS_XSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hxspi->State == HAL_XSPI_STATE_CMD_CFG) && (pCfg->AutomaticStop == HAL_XSPI_AUTOMATIC_STOP_ENABLE))
3418c9e4:	68fb      	ldr	r3, [r7, #12]
3418c9e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418c9e8:	2b04      	cmp	r3, #4
3418c9ea:	d167      	bne.n	3418cabc <HAL_XSPI_AutoPolling+0xfc>
3418c9ec:	68bb      	ldr	r3, [r7, #8]
3418c9ee:	68db      	ldr	r3, [r3, #12]
3418c9f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
3418c9f4:	d162      	bne.n	3418cabc <HAL_XSPI_AutoPolling+0xfc>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, Timeout);
3418c9f6:	687b      	ldr	r3, [r7, #4]
3418c9f8:	9300      	str	r3, [sp, #0]
3418c9fa:	69bb      	ldr	r3, [r7, #24]
3418c9fc:	2200      	movs	r2, #0
3418c9fe:	2120      	movs	r1, #32
3418ca00:	68f8      	ldr	r0, [r7, #12]
3418ca02:	f000 fa95 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418ca06:	4603      	mov	r3, r0
3418ca08:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
3418ca0a:	7ffb      	ldrb	r3, [r7, #31]
3418ca0c:	2b00      	cmp	r3, #0
3418ca0e:	d152      	bne.n	3418cab6 <HAL_XSPI_AutoPolling+0xf6>
    {
      /* Configure registers */
      WRITE_REG(hxspi->Instance->PSMAR, pCfg->MatchValue);
3418ca10:	68fb      	ldr	r3, [r7, #12]
3418ca12:	681b      	ldr	r3, [r3, #0]
3418ca14:	68ba      	ldr	r2, [r7, #8]
3418ca16:	6812      	ldr	r2, [r2, #0]
3418ca18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      WRITE_REG(hxspi->Instance->PSMKR, pCfg->MatchMask);
3418ca1c:	68fb      	ldr	r3, [r7, #12]
3418ca1e:	681b      	ldr	r3, [r3, #0]
3418ca20:	68ba      	ldr	r2, [r7, #8]
3418ca22:	6852      	ldr	r2, [r2, #4]
3418ca24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      WRITE_REG(hxspi->Instance->PIR,   pCfg->IntervalTime);
3418ca28:	68fb      	ldr	r3, [r7, #12]
3418ca2a:	681b      	ldr	r3, [r3, #0]
3418ca2c:	68ba      	ldr	r2, [r7, #8]
3418ca2e:	6912      	ldr	r2, [r2, #16]
3418ca30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_PMM | XSPI_CR_APMS | XSPI_CR_FMODE),
3418ca34:	68fb      	ldr	r3, [r7, #12]
3418ca36:	681b      	ldr	r3, [r3, #0]
3418ca38:	681b      	ldr	r3, [r3, #0]
3418ca3a:	f023 5243 	bic.w	r2, r3, #817889280	@ 0x30c00000
3418ca3e:	68bb      	ldr	r3, [r7, #8]
3418ca40:	6899      	ldr	r1, [r3, #8]
3418ca42:	68bb      	ldr	r3, [r7, #8]
3418ca44:	68db      	ldr	r3, [r3, #12]
3418ca46:	430b      	orrs	r3, r1
3418ca48:	431a      	orrs	r2, r3
3418ca4a:	68fb      	ldr	r3, [r7, #12]
3418ca4c:	681b      	ldr	r3, [r3, #0]
3418ca4e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
3418ca52:	601a      	str	r2, [r3, #0]
                 (pCfg->MatchMode | pCfg->AutomaticStop | XSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hxspi->Init.MemoryType == HAL_XSPI_MEMTYPE_HYPERBUS)
3418ca54:	68fb      	ldr	r3, [r7, #12]
3418ca56:	68db      	ldr	r3, [r3, #12]
3418ca58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418ca5c:	d104      	bne.n	3418ca68 <HAL_XSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hxspi->Instance->AR, addr_reg);
3418ca5e:	68fb      	ldr	r3, [r7, #12]
3418ca60:	681b      	ldr	r3, [r3, #0]
3418ca62:	697a      	ldr	r2, [r7, #20]
3418ca64:	649a      	str	r2, [r3, #72]	@ 0x48
3418ca66:	e011      	b.n	3418ca8c <HAL_XSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hxspi->Instance->CCR, XSPI_CCR_ADMODE) != HAL_XSPI_ADDRESS_NONE)
3418ca68:	68fb      	ldr	r3, [r7, #12]
3418ca6a:	681b      	ldr	r3, [r3, #0]
3418ca6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3418ca70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
3418ca74:	2b00      	cmp	r3, #0
3418ca76:	d004      	beq.n	3418ca82 <HAL_XSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hxspi->Instance->AR, addr_reg);
3418ca78:	68fb      	ldr	r3, [r7, #12]
3418ca7a:	681b      	ldr	r3, [r3, #0]
3418ca7c:	697a      	ldr	r2, [r7, #20]
3418ca7e:	649a      	str	r2, [r3, #72]	@ 0x48
3418ca80:	e004      	b.n	3418ca8c <HAL_XSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hxspi->Instance->IR, ir_reg);
3418ca82:	68fb      	ldr	r3, [r7, #12]
3418ca84:	681b      	ldr	r3, [r3, #0]
3418ca86:	693a      	ldr	r2, [r7, #16]
3418ca88:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_SM, SET, tickstart, Timeout);
3418ca8c:	687b      	ldr	r3, [r7, #4]
3418ca8e:	9300      	str	r3, [sp, #0]
3418ca90:	69bb      	ldr	r3, [r7, #24]
3418ca92:	2201      	movs	r2, #1
3418ca94:	2108      	movs	r1, #8
3418ca96:	68f8      	ldr	r0, [r7, #12]
3418ca98:	f000 fa4a 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418ca9c:	4603      	mov	r3, r0
3418ca9e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
3418caa0:	7ffb      	ldrb	r3, [r7, #31]
3418caa2:	2b00      	cmp	r3, #0
3418caa4:	d110      	bne.n	3418cac8 <HAL_XSPI_AutoPolling+0x108>
      {
        /* Clear status match flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_SM);
3418caa6:	68fb      	ldr	r3, [r7, #12]
3418caa8:	681b      	ldr	r3, [r3, #0]
3418caaa:	2208      	movs	r2, #8
3418caac:	625a      	str	r2, [r3, #36]	@ 0x24

        hxspi->State = HAL_XSPI_STATE_READY;
3418caae:	68fb      	ldr	r3, [r7, #12]
3418cab0:	2202      	movs	r2, #2
3418cab2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (status == HAL_OK)
3418cab4:	e008      	b.n	3418cac8 <HAL_XSPI_AutoPolling+0x108>
      }
    }
    else
    {
      status = HAL_BUSY;
3418cab6:	2302      	movs	r3, #2
3418cab8:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK)
3418caba:	e005      	b.n	3418cac8 <HAL_XSPI_AutoPolling+0x108>
    }
  }
  else
  {
    status = HAL_ERROR;
3418cabc:	2301      	movs	r3, #1
3418cabe:	77fb      	strb	r3, [r7, #31]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418cac0:	68fb      	ldr	r3, [r7, #12]
3418cac2:	2210      	movs	r2, #16
3418cac4:	65da      	str	r2, [r3, #92]	@ 0x5c
3418cac6:	e000      	b.n	3418caca <HAL_XSPI_AutoPolling+0x10a>
    if (status == HAL_OK)
3418cac8:	bf00      	nop
  }

  return status;
3418caca:	7ffb      	ldrb	r3, [r7, #31]
}
3418cacc:	4618      	mov	r0, r3
3418cace:	3720      	adds	r7, #32
3418cad0:	46bd      	mov	sp, r7
3418cad2:	bd80      	pop	{r7, pc}

3418cad4 <HAL_XSPI_MemoryMapped>:
  * @param  pCfg   : Pointer to structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_MemoryMapped(XSPI_HandleTypeDef *hxspi, XSPI_MemoryMappedTypeDef *const pCfg)
{
3418cad4:	b580      	push	{r7, lr}
3418cad6:	b086      	sub	sp, #24
3418cad8:	af02      	add	r7, sp, #8
3418cada:	6078      	str	r0, [r7, #4]
3418cadc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
3418cade:	f7f4 fe97 	bl	34181810 <HAL_GetTick>
3418cae2:	60b8      	str	r0, [r7, #8]
  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_XSPI_TIMEOUT_ACTIVATION(pCfg->TimeOutActivation));
  assert_param(IS_XSPI_NO_PREFETCH_DATA(pCfg->NoPrefetchData));

  /* Check the state */
  if (hxspi->State == HAL_XSPI_STATE_CMD_CFG)
3418cae4:	687b      	ldr	r3, [r7, #4]
3418cae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418cae8:	2b04      	cmp	r3, #4
3418caea:	d155      	bne.n	3418cb98 <HAL_XSPI_MemoryMapped+0xc4>
  {
    /* Wait till busy flag is reset */
    status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418caec:	687b      	ldr	r3, [r7, #4]
3418caee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418caf0:	9300      	str	r3, [sp, #0]
3418caf2:	68bb      	ldr	r3, [r7, #8]
3418caf4:	2200      	movs	r2, #0
3418caf6:	2120      	movs	r1, #32
3418caf8:	6878      	ldr	r0, [r7, #4]
3418cafa:	f000 fa19 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418cafe:	4603      	mov	r3, r0
3418cb00:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
3418cb02:	7bfb      	ldrb	r3, [r7, #15]
3418cb04:	2b00      	cmp	r3, #0
3418cb06:	d14c      	bne.n	3418cba2 <HAL_XSPI_MemoryMapped+0xce>
    {
      hxspi->State = HAL_XSPI_STATE_BUSY_MEM_MAPPED;
3418cb08:	687b      	ldr	r3, [r7, #4]
3418cb0a:	2288      	movs	r2, #136	@ 0x88
3418cb0c:	659a      	str	r2, [r3, #88]	@ 0x58

      if (pCfg->NoPrefetchData == HAL_XSPI_AUTOMATIC_PREFETCH_DISABLE)
3418cb0e:	683b      	ldr	r3, [r7, #0]
3418cb10:	689b      	ldr	r3, [r3, #8]
3418cb12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3418cb16:	d10b      	bne.n	3418cb30 <HAL_XSPI_MemoryMapped+0x5c>
      {
        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, XSPI_CR_NOPREF, pCfg->NoPrefetchData);
3418cb18:	687b      	ldr	r3, [r7, #4]
3418cb1a:	681b      	ldr	r3, [r3, #0]
3418cb1c:	681b      	ldr	r3, [r3, #0]
3418cb1e:	f023 7100 	bic.w	r1, r3, #33554432	@ 0x2000000
3418cb22:	683b      	ldr	r3, [r7, #0]
3418cb24:	689a      	ldr	r2, [r3, #8]
3418cb26:	687b      	ldr	r3, [r7, #4]
3418cb28:	681b      	ldr	r3, [r3, #0]
3418cb2a:	430a      	orrs	r2, r1
3418cb2c:	601a      	str	r2, [r3, #0]
3418cb2e:	e00d      	b.n	3418cb4c <HAL_XSPI_MemoryMapped+0x78>
      else
      {
        assert_param(IS_XSPI_NO_PREFETCH_AXI(pCfg->NoPrefetchAXI));

        /* Configure register */
        MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_NOPREF | XSPI_CR_NOPREF_AXI),
3418cb30:	687b      	ldr	r3, [r7, #4]
3418cb32:	681b      	ldr	r3, [r3, #0]
3418cb34:	681b      	ldr	r3, [r3, #0]
3418cb36:	f023 61c0 	bic.w	r1, r3, #100663296	@ 0x6000000
3418cb3a:	683b      	ldr	r3, [r7, #0]
3418cb3c:	689a      	ldr	r2, [r3, #8]
3418cb3e:	683b      	ldr	r3, [r7, #0]
3418cb40:	68db      	ldr	r3, [r3, #12]
3418cb42:	431a      	orrs	r2, r3
3418cb44:	687b      	ldr	r3, [r7, #4]
3418cb46:	681b      	ldr	r3, [r3, #0]
3418cb48:	430a      	orrs	r2, r1
3418cb4a:	601a      	str	r2, [r3, #0]
                   (pCfg->NoPrefetchData | pCfg->NoPrefetchAXI));
      }
      if (pCfg->TimeOutActivation == HAL_XSPI_TIMEOUT_COUNTER_ENABLE)
3418cb4c:	683b      	ldr	r3, [r7, #0]
3418cb4e:	681b      	ldr	r3, [r3, #0]
3418cb50:	2b08      	cmp	r3, #8
3418cb52:	d111      	bne.n	3418cb78 <HAL_XSPI_MemoryMapped+0xa4>
      {
        assert_param(IS_XSPI_TIMEOUT_PERIOD(pCfg->TimeoutPeriodClock));

        /* Configure register */
        WRITE_REG(hxspi->Instance->LPTR, pCfg->TimeoutPeriodClock);
3418cb54:	687b      	ldr	r3, [r7, #4]
3418cb56:	681b      	ldr	r3, [r3, #0]
3418cb58:	683a      	ldr	r2, [r7, #0]
3418cb5a:	6852      	ldr	r2, [r2, #4]
3418cb5c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TO);
3418cb60:	687b      	ldr	r3, [r7, #4]
3418cb62:	681b      	ldr	r3, [r3, #0]
3418cb64:	2210      	movs	r2, #16
3418cb66:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        HAL_XSPI_ENABLE_IT(hxspi, HAL_XSPI_IT_TO);
3418cb68:	687b      	ldr	r3, [r7, #4]
3418cb6a:	681b      	ldr	r3, [r3, #0]
3418cb6c:	681a      	ldr	r2, [r3, #0]
3418cb6e:	687b      	ldr	r3, [r7, #4]
3418cb70:	681b      	ldr	r3, [r3, #0]
3418cb72:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
3418cb76:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hxspi->Instance->CR, (XSPI_CR_TCEN | XSPI_CR_FMODE),
3418cb78:	687b      	ldr	r3, [r7, #4]
3418cb7a:	681b      	ldr	r3, [r3, #0]
3418cb7c:	681b      	ldr	r3, [r3, #0]
3418cb7e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
3418cb82:	f023 0308 	bic.w	r3, r3, #8
3418cb86:	683a      	ldr	r2, [r7, #0]
3418cb88:	6812      	ldr	r2, [r2, #0]
3418cb8a:	431a      	orrs	r2, r3
3418cb8c:	687b      	ldr	r3, [r7, #4]
3418cb8e:	681b      	ldr	r3, [r3, #0]
3418cb90:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
3418cb94:	601a      	str	r2, [r3, #0]
3418cb96:	e004      	b.n	3418cba2 <HAL_XSPI_MemoryMapped+0xce>
                 (pCfg->TimeOutActivation | XSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
3418cb98:	2301      	movs	r3, #1
3418cb9a:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418cb9c:	687b      	ldr	r3, [r7, #4]
3418cb9e:	2210      	movs	r2, #16
3418cba0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418cba2:	7bfb      	ldrb	r3, [r7, #15]
}
3418cba4:	4618      	mov	r0, r3
3418cba6:	3710      	adds	r7, #16
3418cba8:	46bd      	mov	sp, r7
3418cbaa:	bd80      	pop	{r7, pc}

3418cbac <HAL_XSPI_Abort>:
  * @brief  Abort the current operation, return to the indirect mode.
  * @param  hxspi : XSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPI_Abort(XSPI_HandleTypeDef *hxspi)
{
3418cbac:	b580      	push	{r7, lr}
3418cbae:	b086      	sub	sp, #24
3418cbb0:	af02      	add	r7, sp, #8
3418cbb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418cbb4:	2300      	movs	r3, #0
3418cbb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
3418cbb8:	f7f4 fe2a 	bl	34181810 <HAL_GetTick>
3418cbbc:	60b8      	str	r0, [r7, #8]

  /* Check if the state is not in reset state */
  if (hxspi->State != HAL_XSPI_STATE_RESET)
3418cbbe:	687b      	ldr	r3, [r7, #4]
3418cbc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
3418cbc2:	2b00      	cmp	r3, #0
3418cbc4:	d06f      	beq.n	3418cca6 <HAL_XSPI_Abort+0xfa>
  {
    /* Check if the DMA is enabled */
    if ((hxspi->Instance->CR & XSPI_CR_DMAEN) != 0U)
3418cbc6:	687b      	ldr	r3, [r7, #4]
3418cbc8:	681b      	ldr	r3, [r3, #0]
3418cbca:	681b      	ldr	r3, [r3, #0]
3418cbcc:	f003 0304 	and.w	r3, r3, #4
3418cbd0:	2b00      	cmp	r3, #0
3418cbd2:	d021      	beq.n	3418cc18 <HAL_XSPI_Abort+0x6c>
    {
      /* Disable the DMA transfer on the XSPI side */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_DMAEN);
3418cbd4:	687b      	ldr	r3, [r7, #4]
3418cbd6:	681b      	ldr	r3, [r3, #0]
3418cbd8:	681a      	ldr	r2, [r3, #0]
3418cbda:	687b      	ldr	r3, [r7, #4]
3418cbdc:	681b      	ldr	r3, [r3, #0]
3418cbde:	f022 0204 	bic.w	r2, r2, #4
3418cbe2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transmit on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmatx);
3418cbe4:	687b      	ldr	r3, [r7, #4]
3418cbe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
3418cbe8:	4618      	mov	r0, r3
3418cbea:	f7f4 ff37 	bl	34181a5c <HAL_DMA_Abort>
3418cbee:	4603      	mov	r3, r0
3418cbf0:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418cbf2:	7bfb      	ldrb	r3, [r7, #15]
3418cbf4:	2b00      	cmp	r3, #0
3418cbf6:	d002      	beq.n	3418cbfe <HAL_XSPI_Abort+0x52>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418cbf8:	687b      	ldr	r3, [r7, #4]
3418cbfa:	2204      	movs	r2, #4
3418cbfc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Disable the DMA receive on the DMA side */
      status = HAL_DMA_Abort(hxspi->hdmarx);
3418cbfe:	687b      	ldr	r3, [r7, #4]
3418cc00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3418cc02:	4618      	mov	r0, r3
3418cc04:	f7f4 ff2a 	bl	34181a5c <HAL_DMA_Abort>
3418cc08:	4603      	mov	r3, r0
3418cc0a:	73fb      	strb	r3, [r7, #15]
      if (status != HAL_OK)
3418cc0c:	7bfb      	ldrb	r3, [r7, #15]
3418cc0e:	2b00      	cmp	r3, #0
3418cc10:	d002      	beq.n	3418cc18 <HAL_XSPI_Abort+0x6c>
      {
        hxspi->ErrorCode = HAL_XSPI_ERROR_DMA;
3418cc12:	687b      	ldr	r3, [r7, #4]
3418cc14:	2204      	movs	r2, #4
3418cc16:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    if (HAL_XSPI_GET_FLAG(hxspi, HAL_XSPI_FLAG_BUSY) != RESET)
3418cc18:	687b      	ldr	r3, [r7, #4]
3418cc1a:	681b      	ldr	r3, [r3, #0]
3418cc1c:	6a1b      	ldr	r3, [r3, #32]
3418cc1e:	f003 0320 	and.w	r3, r3, #32
3418cc22:	2b00      	cmp	r3, #0
3418cc24:	d033      	beq.n	3418cc8e <HAL_XSPI_Abort+0xe2>
    {
      /* Perform an abort of the XSPI */
      SET_BIT(hxspi->Instance->CR, XSPI_CR_ABORT);
3418cc26:	687b      	ldr	r3, [r7, #4]
3418cc28:	681b      	ldr	r3, [r3, #0]
3418cc2a:	681a      	ldr	r2, [r3, #0]
3418cc2c:	687b      	ldr	r3, [r7, #4]
3418cc2e:	681b      	ldr	r3, [r3, #0]
3418cc30:	f042 0202 	orr.w	r2, r2, #2
3418cc34:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_TC, SET, tickstart, hxspi->Timeout);
3418cc36:	687b      	ldr	r3, [r7, #4]
3418cc38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418cc3a:	9300      	str	r3, [sp, #0]
3418cc3c:	68bb      	ldr	r3, [r7, #8]
3418cc3e:	2201      	movs	r2, #1
3418cc40:	2102      	movs	r1, #2
3418cc42:	6878      	ldr	r0, [r7, #4]
3418cc44:	f000 f974 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418cc48:	4603      	mov	r3, r0
3418cc4a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
3418cc4c:	7bfb      	ldrb	r3, [r7, #15]
3418cc4e:	2b00      	cmp	r3, #0
3418cc50:	d12e      	bne.n	3418ccb0 <HAL_XSPI_Abort+0x104>
      {
        /* Clear transfer complete flag */
        HAL_XSPI_CLEAR_FLAG(hxspi, HAL_XSPI_FLAG_TC);
3418cc52:	687b      	ldr	r3, [r7, #4]
3418cc54:	681b      	ldr	r3, [r3, #0]
3418cc56:	2202      	movs	r2, #2
3418cc58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = XSPI_WaitFlagStateUntilTimeout(hxspi, HAL_XSPI_FLAG_BUSY, RESET, tickstart, hxspi->Timeout);
3418cc5a:	687b      	ldr	r3, [r7, #4]
3418cc5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
3418cc5e:	9300      	str	r3, [sp, #0]
3418cc60:	68bb      	ldr	r3, [r7, #8]
3418cc62:	2200      	movs	r2, #0
3418cc64:	2120      	movs	r1, #32
3418cc66:	6878      	ldr	r0, [r7, #4]
3418cc68:	f000 f962 	bl	3418cf30 <XSPI_WaitFlagStateUntilTimeout>
3418cc6c:	4603      	mov	r3, r0
3418cc6e:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
3418cc70:	7bfb      	ldrb	r3, [r7, #15]
3418cc72:	2b00      	cmp	r3, #0
3418cc74:	d11c      	bne.n	3418ccb0 <HAL_XSPI_Abort+0x104>
        {
          /* Return to indirect mode */
          CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418cc76:	687b      	ldr	r3, [r7, #4]
3418cc78:	681b      	ldr	r3, [r3, #0]
3418cc7a:	681a      	ldr	r2, [r3, #0]
3418cc7c:	687b      	ldr	r3, [r7, #4]
3418cc7e:	681b      	ldr	r3, [r3, #0]
3418cc80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418cc84:	601a      	str	r2, [r3, #0]

          hxspi->State = HAL_XSPI_STATE_READY;
3418cc86:	687b      	ldr	r3, [r7, #4]
3418cc88:	2202      	movs	r2, #2
3418cc8a:	659a      	str	r2, [r3, #88]	@ 0x58
3418cc8c:	e010      	b.n	3418ccb0 <HAL_XSPI_Abort+0x104>
      }
    }
    else
    {
      /* Return to indirect mode */
      CLEAR_BIT(hxspi->Instance->CR, XSPI_CR_FMODE);
3418cc8e:	687b      	ldr	r3, [r7, #4]
3418cc90:	681b      	ldr	r3, [r3, #0]
3418cc92:	681a      	ldr	r2, [r3, #0]
3418cc94:	687b      	ldr	r3, [r7, #4]
3418cc96:	681b      	ldr	r3, [r3, #0]
3418cc98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418cc9c:	601a      	str	r2, [r3, #0]

      hxspi->State = HAL_XSPI_STATE_READY;
3418cc9e:	687b      	ldr	r3, [r7, #4]
3418cca0:	2202      	movs	r2, #2
3418cca2:	659a      	str	r2, [r3, #88]	@ 0x58
3418cca4:	e004      	b.n	3418ccb0 <HAL_XSPI_Abort+0x104>
    }
  }
  else
  {
    status = HAL_ERROR;
3418cca6:	2301      	movs	r3, #1
3418cca8:	73fb      	strb	r3, [r7, #15]
    hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_SEQUENCE;
3418ccaa:	687b      	ldr	r3, [r7, #4]
3418ccac:	2210      	movs	r2, #16
3418ccae:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  return status;
3418ccb0:	7bfb      	ldrb	r3, [r7, #15]
}
3418ccb2:	4618      	mov	r0, r3
3418ccb4:	3710      	adds	r7, #16
3418ccb6:	46bd      	mov	sp, r7
3418ccb8:	bd80      	pop	{r7, pc}

3418ccba <HAL_XSPI_SetTimeout>:
  * @param  hxspi   : XSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval HAL state
  */
HAL_StatusTypeDef HAL_XSPI_SetTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Timeout)
{
3418ccba:	b480      	push	{r7}
3418ccbc:	b083      	sub	sp, #12
3418ccbe:	af00      	add	r7, sp, #0
3418ccc0:	6078      	str	r0, [r7, #4]
3418ccc2:	6039      	str	r1, [r7, #0]
  hxspi->Timeout = Timeout;
3418ccc4:	687b      	ldr	r3, [r7, #4]
3418ccc6:	683a      	ldr	r2, [r7, #0]
3418ccc8:	661a      	str	r2, [r3, #96]	@ 0x60
  return HAL_OK;
3418ccca:	2300      	movs	r3, #0
}
3418cccc:	4618      	mov	r0, r3
3418ccce:	370c      	adds	r7, #12
3418ccd0:	46bd      	mov	sp, r7
3418ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
3418ccd6:	4770      	bx	lr

3418ccd8 <HAL_XSPIM_Config>:
  * @param  pCfg     : Pointer to Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_XSPIM_Config(XSPI_HandleTypeDef *const hxspi, XSPIM_CfgTypeDef *const pCfg, uint32_t Timeout)
{
3418ccd8:	b580      	push	{r7, lr}
3418ccda:	b08e      	sub	sp, #56	@ 0x38
3418ccdc:	af00      	add	r7, sp, #0
3418ccde:	60f8      	str	r0, [r7, #12]
3418cce0:	60b9      	str	r1, [r7, #8]
3418cce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
3418cce4:	2300      	movs	r3, #0
3418cce6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  uint8_t index;
  uint8_t xspi_enabled = 0U;
3418ccea:	2300      	movs	r3, #0
3418ccec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

  XSPIM_CfgTypeDef IOM_cfg[XSPI_NB_INSTANCE] = {0};
3418ccf0:	f107 0310 	add.w	r3, r7, #16
3418ccf4:	2224      	movs	r2, #36	@ 0x24
3418ccf6:	2100      	movs	r1, #0
3418ccf8:	4618      	mov	r0, r3
3418ccfa:	f003 fadd 	bl	341902b8 <memset>
  assert_param(IS_XSPIM_NCS_OVR(pCfg->nCSOverride));
  assert_param(IS_XSPIM_IO_PORT(pCfg->IOPort));
  assert_param(IS_XSPIM_REQ2ACKTIME(pCfg->Req2AckTime));

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418ccfe:	2300      	movs	r3, #0
3418cd00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418cd04:	e014      	b.n	3418cd30 <HAL_XSPIM_Config+0x58>
  {
    XSPIM_GetConfig(index + 1U, &(IOM_cfg[index]));
3418cd06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418cd0a:	3301      	adds	r3, #1
3418cd0c:	b2d8      	uxtb	r0, r3
3418cd0e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418cd12:	f107 0110 	add.w	r1, r7, #16
3418cd16:	4613      	mov	r3, r2
3418cd18:	005b      	lsls	r3, r3, #1
3418cd1a:	4413      	add	r3, r2
3418cd1c:	009b      	lsls	r3, r3, #2
3418cd1e:	440b      	add	r3, r1
3418cd20:	4619      	mov	r1, r3
3418cd22:	f000 fad5 	bl	3418d2d0 <XSPIM_GetConfig>
  for (index = 0U; index < XSPI_NB_INSTANCE; index++)
3418cd26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418cd2a:	3301      	adds	r3, #1
3418cd2c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418cd30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418cd34:	2b02      	cmp	r3, #2
3418cd36:	d9e6      	bls.n	3418cd06 <HAL_XSPIM_Config+0x2e>
  }

  /********** Disable all XSPI to configure XSPI IO Manager **********/
  if (__HAL_RCC_XSPI1_IS_CLK_ENABLED() != 0U)
3418cd38:	2020      	movs	r0, #32
3418cd3a:	f7ff fb71 	bl	3418c420 <LL_AHB5_GRP1_IsEnabledClock>
3418cd3e:	4603      	mov	r3, r0
3418cd40:	2b00      	cmp	r3, #0
3418cd42:	d011      	beq.n	3418cd68 <HAL_XSPIM_Config+0x90>
  {
    if ((XSPI1->CR & XSPI_CR_EN) != 0U)
3418cd44:	4b76      	ldr	r3, [pc, #472]	@ (3418cf20 <HAL_XSPIM_Config+0x248>)
3418cd46:	681b      	ldr	r3, [r3, #0]
3418cd48:	f003 0301 	and.w	r3, r3, #1
3418cd4c:	2b00      	cmp	r3, #0
3418cd4e:	d00b      	beq.n	3418cd68 <HAL_XSPIM_Config+0x90>
    {
      CLEAR_BIT(XSPI1->CR, XSPI_CR_EN);
3418cd50:	4b73      	ldr	r3, [pc, #460]	@ (3418cf20 <HAL_XSPIM_Config+0x248>)
3418cd52:	681b      	ldr	r3, [r3, #0]
3418cd54:	4a72      	ldr	r2, [pc, #456]	@ (3418cf20 <HAL_XSPIM_Config+0x248>)
3418cd56:	f023 0301 	bic.w	r3, r3, #1
3418cd5a:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x1U;
3418cd5c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418cd60:	f043 0301 	orr.w	r3, r3, #1
3418cd64:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI2_IS_CLK_ENABLED() != 0U)
3418cd68:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
3418cd6c:	f7ff fb58 	bl	3418c420 <LL_AHB5_GRP1_IsEnabledClock>
3418cd70:	4603      	mov	r3, r0
3418cd72:	2b00      	cmp	r3, #0
3418cd74:	d011      	beq.n	3418cd9a <HAL_XSPIM_Config+0xc2>
  {
    if ((XSPI2->CR & XSPI_CR_EN) != 0U)
3418cd76:	4b6b      	ldr	r3, [pc, #428]	@ (3418cf24 <HAL_XSPIM_Config+0x24c>)
3418cd78:	681b      	ldr	r3, [r3, #0]
3418cd7a:	f003 0301 	and.w	r3, r3, #1
3418cd7e:	2b00      	cmp	r3, #0
3418cd80:	d00b      	beq.n	3418cd9a <HAL_XSPIM_Config+0xc2>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418cd82:	4b68      	ldr	r3, [pc, #416]	@ (3418cf24 <HAL_XSPIM_Config+0x24c>)
3418cd84:	681b      	ldr	r3, [r3, #0]
3418cd86:	4a67      	ldr	r2, [pc, #412]	@ (3418cf24 <HAL_XSPIM_Config+0x24c>)
3418cd88:	f023 0301 	bic.w	r3, r3, #1
3418cd8c:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x2U;
3418cd8e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418cd92:	f043 0302 	orr.w	r3, r3, #2
3418cd96:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }
  if (__HAL_RCC_XSPI3_IS_CLK_ENABLED() != 0U)
3418cd9a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
3418cd9e:	f7ff fb3f 	bl	3418c420 <LL_AHB5_GRP1_IsEnabledClock>
3418cda2:	4603      	mov	r3, r0
3418cda4:	2b00      	cmp	r3, #0
3418cda6:	d011      	beq.n	3418cdcc <HAL_XSPIM_Config+0xf4>
  {
    if ((XSPI3->CR & XSPI_CR_EN) != 0U)
3418cda8:	4b5f      	ldr	r3, [pc, #380]	@ (3418cf28 <HAL_XSPIM_Config+0x250>)
3418cdaa:	681b      	ldr	r3, [r3, #0]
3418cdac:	f003 0301 	and.w	r3, r3, #1
3418cdb0:	2b00      	cmp	r3, #0
3418cdb2:	d00b      	beq.n	3418cdcc <HAL_XSPIM_Config+0xf4>
    {
      CLEAR_BIT(XSPI2->CR, XSPI_CR_EN);
3418cdb4:	4b5b      	ldr	r3, [pc, #364]	@ (3418cf24 <HAL_XSPIM_Config+0x24c>)
3418cdb6:	681b      	ldr	r3, [r3, #0]
3418cdb8:	4a5a      	ldr	r2, [pc, #360]	@ (3418cf24 <HAL_XSPIM_Config+0x24c>)
3418cdba:	f023 0301 	bic.w	r3, r3, #1
3418cdbe:	6013      	str	r3, [r2, #0]
      xspi_enabled |= 0x4U;
3418cdc0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418cdc4:	f043 0304 	orr.w	r3, r3, #4
3418cdc8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }
  }

  /***************** Deactivation of previous configuration *****************/
  CLEAR_REG(XSPIM->CR);
3418cdcc:	4b57      	ldr	r3, [pc, #348]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418cdce:	2200      	movs	r2, #0
3418cdd0:	601a      	str	r2, [r3, #0]

  /******************** Activation of new configuration *********************/
  MODIFY_REG(XSPIM->CR, XSPIM_CR_REQ2ACK_TIME, ((pCfg->Req2AckTime - 1U) << XSPIM_CR_REQ2ACK_TIME_Pos));
3418cdd2:	4b56      	ldr	r3, [pc, #344]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418cdd4:	681b      	ldr	r3, [r3, #0]
3418cdd6:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
3418cdda:	68bb      	ldr	r3, [r7, #8]
3418cddc:	689b      	ldr	r3, [r3, #8]
3418cdde:	3b01      	subs	r3, #1
3418cde0:	041b      	lsls	r3, r3, #16
3418cde2:	4952      	ldr	r1, [pc, #328]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418cde4:	4313      	orrs	r3, r2
3418cde6:	600b      	str	r3, [r1, #0]

  if (hxspi->Instance == XSPI1)
3418cde8:	68fb      	ldr	r3, [r7, #12]
3418cdea:	681b      	ldr	r3, [r3, #0]
3418cdec:	4a4c      	ldr	r2, [pc, #304]	@ (3418cf20 <HAL_XSPIM_Config+0x248>)
3418cdee:	4293      	cmp	r3, r2
3418cdf0:	d110      	bne.n	3418ce14 <HAL_XSPIM_Config+0x13c>
  {
    IOM_cfg[0].IOPort = pCfg->IOPort ;
3418cdf2:	68bb      	ldr	r3, [r7, #8]
3418cdf4:	685b      	ldr	r3, [r3, #4]
3418cdf6:	617b      	str	r3, [r7, #20]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418cdf8:	68bb      	ldr	r3, [r7, #8]
3418cdfa:	681b      	ldr	r3, [r3, #0]
3418cdfc:	2b00      	cmp	r3, #0
3418cdfe:	d03e      	beq.n	3418ce7e <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O1 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418ce00:	4b4a      	ldr	r3, [pc, #296]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418ce02:	681b      	ldr	r3, [r3, #0]
3418ce04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
3418ce08:	68bb      	ldr	r3, [r7, #8]
3418ce0a:	681b      	ldr	r3, [r3, #0]
3418ce0c:	4947      	ldr	r1, [pc, #284]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418ce0e:	4313      	orrs	r3, r2
3418ce10:	600b      	str	r3, [r1, #0]
3418ce12:	e034      	b.n	3418ce7e <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI2)
3418ce14:	68fb      	ldr	r3, [r7, #12]
3418ce16:	681b      	ldr	r3, [r3, #0]
3418ce18:	4a42      	ldr	r2, [pc, #264]	@ (3418cf24 <HAL_XSPIM_Config+0x24c>)
3418ce1a:	4293      	cmp	r3, r2
3418ce1c:	d110      	bne.n	3418ce40 <HAL_XSPIM_Config+0x168>
  {
    IOM_cfg[1].IOPort = pCfg->IOPort ;
3418ce1e:	68bb      	ldr	r3, [r7, #8]
3418ce20:	685b      	ldr	r3, [r3, #4]
3418ce22:	623b      	str	r3, [r7, #32]
    if (pCfg->nCSOverride != HAL_XSPI_CSSEL_OVR_DISABLED)
3418ce24:	68bb      	ldr	r3, [r7, #8]
3418ce26:	681b      	ldr	r3, [r3, #0]
3418ce28:	2b00      	cmp	r3, #0
3418ce2a:	d028      	beq.n	3418ce7e <HAL_XSPIM_Config+0x1a6>
    {
      MODIFY_REG(XSPIM->CR, (XSPIM_CR_CSSEL_OVR_O2 | XSPIM_CR_CSSEL_OVR_EN), (pCfg->nCSOverride));
3418ce2c:	4b3f      	ldr	r3, [pc, #252]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418ce2e:	681b      	ldr	r3, [r3, #0]
3418ce30:	f023 0250 	bic.w	r2, r3, #80	@ 0x50
3418ce34:	68bb      	ldr	r3, [r7, #8]
3418ce36:	681b      	ldr	r3, [r3, #0]
3418ce38:	493c      	ldr	r1, [pc, #240]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418ce3a:	4313      	orrs	r3, r2
3418ce3c:	600b      	str	r3, [r1, #0]
3418ce3e:	e01e      	b.n	3418ce7e <HAL_XSPIM_Config+0x1a6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (hxspi->Instance == XSPI3)
3418ce40:	68fb      	ldr	r3, [r7, #12]
3418ce42:	681b      	ldr	r3, [r3, #0]
3418ce44:	4a38      	ldr	r2, [pc, #224]	@ (3418cf28 <HAL_XSPIM_Config+0x250>)
3418ce46:	4293      	cmp	r3, r2
3418ce48:	d111      	bne.n	3418ce6e <HAL_XSPIM_Config+0x196>
  {
    if (pCfg->IOPort == HAL_XSPIM_IOPORT_1)
3418ce4a:	68bb      	ldr	r3, [r7, #8]
3418ce4c:	685b      	ldr	r3, [r3, #4]
3418ce4e:	2b00      	cmp	r3, #0
3418ce50:	d104      	bne.n	3418ce5c <HAL_XSPIM_Config+0x184>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_2 ;
3418ce52:	2301      	movs	r3, #1
3418ce54:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_2 ;
3418ce56:	2301      	movs	r3, #1
3418ce58:	623b      	str	r3, [r7, #32]
3418ce5a:	e010      	b.n	3418ce7e <HAL_XSPIM_Config+0x1a6>
    }
    else if (pCfg->IOPort == HAL_XSPIM_IOPORT_2)
3418ce5c:	68bb      	ldr	r3, [r7, #8]
3418ce5e:	685b      	ldr	r3, [r3, #4]
3418ce60:	2b01      	cmp	r3, #1
3418ce62:	d10c      	bne.n	3418ce7e <HAL_XSPIM_Config+0x1a6>
    {
      IOM_cfg[0].IOPort = HAL_XSPIM_IOPORT_1 ;
3418ce64:	2300      	movs	r3, #0
3418ce66:	617b      	str	r3, [r7, #20]
      IOM_cfg[1].IOPort = HAL_XSPIM_IOPORT_1 ;
3418ce68:	2300      	movs	r3, #0
3418ce6a:	623b      	str	r3, [r7, #32]
3418ce6c:	e007      	b.n	3418ce7e <HAL_XSPIM_Config+0x1a6>
      /* Nothing to do */
    }
  }
  else
  {
    hxspi->ErrorCode |= HAL_XSPI_ERROR_INVALID_PARAM;
3418ce6e:	68fb      	ldr	r3, [r7, #12]
3418ce70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418ce72:	f043 0208 	orr.w	r2, r3, #8
3418ce76:	68fb      	ldr	r3, [r7, #12]
3418ce78:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
3418ce7a:	2301      	movs	r3, #1
3418ce7c:	e04c      	b.n	3418cf18 <HAL_XSPIM_Config+0x240>
  }

  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418ce7e:	2300      	movs	r3, #0
3418ce80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418ce84:	e02a      	b.n	3418cedc <HAL_XSPIM_Config+0x204>
  {
    if (IOM_cfg[index].IOPort == IOM_cfg[index + 1U].IOPort)
3418ce86:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
3418ce8a:	4613      	mov	r3, r2
3418ce8c:	005b      	lsls	r3, r3, #1
3418ce8e:	4413      	add	r3, r2
3418ce90:	009b      	lsls	r3, r3, #2
3418ce92:	3338      	adds	r3, #56	@ 0x38
3418ce94:	443b      	add	r3, r7
3418ce96:	3b24      	subs	r3, #36	@ 0x24
3418ce98:	6819      	ldr	r1, [r3, #0]
3418ce9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418ce9e:	1c5a      	adds	r2, r3, #1
3418cea0:	4613      	mov	r3, r2
3418cea2:	005b      	lsls	r3, r3, #1
3418cea4:	4413      	add	r3, r2
3418cea6:	009b      	lsls	r3, r3, #2
3418cea8:	3338      	adds	r3, #56	@ 0x38
3418ceaa:	443b      	add	r3, r7
3418ceac:	3b24      	subs	r3, #36	@ 0x24
3418ceae:	681b      	ldr	r3, [r3, #0]
3418ceb0:	4299      	cmp	r1, r3
3418ceb2:	d105      	bne.n	3418cec0 <HAL_XSPIM_Config+0x1e8>
    {
      /*Mux*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MUXEN);
3418ceb4:	4b1d      	ldr	r3, [pc, #116]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418ceb6:	681b      	ldr	r3, [r3, #0]
3418ceb8:	4a1c      	ldr	r2, [pc, #112]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418ceba:	f043 0301 	orr.w	r3, r3, #1
3418cebe:	6013      	str	r3, [r2, #0]
    }
    else
    {
      /* Nothing to do */
    }
    if (IOM_cfg[0].IOPort == HAL_XSPIM_IOPORT_2)
3418cec0:	697b      	ldr	r3, [r7, #20]
3418cec2:	2b01      	cmp	r3, #1
3418cec4:	d105      	bne.n	3418ced2 <HAL_XSPIM_Config+0x1fa>
    {
      /*Mode*/
      SET_BIT(XSPIM->CR, XSPIM_CR_MODE);
3418cec6:	4b19      	ldr	r3, [pc, #100]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418cec8:	681b      	ldr	r3, [r3, #0]
3418ceca:	4a18      	ldr	r2, [pc, #96]	@ (3418cf2c <HAL_XSPIM_Config+0x254>)
3418cecc:	f043 0302 	orr.w	r3, r3, #2
3418ced0:	6013      	str	r3, [r2, #0]
  for (index = 0U; index < (XSPI_NB_INSTANCE - 2U); index++)
3418ced2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418ced6:	3301      	adds	r3, #1
3418ced8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
3418cedc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
3418cee0:	2b00      	cmp	r3, #0
3418cee2:	d0d0      	beq.n	3418ce86 <HAL_XSPIM_Config+0x1ae>
      /* Nothing to do */
    }
  }

  /******* Re-enable both XSPI after configure XSPI IO Manager ********/
  if ((xspi_enabled & 0x1U) != 0U)
3418cee4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418cee8:	f003 0301 	and.w	r3, r3, #1
3418ceec:	2b00      	cmp	r3, #0
3418ceee:	d005      	beq.n	3418cefc <HAL_XSPIM_Config+0x224>
  {
    SET_BIT(XSPI1->CR, XSPI_CR_EN);
3418cef0:	4b0b      	ldr	r3, [pc, #44]	@ (3418cf20 <HAL_XSPIM_Config+0x248>)
3418cef2:	681b      	ldr	r3, [r3, #0]
3418cef4:	4a0a      	ldr	r2, [pc, #40]	@ (3418cf20 <HAL_XSPIM_Config+0x248>)
3418cef6:	f043 0301 	orr.w	r3, r3, #1
3418cefa:	6013      	str	r3, [r2, #0]
  }
  if ((xspi_enabled & 0x2U) != 0U)
3418cefc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
3418cf00:	f003 0302 	and.w	r3, r3, #2
3418cf04:	2b00      	cmp	r3, #0
3418cf06:	d005      	beq.n	3418cf14 <HAL_XSPIM_Config+0x23c>
  {
    SET_BIT(XSPI2->CR, XSPI_CR_EN);
3418cf08:	4b06      	ldr	r3, [pc, #24]	@ (3418cf24 <HAL_XSPIM_Config+0x24c>)
3418cf0a:	681b      	ldr	r3, [r3, #0]
3418cf0c:	4a05      	ldr	r2, [pc, #20]	@ (3418cf24 <HAL_XSPIM_Config+0x24c>)
3418cf0e:	f043 0301 	orr.w	r3, r3, #1
3418cf12:	6013      	str	r3, [r2, #0]
  }

  return status;
3418cf14:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
}
3418cf18:	4618      	mov	r0, r3
3418cf1a:	3738      	adds	r7, #56	@ 0x38
3418cf1c:	46bd      	mov	sp, r7
3418cf1e:	bd80      	pop	{r7, pc}
3418cf20:	58025000 	.word	0x58025000
3418cf24:	5802a000 	.word	0x5802a000
3418cf28:	5802d000 	.word	0x5802d000
3418cf2c:	5802b400 	.word	0x5802b400

3418cf30 <XSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_WaitFlagStateUntilTimeout(XSPI_HandleTypeDef *hxspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
3418cf30:	b580      	push	{r7, lr}
3418cf32:	b084      	sub	sp, #16
3418cf34:	af00      	add	r7, sp, #0
3418cf36:	60f8      	str	r0, [r7, #12]
3418cf38:	60b9      	str	r1, [r7, #8]
3418cf3a:	603b      	str	r3, [r7, #0]
3418cf3c:	4613      	mov	r3, r2
3418cf3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418cf40:	e019      	b.n	3418cf76 <XSPI_WaitFlagStateUntilTimeout+0x46>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3418cf42:	69bb      	ldr	r3, [r7, #24]
3418cf44:	f1b3 3fff 	cmp.w	r3, #4294967295
3418cf48:	d015      	beq.n	3418cf76 <XSPI_WaitFlagStateUntilTimeout+0x46>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418cf4a:	f7f4 fc61 	bl	34181810 <HAL_GetTick>
3418cf4e:	4602      	mov	r2, r0
3418cf50:	683b      	ldr	r3, [r7, #0]
3418cf52:	1ad3      	subs	r3, r2, r3
3418cf54:	69ba      	ldr	r2, [r7, #24]
3418cf56:	429a      	cmp	r2, r3
3418cf58:	d302      	bcc.n	3418cf60 <XSPI_WaitFlagStateUntilTimeout+0x30>
3418cf5a:	69bb      	ldr	r3, [r7, #24]
3418cf5c:	2b00      	cmp	r3, #0
3418cf5e:	d10a      	bne.n	3418cf76 <XSPI_WaitFlagStateUntilTimeout+0x46>
      {
        hxspi->State     = HAL_XSPI_STATE_READY;
3418cf60:	68fb      	ldr	r3, [r7, #12]
3418cf62:	2202      	movs	r2, #2
3418cf64:	659a      	str	r2, [r3, #88]	@ 0x58
        hxspi->ErrorCode |= HAL_XSPI_ERROR_TIMEOUT;
3418cf66:	68fb      	ldr	r3, [r7, #12]
3418cf68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
3418cf6a:	f043 0201 	orr.w	r2, r3, #1
3418cf6e:	68fb      	ldr	r3, [r7, #12]
3418cf70:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
3418cf72:	2303      	movs	r3, #3
3418cf74:	e00e      	b.n	3418cf94 <XSPI_WaitFlagStateUntilTimeout+0x64>
  while ((HAL_XSPI_GET_FLAG(hxspi, Flag)) != State)
3418cf76:	68fb      	ldr	r3, [r7, #12]
3418cf78:	681b      	ldr	r3, [r3, #0]
3418cf7a:	6a1a      	ldr	r2, [r3, #32]
3418cf7c:	68bb      	ldr	r3, [r7, #8]
3418cf7e:	4013      	ands	r3, r2
3418cf80:	2b00      	cmp	r3, #0
3418cf82:	bf14      	ite	ne
3418cf84:	2301      	movne	r3, #1
3418cf86:	2300      	moveq	r3, #0
3418cf88:	b2db      	uxtb	r3, r3
3418cf8a:	461a      	mov	r2, r3
3418cf8c:	79fb      	ldrb	r3, [r7, #7]
3418cf8e:	429a      	cmp	r2, r3
3418cf90:	d1d7      	bne.n	3418cf42 <XSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
3418cf92:	2300      	movs	r3, #0
}
3418cf94:	4618      	mov	r0, r3
3418cf96:	3710      	adds	r7, #16
3418cf98:	46bd      	mov	sp, r7
3418cf9a:	bd80      	pop	{r7, pc}

3418cf9c <XSPI_ConfigCmd>:
  * @param  hxspi : XSPI handle
  * @param  pCmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef XSPI_ConfigCmd(XSPI_HandleTypeDef *hxspi, XSPI_RegularCmdTypeDef *pCmd)
{
3418cf9c:	b480      	push	{r7}
3418cf9e:	b089      	sub	sp, #36	@ 0x24
3418cfa0:	af00      	add	r7, sp, #0
3418cfa2:	6078      	str	r0, [r7, #4]
3418cfa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
3418cfa6:	2300      	movs	r3, #0
3418cfa8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hxspi->Instance->CR, XSPI_CR_FMODE, 0U);
3418cfaa:	687b      	ldr	r3, [r7, #4]
3418cfac:	681b      	ldr	r3, [r3, #0]
3418cfae:	681a      	ldr	r2, [r3, #0]
3418cfb0:	687b      	ldr	r3, [r7, #4]
3418cfb2:	681b      	ldr	r3, [r3, #0]
3418cfb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
3418cfb8:	601a      	str	r2, [r3, #0]

  if (hxspi->Init.MemoryMode == HAL_XSPI_SINGLE_MEM)
3418cfba:	687b      	ldr	r3, [r7, #4]
3418cfbc:	689b      	ldr	r3, [r3, #8]
3418cfbe:	2b00      	cmp	r3, #0
3418cfc0:	d10a      	bne.n	3418cfd8 <XSPI_ConfigCmd+0x3c>
  {
    assert_param(IS_XSPI_IO_SELECT(pCmd->IOSelect));
    MODIFY_REG(hxspi->Instance->CR, XSPI_CR_MSEL, pCmd->IOSelect);
3418cfc2:	687b      	ldr	r3, [r7, #4]
3418cfc4:	681b      	ldr	r3, [r3, #0]
3418cfc6:	681b      	ldr	r3, [r3, #0]
3418cfc8:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
3418cfcc:	683b      	ldr	r3, [r7, #0]
3418cfce:	685a      	ldr	r2, [r3, #4]
3418cfd0:	687b      	ldr	r3, [r7, #4]
3418cfd2:	681b      	ldr	r3, [r3, #0]
3418cfd4:	430a      	orrs	r2, r1
3418cfd6:	601a      	str	r2, [r3, #0]
  }

  if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRITE_CFG)
3418cfd8:	683b      	ldr	r3, [r7, #0]
3418cfda:	681b      	ldr	r3, [r3, #0]
3418cfdc:	2b02      	cmp	r3, #2
3418cfde:	d114      	bne.n	3418d00a <XSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hxspi->Instance->WCCR);
3418cfe0:	687b      	ldr	r3, [r7, #4]
3418cfe2:	681b      	ldr	r3, [r3, #0]
3418cfe4:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
3418cfe8:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WTCR);
3418cfea:	687b      	ldr	r3, [r7, #4]
3418cfec:	681b      	ldr	r3, [r3, #0]
3418cfee:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
3418cff2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WIR);
3418cff4:	687b      	ldr	r3, [r7, #4]
3418cff6:	681b      	ldr	r3, [r3, #0]
3418cff8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
3418cffc:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WABR);
3418cffe:	687b      	ldr	r3, [r7, #4]
3418d000:	681b      	ldr	r3, [r3, #0]
3418d002:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
3418d006:	60fb      	str	r3, [r7, #12]
3418d008:	e02c      	b.n	3418d064 <XSPI_ConfigCmd+0xc8>
  }
  else if (pCmd->OperationType == HAL_XSPI_OPTYPE_WRAP_CFG)
3418d00a:	683b      	ldr	r3, [r7, #0]
3418d00c:	681b      	ldr	r3, [r3, #0]
3418d00e:	2b03      	cmp	r3, #3
3418d010:	d114      	bne.n	3418d03c <XSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hxspi->Instance->WPCCR);
3418d012:	687b      	ldr	r3, [r7, #4]
3418d014:	681b      	ldr	r3, [r3, #0]
3418d016:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
3418d01a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->WPTCR);
3418d01c:	687b      	ldr	r3, [r7, #4]
3418d01e:	681b      	ldr	r3, [r3, #0]
3418d020:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
3418d024:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->WPIR);
3418d026:	687b      	ldr	r3, [r7, #4]
3418d028:	681b      	ldr	r3, [r3, #0]
3418d02a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
3418d02e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->WPABR);
3418d030:	687b      	ldr	r3, [r7, #4]
3418d032:	681b      	ldr	r3, [r3, #0]
3418d034:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
3418d038:	60fb      	str	r3, [r7, #12]
3418d03a:	e013      	b.n	3418d064 <XSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hxspi->Instance->CCR);
3418d03c:	687b      	ldr	r3, [r7, #4]
3418d03e:	681b      	ldr	r3, [r3, #0]
3418d040:	f503 7380 	add.w	r3, r3, #256	@ 0x100
3418d044:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hxspi->Instance->TCR);
3418d046:	687b      	ldr	r3, [r7, #4]
3418d048:	681b      	ldr	r3, [r3, #0]
3418d04a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
3418d04e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hxspi->Instance->IR);
3418d050:	687b      	ldr	r3, [r7, #4]
3418d052:	681b      	ldr	r3, [r3, #0]
3418d054:	f503 7388 	add.w	r3, r3, #272	@ 0x110
3418d058:	613b      	str	r3, [r7, #16]
    abr_reg = &(hxspi->Instance->ABR);
3418d05a:	687b      	ldr	r3, [r7, #4]
3418d05c:	681b      	ldr	r3, [r3, #0]
3418d05e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
3418d062:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = pCmd->DQSMode;
3418d064:	683b      	ldr	r3, [r7, #0]
3418d066:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3418d068:	69bb      	ldr	r3, [r7, #24]
3418d06a:	601a      	str	r2, [r3, #0]

  if (pCmd->AlternateBytesMode != HAL_XSPI_ALT_BYTES_NONE)
3418d06c:	683b      	ldr	r3, [r7, #0]
3418d06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418d070:	2b00      	cmp	r3, #0
3418d072:	d012      	beq.n	3418d09a <XSPI_ConfigCmd+0xfe>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = pCmd->AlternateBytes;
3418d074:	683b      	ldr	r3, [r7, #0]
3418d076:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
3418d078:	68fb      	ldr	r3, [r7, #12]
3418d07a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (XSPI_CCR_ABMODE | XSPI_CCR_ABDTR | XSPI_CCR_ABSIZE),
3418d07c:	69bb      	ldr	r3, [r7, #24]
3418d07e:	681b      	ldr	r3, [r3, #0]
3418d080:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
3418d084:	683b      	ldr	r3, [r7, #0]
3418d086:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
3418d088:	683b      	ldr	r3, [r7, #0]
3418d08a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
3418d08c:	4319      	orrs	r1, r3
3418d08e:	683b      	ldr	r3, [r7, #0]
3418d090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
3418d092:	430b      	orrs	r3, r1
3418d094:	431a      	orrs	r2, r3
3418d096:	69bb      	ldr	r3, [r7, #24]
3418d098:	601a      	str	r2, [r3, #0]
               (pCmd->AlternateBytesMode | pCmd->AlternateBytesDTRMode | pCmd->AlternateBytesWidth));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), XSPI_TCR_DCYC, pCmd->DummyCycles);
3418d09a:	697b      	ldr	r3, [r7, #20]
3418d09c:	681b      	ldr	r3, [r3, #0]
3418d09e:	f023 021f 	bic.w	r2, r3, #31
3418d0a2:	683b      	ldr	r3, [r7, #0]
3418d0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3418d0a6:	431a      	orrs	r2, r3
3418d0a8:	697b      	ldr	r3, [r7, #20]
3418d0aa:	601a      	str	r2, [r3, #0]

  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418d0ac:	683b      	ldr	r3, [r7, #0]
3418d0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418d0b0:	2b00      	cmp	r3, #0
3418d0b2:	d009      	beq.n	3418d0c8 <XSPI_ConfigCmd+0x12c>
  {
    if (pCmd->OperationType == HAL_XSPI_OPTYPE_COMMON_CFG)
3418d0b4:	683b      	ldr	r3, [r7, #0]
3418d0b6:	681b      	ldr	r3, [r3, #0]
3418d0b8:	2b00      	cmp	r3, #0
3418d0ba:	d105      	bne.n	3418d0c8 <XSPI_ConfigCmd+0x12c>
    {
      /* Configure the DLR register with the number of data */
      hxspi->Instance->DLR = (pCmd->DataLength - 1U);
3418d0bc:	683b      	ldr	r3, [r7, #0]
3418d0be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3418d0c0:	687b      	ldr	r3, [r7, #4]
3418d0c2:	681b      	ldr	r3, [r3, #0]
3418d0c4:	3a01      	subs	r2, #1
3418d0c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Configure SSHIFT register to handle SDR/DTR data transfer */
  if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418d0c8:	683b      	ldr	r3, [r7, #0]
3418d0ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418d0cc:	2b00      	cmp	r3, #0
3418d0ce:	d01e      	beq.n	3418d10e <XSPI_ConfigCmd+0x172>
  {
    if (pCmd->DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418d0d0:	683b      	ldr	r3, [r7, #0]
3418d0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
3418d0d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418d0d8:	d10a      	bne.n	3418d0f0 <XSPI_ConfigCmd+0x154>
    {
      /* Deactivate sample shifting when receiving data in DTR mode (DDTR=1) */
      CLEAR_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418d0da:	687b      	ldr	r3, [r7, #4]
3418d0dc:	681b      	ldr	r3, [r3, #0]
3418d0de:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418d0e2:	687b      	ldr	r3, [r7, #4]
3418d0e4:	681b      	ldr	r3, [r3, #0]
3418d0e6:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
3418d0ea:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
3418d0ee:	e00e      	b.n	3418d10e <XSPI_ConfigCmd+0x172>
    }
    else if (hxspi->Init.SampleShifting == HAL_XSPI_SAMPLE_SHIFT_HALFCYCLE)
3418d0f0:	687b      	ldr	r3, [r7, #4]
3418d0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3418d0f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418d0f8:	d109      	bne.n	3418d10e <XSPI_ConfigCmd+0x172>
    {
      /* Configure sample shifting */
      SET_BIT(hxspi->Instance->TCR, XSPI_TCR_SSHIFT);
3418d0fa:	687b      	ldr	r3, [r7, #4]
3418d0fc:	681b      	ldr	r3, [r3, #0]
3418d0fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3418d102:	687b      	ldr	r3, [r7, #4]
3418d104:	681b      	ldr	r3, [r3, #0]
3418d106:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
3418d10a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
    {
      /* Do nothing */
    }
  }

  if (pCmd->InstructionMode != HAL_XSPI_INSTRUCTION_NONE)
3418d10e:	683b      	ldr	r3, [r7, #0]
3418d110:	68db      	ldr	r3, [r3, #12]
3418d112:	2b00      	cmp	r3, #0
3418d114:	f000 8099 	beq.w	3418d24a <XSPI_ConfigCmd+0x2ae>
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418d118:	683b      	ldr	r3, [r7, #0]
3418d11a:	69db      	ldr	r3, [r3, #28]
3418d11c:	2b00      	cmp	r3, #0
3418d11e:	d055      	beq.n	3418d1cc <XSPI_ConfigCmd+0x230>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418d120:	683b      	ldr	r3, [r7, #0]
3418d122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418d124:	2b00      	cmp	r3, #0
3418d126:	d01e      	beq.n	3418d166 <XSPI_ConfigCmd+0x1ca>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418d128:	69bb      	ldr	r3, [r7, #24]
3418d12a:	681a      	ldr	r2, [r3, #0]
3418d12c:	4b67      	ldr	r3, [pc, #412]	@ (3418d2cc <XSPI_ConfigCmd+0x330>)
3418d12e:	4013      	ands	r3, r2
3418d130:	683a      	ldr	r2, [r7, #0]
3418d132:	68d1      	ldr	r1, [r2, #12]
3418d134:	683a      	ldr	r2, [r7, #0]
3418d136:	6952      	ldr	r2, [r2, #20]
3418d138:	4311      	orrs	r1, r2
3418d13a:	683a      	ldr	r2, [r7, #0]
3418d13c:	6912      	ldr	r2, [r2, #16]
3418d13e:	4311      	orrs	r1, r2
3418d140:	683a      	ldr	r2, [r7, #0]
3418d142:	69d2      	ldr	r2, [r2, #28]
3418d144:	4311      	orrs	r1, r2
3418d146:	683a      	ldr	r2, [r7, #0]
3418d148:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418d14a:	4311      	orrs	r1, r2
3418d14c:	683a      	ldr	r2, [r7, #0]
3418d14e:	6a12      	ldr	r2, [r2, #32]
3418d150:	4311      	orrs	r1, r2
3418d152:	683a      	ldr	r2, [r7, #0]
3418d154:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418d156:	4311      	orrs	r1, r2
3418d158:	683a      	ldr	r2, [r7, #0]
3418d15a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418d15c:	430a      	orrs	r2, r1
3418d15e:	431a      	orrs	r2, r3
3418d160:	69bb      	ldr	r3, [r7, #24]
3418d162:	601a      	str	r2, [r3, #0]
3418d164:	e028      	b.n	3418d1b8 <XSPI_ConfigCmd+0x21c>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE  | XSPI_CCR_IDTR  | XSPI_CCR_ISIZE  |
3418d166:	69bb      	ldr	r3, [r7, #24]
3418d168:	681b      	ldr	r3, [r3, #0]
3418d16a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418d16e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418d172:	683a      	ldr	r2, [r7, #0]
3418d174:	68d1      	ldr	r1, [r2, #12]
3418d176:	683a      	ldr	r2, [r7, #0]
3418d178:	6952      	ldr	r2, [r2, #20]
3418d17a:	4311      	orrs	r1, r2
3418d17c:	683a      	ldr	r2, [r7, #0]
3418d17e:	6912      	ldr	r2, [r2, #16]
3418d180:	4311      	orrs	r1, r2
3418d182:	683a      	ldr	r2, [r7, #0]
3418d184:	69d2      	ldr	r2, [r2, #28]
3418d186:	4311      	orrs	r1, r2
3418d188:	683a      	ldr	r2, [r7, #0]
3418d18a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418d18c:	4311      	orrs	r1, r2
3418d18e:	683a      	ldr	r2, [r7, #0]
3418d190:	6a12      	ldr	r2, [r2, #32]
3418d192:	430a      	orrs	r2, r1
3418d194:	431a      	orrs	r2, r3
3418d196:	69bb      	ldr	r3, [r7, #24]
3418d198:	601a      	str	r2, [r3, #0]
                                XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth |
                    pCmd->AddressMode     | pCmd->AddressDTRMode     | pCmd->AddressWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418d19a:	687b      	ldr	r3, [r7, #4]
3418d19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418d19e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d1a2:	d109      	bne.n	3418d1b8 <XSPI_ConfigCmd+0x21c>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
3418d1a4:	683b      	ldr	r3, [r7, #0]
3418d1a6:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418d1a8:	2b08      	cmp	r3, #8
3418d1aa:	d105      	bne.n	3418d1b8 <XSPI_ConfigCmd+0x21c>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418d1ac:	69bb      	ldr	r3, [r7, #24]
3418d1ae:	681b      	ldr	r3, [r3, #0]
3418d1b0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418d1b4:	69bb      	ldr	r3, [r7, #24]
3418d1b6:	601a      	str	r2, [r3, #0]
        }
      }
      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418d1b8:	683b      	ldr	r3, [r7, #0]
3418d1ba:	689a      	ldr	r2, [r3, #8]
3418d1bc:	693b      	ldr	r3, [r7, #16]
3418d1be:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hxspi->Instance->AR = pCmd->Address;
3418d1c0:	687b      	ldr	r3, [r7, #4]
3418d1c2:	681b      	ldr	r3, [r3, #0]
3418d1c4:	683a      	ldr	r2, [r7, #0]
3418d1c6:	6992      	ldr	r2, [r2, #24]
3418d1c8:	649a      	str	r2, [r3, #72]	@ 0x48
3418d1ca:	e078      	b.n	3418d2be <XSPI_ConfigCmd+0x322>
    }
    else
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418d1cc:	683b      	ldr	r3, [r7, #0]
3418d1ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418d1d0:	2b00      	cmp	r3, #0
3418d1d2:	d017      	beq.n	3418d204 <XSPI_ConfigCmd+0x268>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE |
3418d1d4:	69bb      	ldr	r3, [r7, #24]
3418d1d6:	681b      	ldr	r3, [r3, #0]
3418d1d8:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418d1dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
3418d1e0:	683a      	ldr	r2, [r7, #0]
3418d1e2:	68d1      	ldr	r1, [r2, #12]
3418d1e4:	683a      	ldr	r2, [r7, #0]
3418d1e6:	6952      	ldr	r2, [r2, #20]
3418d1e8:	4311      	orrs	r1, r2
3418d1ea:	683a      	ldr	r2, [r7, #0]
3418d1ec:	6912      	ldr	r2, [r2, #16]
3418d1ee:	4311      	orrs	r1, r2
3418d1f0:	683a      	ldr	r2, [r7, #0]
3418d1f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418d1f4:	4311      	orrs	r1, r2
3418d1f6:	683a      	ldr	r2, [r7, #0]
3418d1f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418d1fa:	430a      	orrs	r2, r1
3418d1fc:	431a      	orrs	r2, r3
3418d1fe:	69bb      	ldr	r3, [r7, #24]
3418d200:	601a      	str	r2, [r3, #0]
3418d202:	e01d      	b.n	3418d240 <XSPI_ConfigCmd+0x2a4>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_IMODE | XSPI_CCR_IDTR | XSPI_CCR_ISIZE),
3418d204:	69bb      	ldr	r3, [r7, #24]
3418d206:	681b      	ldr	r3, [r3, #0]
3418d208:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
3418d20c:	683b      	ldr	r3, [r7, #0]
3418d20e:	68d9      	ldr	r1, [r3, #12]
3418d210:	683b      	ldr	r3, [r7, #0]
3418d212:	695b      	ldr	r3, [r3, #20]
3418d214:	4319      	orrs	r1, r3
3418d216:	683b      	ldr	r3, [r7, #0]
3418d218:	691b      	ldr	r3, [r3, #16]
3418d21a:	430b      	orrs	r3, r1
3418d21c:	431a      	orrs	r2, r3
3418d21e:	69bb      	ldr	r3, [r7, #24]
3418d220:	601a      	str	r2, [r3, #0]
                   (pCmd->InstructionMode | pCmd->InstructionDTRMode | pCmd->InstructionWidth));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418d222:	687b      	ldr	r3, [r7, #4]
3418d224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3418d226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418d22a:	d109      	bne.n	3418d240 <XSPI_ConfigCmd+0x2a4>
            (pCmd->InstructionDTRMode == HAL_XSPI_INSTRUCTION_DTR_ENABLE))
3418d22c:	683b      	ldr	r3, [r7, #0]
3418d22e:	695b      	ldr	r3, [r3, #20]
        if ((hxspi->Init.DelayHoldQuarterCycle == HAL_XSPI_DHQC_ENABLE) &&
3418d230:	2b08      	cmp	r3, #8
3418d232:	d105      	bne.n	3418d240 <XSPI_ConfigCmd+0x2a4>
        {
          MODIFY_REG((*ccr_reg), XSPI_CCR_DDTR, HAL_XSPI_DATA_DTR_ENABLE);
3418d234:	69bb      	ldr	r3, [r7, #24]
3418d236:	681b      	ldr	r3, [r3, #0]
3418d238:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
3418d23c:	69bb      	ldr	r3, [r7, #24]
3418d23e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = pCmd->Instruction;
3418d240:	683b      	ldr	r3, [r7, #0]
3418d242:	689a      	ldr	r2, [r3, #8]
3418d244:	693b      	ldr	r3, [r7, #16]
3418d246:	601a      	str	r2, [r3, #0]
3418d248:	e039      	b.n	3418d2be <XSPI_ConfigCmd+0x322>

    }
  }
  else
  {
    if (pCmd->AddressMode != HAL_XSPI_ADDRESS_NONE)
3418d24a:	683b      	ldr	r3, [r7, #0]
3418d24c:	69db      	ldr	r3, [r3, #28]
3418d24e:	2b00      	cmp	r3, #0
3418d250:	d030      	beq.n	3418d2b4 <XSPI_ConfigCmd+0x318>
    {
      if (pCmd->DataMode != HAL_XSPI_DATA_NONE)
3418d252:	683b      	ldr	r3, [r7, #0]
3418d254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
3418d256:	2b00      	cmp	r3, #0
3418d258:	d017      	beq.n	3418d28a <XSPI_ConfigCmd+0x2ee>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE |
3418d25a:	69bb      	ldr	r3, [r7, #24]
3418d25c:	681b      	ldr	r3, [r3, #0]
3418d25e:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
3418d262:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
3418d266:	683a      	ldr	r2, [r7, #0]
3418d268:	69d1      	ldr	r1, [r2, #28]
3418d26a:	683a      	ldr	r2, [r7, #0]
3418d26c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
3418d26e:	4311      	orrs	r1, r2
3418d270:	683a      	ldr	r2, [r7, #0]
3418d272:	6a12      	ldr	r2, [r2, #32]
3418d274:	4311      	orrs	r1, r2
3418d276:	683a      	ldr	r2, [r7, #0]
3418d278:	6b92      	ldr	r2, [r2, #56]	@ 0x38
3418d27a:	4311      	orrs	r1, r2
3418d27c:	683a      	ldr	r2, [r7, #0]
3418d27e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
3418d280:	430a      	orrs	r2, r1
3418d282:	431a      	orrs	r2, r3
3418d284:	69bb      	ldr	r3, [r7, #24]
3418d286:	601a      	str	r2, [r3, #0]
3418d288:	e00e      	b.n	3418d2a8 <XSPI_ConfigCmd+0x30c>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (XSPI_CCR_ADMODE | XSPI_CCR_ADDTR | XSPI_CCR_ADSIZE),
3418d28a:	69bb      	ldr	r3, [r7, #24]
3418d28c:	681b      	ldr	r3, [r3, #0]
3418d28e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
3418d292:	683b      	ldr	r3, [r7, #0]
3418d294:	69d9      	ldr	r1, [r3, #28]
3418d296:	683b      	ldr	r3, [r7, #0]
3418d298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3418d29a:	4319      	orrs	r1, r3
3418d29c:	683b      	ldr	r3, [r7, #0]
3418d29e:	6a1b      	ldr	r3, [r3, #32]
3418d2a0:	430b      	orrs	r3, r1
3418d2a2:	431a      	orrs	r2, r3
3418d2a4:	69bb      	ldr	r3, [r7, #24]
3418d2a6:	601a      	str	r2, [r3, #0]
                   (pCmd->AddressMode | pCmd->AddressDTRMode | pCmd->AddressWidth));
      }

      /* Configure the AR register with the instruction value */
      hxspi->Instance->AR = pCmd->Address;
3418d2a8:	687b      	ldr	r3, [r7, #4]
3418d2aa:	681b      	ldr	r3, [r3, #0]
3418d2ac:	683a      	ldr	r2, [r7, #0]
3418d2ae:	6992      	ldr	r2, [r2, #24]
3418d2b0:	649a      	str	r2, [r3, #72]	@ 0x48
3418d2b2:	e004      	b.n	3418d2be <XSPI_ConfigCmd+0x322>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
3418d2b4:	2301      	movs	r3, #1
3418d2b6:	77fb      	strb	r3, [r7, #31]
      hxspi->ErrorCode = HAL_XSPI_ERROR_INVALID_PARAM;
3418d2b8:	687b      	ldr	r3, [r7, #4]
3418d2ba:	2208      	movs	r2, #8
3418d2bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
  }

  return status;
3418d2be:	7ffb      	ldrb	r3, [r7, #31]
}
3418d2c0:	4618      	mov	r0, r3
3418d2c2:	3724      	adds	r7, #36	@ 0x24
3418d2c4:	46bd      	mov	sp, r7
3418d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d2ca:	4770      	bx	lr
3418d2cc:	f0ffc0c0 	.word	0xf0ffc0c0

3418d2d0 <XSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  pCfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static void XSPIM_GetConfig(uint8_t instance_nb, XSPIM_CfgTypeDef *const pCfg)
{
3418d2d0:	b480      	push	{r7}
3418d2d2:	b085      	sub	sp, #20
3418d2d4:	af00      	add	r7, sp, #0
3418d2d6:	4603      	mov	r3, r0
3418d2d8:	6039      	str	r1, [r7, #0]
3418d2da:	71fb      	strb	r3, [r7, #7]
  uint32_t mux;
  uint32_t mode;

  if (instance_nb == 1U)
3418d2dc:	79fb      	ldrb	r3, [r7, #7]
3418d2de:	2b01      	cmp	r3, #1
3418d2e0:	d124      	bne.n	3418d32c <XSPIM_GetConfig+0x5c>
  {
    if ((XSPIM->CR & XSPIM_CR_MODE) == 0U)
3418d2e2:	4b2c      	ldr	r3, [pc, #176]	@ (3418d394 <XSPIM_GetConfig+0xc4>)
3418d2e4:	681b      	ldr	r3, [r3, #0]
3418d2e6:	f003 0302 	and.w	r3, r3, #2
3418d2ea:	2b00      	cmp	r3, #0
3418d2ec:	d103      	bne.n	3418d2f6 <XSPIM_GetConfig+0x26>
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418d2ee:	683b      	ldr	r3, [r7, #0]
3418d2f0:	2200      	movs	r2, #0
3418d2f2:	605a      	str	r2, [r3, #4]
3418d2f4:	e002      	b.n	3418d2fc <XSPIM_GetConfig+0x2c>
    }
    else
    {
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418d2f6:	683b      	ldr	r3, [r7, #0]
3418d2f8:	2201      	movs	r2, #1
3418d2fa:	605a      	str	r2, [r3, #4]
    }

    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418d2fc:	4b25      	ldr	r3, [pc, #148]	@ (3418d394 <XSPIM_GetConfig+0xc4>)
3418d2fe:	681b      	ldr	r3, [r3, #0]
3418d300:	f003 0310 	and.w	r3, r3, #16
3418d304:	2b10      	cmp	r3, #16
3418d306:	d003      	beq.n	3418d310 <XSPIM_GetConfig+0x40>
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418d308:	683b      	ldr	r3, [r7, #0]
3418d30a:	2200      	movs	r2, #0
3418d30c:	601a      	str	r2, [r3, #0]
    else
    {
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
    }
  }
}
3418d30e:	e03a      	b.n	3418d386 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O1) == XSPIM_CR_CSSEL_OVR_O1)
3418d310:	4b20      	ldr	r3, [pc, #128]	@ (3418d394 <XSPIM_GetConfig+0xc4>)
3418d312:	681b      	ldr	r3, [r3, #0]
3418d314:	f003 0320 	and.w	r3, r3, #32
3418d318:	2b20      	cmp	r3, #32
3418d31a:	d103      	bne.n	3418d324 <XSPIM_GetConfig+0x54>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418d31c:	683b      	ldr	r3, [r7, #0]
3418d31e:	2270      	movs	r2, #112	@ 0x70
3418d320:	601a      	str	r2, [r3, #0]
}
3418d322:	e030      	b.n	3418d386 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418d324:	683b      	ldr	r3, [r7, #0]
3418d326:	2210      	movs	r2, #16
3418d328:	601a      	str	r2, [r3, #0]
}
3418d32a:	e02c      	b.n	3418d386 <XSPIM_GetConfig+0xb6>
    mux = (XSPIM->CR & XSPIM_CR_MUXEN);
3418d32c:	4b19      	ldr	r3, [pc, #100]	@ (3418d394 <XSPIM_GetConfig+0xc4>)
3418d32e:	681b      	ldr	r3, [r3, #0]
3418d330:	f003 0301 	and.w	r3, r3, #1
3418d334:	60fb      	str	r3, [r7, #12]
    mode = ((XSPIM->CR & XSPIM_CR_MODE) >> XSPIM_CR_MODE_Pos);
3418d336:	4b17      	ldr	r3, [pc, #92]	@ (3418d394 <XSPIM_GetConfig+0xc4>)
3418d338:	681b      	ldr	r3, [r3, #0]
3418d33a:	085b      	lsrs	r3, r3, #1
3418d33c:	f003 0301 	and.w	r3, r3, #1
3418d340:	60bb      	str	r3, [r7, #8]
    if (mux != mode)
3418d342:	68fa      	ldr	r2, [r7, #12]
3418d344:	68bb      	ldr	r3, [r7, #8]
3418d346:	429a      	cmp	r2, r3
3418d348:	d003      	beq.n	3418d352 <XSPIM_GetConfig+0x82>
      pCfg->IOPort = HAL_XSPIM_IOPORT_1;
3418d34a:	683b      	ldr	r3, [r7, #0]
3418d34c:	2200      	movs	r2, #0
3418d34e:	605a      	str	r2, [r3, #4]
3418d350:	e002      	b.n	3418d358 <XSPIM_GetConfig+0x88>
      pCfg->IOPort = HAL_XSPIM_IOPORT_2;
3418d352:	683b      	ldr	r3, [r7, #0]
3418d354:	2201      	movs	r2, #1
3418d356:	605a      	str	r2, [r3, #4]
    if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_EN) != XSPIM_CR_CSSEL_OVR_EN)
3418d358:	4b0e      	ldr	r3, [pc, #56]	@ (3418d394 <XSPIM_GetConfig+0xc4>)
3418d35a:	681b      	ldr	r3, [r3, #0]
3418d35c:	f003 0310 	and.w	r3, r3, #16
3418d360:	2b10      	cmp	r3, #16
3418d362:	d003      	beq.n	3418d36c <XSPIM_GetConfig+0x9c>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_DISABLED;
3418d364:	683b      	ldr	r3, [r7, #0]
3418d366:	2200      	movs	r2, #0
3418d368:	601a      	str	r2, [r3, #0]
}
3418d36a:	e00c      	b.n	3418d386 <XSPIM_GetConfig+0xb6>
    else if ((XSPIM->CR & XSPIM_CR_CSSEL_OVR_O2) == XSPIM_CR_CSSEL_OVR_O2)
3418d36c:	4b09      	ldr	r3, [pc, #36]	@ (3418d394 <XSPIM_GetConfig+0xc4>)
3418d36e:	681b      	ldr	r3, [r3, #0]
3418d370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418d374:	2b40      	cmp	r3, #64	@ 0x40
3418d376:	d103      	bne.n	3418d380 <XSPIM_GetConfig+0xb0>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS2;
3418d378:	683b      	ldr	r3, [r7, #0]
3418d37a:	2270      	movs	r2, #112	@ 0x70
3418d37c:	601a      	str	r2, [r3, #0]
}
3418d37e:	e002      	b.n	3418d386 <XSPIM_GetConfig+0xb6>
      pCfg->nCSOverride = HAL_XSPI_CSSEL_OVR_NCS1;
3418d380:	683b      	ldr	r3, [r7, #0]
3418d382:	2210      	movs	r2, #16
3418d384:	601a      	str	r2, [r3, #0]
}
3418d386:	bf00      	nop
3418d388:	3714      	adds	r7, #20
3418d38a:	46bd      	mov	sp, r7
3418d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d390:	4770      	bx	lr
3418d392:	bf00      	nop
3418d394:	5802b400 	.word	0x5802b400

3418d398 <BOOT_Application>:
/**
  *  @addtogroup BOOT_LRUN_Exported_Functions Boot LRUN exported functions
  * @{
  */
BOOTStatus_TypeDef BOOT_Application(void)
{
3418d398:	b580      	push	{r7, lr}
3418d39a:	b082      	sub	sp, #8
3418d39c:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr;

  /* mount the memory */
  retr = MapMemory();
3418d39e:	f000 f815 	bl	3418d3cc <MapMemory>
3418d3a2:	4603      	mov	r3, r0
3418d3a4:	71fb      	strb	r3, [r7, #7]
  if (BOOT_OK == retr)
3418d3a6:	79fb      	ldrb	r3, [r7, #7]
3418d3a8:	2b00      	cmp	r3, #0
3418d3aa:	d10a      	bne.n	3418d3c2 <BOOT_Application+0x2a>
  {
    retr = CopyApplication();
3418d3ac:	f000 f840 	bl	3418d430 <CopyApplication>
3418d3b0:	4603      	mov	r3, r0
3418d3b2:	71fb      	strb	r3, [r7, #7]
    if (BOOT_OK == retr)
3418d3b4:	79fb      	ldrb	r3, [r7, #7]
3418d3b6:	2b00      	cmp	r3, #0
3418d3b8:	d103      	bne.n	3418d3c2 <BOOT_Application+0x2a>
    {
      /* jump on the application */
      retr = JumpToApplication();
3418d3ba:	f000 f883 	bl	3418d4c4 <JumpToApplication>
3418d3be:	4603      	mov	r3, r0
3418d3c0:	71fb      	strb	r3, [r7, #7]
    }
  }
  return retr;
3418d3c2:	79fb      	ldrb	r3, [r7, #7]
}
3418d3c4:	4618      	mov	r0, r3
3418d3c6:	3708      	adds	r7, #8
3418d3c8:	46bd      	mov	sp, r7
3418d3ca:	bd80      	pop	{r7, pc}

3418d3cc <MapMemory>:
/**
  * @brief  this function maps the memory
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef MapMemory(void)
{
3418d3cc:	b580      	push	{r7, lr}
3418d3ce:	b082      	sub	sp, #8
3418d3d0:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
3418d3d2:	2300      	movs	r3, #0
3418d3d4:	71fb      	strb	r3, [r7, #7]
  uint32_t BaseAddress = 0;
3418d3d6:	2300      	movs	r3, #0
3418d3d8:	603b      	str	r3, [r7, #0]

  /* Map all the memory */
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418d3da:	2300      	movs	r3, #0
3418d3dc:	71bb      	strb	r3, [r7, #6]
3418d3de:	e01f      	b.n	3418d420 <MapMemory+0x54>
  {
    switch(EXTMEM_GetMapAddress(index, &BaseAddress))
3418d3e0:	79bb      	ldrb	r3, [r7, #6]
3418d3e2:	463a      	mov	r2, r7
3418d3e4:	4611      	mov	r1, r2
3418d3e6:	4618      	mov	r0, r3
3418d3e8:	f000 f9e4 	bl	3418d7b4 <EXTMEM_GetMapAddress>
3418d3ec:	4603      	mov	r3, r0
3418d3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
3418d3f2:	d00f      	beq.n	3418d414 <MapMemory+0x48>
3418d3f4:	2b00      	cmp	r3, #0
3418d3f6:	d10a      	bne.n	3418d40e <MapMemory+0x42>
    {
      case EXTMEM_OK :{
      if (EXTMEM_MemoryMappedMode(index, EXTMEM_ENABLE) != EXTMEM_OK)
3418d3f8:	79bb      	ldrb	r3, [r7, #6]
3418d3fa:	2100      	movs	r1, #0
3418d3fc:	4618      	mov	r0, r3
3418d3fe:	f000 f98b 	bl	3418d718 <EXTMEM_MemoryMappedMode>
3418d402:	4603      	mov	r3, r0
3418d404:	2b00      	cmp	r3, #0
3418d406:	d007      	beq.n	3418d418 <MapMemory+0x4c>
      {
        retr = BOOT_ERROR_MAPPEDMODEFAIL;
3418d408:	2303      	movs	r3, #3
3418d40a:	71fb      	strb	r3, [r7, #7]
      }
      break;
3418d40c:	e004      	b.n	3418d418 <MapMemory+0x4c>
      case EXTMEM_ERROR_NOTSUPPORTED :{
        /* the memory doesn't support map mode, nothing to do */
        break;
      }
      default :{
        retr = BOOT_ERROR_NOBASEADDRESS;
3418d40e:	2302      	movs	r3, #2
3418d410:	71fb      	strb	r3, [r7, #7]
      break;
3418d412:	e002      	b.n	3418d41a <MapMemory+0x4e>
        break;
3418d414:	bf00      	nop
3418d416:	e000      	b.n	3418d41a <MapMemory+0x4e>
      break;
3418d418:	bf00      	nop
  for (uint8_t index = 0; index < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)); index++)
3418d41a:	79bb      	ldrb	r3, [r7, #6]
3418d41c:	3301      	adds	r3, #1
3418d41e:	71bb      	strb	r3, [r7, #6]
3418d420:	79bb      	ldrb	r3, [r7, #6]
3418d422:	2b00      	cmp	r3, #0
3418d424:	d0dc      	beq.n	3418d3e0 <MapMemory+0x14>
      }
    }
  }
  return retr;
3418d426:	79fb      	ldrb	r3, [r7, #7]
}
3418d428:	4618      	mov	r0, r3
3418d42a:	3708      	adds	r7, #8
3418d42c:	46bd      	mov	sp, r7
3418d42e:	bd80      	pop	{r7, pc}

3418d430 <CopyApplication>:
/**
  * @brief  This function copy the data from source to destination
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef CopyApplication(void)
{
3418d430:	b580      	push	{r7, lr}
3418d432:	b086      	sub	sp, #24
3418d434:	af00      	add	r7, sp, #0
  BOOTStatus_TypeDef retr = BOOT_OK;
3418d436:	2300      	movs	r3, #0
3418d438:	75fb      	strb	r3, [r7, #23]
  uint32_t MapAddress;
  uint32_t img_size;

#if defined(EXTMEM_LRUN_DESTINATION_INTERNAL)
  /* this case correspond to copy the SW from external memory into internal memory */
  destination = (uint8_t *)EXTMEM_LRUN_DESTINATION_ADDRESS;
3418d43a:	f04f 5350 	mov.w	r3, #872415232	@ 0x34000000
3418d43e:	60fb      	str	r3, [r7, #12]
  }
  destination = (uint8_t *)(MapAddress + EXTMEM_LRUN_DESTINATION_ADDRESS);
#endif

  /* get the map address of the source memory */
  switch(EXTMEM_GetMapAddress(EXTMEM_LRUN_SOURCE, &MapAddress)){
3418d440:	463b      	mov	r3, r7
3418d442:	4619      	mov	r1, r3
3418d444:	2000      	movs	r0, #0
3418d446:	f000 f9b5 	bl	3418d7b4 <EXTMEM_GetMapAddress>
3418d44a:	4603      	mov	r3, r0
3418d44c:	f1b3 3fff 	cmp.w	r3, #4294967295
3418d450:	d01d      	beq.n	3418d48e <CopyApplication+0x5e>
3418d452:	2b00      	cmp	r3, #0
3418d454:	d12d      	bne.n	3418d4b2 <CopyApplication+0x82>
  case EXTMEM_OK :{
    /* manage the copy in mapped mode */
    source = (uint8_t*)(MapAddress + EXTMEM_LRUN_SOURCE_ADDRESS);
3418d456:	683b      	ldr	r3, [r7, #0]
3418d458:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
3418d45c:	60bb      	str	r3, [r7, #8]
    img_size = BOOT_GetApplicationSize((uint32_t) source);
3418d45e:	68bb      	ldr	r3, [r7, #8]
3418d460:	4618      	mov	r0, r3
3418d462:	f000 f8c3 	bl	3418d5ec <BOOT_GetApplicationSize>
3418d466:	6078      	str	r0, [r7, #4]
    /* copy form source to destination in mapped mode */
    for (uint32_t index=0; index < img_size; index++)
3418d468:	2300      	movs	r3, #0
3418d46a:	613b      	str	r3, [r7, #16]
3418d46c:	e00a      	b.n	3418d484 <CopyApplication+0x54>
    {
      destination[index] = source[index];
3418d46e:	68ba      	ldr	r2, [r7, #8]
3418d470:	693b      	ldr	r3, [r7, #16]
3418d472:	441a      	add	r2, r3
3418d474:	68f9      	ldr	r1, [r7, #12]
3418d476:	693b      	ldr	r3, [r7, #16]
3418d478:	440b      	add	r3, r1
3418d47a:	7812      	ldrb	r2, [r2, #0]
3418d47c:	701a      	strb	r2, [r3, #0]
    for (uint32_t index=0; index < img_size; index++)
3418d47e:	693b      	ldr	r3, [r7, #16]
3418d480:	3301      	adds	r3, #1
3418d482:	613b      	str	r3, [r7, #16]
3418d484:	693a      	ldr	r2, [r7, #16]
3418d486:	687b      	ldr	r3, [r7, #4]
3418d488:	429a      	cmp	r2, r3
3418d48a:	d3f0      	bcc.n	3418d46e <CopyApplication+0x3e>
    for (uint32_t index=0; index < img_size; index++)
    {
      destination[index] = source[index];
    }
#endif
    break;
3418d48c:	e015      	b.n	3418d4ba <CopyApplication+0x8a>
  }

  case EXTMEM_ERROR_NOTSUPPORTED:{
    img_size = BOOT_GetApplicationSize(EXTMEM_LRUN_SOURCE_ADDRESS);
3418d48e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
3418d492:	f000 f8ab 	bl	3418d5ec <BOOT_GetApplicationSize>
3418d496:	6078      	str	r0, [r7, #4]
    /* manage the copy using EXTMEM_Read */
    if (EXTMEM_OK != EXTMEM_Read(EXTMEM_LRUN_SOURCE, EXTMEM_LRUN_SOURCE_ADDRESS, destination, img_size))
3418d498:	687b      	ldr	r3, [r7, #4]
3418d49a:	68fa      	ldr	r2, [r7, #12]
3418d49c:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
3418d4a0:	2000      	movs	r0, #0
3418d4a2:	f000 f903 	bl	3418d6ac <EXTMEM_Read>
3418d4a6:	4603      	mov	r3, r0
3418d4a8:	2b00      	cmp	r3, #0
3418d4aa:	d005      	beq.n	3418d4b8 <CopyApplication+0x88>
    {
      retr = BOOT_ERROR_COPY;
3418d4ac:	2304      	movs	r3, #4
3418d4ae:	75fb      	strb	r3, [r7, #23]
     if (EXTMEM_OK != EXTMEM_Read(EXTMEM_LRUN_SOURCE, EXTMEM_LRUN_SOURCE_ADDRESS_NS, destination, img_size))
    {
      retr = BOOT_ERROR_COPY;
    }
#endif
    break;
3418d4b0:	e002      	b.n	3418d4b8 <CopyApplication+0x88>
  }

  default :{
    /* return an error */
    retr = BOOT_ERROR_MAPPEDMODEFAIL;
3418d4b2:	2303      	movs	r3, #3
3418d4b4:	75fb      	strb	r3, [r7, #23]
    break;
3418d4b6:	e000      	b.n	3418d4ba <CopyApplication+0x8a>
    break;
3418d4b8:	bf00      	nop
  }
}
  return retr;
3418d4ba:	7dfb      	ldrb	r3, [r7, #23]
}
3418d4bc:	4618      	mov	r0, r3
3418d4be:	3718      	adds	r7, #24
3418d4c0:	46bd      	mov	sp, r7
3418d4c2:	bd80      	pop	{r7, pc}

3418d4c4 <JumpToApplication>:
/**
  * @brief  This function jumps to the application through its vector table
  * @return @ref BOOTStatus_TypeDef
  */
BOOTStatus_TypeDef JumpToApplication(void)
{
3418d4c4:	b580      	push	{r7, lr}
3418d4c6:	b08a      	sub	sp, #40	@ 0x28
3418d4c8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;
  typedef  void (*pFunction)(void);
  static pFunction JumpToApp;
  uint32_t Application_vector;
  /* Suspend SysTick */
  HAL_SuspendTick();
3418d4ca:	f7f4 f9d1 	bl	34181870 <HAL_SuspendTick>

#if defined(__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
  /* if I-Cache is enabled, disable I-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_IC_Msk)
3418d4ce:	4b45      	ldr	r3, [pc, #276]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d4d0:	695b      	ldr	r3, [r3, #20]
3418d4d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3418d4d6:	2b00      	cmp	r3, #0
3418d4d8:	d016      	beq.n	3418d508 <JumpToApplication+0x44>
  __ASM volatile ("dsb 0xF":::"memory");
3418d4da:	f3bf 8f4f 	dsb	sy
}
3418d4de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418d4e0:	f3bf 8f6f 	isb	sy
}
3418d4e4:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
3418d4e6:	4b3f      	ldr	r3, [pc, #252]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d4e8:	695b      	ldr	r3, [r3, #20]
3418d4ea:	4a3e      	ldr	r2, [pc, #248]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d4ec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3418d4f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
3418d4f2:	4b3c      	ldr	r3, [pc, #240]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d4f4:	2200      	movs	r2, #0
3418d4f6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
3418d4fa:	f3bf 8f4f 	dsb	sy
}
3418d4fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418d500:	f3bf 8f6f 	isb	sy
}
3418d504:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
3418d506:	bf00      	nop
  }
#endif /* defined(ICACHE_PRESENT) && (ICACHE_PRESENT == 1U) */

#if defined(__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
  /* if D-Cache is enabled, disable D-Cache-----------------------------------*/
  if (SCB->CCR & SCB_CCR_DC_Msk)
3418d508:	4b36      	ldr	r3, [pc, #216]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d50a:	695b      	ldr	r3, [r3, #20]
3418d50c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
3418d510:	2b00      	cmp	r3, #0
3418d512:	d039      	beq.n	3418d588 <JumpToApplication+0xc4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
3418d514:	4b33      	ldr	r3, [pc, #204]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d516:	2200      	movs	r2, #0
3418d518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
3418d51c:	f3bf 8f4f 	dsb	sy
}
3418d520:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
3418d522:	4b30      	ldr	r3, [pc, #192]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d524:	695b      	ldr	r3, [r3, #20]
3418d526:	4a2f      	ldr	r2, [pc, #188]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
3418d52c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
3418d52e:	f3bf 8f4f 	dsb	sy
}
3418d532:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
3418d534:	4b2b      	ldr	r3, [pc, #172]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3418d53a:	61fb      	str	r3, [r7, #28]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
3418d53c:	69fb      	ldr	r3, [r7, #28]
3418d53e:	0b5b      	lsrs	r3, r3, #13
3418d540:	f3c3 030e 	ubfx	r3, r3, #0, #15
3418d544:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
3418d546:	69fb      	ldr	r3, [r7, #28]
3418d548:	08db      	lsrs	r3, r3, #3
3418d54a:	f3c3 0309 	ubfx	r3, r3, #0, #10
3418d54e:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418d550:	69bb      	ldr	r3, [r7, #24]
3418d552:	015a      	lsls	r2, r3, #5
3418d554:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
3418d558:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
3418d55a:	697a      	ldr	r2, [r7, #20]
3418d55c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
3418d55e:	4921      	ldr	r1, [pc, #132]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d560:	4313      	orrs	r3, r2
3418d562:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
3418d566:	697b      	ldr	r3, [r7, #20]
3418d568:	1e5a      	subs	r2, r3, #1
3418d56a:	617a      	str	r2, [r7, #20]
3418d56c:	2b00      	cmp	r3, #0
3418d56e:	d1ef      	bne.n	3418d550 <JumpToApplication+0x8c>
    } while(sets-- != 0U);
3418d570:	69bb      	ldr	r3, [r7, #24]
3418d572:	1e5a      	subs	r2, r3, #1
3418d574:	61ba      	str	r2, [r7, #24]
3418d576:	2b00      	cmp	r3, #0
3418d578:	d1e5      	bne.n	3418d546 <JumpToApplication+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
3418d57a:	f3bf 8f4f 	dsb	sy
}
3418d57e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
3418d580:	f3bf 8f6f 	isb	sy
}
3418d584:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
3418d586:	bf00      	nop
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
3418d588:	f3ef 8310 	mrs	r3, PRIMASK
3418d58c:	607b      	str	r3, [r7, #4]
  return(result);
3418d58e:	687b      	ldr	r3, [r7, #4]
    SCB_DisableDCache();
  }
#endif /* defined(DCACHE_PRESENT) && (DCACHE_PRESENT == 1U) */

  /* Initialize user application's Stack Pointer & Jump to user application  */
  primask_bit = __get_PRIMASK();
3418d590:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
3418d592:	b672      	cpsid	i
}
3418d594:	bf00      	nop
  __disable_irq();

  Application_vector = BOOT_GetApplicationVectorTable();
3418d596:	f000 f835 	bl	3418d604 <BOOT_GetApplicationVectorTable>
3418d59a:	6238      	str	r0, [r7, #32]

  SCB->VTOR = (uint32_t)Application_vector;
3418d59c:	4a11      	ldr	r2, [pc, #68]	@ (3418d5e4 <JumpToApplication+0x120>)
3418d59e:	6a3b      	ldr	r3, [r7, #32]
3418d5a0:	6093      	str	r3, [r2, #8]
  JumpToApp = (pFunction) (*(__IO uint32_t *)(Application_vector + 4));
3418d5a2:	6a3b      	ldr	r3, [r7, #32]
3418d5a4:	3304      	adds	r3, #4
3418d5a6:	681b      	ldr	r3, [r3, #0]
3418d5a8:	461a      	mov	r2, r3
3418d5aa:	4b0f      	ldr	r3, [pc, #60]	@ (3418d5e8 <JumpToApplication+0x124>)
3418d5ac:	601a      	str	r2, [r3, #0]
3418d5ae:	2300      	movs	r3, #0
3418d5b0:	60bb      	str	r3, [r7, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
3418d5b2:	68bb      	ldr	r3, [r7, #8]
3418d5b4:	f383 880a 	msr	MSPLIM, r3
#endif
}
3418d5b8:	bf00      	nop
     (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
  /* on ARM v8m, set MSPLIM before setting MSP to avoid unwanted stack overflow faults */
  __set_MSPLIM(0x00000000);
#endif  /* __ARM_ARCH_8M_MAIN__ or __ARM_ARCH_8M_BASE__ */

  __set_MSP(*(__IO uint32_t*)Application_vector);
3418d5ba:	6a3b      	ldr	r3, [r7, #32]
3418d5bc:	681b      	ldr	r3, [r3, #0]
3418d5be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
3418d5c0:	68fb      	ldr	r3, [r7, #12]
3418d5c2:	f383 8808 	msr	MSP, r3
}
3418d5c6:	bf00      	nop
3418d5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3418d5ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
3418d5cc:	693b      	ldr	r3, [r7, #16]
3418d5ce:	f383 8810 	msr	PRIMASK, r3
}
3418d5d2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);

  JumpToApp();
3418d5d4:	4b04      	ldr	r3, [pc, #16]	@ (3418d5e8 <JumpToApplication+0x124>)
3418d5d6:	681b      	ldr	r3, [r3, #0]
3418d5d8:	4798      	blx	r3
  return BOOT_OK;
3418d5da:	2300      	movs	r3, #0
}
3418d5dc:	4618      	mov	r0, r3
3418d5de:	3728      	adds	r7, #40	@ 0x28
3418d5e0:	46bd      	mov	sp, r7
3418d5e2:	bd80      	pop	{r7, pc}
3418d5e4:	e000ed00 	.word	0xe000ed00
3418d5e8:	341c0184 	.word	0x341c0184

3418d5ec <BOOT_GetApplicationSize>:


 __weak uint32_t BOOT_GetApplicationSize(uint32_t img_addr)
{
3418d5ec:	b480      	push	{r7}
3418d5ee:	b083      	sub	sp, #12
3418d5f0:	af00      	add	r7, sp, #0
3418d5f2:	6078      	str	r0, [r7, #4]
  UNUSED(img_addr);
  return EXTMEM_LRUN_SOURCE_SIZE;
3418d5f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
}
3418d5f8:	4618      	mov	r0, r3
3418d5fa:	370c      	adds	r7, #12
3418d5fc:	46bd      	mov	sp, r7
3418d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d602:	4770      	bx	lr

3418d604 <BOOT_GetApplicationVectorTable>:

__weak uint32_t BOOT_GetApplicationVectorTable(void)
{
3418d604:	b480      	push	{r7}
3418d606:	b083      	sub	sp, #12
3418d608:	af00      	add	r7, sp, #0
  uint32_t vector_table;
#if defined(EXTMEM_LRUN_DESTINATION_INTERNAL)
  vector_table = EXTMEM_LRUN_DESTINATION_ADDRESS;
3418d60a:	f04f 5350 	mov.w	r3, #872415232	@ 0x34000000
3418d60e:	607b      	str	r3, [r7, #4]
  {
    return 0xffffffff;
  }
  vector_table += EXTMEM_LRUN_DESTINATION_ADDRESS;
#endif
  vector_table += EXTMEM_HEADER_OFFSET;
3418d610:	687b      	ldr	r3, [r7, #4]
3418d612:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418d616:	607b      	str	r3, [r7, #4]
  return vector_table;
3418d618:	687b      	ldr	r3, [r7, #4]
}
3418d61a:	4618      	mov	r0, r3
3418d61c:	370c      	adds	r7, #12
3418d61e:	46bd      	mov	sp, r7
3418d620:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d624:	4770      	bx	lr
	...

3418d628 <EXTMEM_Init>:
/** @defgroup EXTMEM_Exported_Functions External Memory Exported Functions
  * @{
  */

EXTMEM_StatusTypeDef EXTMEM_Init(uint32_t MemId, uint32_t ClockInput)
{
3418d628:	b580      	push	{r7, lr}
3418d62a:	b084      	sub	sp, #16
3418d62c:	af00      	add	r7, sp, #0
3418d62e:	6078      	str	r0, [r7, #4]
3418d630:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418d632:	23fb      	movs	r3, #251	@ 0xfb
3418d634:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418d636:	687b      	ldr	r3, [r7, #4]
3418d638:	2b00      	cmp	r3, #0
3418d63a:	d12f      	bne.n	3418d69c <EXTMEM_Init+0x74>
  {
    retr = EXTMEM_OK;
3418d63c:	2300      	movs	r3, #0
3418d63e:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418d640:	4a19      	ldr	r2, [pc, #100]	@ (3418d6a8 <EXTMEM_Init+0x80>)
3418d642:	687b      	ldr	r3, [r7, #4]
3418d644:	21ac      	movs	r1, #172	@ 0xac
3418d646:	fb01 f303 	mul.w	r3, r1, r3
3418d64a:	4413      	add	r3, r2
3418d64c:	781b      	ldrb	r3, [r3, #0]
3418d64e:	2b00      	cmp	r3, #0
3418d650:	d120      	bne.n	3418d694 <EXTMEM_Init+0x6c>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        /* Initialize the SFDP memory */
        if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Init(extmem_list_config[MemId].Handle,
3418d652:	4a15      	ldr	r2, [pc, #84]	@ (3418d6a8 <EXTMEM_Init+0x80>)
3418d654:	687b      	ldr	r3, [r7, #4]
3418d656:	21ac      	movs	r1, #172	@ 0xac
3418d658:	fb01 f303 	mul.w	r3, r1, r3
3418d65c:	4413      	add	r3, r2
3418d65e:	3304      	adds	r3, #4
3418d660:	6818      	ldr	r0, [r3, #0]
3418d662:	4a11      	ldr	r2, [pc, #68]	@ (3418d6a8 <EXTMEM_Init+0x80>)
3418d664:	687b      	ldr	r3, [r7, #4]
3418d666:	21ac      	movs	r1, #172	@ 0xac
3418d668:	fb01 f303 	mul.w	r3, r1, r3
3418d66c:	4413      	add	r3, r2
3418d66e:	3308      	adds	r3, #8
3418d670:	7819      	ldrb	r1, [r3, #0]
3418d672:	687b      	ldr	r3, [r7, #4]
3418d674:	22ac      	movs	r2, #172	@ 0xac
3418d676:	fb02 f303 	mul.w	r3, r2, r3
3418d67a:	3308      	adds	r3, #8
3418d67c:	4a0a      	ldr	r2, [pc, #40]	@ (3418d6a8 <EXTMEM_Init+0x80>)
3418d67e:	4413      	add	r3, r2
3418d680:	3304      	adds	r3, #4
3418d682:	683a      	ldr	r2, [r7, #0]
3418d684:	f002 faec 	bl	3418fc60 <EXTMEM_DRIVER_NOR_SFDP_Init>
3418d688:	4603      	mov	r3, r0
3418d68a:	2b00      	cmp	r3, #0
3418d68c:	d005      	beq.n	3418d69a <EXTMEM_Init+0x72>
                                                                     extmem_list_config[MemId].ConfigType,
                                                                     ClockInput,
                                                                     &extmem_list_config[MemId].NorSfdpObject))
        {
          retr = EXTMEM_ERROR_DRIVER;
3418d68e:	23fd      	movs	r3, #253	@ 0xfd
3418d690:	73fb      	strb	r3, [r7, #15]
        }
        break;
3418d692:	e002      	b.n	3418d69a <EXTMEM_Init+0x72>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418d694:	23fe      	movs	r3, #254	@ 0xfe
3418d696:	73fb      	strb	r3, [r7, #15]
        break;
3418d698:	e000      	b.n	3418d69c <EXTMEM_Init+0x74>
        break;
3418d69a:	bf00      	nop
      }
    }
  }
  return retr;
3418d69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418d6a0:	4618      	mov	r0, r3
3418d6a2:	3710      	adds	r7, #16
3418d6a4:	46bd      	mov	sp, r7
3418d6a6:	bd80      	pop	{r7, pc}
3418d6a8:	341c0188 	.word	0x341c0188

3418d6ac <EXTMEM_Read>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_Read(uint32_t MemId, uint32_t Address, uint8_t* Data, uint32_t Size)
{
3418d6ac:	b580      	push	{r7, lr}
3418d6ae:	b086      	sub	sp, #24
3418d6b0:	af00      	add	r7, sp, #0
3418d6b2:	60f8      	str	r0, [r7, #12]
3418d6b4:	60b9      	str	r1, [r7, #8]
3418d6b6:	607a      	str	r2, [r7, #4]
3418d6b8:	603b      	str	r3, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418d6ba:	23fb      	movs	r3, #251	@ 0xfb
3418d6bc:	75fb      	strb	r3, [r7, #23]
  EXTMEM_FUNC_CALL()

  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418d6be:	68fb      	ldr	r3, [r7, #12]
3418d6c0:	2b00      	cmp	r3, #0
3418d6c2:	d121      	bne.n	3418d708 <EXTMEM_Read+0x5c>
  {
    retr = EXTMEM_OK;
3418d6c4:	2300      	movs	r3, #0
3418d6c6:	75fb      	strb	r3, [r7, #23]
    switch (extmem_list_config[MemId].MemType)
3418d6c8:	4a12      	ldr	r2, [pc, #72]	@ (3418d714 <EXTMEM_Read+0x68>)
3418d6ca:	68fb      	ldr	r3, [r7, #12]
3418d6cc:	21ac      	movs	r1, #172	@ 0xac
3418d6ce:	fb01 f303 	mul.w	r3, r1, r3
3418d6d2:	4413      	add	r3, r2
3418d6d4:	781b      	ldrb	r3, [r3, #0]
3418d6d6:	2b00      	cmp	r3, #0
3418d6d8:	d112      	bne.n	3418d700 <EXTMEM_Read+0x54>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
    case EXTMEM_NOR_SFDP:{
      if (EXTMEM_DRIVER_NOR_SFDP_OK != EXTMEM_DRIVER_NOR_SFDP_Read(&extmem_list_config[MemId].NorSfdpObject,
3418d6da:	68fb      	ldr	r3, [r7, #12]
3418d6dc:	22ac      	movs	r2, #172	@ 0xac
3418d6de:	fb02 f303 	mul.w	r3, r2, r3
3418d6e2:	3308      	adds	r3, #8
3418d6e4:	4a0b      	ldr	r2, [pc, #44]	@ (3418d714 <EXTMEM_Read+0x68>)
3418d6e6:	4413      	add	r3, r2
3418d6e8:	1d18      	adds	r0, r3, #4
3418d6ea:	683b      	ldr	r3, [r7, #0]
3418d6ec:	687a      	ldr	r2, [r7, #4]
3418d6ee:	68b9      	ldr	r1, [r7, #8]
3418d6f0:	f002 fb70 	bl	3418fdd4 <EXTMEM_DRIVER_NOR_SFDP_Read>
3418d6f4:	4603      	mov	r3, r0
3418d6f6:	2b00      	cmp	r3, #0
3418d6f8:	d005      	beq.n	3418d706 <EXTMEM_Read+0x5a>
                                                           Address, Data, Size))
      {
        retr = EXTMEM_ERROR_DRIVER;
3418d6fa:	23fd      	movs	r3, #253	@ 0xfd
3418d6fc:	75fb      	strb	r3, [r7, #23]
      }
      break;
3418d6fe:	e002      	b.n	3418d706 <EXTMEM_Read+0x5a>
      break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    default:{
      EXTMEM_DEBUG("\terror unknown type\n");
      retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418d700:	23fe      	movs	r3, #254	@ 0xfe
3418d702:	75fb      	strb	r3, [r7, #23]
      break;
3418d704:	e000      	b.n	3418d708 <EXTMEM_Read+0x5c>
      break;
3418d706:	bf00      	nop
    }
    }
  }
  return retr;
3418d708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
3418d70c:	4618      	mov	r0, r3
3418d70e:	3718      	adds	r7, #24
3418d710:	46bd      	mov	sp, r7
3418d712:	bd80      	pop	{r7, pc}
3418d714:	341c0188 	.word	0x341c0188

3418d718 <EXTMEM_MemoryMappedMode>:
  }
  return retr;
}

EXTMEM_StatusTypeDef EXTMEM_MemoryMappedMode(uint32_t MemId, EXTMEM_StateTypeDef State)
{
3418d718:	b580      	push	{r7, lr}
3418d71a:	b084      	sub	sp, #16
3418d71c:	af00      	add	r7, sp, #0
3418d71e:	6078      	str	r0, [r7, #4]
3418d720:	460b      	mov	r3, r1
3418d722:	70fb      	strb	r3, [r7, #3]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418d724:	23fb      	movs	r3, #251	@ 0xfb
3418d726:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418d728:	687b      	ldr	r3, [r7, #4]
3418d72a:	2b00      	cmp	r3, #0
3418d72c:	d139      	bne.n	3418d7a2 <EXTMEM_MemoryMappedMode+0x8a>
  {
    retr = EXTMEM_OK;
3418d72e:	2300      	movs	r3, #0
3418d730:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418d732:	4a1f      	ldr	r2, [pc, #124]	@ (3418d7b0 <EXTMEM_MemoryMappedMode+0x98>)
3418d734:	687b      	ldr	r3, [r7, #4]
3418d736:	21ac      	movs	r1, #172	@ 0xac
3418d738:	fb01 f303 	mul.w	r3, r1, r3
3418d73c:	4413      	add	r3, r2
3418d73e:	781b      	ldrb	r3, [r3, #0]
3418d740:	2b00      	cmp	r3, #0
3418d742:	d002      	beq.n	3418d74a <EXTMEM_MemoryMappedMode+0x32>
3418d744:	2b03      	cmp	r3, #3
3418d746:	d025      	beq.n	3418d794 <EXTMEM_MemoryMappedMode+0x7c>
3418d748:	e027      	b.n	3418d79a <EXTMEM_MemoryMappedMode+0x82>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1
      case EXTMEM_NOR_SFDP:{
        if (EXTMEM_ENABLE == State)
3418d74a:	78fb      	ldrb	r3, [r7, #3]
3418d74c:	2b00      	cmp	r3, #0
3418d74e:	d110      	bne.n	3418d772 <EXTMEM_MemoryMappedMode+0x5a>
        {
          /* start the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418d750:	687b      	ldr	r3, [r7, #4]
3418d752:	22ac      	movs	r2, #172	@ 0xac
3418d754:	fb02 f303 	mul.w	r3, r2, r3
3418d758:	3308      	adds	r3, #8
3418d75a:	4a15      	ldr	r2, [pc, #84]	@ (3418d7b0 <EXTMEM_MemoryMappedMode+0x98>)
3418d75c:	4413      	add	r3, r2
3418d75e:	3304      	adds	r3, #4
3418d760:	4618      	mov	r0, r3
3418d762:	f002 fb64 	bl	3418fe2e <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>
3418d766:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418d768:	2b00      	cmp	r3, #0
3418d76a:	d019      	beq.n	3418d7a0 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
3418d76c:	f06f 0302 	mvn.w	r3, #2
3418d770:	e019      	b.n	3418d7a6 <EXTMEM_MemoryMappedMode+0x8e>
        }
        else
        {
          /* stop the memory mapped mode */
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
              EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(&extmem_list_config[MemId].NorSfdpObject))
3418d772:	687b      	ldr	r3, [r7, #4]
3418d774:	22ac      	movs	r2, #172	@ 0xac
3418d776:	fb02 f303 	mul.w	r3, r2, r3
3418d77a:	3308      	adds	r3, #8
3418d77c:	4a0c      	ldr	r2, [pc, #48]	@ (3418d7b0 <EXTMEM_MemoryMappedMode+0x98>)
3418d77e:	4413      	add	r3, r2
3418d780:	3304      	adds	r3, #4
3418d782:	4618      	mov	r0, r3
3418d784:	f002 fb74 	bl	3418fe70 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>
3418d788:	4603      	mov	r3, r0
          if (EXTMEM_DRIVER_NOR_SFDP_OK !=
3418d78a:	2b00      	cmp	r3, #0
3418d78c:	d008      	beq.n	3418d7a0 <EXTMEM_MemoryMappedMode+0x88>
          {
            return EXTMEM_ERROR_DRIVER;
3418d78e:	f06f 0302 	mvn.w	r3, #2
3418d792:	e008      	b.n	3418d7a6 <EXTMEM_MemoryMappedMode+0x8e>
       }
       break;
    }
#endif /* EXTMEM_DRIVER_USER == 1 */
    case EXTMEM_SDCARD :
      retr = EXTMEM_ERROR_NOTSUPPORTED;
3418d794:	23ff      	movs	r3, #255	@ 0xff
3418d796:	73fb      	strb	r3, [r7, #15]
    break;
3418d798:	e003      	b.n	3418d7a2 <EXTMEM_MemoryMappedMode+0x8a>
    default:{
        EXTMEM_DEBUG("\terror unknown type\n");
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418d79a:	23fe      	movs	r3, #254	@ 0xfe
3418d79c:	73fb      	strb	r3, [r7, #15]
        break;
3418d79e:	e000      	b.n	3418d7a2 <EXTMEM_MemoryMappedMode+0x8a>
        break;
3418d7a0:	bf00      	nop
      }
    }
  }
  return retr;
3418d7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418d7a6:	4618      	mov	r0, r3
3418d7a8:	3710      	adds	r7, #16
3418d7aa:	46bd      	mov	sp, r7
3418d7ac:	bd80      	pop	{r7, pc}
3418d7ae:	bf00      	nop
3418d7b0:	341c0188 	.word	0x341c0188

3418d7b4 <EXTMEM_GetMapAddress>:

EXTMEM_StatusTypeDef EXTMEM_GetMapAddress(uint32_t MemId, uint32_t *BaseAddress)
{
3418d7b4:	b480      	push	{r7}
3418d7b6:	b085      	sub	sp, #20
3418d7b8:	af00      	add	r7, sp, #0
3418d7ba:	6078      	str	r0, [r7, #4]
3418d7bc:	6039      	str	r1, [r7, #0]
  EXTMEM_StatusTypeDef retr = EXTMEM_ERROR_INVALID_ID;
3418d7be:	23fb      	movs	r3, #251	@ 0xfb
3418d7c0:	73fb      	strb	r3, [r7, #15]
  EXTMEM_FUNC_CALL();
  /* control the memory ID */
  if (MemId < (sizeof(extmem_list_config) / sizeof(EXTMEM_DefinitionTypeDef)))
3418d7c2:	687b      	ldr	r3, [r7, #4]
3418d7c4:	2b00      	cmp	r3, #0
3418d7c6:	d145      	bne.n	3418d854 <EXTMEM_GetMapAddress+0xa0>
  {
    retr = EXTMEM_OK;
3418d7c8:	2300      	movs	r3, #0
3418d7ca:	73fb      	strb	r3, [r7, #15]
    switch (extmem_list_config[MemId].MemType)
3418d7cc:	4a25      	ldr	r2, [pc, #148]	@ (3418d864 <EXTMEM_GetMapAddress+0xb0>)
3418d7ce:	687b      	ldr	r3, [r7, #4]
3418d7d0:	21ac      	movs	r1, #172	@ 0xac
3418d7d2:	fb01 f303 	mul.w	r3, r1, r3
3418d7d6:	4413      	add	r3, r2
3418d7d8:	781b      	ldrb	r3, [r3, #0]
3418d7da:	2b00      	cmp	r3, #0
3418d7dc:	d001      	beq.n	3418d7e2 <EXTMEM_GetMapAddress+0x2e>
3418d7de:	2b02      	cmp	r3, #2
3418d7e0:	d135      	bne.n	3418d84e <EXTMEM_GetMapAddress+0x9a>
    {
#if EXTMEM_DRIVER_NOR_SFDP == 1 || EXTMEM_DRIVER_PSRAM == 1
      case EXTMEM_PSRAM:
      case EXTMEM_NOR_SFDP:{
#if defined(XSPI1)       
       if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI1)
3418d7e2:	4a20      	ldr	r2, [pc, #128]	@ (3418d864 <EXTMEM_GetMapAddress+0xb0>)
3418d7e4:	687b      	ldr	r3, [r7, #4]
3418d7e6:	21ac      	movs	r1, #172	@ 0xac
3418d7e8:	fb01 f303 	mul.w	r3, r1, r3
3418d7ec:	4413      	add	r3, r2
3418d7ee:	3304      	adds	r3, #4
3418d7f0:	681b      	ldr	r3, [r3, #0]
3418d7f2:	681b      	ldr	r3, [r3, #0]
3418d7f4:	4a1c      	ldr	r2, [pc, #112]	@ (3418d868 <EXTMEM_GetMapAddress+0xb4>)
3418d7f6:	4293      	cmp	r3, r2
3418d7f8:	d104      	bne.n	3418d804 <EXTMEM_GetMapAddress+0x50>
        {
          *BaseAddress = XSPI1_BASE;
3418d7fa:	683b      	ldr	r3, [r7, #0]
3418d7fc:	f04f 4210 	mov.w	r2, #2415919104	@ 0x90000000
3418d800:	601a      	str	r2, [r3, #0]
       else
       { 
          retr = EXTMEM_ERROR_DRIVER;
       }

       break;
3418d802:	e027      	b.n	3418d854 <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI2)
3418d804:	4a17      	ldr	r2, [pc, #92]	@ (3418d864 <EXTMEM_GetMapAddress+0xb0>)
3418d806:	687b      	ldr	r3, [r7, #4]
3418d808:	21ac      	movs	r1, #172	@ 0xac
3418d80a:	fb01 f303 	mul.w	r3, r1, r3
3418d80e:	4413      	add	r3, r2
3418d810:	3304      	adds	r3, #4
3418d812:	681b      	ldr	r3, [r3, #0]
3418d814:	681b      	ldr	r3, [r3, #0]
3418d816:	4a15      	ldr	r2, [pc, #84]	@ (3418d86c <EXTMEM_GetMapAddress+0xb8>)
3418d818:	4293      	cmp	r3, r2
3418d81a:	d104      	bne.n	3418d826 <EXTMEM_GetMapAddress+0x72>
          *BaseAddress = XSPI2_BASE;
3418d81c:	683b      	ldr	r3, [r7, #0]
3418d81e:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
3418d822:	601a      	str	r2, [r3, #0]
       break;
3418d824:	e016      	b.n	3418d854 <EXTMEM_GetMapAddress+0xa0>
       else if (((XSPI_HandleTypeDef *)extmem_list_config[MemId].Handle)->Instance == XSPI3)
3418d826:	4a0f      	ldr	r2, [pc, #60]	@ (3418d864 <EXTMEM_GetMapAddress+0xb0>)
3418d828:	687b      	ldr	r3, [r7, #4]
3418d82a:	21ac      	movs	r1, #172	@ 0xac
3418d82c:	fb01 f303 	mul.w	r3, r1, r3
3418d830:	4413      	add	r3, r2
3418d832:	3304      	adds	r3, #4
3418d834:	681b      	ldr	r3, [r3, #0]
3418d836:	681b      	ldr	r3, [r3, #0]
3418d838:	4a0d      	ldr	r2, [pc, #52]	@ (3418d870 <EXTMEM_GetMapAddress+0xbc>)
3418d83a:	4293      	cmp	r3, r2
3418d83c:	d104      	bne.n	3418d848 <EXTMEM_GetMapAddress+0x94>
          *BaseAddress = XSPI3_BASE;
3418d83e:	683b      	ldr	r3, [r7, #0]
3418d840:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
3418d844:	601a      	str	r2, [r3, #0]
       break;
3418d846:	e005      	b.n	3418d854 <EXTMEM_GetMapAddress+0xa0>
          retr = EXTMEM_ERROR_DRIVER;
3418d848:	23fd      	movs	r3, #253	@ 0xfd
3418d84a:	73fb      	strb	r3, [r7, #15]
       break;
3418d84c:	e002      	b.n	3418d854 <EXTMEM_GetMapAddress+0xa0>
      break;
      }
#endif /* EXTMEM_DRIVER_USER == 1 */      
      default :
      {
        retr = EXTMEM_ERROR_UNKNOWNMEMORY;
3418d84e:	23fe      	movs	r3, #254	@ 0xfe
3418d850:	73fb      	strb	r3, [r7, #15]
        break;
3418d852:	bf00      	nop
      }
    }
  }
  return retr;
3418d854:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418d858:	4618      	mov	r0, r3
3418d85a:	3714      	adds	r7, #20
3418d85c:	46bd      	mov	sp, r7
3418d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d862:	4770      	bx	lr
3418d864:	341c0188 	.word	0x341c0188
3418d868:	58025000 	.word	0x58025000
3418d86c:	5802a000 	.word	0x5802a000
3418d870:	5802d000 	.word	0x5802d000

3418d874 <SAL_XSPI_SetClock>:
/* Private variables ---------------------------------------------------------*/
/** @defgroup SAL_XSPI_Exported_Functions SAL XSP Exported Functions
  * @{
  */
HAL_StatusTypeDef SAL_XSPI_SetClock(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t ClockIn, uint32_t ClockRequested, uint32_t *ClockReal)
{
3418d874:	b480      	push	{r7}
3418d876:	b087      	sub	sp, #28
3418d878:	af00      	add	r7, sp, #0
3418d87a:	60f8      	str	r0, [r7, #12]
3418d87c:	60b9      	str	r1, [r7, #8]
3418d87e:	607a      	str	r2, [r7, #4]
3418d880:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr = HAL_OK;
3418d882:	2300      	movs	r3, #0
3418d884:	75fb      	strb	r3, [r7, #23]
  uint32_t divider;

  if (ClockRequested == 0u)
3418d886:	687b      	ldr	r3, [r7, #4]
3418d888:	2b00      	cmp	r3, #0
3418d88a:	d102      	bne.n	3418d892 <SAL_XSPI_SetClock+0x1e>
  {
    retr = HAL_ERROR;
3418d88c:	2301      	movs	r3, #1
3418d88e:	75fb      	strb	r3, [r7, #23]
3418d890:	e028      	b.n	3418d8e4 <SAL_XSPI_SetClock+0x70>
  }
  else
  {
    divider = (ClockIn / ClockRequested);
3418d892:	68ba      	ldr	r2, [r7, #8]
3418d894:	687b      	ldr	r3, [r7, #4]
3418d896:	fbb2 f3f3 	udiv	r3, r2, r3
3418d89a:	613b      	str	r3, [r7, #16]
    if (divider >= 1u)
3418d89c:	693b      	ldr	r3, [r7, #16]
3418d89e:	2b00      	cmp	r3, #0
3418d8a0:	d00d      	beq.n	3418d8be <SAL_XSPI_SetClock+0x4a>
    {
      *ClockReal = ClockIn / divider;
3418d8a2:	68ba      	ldr	r2, [r7, #8]
3418d8a4:	693b      	ldr	r3, [r7, #16]
3418d8a6:	fbb2 f2f3 	udiv	r2, r2, r3
3418d8aa:	683b      	ldr	r3, [r7, #0]
3418d8ac:	601a      	str	r2, [r3, #0]
      if (*ClockReal <= ClockRequested)
3418d8ae:	683b      	ldr	r3, [r7, #0]
3418d8b0:	681b      	ldr	r3, [r3, #0]
3418d8b2:	687a      	ldr	r2, [r7, #4]
3418d8b4:	429a      	cmp	r2, r3
3418d8b6:	d302      	bcc.n	3418d8be <SAL_XSPI_SetClock+0x4a>
      {
        divider--;
3418d8b8:	693b      	ldr	r3, [r7, #16]
3418d8ba:	3b01      	subs	r3, #1
3418d8bc:	613b      	str	r3, [r7, #16]
    divider++;
    divider++;
#endif

    /* real clock calculation */
    *ClockReal = ClockIn / (divider + 1u);
3418d8be:	693b      	ldr	r3, [r7, #16]
3418d8c0:	3301      	adds	r3, #1
3418d8c2:	68ba      	ldr	r2, [r7, #8]
3418d8c4:	fbb2 f2f3 	udiv	r2, r2, r3
3418d8c8:	683b      	ldr	r3, [r7, #0]
3418d8ca:	601a      	str	r2, [r3, #0]

    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::CLOCK::"); DEBUG_PARAM_INT(divider); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR2, XSPI_DCR2_PRESCALER, (uint32_t)divider << XSPI_DCR2_PRESCALER_Pos);
3418d8cc:	68fb      	ldr	r3, [r7, #12]
3418d8ce:	681b      	ldr	r3, [r3, #0]
3418d8d0:	681b      	ldr	r3, [r3, #0]
3418d8d2:	68db      	ldr	r3, [r3, #12]
3418d8d4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
3418d8d8:	68fb      	ldr	r3, [r7, #12]
3418d8da:	681b      	ldr	r3, [r3, #0]
3418d8dc:	681b      	ldr	r3, [r3, #0]
3418d8de:	693a      	ldr	r2, [r7, #16]
3418d8e0:	430a      	orrs	r2, r1
3418d8e2:	60da      	str	r2, [r3, #12]
  }

  return retr;
3418d8e4:	7dfb      	ldrb	r3, [r7, #23]
}
3418d8e6:	4618      	mov	r0, r3
3418d8e8:	371c      	adds	r7, #28
3418d8ea:	46bd      	mov	sp, r7
3418d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
3418d8f0:	4770      	bx	lr

3418d8f2 <SAL_XSPI_Init>:
/*
* This function is used to configure the way to discuss with the memory
*
*/
HAL_StatusTypeDef SAL_XSPI_Init(SAL_XSPI_ObjectTypeDef *SalXspi, void *HALHandle)
{
3418d8f2:	b580      	push	{r7, lr}
3418d8f4:	b096      	sub	sp, #88	@ 0x58
3418d8f6:	af00      	add	r7, sp, #0
3418d8f8:	6078      	str	r0, [r7, #4]
3418d8fa:	6039      	str	r1, [r7, #0]
  XSPI_RegularCmdTypeDef s_commandbase = {
3418d8fc:	f107 030c 	add.w	r3, r7, #12
3418d900:	224c      	movs	r2, #76	@ 0x4c
3418d902:	2100      	movs	r1, #0
3418d904:	4618      	mov	r0, r3
3418d906:	f002 fcd7 	bl	341902b8 <memset>
3418d90a:	235a      	movs	r3, #90	@ 0x5a
3418d90c:	617b      	str	r3, [r7, #20]
3418d90e:	2301      	movs	r3, #1
3418d910:	61bb      	str	r3, [r7, #24]
3418d912:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418d916:	62bb      	str	r3, [r7, #40]	@ 0x28
3418d918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418d91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
3418d91e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418d922:	647b      	str	r3, [r7, #68]	@ 0x44
3418d924:	2308      	movs	r3, #8
3418d926:	653b      	str	r3, [r7, #80]	@ 0x50
#if defined(XSPI_CCR_SIOO)
      .SIOOMode = HAL_XSPI_SIOO_INST_EVERY_CMD,
#endif /* HAL_XSPI_SIOO_INST_EVERY_CMD */
  };

  SalXspi->hxspi = (XSPI_HandleTypeDef *)HALHandle;
3418d928:	687b      	ldr	r3, [r7, #4]
3418d92a:	683a      	ldr	r2, [r7, #0]
3418d92c:	601a      	str	r2, [r3, #0]
  SalXspi->Commandbase = s_commandbase;
3418d92e:	687b      	ldr	r3, [r7, #4]
3418d930:	3304      	adds	r3, #4
3418d932:	f107 010c 	add.w	r1, r7, #12
3418d936:	224c      	movs	r2, #76	@ 0x4c
3418d938:	4618      	mov	r0, r3
3418d93a:	f002 fd38 	bl	341903ae <memcpy>
  SalXspi->CommandExtension = 0;
3418d93e:	687b      	ldr	r3, [r7, #4]
3418d940:	2200      	movs	r2, #0
3418d942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  SalXspi->PhyLink = PHY_LINK_1S1S1S;
3418d946:	687b      	ldr	r3, [r7, #4]
3418d948:	2200      	movs	r2, #0
3418d94a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_TX_CPLT_CB_ID, SAL_XSPI_CompleteCallback);
  /* set the error callback */
  HAL_XSPI_RegisterCallback(SalXspi->hxspi,HAL_XSPI_ERROR_CB_ID, SAL_XSPI_ErrorCallback);
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return HAL_OK;
3418d94e:	2300      	movs	r3, #0
}
3418d950:	4618      	mov	r0, r3
3418d952:	3758      	adds	r7, #88	@ 0x58
3418d954:	46bd      	mov	sp, r7
3418d956:	bd80      	pop	{r7, pc}

3418d958 <SAL_XSPI_MemoryConfig>:

HAL_StatusTypeDef SAL_XSPI_MemoryConfig(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_MemParamTypeTypeDef ParmetersType, void *ParamVal)
{
3418d958:	b580      	push	{r7, lr}
3418d95a:	b098      	sub	sp, #96	@ 0x60
3418d95c:	af00      	add	r7, sp, #0
3418d95e:	60f8      	str	r0, [r7, #12]
3418d960:	460b      	mov	r3, r1
3418d962:	607a      	str	r2, [r7, #4]
3418d964:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr = HAL_OK;
3418d966:	2300      	movs	r3, #0
3418d968:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  XSPI_RegularCmdTypeDef s_commandbase = SalXspi->Commandbase;
3418d96c:	68fb      	ldr	r3, [r7, #12]
3418d96e:	f107 0010 	add.w	r0, r7, #16
3418d972:	3304      	adds	r3, #4
3418d974:	224c      	movs	r2, #76	@ 0x4c
3418d976:	4619      	mov	r1, r3
3418d978:	f002 fd19 	bl	341903ae <memcpy>

  switch (ParmetersType) {
3418d97c:	7afb      	ldrb	r3, [r7, #11]
3418d97e:	2b04      	cmp	r3, #4
3418d980:	f200 812a 	bhi.w	3418dbd8 <SAL_XSPI_MemoryConfig+0x280>
3418d984:	a201      	add	r2, pc, #4	@ (adr r2, 3418d98c <SAL_XSPI_MemoryConfig+0x34>)
3418d986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418d98a:	bf00      	nop
3418d98c:	3418d9a1 	.word	0x3418d9a1
3418d990:	3418dbc9 	.word	0x3418dbc9
3418d994:	3418db9b 	.word	0x3418db9b
3418d998:	3418dbd9 	.word	0x3418dbd9
3418d99c:	3418dba3 	.word	0x3418dba3
  case PARAM_PHY_LINK:{
    SalXspi->PhyLink = *((SAL_XSPI_PhysicalLinkTypeDef *)ParamVal);
3418d9a0:	687b      	ldr	r3, [r7, #4]
3418d9a2:	781a      	ldrb	r2, [r3, #0]
3418d9a4:	68fb      	ldr	r3, [r7, #12]
3418d9a6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_PHY_LINK::");DEBUG_PARAM_DATA(STR_PHY_LINK(SalXspi->PhyLink));
    switch (SalXspi->PhyLink)
3418d9aa:	68fb      	ldr	r3, [r7, #12]
3418d9ac:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418d9b0:	2b0b      	cmp	r3, #11
3418d9b2:	f200 80ed 	bhi.w	3418db90 <SAL_XSPI_MemoryConfig+0x238>
3418d9b6:	a201      	add	r2, pc, #4	@ (adr r2, 3418d9bc <SAL_XSPI_MemoryConfig+0x64>)
3418d9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418d9bc:	3418d9ed 	.word	0x3418d9ed
3418d9c0:	3418d9ed 	.word	0x3418d9ed
3418d9c4:	3418d9ed 	.word	0x3418d9ed
3418d9c8:	3418d9ed 	.word	0x3418d9ed
3418d9cc:	3418da1d 	.word	0x3418da1d
3418d9d0:	3418da1d 	.word	0x3418da1d
3418d9d4:	3418da4d 	.word	0x3418da4d
3418d9d8:	3418da81 	.word	0x3418da81
3418d9dc:	3418dab1 	.word	0x3418dab1
3418d9e0:	3418dae7 	.word	0x3418dae7
3418d9e4:	3418db1d 	.word	0x3418db1d
3418d9e8:	3418db57 	.word	0x3418db57
    {
    case PHY_LINK_1S1D1D:
    case PHY_LINK_1S2S2S:
    case PHY_LINK_1S1S2S:
    case PHY_LINK_1S1S1S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418d9ec:	2301      	movs	r3, #1
3418d9ee:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418d9f0:	2300      	movs	r3, #0
3418d9f2:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418d9f4:	2300      	movs	r3, #0
3418d9f6:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_1_LINE;
3418d9f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418d9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418d9fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418da02:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418da04:	2300      	movs	r3, #0
3418da06:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_1_LINE;
3418da08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418da0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418da0e:	2300      	movs	r3, #0
3418da10:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418da12:	2308      	movs	r3, #8
3418da14:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418da16:	2300      	movs	r3, #0
3418da18:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418da1a:	e0bd      	b.n	3418db98 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_4S4D4D:
    case PHY_LINK_4S4S4S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418da1c:	2303      	movs	r3, #3
3418da1e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418da20:	2300      	movs	r3, #0
3418da22:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418da24:	2300      	movs	r3, #0
3418da26:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418da28:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418da2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418da2e:	2300      	movs	r3, #0
3418da30:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418da32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418da36:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418da38:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418da3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418da3e:	2300      	movs	r3, #0
3418da40:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418da42:	2306      	movs	r3, #6
3418da44:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418da46:	2300      	movs	r3, #0
3418da48:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418da4a:	e0a5      	b.n	3418db98 <SAL_XSPI_MemoryConfig+0x240>
      }
    case PHY_LINK_4D4D4D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_4_LINES;
3418da4c:	2303      	movs	r3, #3
3418da4e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418da50:	2300      	movs	r3, #0
3418da52:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418da54:	2308      	movs	r3, #8
3418da56:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_4_LINES;
3418da58:	f44f 7340 	mov.w	r3, #768	@ 0x300
3418da5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418da5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418da62:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418da64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418da68:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_4_LINES;
3418da6a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
3418da6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418da70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418da74:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 6;
3418da76:	2306      	movs	r3, #6
3418da78:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418da7a:	2300      	movs	r3, #0
3418da7c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418da7e:	e08b      	b.n	3418db98 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_1S8S8S: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_1_LINE;
3418da80:	2301      	movs	r3, #1
3418da82:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418da84:	2300      	movs	r3, #0
3418da86:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418da88:	2300      	movs	r3, #0
3418da8a:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418da8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418da90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418da92:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418da96:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_DISABLE;
3418da98:	2300      	movs	r3, #0
3418da9a:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418da9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418daa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_DISABLE;
3418daa2:	2300      	movs	r3, #0
3418daa4:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418daa6:	2308      	movs	r3, #8
3418daa8:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_DISABLE;
3418daaa:	2300      	movs	r3, #0
3418daac:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418daae:	e073      	b.n	3418db98 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_8S8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418dab0:	2304      	movs	r3, #4
3418dab2:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_8_BITS;
3418dab4:	2300      	movs	r3, #0
3418dab6:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418dab8:	2300      	movs	r3, #0
3418daba:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418dabc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418dac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418dac2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418dac6:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418dac8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418dacc:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418dace:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418dad2:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418dad4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418dad8:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 8;
3418dada:	2308      	movs	r3, #8
3418dadc:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418dade:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418dae2:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418dae4:	e058      	b.n	3418db98 <SAL_XSPI_MemoryConfig+0x240>
    }

    case PHY_LINK_8D8D8D: {
      s_commandbase.InstructionMode = HAL_XSPI_INSTRUCTION_8_LINES;
3418dae6:	2304      	movs	r3, #4
3418dae8:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth = HAL_XSPI_INSTRUCTION_16_BITS;
3418daea:	2310      	movs	r3, #16
3418daec:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_ENABLE;
3418daee:	2308      	movs	r3, #8
3418daf0:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode = HAL_XSPI_ADDRESS_8_LINES;
3418daf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418daf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418daf8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418dafc:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418dafe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418db02:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.DataMode = HAL_XSPI_DATA_8_LINES;
3418db04:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418db08:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode = HAL_XSPI_DATA_DTR_ENABLE;
3418db0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418db0e:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles = 20;
3418db10:	2314      	movs	r3, #20
3418db12:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode = HAL_XSPI_DQS_ENABLE;
3418db14:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418db18:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418db1a:	e03d      	b.n	3418db98 <SAL_XSPI_MemoryConfig+0x240>
    }
    case PHY_LINK_RAM8:{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418db1c:	2304      	movs	r3, #4
3418db1e:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418db20:	2300      	movs	r3, #0
3418db22:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418db24:	2300      	movs	r3, #0
3418db26:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418db28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418db2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418db2e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418db32:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418db34:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418db38:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418db3a:	2300      	movs	r3, #0
3418db3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_8_LINES;
3418db3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
3418db42:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418db44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418db48:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418db4a:	230a      	movs	r3, #10
3418db4c:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418db4e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418db52:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418db54:	e020      	b.n	3418db98 <SAL_XSPI_MemoryConfig+0x240>
    }
#if defined(HAL_XSPI_DATA_16_LINES)
    case PHY_LINK_RAM16 :{
      s_commandbase.InstructionMode    = HAL_XSPI_INSTRUCTION_8_LINES;
3418db56:	2304      	movs	r3, #4
3418db58:	61fb      	str	r3, [r7, #28]
      s_commandbase.InstructionWidth   = HAL_XSPI_INSTRUCTION_8_BITS;
3418db5a:	2300      	movs	r3, #0
3418db5c:	623b      	str	r3, [r7, #32]
      s_commandbase.InstructionDTRMode = HAL_XSPI_INSTRUCTION_DTR_DISABLE;
3418db5e:	2300      	movs	r3, #0
3418db60:	627b      	str	r3, [r7, #36]	@ 0x24
      s_commandbase.AddressMode        = HAL_XSPI_ADDRESS_8_LINES;
3418db62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418db66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      s_commandbase.AddressWidth       = HAL_XSPI_ADDRESS_32_BITS;
3418db68:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418db6c:	633b      	str	r3, [r7, #48]	@ 0x30
      s_commandbase.AddressDTRMode     = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418db6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418db72:	637b      	str	r3, [r7, #52]	@ 0x34
      s_commandbase.AlternateBytesMode = HAL_XSPI_ALT_BYTES_NONE;
3418db74:	2300      	movs	r3, #0
3418db76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      s_commandbase.DataMode           = HAL_XSPI_DATA_16_LINES;
3418db78:	f04f 63a0 	mov.w	r3, #83886080	@ 0x5000000
3418db7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      s_commandbase.DataDTRMode        = HAL_XSPI_DATA_DTR_ENABLE;
3418db7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418db82:	653b      	str	r3, [r7, #80]	@ 0x50
      s_commandbase.DummyCycles        = 10;
3418db84:	230a      	movs	r3, #10
3418db86:	657b      	str	r3, [r7, #84]	@ 0x54
      s_commandbase.DQSMode            = HAL_XSPI_DQS_ENABLE;
3418db88:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418db8c:	65bb      	str	r3, [r7, #88]	@ 0x58
      break;
3418db8e:	e003      	b.n	3418db98 <SAL_XSPI_MemoryConfig+0x240>
    }
#endif /* defined(HAL_XSPI_DATA_16_LINES) */
    default:
      retr = HAL_ERROR;
3418db90:	2301      	movs	r3, #1
3418db92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      break;
3418db96:	bf00      	nop
    }
    DEBUG_PARAM_END();
    break;
3418db98:	e022      	b.n	3418dbe0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_ADDRESS_4BITS: {
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_ADDRESS_4BITS"); DEBUG_PARAM_END();
    s_commandbase.AddressWidth = HAL_XSPI_ADDRESS_32_BITS;
3418db9a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418db9e:	633b      	str	r3, [r7, #48]	@ 0x30
    break;
3418dba0:	e01e      	b.n	3418dbe0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_FLASHSIZE:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418dba2:	687b      	ldr	r3, [r7, #4]
3418dba4:	781b      	ldrb	r3, [r3, #0]
3418dba6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_FLASHSIZE::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_DEVSIZE, ((uint32_t)valParam) << XSPI_DCR1_DEVSIZE_Pos);
3418dbaa:	68fb      	ldr	r3, [r7, #12]
3418dbac:	681b      	ldr	r3, [r3, #0]
3418dbae:	681b      	ldr	r3, [r3, #0]
3418dbb0:	689b      	ldr	r3, [r3, #8]
3418dbb2:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
3418dbb6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
3418dbba:	041a      	lsls	r2, r3, #16
3418dbbc:	68fb      	ldr	r3, [r7, #12]
3418dbbe:	681b      	ldr	r3, [r3, #0]
3418dbc0:	681b      	ldr	r3, [r3, #0]
3418dbc2:	430a      	orrs	r2, r1
3418dbc4:	609a      	str	r2, [r3, #8]
    break;
3418dbc6:	e00b      	b.n	3418dbe0 <SAL_XSPI_MemoryConfig+0x288>
  }
  case PARAM_DUMMY_CYCLES:{
    uint8_t valParam = *((uint8_t *)ParamVal);
3418dbc8:	687b      	ldr	r3, [r7, #4]
3418dbca:	781b      	ldrb	r3, [r3, #0]
3418dbcc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::PARAM_DUMMY_CYCLES::"); DEBUG_PARAM_INT(valParam); DEBUG_PARAM_END();
    s_commandbase.DummyCycles = valParam;
3418dbd0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
3418dbd4:	657b      	str	r3, [r7, #84]	@ 0x54
    break;
3418dbd6:	e003      	b.n	3418dbe0 <SAL_XSPI_MemoryConfig+0x288>
  }
  default:
    DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_MemoryConfig::ERROR"); DEBUG_PARAM_END();
    retr = HAL_ERROR;
3418dbd8:	2301      	movs	r3, #1
3418dbda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    break;
3418dbde:	bf00      	nop
  }
  SalXspi->Commandbase = s_commandbase;
3418dbe0:	68fb      	ldr	r3, [r7, #12]
3418dbe2:	3304      	adds	r3, #4
3418dbe4:	f107 0110 	add.w	r1, r7, #16
3418dbe8:	224c      	movs	r2, #76	@ 0x4c
3418dbea:	4618      	mov	r0, r3
3418dbec:	f002 fbdf 	bl	341903ae <memcpy>
  return retr;
3418dbf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418dbf4:	4618      	mov	r0, r3
3418dbf6:	3760      	adds	r7, #96	@ 0x60
3418dbf8:	46bd      	mov	sp, r7
3418dbfa:	bd80      	pop	{r7, pc}

3418dbfc <SAL_XSPI_GetSFDP>:

HAL_StatusTypeDef SAL_XSPI_GetSFDP(SAL_XSPI_ObjectTypeDef *SalXspi, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418dbfc:	b580      	push	{r7, lr}
3418dbfe:	b098      	sub	sp, #96	@ 0x60
3418dc00:	af00      	add	r7, sp, #0
3418dc02:	60f8      	str	r0, [r7, #12]
3418dc04:	60b9      	str	r1, [r7, #8]
3418dc06:	607a      	str	r2, [r7, #4]
3418dc08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418dc0a:	68fb      	ldr	r3, [r7, #12]
3418dc0c:	f107 0010 	add.w	r0, r7, #16
3418dc10:	3304      	adds	r3, #4
3418dc12:	224c      	movs	r2, #76	@ 0x4c
3418dc14:	4619      	mov	r1, r3
3418dc16:	f002 fbca 	bl	341903ae <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x5A);
3418dc1a:	68fb      	ldr	r3, [r7, #12]
3418dc1c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418dc20:	6a39      	ldr	r1, [r7, #32]
3418dc22:	225a      	movs	r2, #90	@ 0x5a
3418dc24:	4618      	mov	r0, r3
3418dc26:	f000 fb7a 	bl	3418e31e <XSPI_FormatCommand>
3418dc2a:	4603      	mov	r3, r0
3418dc2c:	61bb      	str	r3, [r7, #24]

  s_command.Address     = Address;
3418dc2e:	68bb      	ldr	r3, [r7, #8]
3418dc30:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength  = DataSize;
3418dc32:	683b      	ldr	r3, [r7, #0]
3418dc34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles = SalXspi->SFDPDummyCycle;
3418dc36:	68fb      	ldr	r3, [r7, #12]
3418dc38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
3418dc3c:	657b      	str	r3, [r7, #84]	@ 0x54

  if (s_command.AddressMode == HAL_XSPI_ADDRESS_1_LINE)
3418dc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
3418dc40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3418dc44:	d102      	bne.n	3418dc4c <SAL_XSPI_GetSFDP+0x50>
  {
    s_command.AddressWidth = HAL_XSPI_ADDRESS_24_BITS;
3418dc46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418dc4a:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (s_command.DataDTRMode == HAL_XSPI_DATA_DTR_ENABLE)
3418dc4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3418dc4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
3418dc52:	d103      	bne.n	3418dc5c <SAL_XSPI_GetSFDP+0x60>
  {
    s_command.DQSMode = HAL_XSPI_DQS_ENABLE;
3418dc54:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
3418dc58:	65bb      	str	r3, [r7, #88]	@ 0x58
3418dc5a:	e001      	b.n	3418dc60 <SAL_XSPI_GetSFDP+0x64>
  }
  else
  {
    s_command.DQSMode = HAL_XSPI_DQS_DISABLE;
3418dc5c:	2300      	movs	r3, #0
3418dc5e:	65bb      	str	r3, [r7, #88]	@ 0x58
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418dc60:	68fb      	ldr	r3, [r7, #12]
3418dc62:	681b      	ldr	r3, [r3, #0]
3418dc64:	f107 0110 	add.w	r1, r7, #16
3418dc68:	2264      	movs	r2, #100	@ 0x64
3418dc6a:	4618      	mov	r0, r3
3418dc6c:	f7fe fd02 	bl	3418c674 <HAL_XSPI_Command>
3418dc70:	4603      	mov	r3, r0
3418dc72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418dc76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418dc7a:	2b00      	cmp	r3, #0
3418dc7c:	d10a      	bne.n	3418dc94 <SAL_XSPI_GetSFDP+0x98>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418dc7e:	68fb      	ldr	r3, [r7, #12]
3418dc80:	681b      	ldr	r3, [r3, #0]
3418dc82:	2264      	movs	r2, #100	@ 0x64
3418dc84:	6879      	ldr	r1, [r7, #4]
3418dc86:	4618      	mov	r0, r3
3418dc88:	f7fe fdf7 	bl	3418c87a <HAL_XSPI_Receive>
3418dc8c:	4603      	mov	r3, r0
3418dc8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418dc92:	e000      	b.n	3418dc96 <SAL_XSPI_GetSFDP+0x9a>
    goto error;
3418dc94:	bf00      	nop

error:
  if (retr != HAL_OK )
3418dc96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418dc9a:	2b00      	cmp	r3, #0
3418dc9c:	d004      	beq.n	3418dca8 <SAL_XSPI_GetSFDP+0xac>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418dc9e:	68fb      	ldr	r3, [r7, #12]
3418dca0:	681b      	ldr	r3, [r3, #0]
3418dca2:	4618      	mov	r0, r3
3418dca4:	f7fe ff82 	bl	3418cbac <HAL_XSPI_Abort>
  }
  return retr;
3418dca8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418dcac:	4618      	mov	r0, r3
3418dcae:	3760      	adds	r7, #96	@ 0x60
3418dcb0:	46bd      	mov	sp, r7
3418dcb2:	bd80      	pop	{r7, pc}

3418dcb4 <SAL_XSPI_GetId>:

HAL_StatusTypeDef SAL_XSPI_GetId(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t *Data, uint32_t DataSize)
{
3418dcb4:	b580      	push	{r7, lr}
3418dcb6:	b098      	sub	sp, #96	@ 0x60
3418dcb8:	af00      	add	r7, sp, #0
3418dcba:	60f8      	str	r0, [r7, #12]
3418dcbc:	60b9      	str	r1, [r7, #8]
3418dcbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418dcc0:	68fb      	ldr	r3, [r7, #12]
3418dcc2:	f107 0010 	add.w	r0, r7, #16
3418dcc6:	3304      	adds	r3, #4
3418dcc8:	224c      	movs	r2, #76	@ 0x4c
3418dcca:	4619      	mov	r1, r3
3418dccc:	f002 fb6f 	bl	341903ae <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, 0x9F);
3418dcd0:	68fb      	ldr	r3, [r7, #12]
3418dcd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418dcd6:	6a39      	ldr	r1, [r7, #32]
3418dcd8:	229f      	movs	r2, #159	@ 0x9f
3418dcda:	4618      	mov	r0, r3
3418dcdc:	f000 fb1f 	bl	3418e31e <XSPI_FormatCommand>
3418dce0:	4603      	mov	r3, r0
3418dce2:	61bb      	str	r3, [r7, #24]

  s_command.DataLength  = DataSize;
3418dce4:	687b      	ldr	r3, [r7, #4]
3418dce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.AddressMode = HAL_XSPI_ADDRESS_NONE;
3418dce8:	2300      	movs	r3, #0
3418dcea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if  (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418dcec:	69fb      	ldr	r3, [r7, #28]
3418dcee:	2b01      	cmp	r3, #1
3418dcf0:	d105      	bne.n	3418dcfe <SAL_XSPI_GetId+0x4a>
  {
    s_command.DummyCycles       = 0;
3418dcf2:	2300      	movs	r3, #0
3418dcf4:	657b      	str	r3, [r7, #84]	@ 0x54
    /* this behavior is linked with micron memory to read ID in 1S8S8S */
    s_command.DataMode = HAL_XSPI_DATA_1_LINE;
3418dcf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418dcfa:	64bb      	str	r3, [r7, #72]	@ 0x48
3418dcfc:	e003      	b.n	3418dd06 <SAL_XSPI_GetId+0x52>
  }
  else
  {
    /* this behavior is valid for macromix and must be confirmed on the other memories */
    s_command.Address = 0;
3418dcfe:	2300      	movs	r3, #0
3418dd00:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.DummyCycles = 8;
3418dd02:	2308      	movs	r3, #8
3418dd04:	657b      	str	r3, [r7, #84]	@ 0x54
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418dd06:	68fb      	ldr	r3, [r7, #12]
3418dd08:	681b      	ldr	r3, [r3, #0]
3418dd0a:	f107 0110 	add.w	r1, r7, #16
3418dd0e:	2264      	movs	r2, #100	@ 0x64
3418dd10:	4618      	mov	r0, r3
3418dd12:	f7fe fcaf 	bl	3418c674 <HAL_XSPI_Command>
3418dd16:	4603      	mov	r3, r0
3418dd18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418dd1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418dd20:	2b00      	cmp	r3, #0
3418dd22:	d10a      	bne.n	3418dd3a <SAL_XSPI_GetId+0x86>
  {
    goto error;
  }

  /* Reception of the data */
  retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418dd24:	68fb      	ldr	r3, [r7, #12]
3418dd26:	681b      	ldr	r3, [r3, #0]
3418dd28:	2264      	movs	r2, #100	@ 0x64
3418dd2a:	68b9      	ldr	r1, [r7, #8]
3418dd2c:	4618      	mov	r0, r3
3418dd2e:	f7fe fda4 	bl	3418c87a <HAL_XSPI_Receive>
3418dd32:	4603      	mov	r3, r0
3418dd34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418dd38:	e000      	b.n	3418dd3c <SAL_XSPI_GetId+0x88>
    goto error;
3418dd3a:	bf00      	nop

error:
  if (retr != HAL_OK )
3418dd3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418dd40:	2b00      	cmp	r3, #0
3418dd42:	d004      	beq.n	3418dd4e <SAL_XSPI_GetId+0x9a>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418dd44:	68fb      	ldr	r3, [r7, #12]
3418dd46:	681b      	ldr	r3, [r3, #0]
3418dd48:	4618      	mov	r0, r3
3418dd4a:	f7fe ff2f 	bl	3418cbac <HAL_XSPI_Abort>
  }
  return retr;
3418dd4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418dd52:	4618      	mov	r0, r3
3418dd54:	3760      	adds	r7, #96	@ 0x60
3418dd56:	46bd      	mov	sp, r7
3418dd58:	bd80      	pop	{r7, pc}

3418dd5a <SAL_XSPI_Read>:

HAL_StatusTypeDef SAL_XSPI_Read(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t *Data, uint32_t DataSize)
{
3418dd5a:	b580      	push	{r7, lr}
3418dd5c:	b098      	sub	sp, #96	@ 0x60
3418dd5e:	af00      	add	r7, sp, #0
3418dd60:	60f8      	str	r0, [r7, #12]
3418dd62:	607a      	str	r2, [r7, #4]
3418dd64:	603b      	str	r3, [r7, #0]
3418dd66:	460b      	mov	r3, r1
3418dd68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418dd6a:	68fb      	ldr	r3, [r7, #12]
3418dd6c:	f107 0010 	add.w	r0, r7, #16
3418dd70:	3304      	adds	r3, #4
3418dd72:	224c      	movs	r2, #76	@ 0x4c
3418dd74:	4619      	mov	r1, r3
3418dd76:	f002 fb1a 	bl	341903ae <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418dd7a:	68fb      	ldr	r3, [r7, #12]
3418dd7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418dd80:	6a39      	ldr	r1, [r7, #32]
3418dd82:	7afa      	ldrb	r2, [r7, #11]
3418dd84:	4618      	mov	r0, r3
3418dd86:	f000 faca 	bl	3418e31e <XSPI_FormatCommand>
3418dd8a:	4603      	mov	r3, r0
3418dd8c:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418dd8e:	687b      	ldr	r3, [r7, #4]
3418dd90:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418dd92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418dd94:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DTR management for single/dual/quad */
  switch(SalXspi->PhyLink)
3418dd96:	68fb      	ldr	r3, [r7, #12]
3418dd98:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
3418dd9c:	2b05      	cmp	r3, #5
3418dd9e:	d006      	beq.n	3418ddae <SAL_XSPI_Read+0x54>
3418dda0:	2b05      	cmp	r3, #5
3418dda2:	dc1a      	bgt.n	3418ddda <SAL_XSPI_Read+0x80>
3418dda4:	2b01      	cmp	r3, #1
3418dda6:	d014      	beq.n	3418ddd2 <SAL_XSPI_Read+0x78>
3418dda8:	2b02      	cmp	r3, #2
3418ddaa:	d00b      	beq.n	3418ddc4 <SAL_XSPI_Read+0x6a>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
   break;
   }
   default :{
     /* keep default parameters */
   break;
3418ddac:	e015      	b.n	3418ddda <SAL_XSPI_Read+0x80>
     s_command.AddressDTRMode = HAL_XSPI_ADDRESS_DTR_ENABLE;
3418ddae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3418ddb2:	637b      	str	r3, [r7, #52]	@ 0x34
     s_command.DataDTRMode    = HAL_XSPI_DATA_DTR_ENABLE;
3418ddb4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
3418ddb8:	653b      	str	r3, [r7, #80]	@ 0x50
     s_command.DummyCycles = SalXspi->DTRDummyCycle;
3418ddba:	68fb      	ldr	r3, [r7, #12]
3418ddbc:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418ddc0:	657b      	str	r3, [r7, #84]	@ 0x54
   break;
3418ddc2:	e00b      	b.n	3418dddc <SAL_XSPI_Read+0x82>
     s_command.AddressMode = HAL_XSPI_ADDRESS_2_LINES;
3418ddc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
3418ddc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
3418ddca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418ddce:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418ddd0:	e004      	b.n	3418dddc <SAL_XSPI_Read+0x82>
     s_command.DataMode = HAL_XSPI_DATA_2_LINES;
3418ddd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
3418ddd6:	64bb      	str	r3, [r7, #72]	@ 0x48
   break;
3418ddd8:	e000      	b.n	3418dddc <SAL_XSPI_Read+0x82>
   break;
3418ddda:	bf00      	nop
   }
  }

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418dddc:	68fb      	ldr	r3, [r7, #12]
3418ddde:	681b      	ldr	r3, [r3, #0]
3418dde0:	f107 0110 	add.w	r1, r7, #16
3418dde4:	2264      	movs	r2, #100	@ 0x64
3418dde6:	4618      	mov	r0, r3
3418dde8:	f7fe fc44 	bl	3418c674 <HAL_XSPI_Command>
3418ddec:	4603      	mov	r3, r0
3418ddee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if ( retr  != HAL_OK)
3418ddf2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418ddf6:	2b00      	cmp	r3, #0
3418ddf8:	d107      	bne.n	3418de0a <SAL_XSPI_Read+0xb0>
  {
    goto error;
  }

  /* read the data */
  retr = XSPI_Receive(SalXspi, Data);
3418ddfa:	6839      	ldr	r1, [r7, #0]
3418ddfc:	68f8      	ldr	r0, [r7, #12]
3418ddfe:	f000 faca 	bl	3418e396 <XSPI_Receive>
3418de02:	4603      	mov	r3, r0
3418de04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418de08:	e000      	b.n	3418de0c <SAL_XSPI_Read+0xb2>
    goto error;
3418de0a:	bf00      	nop

error:
  if (retr != HAL_OK )
3418de0c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418de10:	2b00      	cmp	r3, #0
3418de12:	d004      	beq.n	3418de1e <SAL_XSPI_Read+0xc4>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418de14:	68fb      	ldr	r3, [r7, #12]
3418de16:	681b      	ldr	r3, [r3, #0]
3418de18:	4618      	mov	r0, r3
3418de1a:	f7fe fec7 	bl	3418cbac <HAL_XSPI_Abort>
  }
  return retr;
3418de1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418de22:	4618      	mov	r0, r3
3418de24:	3760      	adds	r7, #96	@ 0x60
3418de26:	46bd      	mov	sp, r7
3418de28:	bd80      	pop	{r7, pc}

3418de2a <SAL_XSPI_Write>:

HAL_StatusTypeDef SAL_XSPI_Write(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, const uint8_t *Data, uint32_t DataSize)
{
3418de2a:	b580      	push	{r7, lr}
3418de2c:	b098      	sub	sp, #96	@ 0x60
3418de2e:	af00      	add	r7, sp, #0
3418de30:	60f8      	str	r0, [r7, #12]
3418de32:	607a      	str	r2, [r7, #4]
3418de34:	603b      	str	r3, [r7, #0]
3418de36:	460b      	mov	r3, r1
3418de38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418de3a:	68fb      	ldr	r3, [r7, #12]
3418de3c:	f107 0010 	add.w	r0, r7, #16
3418de40:	3304      	adds	r3, #4
3418de42:	224c      	movs	r2, #76	@ 0x4c
3418de44:	4619      	mov	r1, r3
3418de46:	f002 fab2 	bl	341903ae <memcpy>

  /* Initialize the read ID command */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418de4a:	68fb      	ldr	r3, [r7, #12]
3418de4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418de50:	6a39      	ldr	r1, [r7, #32]
3418de52:	7afa      	ldrb	r2, [r7, #11]
3418de54:	4618      	mov	r0, r3
3418de56:	f000 fa62 	bl	3418e31e <XSPI_FormatCommand>
3418de5a:	4603      	mov	r3, r0
3418de5c:	61bb      	str	r3, [r7, #24]

  s_command.Address           = Address;
3418de5e:	687b      	ldr	r3, [r7, #4]
3418de60:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataLength        = DataSize;
3418de62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
3418de64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DummyCycles       = 0u;
3418de66:	2300      	movs	r3, #0
3418de68:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DQSMode           = HAL_XSPI_DQS_DISABLE;
3418de6a:	2300      	movs	r3, #0
3418de6c:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Configure the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418de6e:	68fb      	ldr	r3, [r7, #12]
3418de70:	681b      	ldr	r3, [r3, #0]
3418de72:	f107 0110 	add.w	r1, r7, #16
3418de76:	2264      	movs	r2, #100	@ 0x64
3418de78:	4618      	mov	r0, r3
3418de7a:	f7fe fbfb 	bl	3418c674 <HAL_XSPI_Command>
3418de7e:	4603      	mov	r3, r0
3418de80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (HAL_OK != retr)
3418de84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418de88:	2b00      	cmp	r3, #0
3418de8a:	d107      	bne.n	3418de9c <SAL_XSPI_Write+0x72>
  {
    goto error;
  }

  /* transmit data */
  retr = XSPI_Transmit(SalXspi, Data);
3418de8c:	6839      	ldr	r1, [r7, #0]
3418de8e:	68f8      	ldr	r0, [r7, #12]
3418de90:	f000 fa6e 	bl	3418e370 <XSPI_Transmit>
3418de94:	4603      	mov	r3, r0
3418de96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
3418de9a:	e000      	b.n	3418de9e <SAL_XSPI_Write+0x74>
    goto error;
3418de9c:	bf00      	nop

error:
  if (retr != HAL_OK )
3418de9e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418dea2:	2b00      	cmp	r3, #0
3418dea4:	d004      	beq.n	3418deb0 <SAL_XSPI_Write+0x86>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418dea6:	68fb      	ldr	r3, [r7, #12]
3418dea8:	681b      	ldr	r3, [r3, #0]
3418deaa:	4618      	mov	r0, r3
3418deac:	f7fe fe7e 	bl	3418cbac <HAL_XSPI_Abort>
  }
  return retr;
3418deb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418deb4:	4618      	mov	r0, r3
3418deb6:	3760      	adds	r7, #96	@ 0x60
3418deb8:	46bd      	mov	sp, r7
3418deba:	bd80      	pop	{r7, pc}

3418debc <SAL_XSPI_CommandSendData>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_CommandSendData(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418debc:	b580      	push	{r7, lr}
3418debe:	b098      	sub	sp, #96	@ 0x60
3418dec0:	af00      	add	r7, sp, #0
3418dec2:	60f8      	str	r0, [r7, #12]
3418dec4:	607a      	str	r2, [r7, #4]
3418dec6:	461a      	mov	r2, r3
3418dec8:	460b      	mov	r3, r1
3418deca:	72fb      	strb	r3, [r7, #11]
3418decc:	4613      	mov	r3, r2
3418dece:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418ded0:	68fb      	ldr	r3, [r7, #12]
3418ded2:	f107 0010 	add.w	r0, r7, #16
3418ded6:	3304      	adds	r3, #4
3418ded8:	224c      	movs	r2, #76	@ 0x4c
3418deda:	4619      	mov	r1, r3
3418dedc:	f002 fa67 	bl	341903ae <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418dee0:	68fb      	ldr	r3, [r7, #12]
3418dee2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418dee6:	6a39      	ldr	r1, [r7, #32]
3418dee8:	7afa      	ldrb	r2, [r7, #11]
3418deea:	4618      	mov	r0, r3
3418deec:	f000 fa17 	bl	3418e31e <XSPI_FormatCommand>
3418def0:	4603      	mov	r3, r0
3418def2:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418def4:	2300      	movs	r3, #0
3418def6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0U;
3418def8:	2300      	movs	r3, #0
3418defa:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418defc:	893b      	ldrh	r3, [r7, #8]
3418defe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418df00:	2300      	movs	r3, #0
3418df02:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418df04:	893b      	ldrh	r3, [r7, #8]
3418df06:	2b00      	cmp	r3, #0
3418df08:	d101      	bne.n	3418df0e <SAL_XSPI_CommandSendData+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418df0a:	2300      	movs	r3, #0
3418df0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418df0e:	68fb      	ldr	r3, [r7, #12]
3418df10:	681b      	ldr	r3, [r3, #0]
3418df12:	f107 0110 	add.w	r1, r7, #16
3418df16:	2264      	movs	r2, #100	@ 0x64
3418df18:	4618      	mov	r0, r3
3418df1a:	f7fe fbab 	bl	3418c674 <HAL_XSPI_Command>
3418df1e:	4603      	mov	r3, r0
3418df20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418df24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418df28:	2b00      	cmp	r3, #0
3418df2a:	d10c      	bne.n	3418df46 <SAL_XSPI_CommandSendData+0x8a>
3418df2c:	893b      	ldrh	r3, [r7, #8]
3418df2e:	2b00      	cmp	r3, #0
3418df30:	d009      	beq.n	3418df46 <SAL_XSPI_CommandSendData+0x8a>
  {
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418df32:	68fb      	ldr	r3, [r7, #12]
3418df34:	681b      	ldr	r3, [r3, #0]
3418df36:	2264      	movs	r2, #100	@ 0x64
3418df38:	6879      	ldr	r1, [r7, #4]
3418df3a:	4618      	mov	r0, r3
3418df3c:	f7fe fc2a 	bl	3418c794 <HAL_XSPI_Transmit>
3418df40:	4603      	mov	r3, r0
3418df42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418df46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418df4a:	2b00      	cmp	r3, #0
3418df4c:	d004      	beq.n	3418df58 <SAL_XSPI_CommandSendData+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418df4e:	68fb      	ldr	r3, [r7, #12]
3418df50:	681b      	ldr	r3, [r3, #0]
3418df52:	4618      	mov	r0, r3
3418df54:	f7fe fe2a 	bl	3418cbac <HAL_XSPI_Abort>
  }
  return retr;
3418df58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418df5c:	4618      	mov	r0, r3
3418df5e:	3760      	adds	r7, #96	@ 0x60
3418df60:	46bd      	mov	sp, r7
3418df62:	bd80      	pop	{r7, pc}

3418df64 <SAL_XSPI_SendReadCommand>:

HAL_StatusTypeDef SAL_XSPI_SendReadCommand(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                           uint8_t *Data, uint16_t DataSize)
{
3418df64:	b580      	push	{r7, lr}
3418df66:	b098      	sub	sp, #96	@ 0x60
3418df68:	af00      	add	r7, sp, #0
3418df6a:	60f8      	str	r0, [r7, #12]
3418df6c:	607a      	str	r2, [r7, #4]
3418df6e:	461a      	mov	r2, r3
3418df70:	460b      	mov	r3, r1
3418df72:	72fb      	strb	r3, [r7, #11]
3418df74:	4613      	mov	r3, r2
3418df76:	813b      	strh	r3, [r7, #8]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418df78:	68fb      	ldr	r3, [r7, #12]
3418df7a:	f107 0010 	add.w	r0, r7, #16
3418df7e:	3304      	adds	r3, #4
3418df80:	224c      	movs	r2, #76	@ 0x4c
3418df82:	4619      	mov	r1, r3
3418df84:	f002 fa13 	bl	341903ae <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418df88:	68fb      	ldr	r3, [r7, #12]
3418df8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418df8e:	6a39      	ldr	r1, [r7, #32]
3418df90:	7afa      	ldrb	r2, [r7, #11]
3418df92:	4618      	mov	r0, r3
3418df94:	f000 f9c3 	bl	3418e31e <XSPI_FormatCommand>
3418df98:	4603      	mov	r3, r0
3418df9a:	61bb      	str	r3, [r7, #24]

  s_command.AddressMode        = HAL_XSPI_ADDRESS_NONE;
3418df9c:	2300      	movs	r3, #0
3418df9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles        = 0u;
3418dfa0:	2300      	movs	r3, #0
3418dfa2:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418dfa4:	893b      	ldrh	r3, [r7, #8]
3418dfa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418dfa8:	2300      	movs	r3, #0
3418dfaa:	65bb      	str	r3, [r7, #88]	@ 0x58

  if (DataSize == 0u)
3418dfac:	893b      	ldrh	r3, [r7, #8]
3418dfae:	2b00      	cmp	r3, #0
3418dfb0:	d101      	bne.n	3418dfb6 <SAL_XSPI_SendReadCommand+0x52>
  {
    s_command.DataMode         = HAL_XSPI_DATA_NONE;
3418dfb2:	2300      	movs	r3, #0
3418dfb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418dfb6:	68fb      	ldr	r3, [r7, #12]
3418dfb8:	681b      	ldr	r3, [r3, #0]
3418dfba:	f107 0110 	add.w	r1, r7, #16
3418dfbe:	2264      	movs	r2, #100	@ 0x64
3418dfc0:	4618      	mov	r0, r3
3418dfc2:	f7fe fb57 	bl	3418c674 <HAL_XSPI_Command>
3418dfc6:	4603      	mov	r3, r0
3418dfc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if (( retr == HAL_OK) && (DataSize != 0u))
3418dfcc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418dfd0:	2b00      	cmp	r3, #0
3418dfd2:	d10c      	bne.n	3418dfee <SAL_XSPI_SendReadCommand+0x8a>
3418dfd4:	893b      	ldrh	r3, [r7, #8]
3418dfd6:	2b00      	cmp	r3, #0
3418dfd8:	d009      	beq.n	3418dfee <SAL_XSPI_SendReadCommand+0x8a>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418dfda:	68fb      	ldr	r3, [r7, #12]
3418dfdc:	681b      	ldr	r3, [r3, #0]
3418dfde:	2264      	movs	r2, #100	@ 0x64
3418dfe0:	6879      	ldr	r1, [r7, #4]
3418dfe2:	4618      	mov	r0, r3
3418dfe4:	f7fe fc49 	bl	3418c87a <HAL_XSPI_Receive>
3418dfe8:	4603      	mov	r3, r0
3418dfea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418dfee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418dff2:	2b00      	cmp	r3, #0
3418dff4:	d004      	beq.n	3418e000 <SAL_XSPI_SendReadCommand+0x9c>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418dff6:	68fb      	ldr	r3, [r7, #12]
3418dff8:	681b      	ldr	r3, [r3, #0]
3418dffa:	4618      	mov	r0, r3
3418dffc:	f7fe fdd6 	bl	3418cbac <HAL_XSPI_Abort>
  }
  return retr;
3418e000:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e004:	4618      	mov	r0, r3
3418e006:	3760      	adds	r7, #96	@ 0x60
3418e008:	46bd      	mov	sp, r7
3418e00a:	bd80      	pop	{r7, pc}

3418e00c <SAL_XSPI_CommandSendReadAddress>:

HAL_StatusTypeDef SAL_XSPI_CommandSendReadAddress(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command,
                                                  uint32_t Address, uint8_t *Data, uint16_t DataSize)
{
3418e00c:	b580      	push	{r7, lr}
3418e00e:	b098      	sub	sp, #96	@ 0x60
3418e010:	af00      	add	r7, sp, #0
3418e012:	60f8      	str	r0, [r7, #12]
3418e014:	607a      	str	r2, [r7, #4]
3418e016:	603b      	str	r3, [r7, #0]
3418e018:	460b      	mov	r3, r1
3418e01a:	72fb      	strb	r3, [r7, #11]
  XSPI_RegularCmdTypeDef   s_command = SalXspi->Commandbase;
3418e01c:	68fb      	ldr	r3, [r7, #12]
3418e01e:	f107 0010 	add.w	r0, r7, #16
3418e022:	3304      	adds	r3, #4
3418e024:	224c      	movs	r2, #76	@ 0x4c
3418e026:	4619      	mov	r1, r3
3418e028:	f002 f9c1 	bl	341903ae <memcpy>
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418e02c:	68fb      	ldr	r3, [r7, #12]
3418e02e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e032:	6a39      	ldr	r1, [r7, #32]
3418e034:	7afa      	ldrb	r2, [r7, #11]
3418e036:	4618      	mov	r0, r3
3418e038:	f000 f971 	bl	3418e31e <XSPI_FormatCommand>
3418e03c:	4603      	mov	r3, r0
3418e03e:	61bb      	str	r3, [r7, #24]

  s_command.Address            = Address;
3418e040:	687b      	ldr	r3, [r7, #4]
3418e042:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DummyCycles        = SalXspi->SFDPDummyCycle;
3418e044:	68fb      	ldr	r3, [r7, #12]
3418e046:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
3418e04a:	657b      	str	r3, [r7, #84]	@ 0x54
  s_command.DataLength         = DataSize;
3418e04c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
3418e050:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DQSMode            = HAL_XSPI_DQS_DISABLE;
3418e052:	2300      	movs	r3, #0
3418e054:	65bb      	str	r3, [r7, #88]	@ 0x58

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e056:	68fb      	ldr	r3, [r7, #12]
3418e058:	681b      	ldr	r3, [r3, #0]
3418e05a:	f107 0110 	add.w	r1, r7, #16
3418e05e:	2264      	movs	r2, #100	@ 0x64
3418e060:	4618      	mov	r0, r3
3418e062:	f7fe fb07 	bl	3418c674 <HAL_XSPI_Command>
3418e066:	4603      	mov	r3, r0
3418e068:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

  if ( retr == HAL_OK)
3418e06c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e070:	2b00      	cmp	r3, #0
3418e072:	d109      	bne.n	3418e088 <SAL_XSPI_CommandSendReadAddress+0x7c>
  {
    /* Get the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e074:	68fb      	ldr	r3, [r7, #12]
3418e076:	681b      	ldr	r3, [r3, #0]
3418e078:	2264      	movs	r2, #100	@ 0x64
3418e07a:	6839      	ldr	r1, [r7, #0]
3418e07c:	4618      	mov	r0, r3
3418e07e:	f7fe fbfc 	bl	3418c87a <HAL_XSPI_Receive>
3418e082:	4603      	mov	r3, r0
3418e084:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  }

  if (retr != HAL_OK )
3418e088:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
3418e08c:	2b00      	cmp	r3, #0
3418e08e:	d004      	beq.n	3418e09a <SAL_XSPI_CommandSendReadAddress+0x8e>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e090:	68fb      	ldr	r3, [r7, #12]
3418e092:	681b      	ldr	r3, [r3, #0]
3418e094:	4618      	mov	r0, r3
3418e096:	f7fe fd89 	bl	3418cbac <HAL_XSPI_Abort>
  }
  return retr;
3418e09a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
3418e09e:	4618      	mov	r0, r3
3418e0a0:	3760      	adds	r7, #96	@ 0x60
3418e0a2:	46bd      	mov	sp, r7
3418e0a4:	bd80      	pop	{r7, pc}

3418e0a6 <SAL_XSPI_CheckStatusRegister>:

HAL_StatusTypeDef SAL_XSPI_CheckStatusRegister(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t Command, uint32_t Address, uint8_t MatchValue, uint8_t MatchMask, uint32_t Timeout)
{
3418e0a6:	b580      	push	{r7, lr}
3418e0a8:	b09e      	sub	sp, #120	@ 0x78
3418e0aa:	af00      	add	r7, sp, #0
3418e0ac:	60f8      	str	r0, [r7, #12]
3418e0ae:	607a      	str	r2, [r7, #4]
3418e0b0:	461a      	mov	r2, r3
3418e0b2:	460b      	mov	r3, r1
3418e0b4:	72fb      	strb	r3, [r7, #11]
3418e0b6:	4613      	mov	r3, r2
3418e0b8:	72bb      	strb	r3, [r7, #10]
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418e0ba:	68fb      	ldr	r3, [r7, #12]
3418e0bc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
3418e0c0:	3304      	adds	r3, #4
3418e0c2:	224c      	movs	r2, #76	@ 0x4c
3418e0c4:	4619      	mov	r1, r3
3418e0c6:	f002 f972 	bl	341903ae <memcpy>
  XSPI_AutoPollingTypeDef  s_config = {
3418e0ca:	7abb      	ldrb	r3, [r7, #10]
3418e0cc:	617b      	str	r3, [r7, #20]
3418e0ce:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
3418e0d2:	61bb      	str	r3, [r7, #24]
3418e0d4:	2300      	movs	r3, #0
3418e0d6:	61fb      	str	r3, [r7, #28]
3418e0d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
3418e0dc:	623b      	str	r3, [r7, #32]
3418e0de:	2310      	movs	r3, #16
3418e0e0:	627b      	str	r3, [r7, #36]	@ 0x24
                                       .IntervalTime  = 0x10
                                      };
  HAL_StatusTypeDef retr;

  /* Initialize the writing of status register */
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, Command);
3418e0e2:	68fb      	ldr	r3, [r7, #12]
3418e0e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e0e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
3418e0ea:	7afa      	ldrb	r2, [r7, #11]
3418e0ec:	4618      	mov	r0, r3
3418e0ee:	f000 f916 	bl	3418e31e <XSPI_FormatCommand>
3418e0f2:	4603      	mov	r3, r0
3418e0f4:	633b      	str	r3, [r7, #48]	@ 0x30

  s_command.DataLength     = 1u;
3418e0f6:	2301      	movs	r3, #1
3418e0f8:	667b      	str	r3, [r7, #100]	@ 0x64
  s_command.DQSMode        = HAL_XSPI_DQS_DISABLE;
3418e0fa:	2300      	movs	r3, #0
3418e0fc:	673b      	str	r3, [r7, #112]	@ 0x70

  if (s_command.InstructionMode == HAL_XSPI_INSTRUCTION_1_LINE)
3418e0fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3418e100:	2b01      	cmp	r3, #1
3418e102:	d106      	bne.n	3418e112 <SAL_XSPI_CheckStatusRegister+0x6c>
  {
    // patch cypress to force 1 line on status read
    s_command.DataMode    = HAL_XSPI_DATA_1_LINE;
3418e104:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418e108:	663b      	str	r3, [r7, #96]	@ 0x60
    s_command.AddressMode = HAL_XSPI_DATA_NONE;
3418e10a:	2300      	movs	r3, #0
3418e10c:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.DummyCycles = 0u;
3418e10e:	2300      	movs	r3, #0
3418e110:	66fb      	str	r3, [r7, #108]	@ 0x6c
  }

  /* @ is used only in 8 LINES format */
  if (s_command.DataMode == HAL_XSPI_DATA_8_LINES)
3418e112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
3418e114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
3418e118:	d107      	bne.n	3418e12a <SAL_XSPI_CheckStatusRegister+0x84>
  {
    s_command.AddressMode    = HAL_XSPI_ADDRESS_8_LINES;
3418e11a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418e11e:	647b      	str	r3, [r7, #68]	@ 0x44
    s_command.AddressWidth   = HAL_XSPI_ADDRESS_32_BITS;
3418e120:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
3418e124:	64bb      	str	r3, [r7, #72]	@ 0x48
    s_command.Address        = Address;
3418e126:	687b      	ldr	r3, [r7, #4]
3418e128:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  /* Send the command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e12a:	68fb      	ldr	r3, [r7, #12]
3418e12c:	681b      	ldr	r3, [r3, #0]
3418e12e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
3418e132:	2264      	movs	r2, #100	@ 0x64
3418e134:	4618      	mov	r0, r3
3418e136:	f7fe fa9d 	bl	3418c674 <HAL_XSPI_Command>
3418e13a:	4603      	mov	r3, r0
3418e13c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  if ( retr == HAL_OK)
3418e140:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418e144:	2b00      	cmp	r3, #0
3418e146:	d10b      	bne.n	3418e160 <SAL_XSPI_CheckStatusRegister+0xba>
  {
    retr = HAL_XSPI_AutoPolling(SalXspi->hxspi, &s_config, Timeout);
3418e148:	68fb      	ldr	r3, [r7, #12]
3418e14a:	681b      	ldr	r3, [r3, #0]
3418e14c:	f107 0114 	add.w	r1, r7, #20
3418e150:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
3418e154:	4618      	mov	r0, r3
3418e156:	f7fe fc33 	bl	3418c9c0 <HAL_XSPI_AutoPolling>
3418e15a:	4603      	mov	r3, r0
3418e15c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    DEBUG_AUTOPOLLING(SalXspi->hxspi->Instance->DR, s_config.MatchValue, s_config.MatchMask)
  }

  if (retr != HAL_OK )
3418e160:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
3418e164:	2b00      	cmp	r3, #0
3418e166:	d004      	beq.n	3418e172 <SAL_XSPI_CheckStatusRegister+0xcc>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e168:	68fb      	ldr	r3, [r7, #12]
3418e16a:	681b      	ldr	r3, [r3, #0]
3418e16c:	4618      	mov	r0, r3
3418e16e:	f7fe fd1d 	bl	3418cbac <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418e172:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
3418e176:	4618      	mov	r0, r3
3418e178:	3778      	adds	r7, #120	@ 0x78
3418e17a:	46bd      	mov	sp, r7
3418e17c:	bd80      	pop	{r7, pc}

3418e17e <SAL_XSPI_EnableMapMode>:
  return retr;
}

HAL_StatusTypeDef SAL_XSPI_EnableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi, uint8_t CommandRead, uint8_t DummyRead,
                                         uint8_t CommandWrite, uint8_t DummyWrite)
{
3418e17e:	b580      	push	{r7, lr}
3418e180:	b09a      	sub	sp, #104	@ 0x68
3418e182:	af00      	add	r7, sp, #0
3418e184:	6078      	str	r0, [r7, #4]
3418e186:	4608      	mov	r0, r1
3418e188:	4611      	mov	r1, r2
3418e18a:	461a      	mov	r2, r3
3418e18c:	4603      	mov	r3, r0
3418e18e:	70fb      	strb	r3, [r7, #3]
3418e190:	460b      	mov	r3, r1
3418e192:	70bb      	strb	r3, [r7, #2]
3418e194:	4613      	mov	r3, r2
3418e196:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef retr;
  XSPI_RegularCmdTypeDef s_command = SalXspi->Commandbase;
3418e198:	687b      	ldr	r3, [r7, #4]
3418e19a:	f107 0018 	add.w	r0, r7, #24
3418e19e:	3304      	adds	r3, #4
3418e1a0:	224c      	movs	r2, #76	@ 0x4c
3418e1a2:	4619      	mov	r1, r3
3418e1a4:	f002 f903 	bl	341903ae <memcpy>
  XSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
3418e1a8:	f107 0308 	add.w	r3, r7, #8
3418e1ac:	2200      	movs	r2, #0
3418e1ae:	601a      	str	r2, [r3, #0]
3418e1b0:	605a      	str	r2, [r3, #4]
3418e1b2:	609a      	str	r2, [r3, #8]
3418e1b4:	60da      	str	r2, [r3, #12]

  /* Initialize the read ID command */
  s_command.OperationType = HAL_XSPI_OPTYPE_READ_CFG;
3418e1b6:	2301      	movs	r3, #1
3418e1b8:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandRead);
3418e1ba:	687b      	ldr	r3, [r7, #4]
3418e1bc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e1c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418e1c2:	78fa      	ldrb	r2, [r7, #3]
3418e1c4:	4618      	mov	r0, r3
3418e1c6:	f000 f8aa 	bl	3418e31e <XSPI_FormatCommand>
3418e1ca:	4603      	mov	r3, r0
3418e1cc:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyRead;
3418e1ce:	78bb      	ldrb	r3, [r7, #2]
3418e1d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e1d2:	687b      	ldr	r3, [r7, #4]
3418e1d4:	681b      	ldr	r3, [r3, #0]
3418e1d6:	f107 0118 	add.w	r1, r7, #24
3418e1da:	2264      	movs	r2, #100	@ 0x64
3418e1dc:	4618      	mov	r0, r3
3418e1de:	f7fe fa49 	bl	3418c674 <HAL_XSPI_Command>
3418e1e2:	4603      	mov	r3, r0
3418e1e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418e1e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418e1ec:	2b00      	cmp	r3, #0
3418e1ee:	d12d      	bne.n	3418e24c <SAL_XSPI_EnableMapMode+0xce>
  {
    goto error;
  }

  /* Initialize the read ID command */
  s_command.OperationType     = HAL_XSPI_OPTYPE_WRITE_CFG;
3418e1f0:	2302      	movs	r3, #2
3418e1f2:	61bb      	str	r3, [r7, #24]
  s_command.Instruction = XSPI_FormatCommand(SalXspi->CommandExtension, s_command.InstructionWidth, CommandWrite);
3418e1f4:	687b      	ldr	r3, [r7, #4]
3418e1f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
3418e1fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3418e1fc:	787a      	ldrb	r2, [r7, #1]
3418e1fe:	4618      	mov	r0, r3
3418e200:	f000 f88d 	bl	3418e31e <XSPI_FormatCommand>
3418e204:	4603      	mov	r3, r0
3418e206:	623b      	str	r3, [r7, #32]
  s_command.DummyCycles = DummyWrite;
3418e208:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
3418e20c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  /* Configure the read command */
  retr = HAL_XSPI_Command(SalXspi->hxspi, &s_command, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e20e:	687b      	ldr	r3, [r7, #4]
3418e210:	681b      	ldr	r3, [r3, #0]
3418e212:	f107 0118 	add.w	r1, r7, #24
3418e216:	2264      	movs	r2, #100	@ 0x64
3418e218:	4618      	mov	r0, r3
3418e21a:	f7fe fa2b 	bl	3418c674 <HAL_XSPI_Command>
3418e21e:	4603      	mov	r3, r0
3418e220:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  if ( retr  != HAL_OK)
3418e224:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418e228:	2b00      	cmp	r3, #0
3418e22a:	d111      	bne.n	3418e250 <SAL_XSPI_EnableMapMode+0xd2>
  {
    goto error;
  }

  /* Activation of memory-mapped mode */
  sMemMappedCfg.TimeOutActivation  = HAL_XSPI_TIMEOUT_COUNTER_DISABLE;
3418e22c:	2300      	movs	r3, #0
3418e22e:	60bb      	str	r3, [r7, #8]
  sMemMappedCfg.TimeoutPeriodClock = 0x50;
3418e230:	2350      	movs	r3, #80	@ 0x50
3418e232:	60fb      	str	r3, [r7, #12]
  retr = HAL_XSPI_MemoryMapped(SalXspi->hxspi, &sMemMappedCfg);
3418e234:	687b      	ldr	r3, [r7, #4]
3418e236:	681b      	ldr	r3, [r3, #0]
3418e238:	f107 0208 	add.w	r2, r7, #8
3418e23c:	4611      	mov	r1, r2
3418e23e:	4618      	mov	r0, r3
3418e240:	f7fe fc48 	bl	3418cad4 <HAL_XSPI_MemoryMapped>
3418e244:	4603      	mov	r3, r0
3418e246:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
3418e24a:	e002      	b.n	3418e252 <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418e24c:	bf00      	nop
3418e24e:	e000      	b.n	3418e252 <SAL_XSPI_EnableMapMode+0xd4>
    goto error;
3418e250:	bf00      	nop

error:
  if (retr != HAL_OK )
3418e252:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
3418e256:	2b00      	cmp	r3, #0
3418e258:	d004      	beq.n	3418e264 <SAL_XSPI_EnableMapMode+0xe6>
  {
    /* abort any ongoing transaction for the next action */
    (void)HAL_XSPI_Abort(SalXspi->hxspi);
3418e25a:	687b      	ldr	r3, [r7, #4]
3418e25c:	681b      	ldr	r3, [r3, #0]
3418e25e:	4618      	mov	r0, r3
3418e260:	f7fe fca4 	bl	3418cbac <HAL_XSPI_Abort>
  }
  /* return status */
  return retr;
3418e264:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
3418e268:	4618      	mov	r0, r3
3418e26a:	3768      	adds	r7, #104	@ 0x68
3418e26c:	46bd      	mov	sp, r7
3418e26e:	bd80      	pop	{r7, pc}

3418e270 <SAL_XSPI_DisableMapMode>:

HAL_StatusTypeDef SAL_XSPI_DisableMapMode(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418e270:	b580      	push	{r7, lr}
3418e272:	b082      	sub	sp, #8
3418e274:	af00      	add	r7, sp, #0
3418e276:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb 0xF":::"memory");
3418e278:	f3bf 8f4f 	dsb	sy
}
3418e27c:	bf00      	nop
  __DSB();
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418e27e:	687b      	ldr	r3, [r7, #4]
3418e280:	681b      	ldr	r3, [r3, #0]
3418e282:	4618      	mov	r0, r3
3418e284:	f7fe fc92 	bl	3418cbac <HAL_XSPI_Abort>
3418e288:	4603      	mov	r3, r0
}
3418e28a:	4618      	mov	r0, r3
3418e28c:	3708      	adds	r7, #8
3418e28e:	46bd      	mov	sp, r7
3418e290:	bd80      	pop	{r7, pc}

3418e292 <SAL_XSPI_UpdateMemoryType>:


HAL_StatusTypeDef SAL_XSPI_UpdateMemoryType(SAL_XSPI_ObjectTypeDef *SalXspi, SAL_XSPI_DataOrderTypeDef DataOrder)
{
3418e292:	b480      	push	{r7}
3418e294:	b085      	sub	sp, #20
3418e296:	af00      	add	r7, sp, #0
3418e298:	6078      	str	r0, [r7, #4]
3418e29a:	460b      	mov	r3, r1
3418e29c:	70fb      	strb	r3, [r7, #3]
HAL_StatusTypeDef retr = HAL_OK;
3418e29e:	2300      	movs	r3, #0
3418e2a0:	73fb      	strb	r3, [r7, #15]

  /* read the memory type value */
  uint32_t memorytype = READ_REG(SalXspi->hxspi->Instance->DCR1) & XSPI_DCR1_MTYP;
3418e2a2:	687b      	ldr	r3, [r7, #4]
3418e2a4:	681b      	ldr	r3, [r3, #0]
3418e2a6:	681b      	ldr	r3, [r3, #0]
3418e2a8:	689b      	ldr	r3, [r3, #8]
3418e2aa:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
3418e2ae:	60bb      	str	r3, [r7, #8]

  switch(DataOrder)
3418e2b0:	78fb      	ldrb	r3, [r7, #3]
3418e2b2:	2b00      	cmp	r3, #0
3418e2b4:	d11e      	bne.n	3418e2f4 <SAL_XSPI_UpdateMemoryType+0x62>
  {
  case SAL_XSPI_ORDERINVERTED :
    if (memorytype == HAL_XSPI_MEMTYPE_MICRON) {
3418e2b6:	68bb      	ldr	r3, [r7, #8]
3418e2b8:	2b00      	cmp	r3, #0
3418e2ba:	d103      	bne.n	3418e2c4 <SAL_XSPI_UpdateMemoryType+0x32>
      memorytype = HAL_XSPI_MEMTYPE_MACRONIX;
3418e2bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
3418e2c0:	60bb      	str	r3, [r7, #8]
3418e2c2:	e008      	b.n	3418e2d6 <SAL_XSPI_UpdateMemoryType+0x44>
    } else if (memorytype == HAL_XSPI_MEMTYPE_MACRONIX) {
3418e2c4:	68bb      	ldr	r3, [r7, #8]
3418e2c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418e2ca:	d102      	bne.n	3418e2d2 <SAL_XSPI_UpdateMemoryType+0x40>
      memorytype = HAL_XSPI_MEMTYPE_MICRON;
3418e2cc:	2300      	movs	r3, #0
3418e2ce:	60bb      	str	r3, [r7, #8]
3418e2d0:	e001      	b.n	3418e2d6 <SAL_XSPI_UpdateMemoryType+0x44>
    } else {
      retr = HAL_ERROR;
3418e2d2:	2301      	movs	r3, #1
3418e2d4:	73fb      	strb	r3, [r7, #15]
    }
    MODIFY_REG(SalXspi->hxspi->Instance->DCR1, XSPI_DCR1_MTYP, memorytype);
3418e2d6:	687b      	ldr	r3, [r7, #4]
3418e2d8:	681b      	ldr	r3, [r3, #0]
3418e2da:	681b      	ldr	r3, [r3, #0]
3418e2dc:	689b      	ldr	r3, [r3, #8]
3418e2de:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
3418e2e2:	687b      	ldr	r3, [r7, #4]
3418e2e4:	681b      	ldr	r3, [r3, #0]
3418e2e6:	681b      	ldr	r3, [r3, #0]
3418e2e8:	68ba      	ldr	r2, [r7, #8]
3418e2ea:	430a      	orrs	r2, r1
3418e2ec:	609a      	str	r2, [r3, #8]
    break;
3418e2ee:	bf00      	nop
    return HAL_ERROR;
    break;
  }

  DEBUG_PARAM_BEGIN(); DEBUG_PARAM_DATA("::SAL_XSPI_UpdateMemoryType::"); DEBUG_PARAM_INT(memorytype); DEBUG_PARAM_END();
  return retr;
3418e2f0:	7bfb      	ldrb	r3, [r7, #15]
3418e2f2:	e000      	b.n	3418e2f6 <SAL_XSPI_UpdateMemoryType+0x64>
    return HAL_ERROR;
3418e2f4:	2301      	movs	r3, #1
}
3418e2f6:	4618      	mov	r0, r3
3418e2f8:	3714      	adds	r7, #20
3418e2fa:	46bd      	mov	sp, r7
3418e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e300:	4770      	bx	lr

3418e302 <SAL_XSPI_Abort>:

HAL_StatusTypeDef SAL_XSPI_Abort(SAL_XSPI_ObjectTypeDef *SalXspi)
{
3418e302:	b580      	push	{r7, lr}
3418e304:	b082      	sub	sp, #8
3418e306:	af00      	add	r7, sp, #0
3418e308:	6078      	str	r0, [r7, #4]
  return HAL_XSPI_Abort(SalXspi->hxspi);
3418e30a:	687b      	ldr	r3, [r7, #4]
3418e30c:	681b      	ldr	r3, [r3, #0]
3418e30e:	4618      	mov	r0, r3
3418e310:	f7fe fc4c 	bl	3418cbac <HAL_XSPI_Abort>
3418e314:	4603      	mov	r3, r0
}
3418e316:	4618      	mov	r0, r3
3418e318:	3708      	adds	r7, #8
3418e31a:	46bd      	mov	sp, r7
3418e31c:	bd80      	pop	{r7, pc}

3418e31e <XSPI_FormatCommand>:
  * @param InstructionWidth instruction width
  * @param Command command
  * @return the formatted command
  */
uint16_t XSPI_FormatCommand(uint8_t CommandExtension, uint32_t InstructionWidth, uint8_t Command)
{
3418e31e:	b480      	push	{r7}
3418e320:	b085      	sub	sp, #20
3418e322:	af00      	add	r7, sp, #0
3418e324:	4603      	mov	r3, r0
3418e326:	6039      	str	r1, [r7, #0]
3418e328:	71fb      	strb	r3, [r7, #7]
3418e32a:	4613      	mov	r3, r2
3418e32c:	71bb      	strb	r3, [r7, #6]
  uint16_t retr;
  if  (InstructionWidth == HAL_XSPI_INSTRUCTION_16_BITS)
3418e32e:	683b      	ldr	r3, [r7, #0]
3418e330:	2b10      	cmp	r3, #16
3418e332:	d114      	bne.n	3418e35e <XSPI_FormatCommand+0x40>
  {
    /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
    /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
    /* 0b11 Command and Command Extension forms a 16 bit command word :: Not yes handled */
    retr = ((uint16_t)Command << 8u);
3418e334:	79bb      	ldrb	r3, [r7, #6]
3418e336:	b29b      	uxth	r3, r3
3418e338:	021b      	lsls	r3, r3, #8
3418e33a:	81fb      	strh	r3, [r7, #14]
    if (CommandExtension == 1u)
3418e33c:	79fb      	ldrb	r3, [r7, #7]
3418e33e:	2b01      	cmp	r3, #1
3418e340:	d107      	bne.n	3418e352 <XSPI_FormatCommand+0x34>
    {
       retr|=  (uint8_t)(~Command & 0xFFu);
3418e342:	79bb      	ldrb	r3, [r7, #6]
3418e344:	43db      	mvns	r3, r3
3418e346:	b2db      	uxtb	r3, r3
3418e348:	461a      	mov	r2, r3
3418e34a:	89fb      	ldrh	r3, [r7, #14]
3418e34c:	4313      	orrs	r3, r2
3418e34e:	81fb      	strh	r3, [r7, #14]
3418e350:	e007      	b.n	3418e362 <XSPI_FormatCommand+0x44>
    }
    else
    {
       retr|=  (uint8_t)(Command & 0xFFu);
3418e352:	79bb      	ldrb	r3, [r7, #6]
3418e354:	b29a      	uxth	r2, r3
3418e356:	89fb      	ldrh	r3, [r7, #14]
3418e358:	4313      	orrs	r3, r2
3418e35a:	81fb      	strh	r3, [r7, #14]
3418e35c:	e001      	b.n	3418e362 <XSPI_FormatCommand+0x44>
    }
  }
  else
  {
    retr = Command;
3418e35e:	79bb      	ldrb	r3, [r7, #6]
3418e360:	81fb      	strh	r3, [r7, #14]
  }

  return retr;
3418e362:	89fb      	ldrh	r3, [r7, #14]
}
3418e364:	4618      	mov	r0, r3
3418e366:	3714      	adds	r7, #20
3418e368:	46bd      	mov	sp, r7
3418e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
3418e36e:	4770      	bx	lr

3418e370 <XSPI_Transmit>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Transmit(SAL_XSPI_ObjectTypeDef *SalXspi, const uint8_t *Data)
{
3418e370:	b580      	push	{r7, lr}
3418e372:	b084      	sub	sp, #16
3418e374:	af00      	add	r7, sp, #0
3418e376:	6078      	str	r0, [r7, #4]
3418e378:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmatx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* transmit data */
    retr = HAL_XSPI_Transmit(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e37a:	687b      	ldr	r3, [r7, #4]
3418e37c:	681b      	ldr	r3, [r3, #0]
3418e37e:	2264      	movs	r2, #100	@ 0x64
3418e380:	6839      	ldr	r1, [r7, #0]
3418e382:	4618      	mov	r0, r3
3418e384:	f7fe fa06 	bl	3418c794 <HAL_XSPI_Transmit>
3418e388:	4603      	mov	r3, r0
3418e38a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */

  return retr;
3418e38c:	7bfb      	ldrb	r3, [r7, #15]
}
3418e38e:	4618      	mov	r0, r3
3418e390:	3710      	adds	r7, #16
3418e392:	46bd      	mov	sp, r7
3418e394:	bd80      	pop	{r7, pc}

3418e396 <XSPI_Receive>:
  * @param SalXspi handle on the XSPI IP
  * @param Data data pointer
  * @return none
  */
HAL_StatusTypeDef XSPI_Receive(SAL_XSPI_ObjectTypeDef *SalXspi,  uint8_t *Data)
{
3418e396:	b580      	push	{r7, lr}
3418e398:	b084      	sub	sp, #16
3418e39a:	af00      	add	r7, sp, #0
3418e39c:	6078      	str	r0, [r7, #4]
3418e39e:	6039      	str	r1, [r7, #0]
#if defined (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U)
  if (SalXspi->hxspi->hdmarx == NULL)
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  {
    /* Reception of the data */
    retr = HAL_XSPI_Receive(SalXspi->hxspi, Data, SAL_XSPI_TIMEOUT_DEFAULT_VALUE);
3418e3a0:	687b      	ldr	r3, [r7, #4]
3418e3a2:	681b      	ldr	r3, [r3, #0]
3418e3a4:	2264      	movs	r2, #100	@ 0x64
3418e3a6:	6839      	ldr	r1, [r7, #0]
3418e3a8:	4618      	mov	r0, r3
3418e3aa:	f7fe fa66 	bl	3418c87a <HAL_XSPI_Receive>
3418e3ae:	4603      	mov	r3, r0
3418e3b0:	73fb      	strb	r3, [r7, #15]
        retr = HAL_ERROR;
      }
    }
  }
#endif /* (USE_HAL_XSPI_REGISTER_CALLBACKS) && (USE_HAL_XSPI_REGISTER_CALLBACKS == 1U) */
  return retr;
3418e3b2:	7bfb      	ldrb	r3, [r7, #15]
}
3418e3b4:	4618      	mov	r0, r3
3418e3b6:	3710      	adds	r7, #16
3418e3b8:	46bd      	mov	sp, r7
3418e3ba:	bd80      	pop	{r7, pc}

3418e3bc <SFDP_ReadHeader>:
 * @param Object memory Object
 * @param sfdp_header data of the SFDP header
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef SFDP_ReadHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
3418e3bc:	b580      	push	{r7, lr}
3418e3be:	b084      	sub	sp, #16
3418e3c0:	af00      	add	r7, sp, #0
3418e3c2:	6078      	str	r0, [r7, #4]
3418e3c4:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr;
  uint8_t retry_counter = 0;
3418e3c6:	2300      	movs	r3, #0
3418e3c8:	73bb      	strb	r3, [r7, #14]
  SFDP_DEBUG_STR(__func__);

  do {
    /* Reset the signature value */
    sfdp_header->Signature = 0;
3418e3ca:	683b      	ldr	r3, [r7, #0]
3418e3cc:	2200      	movs	r2, #0
3418e3ce:	601a      	str	r2, [r3, #0]

    /* send the SFDP command to read the header */
    if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, 0, (uint8_t*)sfdp_header, SFDP_HEADER_SIZE))
3418e3d0:	687b      	ldr	r3, [r7, #4]
3418e3d2:	f103 0008 	add.w	r0, r3, #8
3418e3d6:	2308      	movs	r3, #8
3418e3d8:	683a      	ldr	r2, [r7, #0]
3418e3da:	2100      	movs	r1, #0
3418e3dc:	f7ff fc0e 	bl	3418dbfc <SAL_XSPI_GetSFDP>
3418e3e0:	4603      	mov	r3, r0
3418e3e2:	2b00      	cmp	r3, #0
3418e3e4:	d002      	beq.n	3418e3ec <SFDP_ReadHeader+0x30>
    {
      retr = EXTMEM_SFDP_ERROR_SFPDREAD;
3418e3e6:	2303      	movs	r3, #3
3418e3e8:	73fb      	strb	r3, [r7, #15]
      goto error;
3418e3ea:	e01f      	b.n	3418e42c <SFDP_ReadHeader+0x70>
    }

    /* view the header signature value  */
    SFDP_DEBUG_INT("SFDP signature::", sfdp_header->Signature);

    switch(CheckSFDP_Signature(Object, sfdp_header->Signature))
3418e3ec:	683b      	ldr	r3, [r7, #0]
3418e3ee:	681b      	ldr	r3, [r3, #0]
3418e3f0:	4619      	mov	r1, r3
3418e3f2:	6878      	ldr	r0, [r7, #4]
3418e3f4:	f001 fc0a 	bl	3418fc0c <CheckSFDP_Signature>
3418e3f8:	4603      	mov	r3, r0
3418e3fa:	2b00      	cmp	r3, #0
3418e3fc:	d002      	beq.n	3418e404 <SFDP_ReadHeader+0x48>
3418e3fe:	2b05      	cmp	r3, #5
3418e400:	d005      	beq.n	3418e40e <SFDP_ReadHeader+0x52>
3418e402:	e00a      	b.n	3418e41a <SFDP_ReadHeader+0x5e>
    {
    case EXTMEM_SFDP_OK:
      SFDP_DEBUG_INT("param_number=", sfdp_header->param_number);
      SFDP_DEBUG_INT("AccessProtocol=", sfdp_header->AccessProtocol);
      retr = EXTMEM_SFDP_OK;
3418e404:	2300      	movs	r3, #0
3418e406:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418e408:	2302      	movs	r3, #2
3418e40a:	73bb      	strb	r3, [r7, #14]
    break;
3418e40c:	e00a      	b.n	3418e424 <SFDP_ReadHeader+0x68>
    case EXTMEM_SFDP_ERROR_SIGNATUREMTYPE:
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418e40e:	2304      	movs	r3, #4
3418e410:	73fb      	strb	r3, [r7, #15]
      retry_counter++;
3418e412:	7bbb      	ldrb	r3, [r7, #14]
3418e414:	3301      	adds	r3, #1
3418e416:	73bb      	strb	r3, [r7, #14]
      break;
3418e418:	e004      	b.n	3418e424 <SFDP_ReadHeader+0x68>
    /* case EXTMEM_SFDP_ERROR_SIGNATURE :*/
    default :
      retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418e41a:	2304      	movs	r3, #4
3418e41c:	73fb      	strb	r3, [r7, #15]
      retry_counter = 2u;
3418e41e:	2302      	movs	r3, #2
3418e420:	73bb      	strb	r3, [r7, #14]
      break;
3418e422:	bf00      	nop
    }
  } while(retry_counter < 2u);
3418e424:	7bbb      	ldrb	r3, [r7, #14]
3418e426:	2b01      	cmp	r3, #1
3418e428:	d9cf      	bls.n	3418e3ca <SFDP_ReadHeader+0xe>

error:
3418e42a:	bf00      	nop
  return retr;
3418e42c:	7bfb      	ldrb	r3, [r7, #15]
}
3418e42e:	4618      	mov	r0, r3
3418e430:	3710      	adds	r7, #16
3418e432:	46bd      	mov	sp, r7
3418e434:	bd80      	pop	{r7, pc}
	...

3418e438 <SFDP_GetHeader>:


SFDP_StatusTypeDef SFDP_GetHeader(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, SFPD_HeaderTypeDef *sfdp_header)
{
3418e438:	b590      	push	{r4, r7, lr}
3418e43a:	b089      	sub	sp, #36	@ 0x24
3418e43c:	af00      	add	r7, sp, #0
3418e43e:	6078      	str	r0, [r7, #4]
3418e440:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418e442:	2304      	movs	r3, #4
3418e444:	77fb      	strb	r3, [r7, #31]
  SFDP_DEBUG_STR(__func__);
  const TableConfig_Typedef table_config[] =
3418e446:	4b2a      	ldr	r3, [pc, #168]	@ (3418e4f0 <SFDP_GetHeader+0xb8>)
3418e448:	f107 040c 	add.w	r4, r7, #12
3418e44c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
3418e44e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    {PHY_LINK_8D8D8D, 10u},
    {PHY_LINK_8D8D8D, 16u}
  };

  /* loop to find the link configuration of the memory */
  for (uint8_t index = 0u;
3418e452:	2300      	movs	r3, #0
3418e454:	77bb      	strb	r3, [r7, #30]
3418e456:	e040      	b.n	3418e4da <SFDP_GetHeader+0xa2>
  {
    /* Set the command mode */
    SFDP_DEBUG_STR("try a command configuration");

    /* Configure the link */
    Object->sfpd_private.DriverInfo.SpiPhyLink  = table_config[index].PhyLink;
3418e458:	7fbb      	ldrb	r3, [r7, #30]
3418e45a:	005b      	lsls	r3, r3, #1
3418e45c:	3320      	adds	r3, #32
3418e45e:	443b      	add	r3, r7
3418e460:	f813 2c14 	ldrb.w	r2, [r3, #-20]
3418e464:	687b      	ldr	r3, [r7, #4]
3418e466:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink);
3418e46a:	687b      	ldr	r3, [r7, #4]
3418e46c:	f103 0008 	add.w	r0, r3, #8
3418e470:	687b      	ldr	r3, [r7, #4]
3418e472:	3364      	adds	r3, #100	@ 0x64
3418e474:	461a      	mov	r2, r3
3418e476:	2100      	movs	r1, #0
3418e478:	f7ff fa6e 	bl	3418d958 <SAL_XSPI_MemoryConfig>
    SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, table_config[index].DummyCycle);
3418e47c:	7fbb      	ldrb	r3, [r7, #30]
3418e47e:	005b      	lsls	r3, r3, #1
3418e480:	3320      	adds	r3, #32
3418e482:	443b      	add	r3, r7
3418e484:	f813 2c13 	ldrb.w	r2, [r3, #-19]
3418e488:	687b      	ldr	r3, [r7, #4]
3418e48a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Loop on the instruction extension */
    for (uint8_t IExt = 0u;
3418e48e:	2300      	movs	r3, #0
3418e490:	777b      	strb	r3, [r7, #29]
3418e492:	e017      	b.n	3418e4c4 <SFDP_GetHeader+0x8c>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
    {
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, IExt);
3418e494:	687b      	ldr	r3, [r7, #4]
3418e496:	7f7a      	ldrb	r2, [r7, #29]
3418e498:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Read the sfdp header */
      if (EXTMEM_SFDP_OK == SFDP_ReadHeader(Object, sfdp_header))
3418e49c:	6839      	ldr	r1, [r7, #0]
3418e49e:	6878      	ldr	r0, [r7, #4]
3418e4a0:	f7ff ff8c 	bl	3418e3bc <SFDP_ReadHeader>
3418e4a4:	4603      	mov	r3, r0
3418e4a6:	2b00      	cmp	r3, #0
3418e4a8:	d101      	bne.n	3418e4ae <SFDP_GetHeader+0x76>
      {
        retr = EXTMEM_SFDP_OK;
3418e4aa:	2300      	movs	r3, #0
3418e4ac:	77fb      	strb	r3, [r7, #31]
      }

      if (table_config[index].PhyLink < PHY_LINK_4S4S4S)
3418e4ae:	7fbb      	ldrb	r3, [r7, #30]
3418e4b0:	005b      	lsls	r3, r3, #1
3418e4b2:	3320      	adds	r3, #32
3418e4b4:	443b      	add	r3, r7
3418e4b6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
3418e4ba:	2b03      	cmp	r3, #3
3418e4bc:	d909      	bls.n	3418e4d2 <SFDP_GetHeader+0x9a>
         (IExt < 2u) && (retr == EXTMEM_SFDP_ERROR_SIGNATURE); IExt++)
3418e4be:	7f7b      	ldrb	r3, [r7, #29]
3418e4c0:	3301      	adds	r3, #1
3418e4c2:	777b      	strb	r3, [r7, #29]
3418e4c4:	7f7b      	ldrb	r3, [r7, #29]
3418e4c6:	2b01      	cmp	r3, #1
3418e4c8:	d804      	bhi.n	3418e4d4 <SFDP_GetHeader+0x9c>
3418e4ca:	7ffb      	ldrb	r3, [r7, #31]
3418e4cc:	2b04      	cmp	r3, #4
3418e4ce:	d0e1      	beq.n	3418e494 <SFDP_GetHeader+0x5c>
3418e4d0:	e000      	b.n	3418e4d4 <SFDP_GetHeader+0x9c>
      {
        /* Config 1 is invalid so exit the loop */
        break;
3418e4d2:	bf00      	nop
           ; index++)
3418e4d4:	7fbb      	ldrb	r3, [r7, #30]
3418e4d6:	3301      	adds	r3, #1
3418e4d8:	77bb      	strb	r3, [r7, #30]
       (index < (sizeof(table_config)/sizeof(TableConfig_Typedef))) &&
3418e4da:	7fbb      	ldrb	r3, [r7, #30]
3418e4dc:	2b07      	cmp	r3, #7
3418e4de:	d802      	bhi.n	3418e4e6 <SFDP_GetHeader+0xae>
3418e4e0:	7ffb      	ldrb	r3, [r7, #31]
3418e4e2:	2b04      	cmp	r3, #4
3418e4e4:	d0b8      	beq.n	3418e458 <SFDP_GetHeader+0x20>
      }
    }
  }
  return retr;
3418e4e6:	7ffb      	ldrb	r3, [r7, #31]
}
3418e4e8:	4618      	mov	r0, r3
3418e4ea:	3724      	adds	r7, #36	@ 0x24
3418e4ec:	46bd      	mov	sp, r7
3418e4ee:	bd90      	pop	{r4, r7, pc}
3418e4f0:	34190864 	.word	0x34190864

3418e4f4 <SFDP_CollectData>:

SFDP_StatusTypeDef SFDP_CollectData(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418e4f4:	b580      	push	{r7, lr}
3418e4f6:	b088      	sub	sp, #32
3418e4f8:	af00      	add	r7, sp, #0
3418e4fa:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418e4fc:	2300      	movs	r3, #0
3418e4fe:	77fb      	strb	r3, [r7, #31]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
3418e500:	2308      	movs	r3, #8
3418e502:	61bb      	str	r3, [r7, #24]
  SFDP_DEBUG_STR(__func__);

  /* reset the table mask */
  Object->sfpd_private.Sfdp_table_mask = 0;
3418e504:	687b      	ldr	r3, [r7, #4]
3418e506:	2200      	movs	r2, #0
3418e508:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* reset the param info */
  (void)memset(sfdp_param_info, 0x0, sizeof(sfdp_param_info));
3418e50c:	2278      	movs	r2, #120	@ 0x78
3418e50e:	2100      	movs	r1, #0
3418e510:	485f      	ldr	r0, [pc, #380]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e512:	f001 fed1 	bl	341902b8 <memset>

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418e516:	2300      	movs	r3, #0
3418e518:	75fb      	strb	r3, [r7, #23]
3418e51a:	e027      	b.n	3418e56c <SFDP_CollectData+0x78>
  {
    CHECK_FUNCTION_CALL(sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[index]))
3418e51c:	7dfa      	ldrb	r2, [r7, #23]
3418e51e:	4613      	mov	r3, r2
3418e520:	005b      	lsls	r3, r3, #1
3418e522:	4413      	add	r3, r2
3418e524:	009b      	lsls	r3, r3, #2
3418e526:	4a5a      	ldr	r2, [pc, #360]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e528:	4413      	add	r3, r2
3418e52a:	461a      	mov	r2, r3
3418e52c:	69b9      	ldr	r1, [r7, #24]
3418e52e:	6878      	ldr	r0, [r7, #4]
3418e530:	f000 ffae 	bl	3418f490 <sfdp_get_paraminfo>
3418e534:	4603      	mov	r3, r0
3418e536:	77fb      	strb	r3, [r7, #31]
3418e538:	7ffb      	ldrb	r3, [r7, #31]
3418e53a:	2b00      	cmp	r3, #0
3418e53c:	f040 80a2 	bne.w	3418e684 <SFDP_CollectData+0x190>
    Object->sfpd_private.Sfdp_table_mask |= (uint32_t)sfdp_param_info[index].type;
3418e540:	687b      	ldr	r3, [r7, #4]
3418e542:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
3418e546:	7dfa      	ldrb	r2, [r7, #23]
3418e548:	4851      	ldr	r0, [pc, #324]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e54a:	4613      	mov	r3, r2
3418e54c:	005b      	lsls	r3, r3, #1
3418e54e:	4413      	add	r3, r2
3418e550:	009b      	lsls	r3, r3, #2
3418e552:	4403      	add	r3, r0
3418e554:	681b      	ldr	r3, [r3, #0]
3418e556:	ea41 0203 	orr.w	r2, r1, r3
3418e55a:	687b      	ldr	r3, [r7, #4]
3418e55c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
3418e560:	69bb      	ldr	r3, [r7, #24]
3418e562:	3308      	adds	r3, #8
3418e564:	61bb      	str	r3, [r7, #24]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418e566:	7dfb      	ldrb	r3, [r7, #23]
3418e568:	3301      	adds	r3, #1
3418e56a:	75fb      	strb	r3, [r7, #23]
3418e56c:	7dfa      	ldrb	r2, [r7, #23]
3418e56e:	687b      	ldr	r3, [r7, #4]
3418e570:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418e574:	3301      	adds	r3, #1
3418e576:	429a      	cmp	r2, r3
3418e578:	d3d0      	bcc.n	3418e51c <SFDP_CollectData+0x28>
  }

  /* Read each table param to extract the information to build the driver */
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
3418e57a:	2300      	movs	r3, #0
3418e57c:	75bb      	strb	r3, [r7, #22]
3418e57e:	e075      	b.n	3418e66c <SFDP_CollectData+0x178>
  {
    uint8_t *ptr = NULL;
3418e580:	2300      	movs	r3, #0
3418e582:	613b      	str	r3, [r7, #16]
    uint32_t size = sfdp_param_info[index].size;
3418e584:	7dba      	ldrb	r2, [r7, #22]
3418e586:	4942      	ldr	r1, [pc, #264]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e588:	4613      	mov	r3, r2
3418e58a:	005b      	lsls	r3, r3, #1
3418e58c:	4413      	add	r3, r2
3418e58e:	009b      	lsls	r3, r3, #2
3418e590:	440b      	add	r3, r1
3418e592:	3308      	adds	r3, #8
3418e594:	781b      	ldrb	r3, [r3, #0]
3418e596:	60fb      	str	r3, [r7, #12]
    switch(sfdp_param_info[index].type)
3418e598:	7dba      	ldrb	r2, [r7, #22]
3418e59a:	493d      	ldr	r1, [pc, #244]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e59c:	4613      	mov	r3, r2
3418e59e:	005b      	lsls	r3, r3, #1
3418e5a0:	4413      	add	r3, r2
3418e5a2:	009b      	lsls	r3, r3, #2
3418e5a4:	440b      	add	r3, r1
3418e5a6:	681b      	ldr	r3, [r3, #0]
3418e5a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418e5ac:	d029      	beq.n	3418e602 <SFDP_CollectData+0x10e>
3418e5ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3418e5b2:	d829      	bhi.n	3418e608 <SFDP_CollectData+0x114>
3418e5b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418e5b8:	d01d      	beq.n	3418e5f6 <SFDP_CollectData+0x102>
3418e5ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418e5be:	d823      	bhi.n	3418e608 <SFDP_CollectData+0x114>
3418e5c0:	2b80      	cmp	r3, #128	@ 0x80
3418e5c2:	d01b      	beq.n	3418e5fc <SFDP_CollectData+0x108>
3418e5c4:	2b80      	cmp	r3, #128	@ 0x80
3418e5c6:	d81f      	bhi.n	3418e608 <SFDP_CollectData+0x114>
3418e5c8:	2b08      	cmp	r3, #8
3418e5ca:	d002      	beq.n	3418e5d2 <SFDP_CollectData+0xde>
3418e5cc:	2b40      	cmp	r3, #64	@ 0x40
3418e5ce:	d00f      	beq.n	3418e5f0 <SFDP_CollectData+0xfc>
    case SFPD_PARAMID_OCTAL_DDR:
      ptr = JEDEC_OctalDdr.data_BYTE;
      break;
    default :
      SFDP_DEBUG_STR("the table is not yet handled by the SW");
      break;
3418e5d0:	e01a      	b.n	3418e608 <SFDP_CollectData+0x114>
      JEDEC_Basic.size = sfdp_param_info[index].size;
3418e5d2:	7dba      	ldrb	r2, [r7, #22]
3418e5d4:	492e      	ldr	r1, [pc, #184]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e5d6:	4613      	mov	r3, r2
3418e5d8:	005b      	lsls	r3, r3, #1
3418e5da:	4413      	add	r3, r2
3418e5dc:	009b      	lsls	r3, r3, #2
3418e5de:	440b      	add	r3, r1
3418e5e0:	3308      	adds	r3, #8
3418e5e2:	781b      	ldrb	r3, [r3, #0]
3418e5e4:	461a      	mov	r2, r3
3418e5e6:	4b2b      	ldr	r3, [pc, #172]	@ (3418e694 <SFDP_CollectData+0x1a0>)
3418e5e8:	601a      	str	r2, [r3, #0]
      ptr = JEDEC_Basic.Params.data_BYTE;
3418e5ea:	4b2b      	ldr	r3, [pc, #172]	@ (3418e698 <SFDP_CollectData+0x1a4>)
3418e5ec:	613b      	str	r3, [r7, #16]
      break;
3418e5ee:	e00c      	b.n	3418e60a <SFDP_CollectData+0x116>
      ptr = JEDEC_Address4Bit.data_BYTE;
3418e5f0:	4b2a      	ldr	r3, [pc, #168]	@ (3418e69c <SFDP_CollectData+0x1a8>)
3418e5f2:	613b      	str	r3, [r7, #16]
      break;
3418e5f4:	e009      	b.n	3418e60a <SFDP_CollectData+0x116>
      ptr = JEDEC_SCCR_Map.data_b;
3418e5f6:	4b2a      	ldr	r3, [pc, #168]	@ (3418e6a0 <SFDP_CollectData+0x1ac>)
3418e5f8:	613b      	str	r3, [r7, #16]
      break;
3418e5fa:	e006      	b.n	3418e60a <SFDP_CollectData+0x116>
      ptr = JEDEC_XSPI10.data_BYTE;
3418e5fc:	4b29      	ldr	r3, [pc, #164]	@ (3418e6a4 <SFDP_CollectData+0x1b0>)
3418e5fe:	613b      	str	r3, [r7, #16]
      break;
3418e600:	e003      	b.n	3418e60a <SFDP_CollectData+0x116>
      ptr = JEDEC_OctalDdr.data_BYTE;
3418e602:	4b29      	ldr	r3, [pc, #164]	@ (3418e6a8 <SFDP_CollectData+0x1b4>)
3418e604:	613b      	str	r3, [r7, #16]
      break;
3418e606:	e000      	b.n	3418e60a <SFDP_CollectData+0x116>
      break;
3418e608:	bf00      	nop
    }
    if (ptr != NULL)
3418e60a:	693b      	ldr	r3, [r7, #16]
3418e60c:	2b00      	cmp	r3, #0
3418e60e:	d016      	beq.n	3418e63e <SFDP_CollectData+0x14a>
    {
      if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418e610:	687b      	ldr	r3, [r7, #4]
3418e612:	f103 0008 	add.w	r0, r3, #8
3418e616:	7dba      	ldrb	r2, [r7, #22]
3418e618:	491d      	ldr	r1, [pc, #116]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e61a:	4613      	mov	r3, r2
3418e61c:	005b      	lsls	r3, r3, #1
3418e61e:	4413      	add	r3, r2
3418e620:	009b      	lsls	r3, r3, #2
3418e622:	440b      	add	r3, r1
3418e624:	3304      	adds	r3, #4
3418e626:	6819      	ldr	r1, [r3, #0]
3418e628:	68fb      	ldr	r3, [r7, #12]
3418e62a:	009b      	lsls	r3, r3, #2
3418e62c:	693a      	ldr	r2, [r7, #16]
3418e62e:	f7ff fae5 	bl	3418dbfc <SAL_XSPI_GetSFDP>
3418e632:	4603      	mov	r3, r0
3418e634:	2b00      	cmp	r3, #0
3418e636:	d002      	beq.n	3418e63e <SFDP_CollectData+0x14a>
                                     sfdp_param_info[index].address,
                                     ptr, size * 4u))
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e638:	230c      	movs	r3, #12
3418e63a:	77fb      	strb	r3, [r7, #31]
        goto error;
3418e63c:	e022      	b.n	3418e684 <SFDP_CollectData+0x190>
      }
    }

    if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[index].type)
3418e63e:	7dba      	ldrb	r2, [r7, #22]
3418e640:	4913      	ldr	r1, [pc, #76]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e642:	4613      	mov	r3, r2
3418e644:	005b      	lsls	r3, r3, #1
3418e646:	4413      	add	r3, r2
3418e648:	009b      	lsls	r3, r3, #2
3418e64a:	440b      	add	r3, r1
3418e64c:	681b      	ldr	r3, [r3, #0]
3418e64e:	2b08      	cmp	r3, #8
3418e650:	d109      	bne.n	3418e666 <SFDP_CollectData+0x172>
    {
      /* save data about the reset procedure */
      Object->sfpd_private.Reset_info = JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support;
3418e652:	4b10      	ldr	r3, [pc, #64]	@ (3418e694 <SFDP_CollectData+0x1a0>)
3418e654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418e658:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418e65c:	b2db      	uxtb	r3, r3
3418e65e:	461a      	mov	r2, r3
3418e660:	687b      	ldr	r3, [r7, #4]
3418e662:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  for (uint8_t index = 0u;  sfdp_param_info[index].type != SFPD_PARAMID_UNKNOWN; index++)
3418e666:	7dbb      	ldrb	r3, [r7, #22]
3418e668:	3301      	adds	r3, #1
3418e66a:	75bb      	strb	r3, [r7, #22]
3418e66c:	7dba      	ldrb	r2, [r7, #22]
3418e66e:	4908      	ldr	r1, [pc, #32]	@ (3418e690 <SFDP_CollectData+0x19c>)
3418e670:	4613      	mov	r3, r2
3418e672:	005b      	lsls	r3, r3, #1
3418e674:	4413      	add	r3, r2
3418e676:	009b      	lsls	r3, r3, #2
3418e678:	440b      	add	r3, r1
3418e67a:	681b      	ldr	r3, [r3, #0]
3418e67c:	2b00      	cmp	r3, #0
3418e67e:	f47f af7f 	bne.w	3418e580 <SFDP_CollectData+0x8c>
    }
  }

error:
3418e682:	bf00      	nop
  return retr;
3418e684:	7ffb      	ldrb	r3, [r7, #31]
}
3418e686:	4618      	mov	r0, r3
3418e688:	3720      	adds	r7, #32
3418e68a:	46bd      	mov	sp, r7
3418e68c:	bd80      	pop	{r7, pc}
3418e68e:	bf00      	nop
3418e690:	341c0234 	.word	0x341c0234
3418e694:	341c02ac 	.word	0x341c02ac
3418e698:	341c02b0 	.word	0x341c02b0
3418e69c:	341c030c 	.word	0x341c030c
3418e6a0:	341c032c 	.word	0x341c032c
3418e6a4:	341c0314 	.word	0x341c0314
3418e6a8:	341c039c 	.word	0x341c039c

3418e6ac <SFDP_MemoryReset>:

SFDP_StatusTypeDef SFDP_MemoryReset(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418e6ac:	b580      	push	{r7, lr}
3418e6ae:	b086      	sub	sp, #24
3418e6b0:	af00      	add	r7, sp, #0
3418e6b2:	6078      	str	r0, [r7, #4]
  RESET_METHOD reset_methode;
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418e6b4:	2307      	movs	r3, #7
3418e6b6:	75bb      	strb	r3, [r7, #22]
  uint32_t sfdp_adress = SFDP_HEADER_SIZE;
3418e6b8:	2308      	movs	r3, #8
3418e6ba:	613b      	str	r3, [r7, #16]
  uint8_t find = 0u;
3418e6bc:	2300      	movs	r3, #0
3418e6be:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR(__func__);

  /* get the table param info */
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418e6c0:	2300      	movs	r3, #0
3418e6c2:	73bb      	strb	r3, [r7, #14]
3418e6c4:	e02e      	b.n	3418e724 <SFDP_MemoryReset+0x78>
  {
    retr = sfdp_get_paraminfo(Object, sfdp_adress, &sfdp_param_info[0]);
3418e6c6:	4a64      	ldr	r2, [pc, #400]	@ (3418e858 <SFDP_MemoryReset+0x1ac>)
3418e6c8:	6939      	ldr	r1, [r7, #16]
3418e6ca:	6878      	ldr	r0, [r7, #4]
3418e6cc:	f000 fee0 	bl	3418f490 <sfdp_get_paraminfo>
3418e6d0:	4603      	mov	r3, r0
3418e6d2:	75bb      	strb	r3, [r7, #22]
    if (EXTMEM_SFDP_OK == retr)
3418e6d4:	7dbb      	ldrb	r3, [r7, #22]
3418e6d6:	2b00      	cmp	r3, #0
3418e6d8:	d118      	bne.n	3418e70c <SFDP_MemoryReset+0x60>
    {
      /* check if the table is basic table */
      if (SFPD_PARAMID_BASIC_SPIPROTOCOL == sfdp_param_info[0].type)
3418e6da:	4b5f      	ldr	r3, [pc, #380]	@ (3418e858 <SFDP_MemoryReset+0x1ac>)
3418e6dc:	681b      	ldr	r3, [r3, #0]
3418e6de:	2b08      	cmp	r3, #8
3418e6e0:	d114      	bne.n	3418e70c <SFDP_MemoryReset+0x60>
      {
        /* read the JEDEC basic param */
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418e6e2:	687b      	ldr	r3, [r7, #4]
3418e6e4:	f103 0008 	add.w	r0, r3, #8
3418e6e8:	4b5b      	ldr	r3, [pc, #364]	@ (3418e858 <SFDP_MemoryReset+0x1ac>)
3418e6ea:	6859      	ldr	r1, [r3, #4]
                                       sfdp_param_info[0].address,
                                       JEDEC_Basic.Params.data_BYTE,
                                       ((uint32_t)sfdp_param_info[0].size) * 4u))
3418e6ec:	4b5a      	ldr	r3, [pc, #360]	@ (3418e858 <SFDP_MemoryReset+0x1ac>)
3418e6ee:	7a1b      	ldrb	r3, [r3, #8]
        if (HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject,
3418e6f0:	009b      	lsls	r3, r3, #2
3418e6f2:	4a5a      	ldr	r2, [pc, #360]	@ (3418e85c <SFDP_MemoryReset+0x1b0>)
3418e6f4:	f7ff fa82 	bl	3418dbfc <SAL_XSPI_GetSFDP>
3418e6f8:	4603      	mov	r3, r0
3418e6fa:	2b00      	cmp	r3, #0
3418e6fc:	d002      	beq.n	3418e704 <SFDP_MemoryReset+0x58>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e6fe:	230c      	movs	r3, #12
3418e700:	75bb      	strb	r3, [r7, #22]
3418e702:	e003      	b.n	3418e70c <SFDP_MemoryReset+0x60>
        }
        else
        {
          retr = EXTMEM_SFDP_OK;
3418e704:	2300      	movs	r3, #0
3418e706:	75bb      	strb	r3, [r7, #22]
          find = 1u;
3418e708:	2301      	movs	r3, #1
3418e70a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }

    if ((EXTMEM_SFDP_OK != retr) || (1u == find))
3418e70c:	7dbb      	ldrb	r3, [r7, #22]
3418e70e:	2b00      	cmp	r3, #0
3418e710:	d10f      	bne.n	3418e732 <SFDP_MemoryReset+0x86>
3418e712:	7bfb      	ldrb	r3, [r7, #15]
3418e714:	2b01      	cmp	r3, #1
3418e716:	d00c      	beq.n	3418e732 <SFDP_MemoryReset+0x86>
    {
        /* stop the read, if there is an error or if the table has been found */
        break;
    }
    /* look for the next table */
    sfdp_adress+= SFDP_PARAM_HEADER_SIZE;
3418e718:	693b      	ldr	r3, [r7, #16]
3418e71a:	3308      	adds	r3, #8
3418e71c:	613b      	str	r3, [r7, #16]
  for(uint8_t index = 0u; index <  (Object->sfpd_private.Sfdp_param_number + 1u); index++)
3418e71e:	7bbb      	ldrb	r3, [r7, #14]
3418e720:	3301      	adds	r3, #1
3418e722:	73bb      	strb	r3, [r7, #14]
3418e724:	7bba      	ldrb	r2, [r7, #14]
3418e726:	687b      	ldr	r3, [r7, #4]
3418e728:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
3418e72c:	3301      	adds	r3, #1
3418e72e:	429a      	cmp	r2, r3
3418e730:	d3c9      	bcc.n	3418e6c6 <SFDP_MemoryReset+0x1a>
  }

  /* if an error has been returned or if the table has not been found */
  if ((EXTMEM_SFDP_OK != retr) || (0u == find))
3418e732:	7dbb      	ldrb	r3, [r7, #22]
3418e734:	2b00      	cmp	r3, #0
3418e736:	d102      	bne.n	3418e73e <SFDP_MemoryReset+0x92>
3418e738:	7bfb      	ldrb	r3, [r7, #15]
3418e73a:	2b00      	cmp	r3, #0
3418e73c:	d102      	bne.n	3418e744 <SFDP_MemoryReset+0x98>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e73e:	230c      	movs	r3, #12
3418e740:	75bb      	strb	r3, [r7, #22]
    goto error;
3418e742:	e083      	b.n	3418e84c <SFDP_MemoryReset+0x1a0>
  }

  /* determine how to proced memory reset */
  if( 0x0u == JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support)
3418e744:	4b46      	ldr	r3, [pc, #280]	@ (3418e860 <SFDP_MemoryReset+0x1b4>)
3418e746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418e74a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3418e74e:	b2db      	uxtb	r3, r3
3418e750:	2b00      	cmp	r3, #0
3418e752:	d102      	bne.n	3418e75a <SFDP_MemoryReset+0xae>
  {
    /* 00_0000b: no software reset instruction is supported */
    reset_methode = RESET_NONE;
3418e754:	2300      	movs	r3, #0
3418e756:	75fb      	strb	r3, [r7, #23]
3418e758:	e053      	b.n	3418e802 <SFDP_MemoryReset+0x156>
  }
  else if (0x1u == (0x1u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418e75a:	4b41      	ldr	r3, [pc, #260]	@ (3418e860 <SFDP_MemoryReset+0x1b4>)
3418e75c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418e760:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418e764:	b2db      	uxtb	r3, r3
3418e766:	f003 0301 	and.w	r3, r3, #1
3418e76a:	b2db      	uxtb	r3, r3
3418e76c:	2b00      	cmp	r3, #0
3418e76e:	d002      	beq.n	3418e776 <SFDP_MemoryReset+0xca>
  {
    /* xx_xxx1b: drive Fh on all 4 data wires for 8 clocks */
    reset_methode = RESET_Fh_4DATA_8CLOCK;
3418e770:	2301      	movs	r3, #1
3418e772:	75fb      	strb	r3, [r7, #23]
3418e774:	e045      	b.n	3418e802 <SFDP_MemoryReset+0x156>
  }
  else if (0x2u == (0x2u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418e776:	4b3a      	ldr	r3, [pc, #232]	@ (3418e860 <SFDP_MemoryReset+0x1b4>)
3418e778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418e77c:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418e780:	b2db      	uxtb	r3, r3
3418e782:	f003 0302 	and.w	r3, r3, #2
3418e786:	b2db      	uxtb	r3, r3
3418e788:	2b00      	cmp	r3, #0
3418e78a:	d002      	beq.n	3418e792 <SFDP_MemoryReset+0xe6>
  {
    /* xx_xx1xb: drive Fh on all 4 data wires for 10 clocks if device is operating in 4-byte address mode */
    reset_methode = RESET_Fh_4DATA_10CLOCK;
3418e78c:	2302      	movs	r3, #2
3418e78e:	75fb      	strb	r3, [r7, #23]
3418e790:	e037      	b.n	3418e802 <SFDP_MemoryReset+0x156>
  }
  else if (0x4u == (0x4u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418e792:	4b33      	ldr	r3, [pc, #204]	@ (3418e860 <SFDP_MemoryReset+0x1b4>)
3418e794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418e798:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418e79c:	b2db      	uxtb	r3, r3
3418e79e:	f003 0304 	and.w	r3, r3, #4
3418e7a2:	b2db      	uxtb	r3, r3
3418e7a4:	2b00      	cmp	r3, #0
3418e7a6:	d002      	beq.n	3418e7ae <SFDP_MemoryReset+0x102>
  {
    /* xx_x1xxb: drive Fh on all 4 data wires for 16 clocks */
    reset_methode = RESET_Fh_4DATA_16CLOCK;
3418e7a8:	2303      	movs	r3, #3
3418e7aa:	75fb      	strb	r3, [r7, #23]
3418e7ac:	e029      	b.n	3418e802 <SFDP_MemoryReset+0x156>
  }
  else if (0x8u == (0x8u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418e7ae:	4b2c      	ldr	r3, [pc, #176]	@ (3418e860 <SFDP_MemoryReset+0x1b4>)
3418e7b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418e7b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418e7b8:	b2db      	uxtb	r3, r3
3418e7ba:	f003 0308 	and.w	r3, r3, #8
3418e7be:	b2db      	uxtb	r3, r3
3418e7c0:	2b00      	cmp	r3, #0
3418e7c2:	d002      	beq.n	3418e7ca <SFDP_MemoryReset+0x11e>
  {
    /* xx_1xxxb: issue instruction F0h */
    reset_methode = RESET_INSTRUCTION_F0;
3418e7c4:	2304      	movs	r3, #4
3418e7c6:	75fb      	strb	r3, [r7, #23]
3418e7c8:	e01b      	b.n	3418e802 <SFDP_MemoryReset+0x156>
  }
  else if (0x10u == (0x10u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418e7ca:	4b25      	ldr	r3, [pc, #148]	@ (3418e860 <SFDP_MemoryReset+0x1b4>)
3418e7cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418e7d0:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418e7d4:	b2db      	uxtb	r3, r3
3418e7d6:	f003 0310 	and.w	r3, r3, #16
3418e7da:	b2db      	uxtb	r3, r3
3418e7dc:	2b00      	cmp	r3, #0
3418e7de:	d002      	beq.n	3418e7e6 <SFDP_MemoryReset+0x13a>
  {
    /* x1_xxxxb: issue reset enable instruction 66h, then issue reset instruction 99h. The reset enable,
    reset sequence may be issued on 1, 2, or 4 wires depending on the device operating mode.
    */
    reset_methode = RESET_INSTRUCTION_66_99;
3418e7e0:	2305      	movs	r3, #5
3418e7e2:	75fb      	strb	r3, [r7, #23]
3418e7e4:	e00d      	b.n	3418e802 <SFDP_MemoryReset+0x156>
  }
  else if (0x20u == (0x20u & JEDEC_Basic.Params.Param_DWORD.D16.SoftResetRescueSequence_Support))
3418e7e6:	4b1e      	ldr	r3, [pc, #120]	@ (3418e860 <SFDP_MemoryReset+0x1b4>)
3418e7e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
3418e7ec:	f3c3 0305 	ubfx	r3, r3, #0, #6
3418e7f0:	b2db      	uxtb	r3, r3
3418e7f2:	2b1f      	cmp	r3, #31
3418e7f4:	d902      	bls.n	3418e7fc <SFDP_MemoryReset+0x150>
    xx_xx1x_xxxxb: Hardware reset
    xx_x1xx_xxxxb: Software reset (see bits 13:8 in this DWORD)
    xx_1xxx_xxxxb: Power cycle
    x1_xxxx_xxxxb: Reserved
    */
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418e7f6:	230f      	movs	r3, #15
3418e7f8:	75bb      	strb	r3, [r7, #22]
    goto error;
3418e7fa:	e027      	b.n	3418e84c <SFDP_MemoryReset+0x1a0>
  }
  else
  {
    /* no coherence, should be managed as error */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418e7fc:	230c      	movs	r3, #12
3418e7fe:	75bb      	strb	r3, [r7, #22]
    goto error;
3418e800:	e024      	b.n	3418e84c <SFDP_MemoryReset+0x1a0>
  }

  switch(reset_methode)
3418e802:	7dfb      	ldrb	r3, [r7, #23]
3418e804:	2b05      	cmp	r3, #5
3418e806:	d009      	beq.n	3418e81c <SFDP_MemoryReset+0x170>
3418e808:	2b05      	cmp	r3, #5
3418e80a:	dc1b      	bgt.n	3418e844 <SFDP_MemoryReset+0x198>
3418e80c:	2b00      	cmp	r3, #0
3418e80e:	d01c      	beq.n	3418e84a <SFDP_MemoryReset+0x19e>
3418e810:	2b00      	cmp	r3, #0
3418e812:	db17      	blt.n	3418e844 <SFDP_MemoryReset+0x198>
3418e814:	3b01      	subs	r3, #1
3418e816:	2b03      	cmp	r3, #3
3418e818:	d814      	bhi.n	3418e844 <SFDP_MemoryReset+0x198>
3418e81a:	e010      	b.n	3418e83e <SFDP_MemoryReset+0x192>
  case RESET_NONE:
    break;
  case RESET_INSTRUCTION_66_99:
    /* perform the reset in 1, 2 and 4 lines */
    SFDP_DEBUG_STR("::reset 0x66 0x99");
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x66, NULL, 0);
3418e81c:	687b      	ldr	r3, [r7, #4]
3418e81e:	f103 0008 	add.w	r0, r3, #8
3418e822:	2300      	movs	r3, #0
3418e824:	2200      	movs	r2, #0
3418e826:	2166      	movs	r1, #102	@ 0x66
3418e828:	f7ff fb48 	bl	3418debc <SAL_XSPI_CommandSendData>
    (void)SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x99, NULL, 0);
3418e82c:	687b      	ldr	r3, [r7, #4]
3418e82e:	f103 0008 	add.w	r0, r3, #8
3418e832:	2300      	movs	r3, #0
3418e834:	2200      	movs	r2, #0
3418e836:	2199      	movs	r1, #153	@ 0x99
3418e838:	f7ff fb40 	bl	3418debc <SAL_XSPI_CommandSendData>
    break;
3418e83c:	e006      	b.n	3418e84c <SFDP_MemoryReset+0x1a0>
  case RESET_INSTRUCTION_F0:
  case RESET_Fh_4DATA_8CLOCK:
  case RESET_Fh_4DATA_10CLOCK:
  case RESET_Fh_4DATA_16CLOCK:
    retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418e83e:	230f      	movs	r3, #15
3418e840:	75bb      	strb	r3, [r7, #22]
    break;
3418e842:	e003      	b.n	3418e84c <SFDP_MemoryReset+0x1a0>
  /* case RESET_ERROR:*/
  default :
    retr = EXTMEM_SFDP_ERROR_PARAM;
3418e844:	2301      	movs	r3, #1
3418e846:	75bb      	strb	r3, [r7, #22]
    break;
3418e848:	e000      	b.n	3418e84c <SFDP_MemoryReset+0x1a0>
    break;
3418e84a:	bf00      	nop
  }
error :
  return retr;
3418e84c:	7dbb      	ldrb	r3, [r7, #22]
}
3418e84e:	4618      	mov	r0, r3
3418e850:	3718      	adds	r7, #24
3418e852:	46bd      	mov	sp, r7
3418e854:	bd80      	pop	{r7, pc}
3418e856:	bf00      	nop
3418e858:	341c0234 	.word	0x341c0234
3418e85c:	341c02b0 	.word	0x341c02b0
3418e860:	341c02ac 	.word	0x341c02ac

3418e864 <SFDP_BuildGenericDriver>:

SFDP_StatusTypeDef SFDP_BuildGenericDriver(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint8_t *FreqUpdated)
{
3418e864:	b5b0      	push	{r4, r5, r7, lr}
3418e866:	b08c      	sub	sp, #48	@ 0x30
3418e868:	af02      	add	r7, sp, #8
3418e86a:	6078      	str	r0, [r7, #4]
3418e86c:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418e86e:	2300      	movs	r3, #0
3418e870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  static const uint16_t block_erase_unit[] = { 16u, 256u, 4000u, 64000u};
  static const uint32_t chip_erase_unit[]  = { 16u, 256u, 4000u, 64000u};
  SFDP_DEBUG_STR(__func__);
  uint8_t flag4bitAddress = 0u;
3418e874:	2300      	movs	r3, #0
3418e876:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint32_t dummyCycles, dummyCyclesValue;
  uint8_t FlashSize;

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL) != (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
3418e87a:	687b      	ldr	r3, [r7, #4]
3418e87c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418e880:	f003 0308 	and.w	r3, r3, #8
3418e884:	2b00      	cmp	r3, #0
3418e886:	d104      	bne.n	3418e892 <SFDP_BuildGenericDriver+0x2e>
  {
    /* This table is mandatory to build the driver data */
    retr = EXTMEM_SFDP_ERROR_NO_PARAMTABLE_BASIC;
3418e888:	2307      	movs	r3, #7
3418e88a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418e88e:	f000 bd93 	b.w	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
  /* ---------------------------------------------------
   *  Flash sizing
   * ---------------------------------------------------
   */
  /* Calculation of the flash density in puissance of 2 */
  if ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x80000000u) == 0x0u)
3418e892:	4bba      	ldr	r3, [pc, #744]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e894:	689b      	ldr	r3, [r3, #8]
3418e896:	2b00      	cmp	r3, #0
3418e898:	db13      	blt.n	3418e8c2 <SFDP_BuildGenericDriver+0x5e>
  {
#if( __CORTEX_M == 0)
#error "the assembly instruction is not available"
#else
    Object->sfpd_private.FlashSize = 31u - (uint8_t)__CLZ((JEDEC_Basic.Params.Param_DWORD.D2.FlashSize + 1u));
3418e89a:	4bb8      	ldr	r3, [pc, #736]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e89c:	689b      	ldr	r3, [r3, #8]
3418e89e:	3301      	adds	r3, #1
3418e8a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
3418e8a2:	69bb      	ldr	r3, [r7, #24]
3418e8a4:	2b00      	cmp	r3, #0
3418e8a6:	d101      	bne.n	3418e8ac <SFDP_BuildGenericDriver+0x48>
    return 32U;
3418e8a8:	2320      	movs	r3, #32
3418e8aa:	e003      	b.n	3418e8b4 <SFDP_BuildGenericDriver+0x50>
  return __builtin_clz(value);
3418e8ac:	69bb      	ldr	r3, [r7, #24]
3418e8ae:	fab3 f383 	clz	r3, r3
3418e8b2:	b2db      	uxtb	r3, r3
3418e8b4:	f1c3 031f 	rsb	r3, r3, #31
3418e8b8:	b2da      	uxtb	r2, r3
3418e8ba:	687b      	ldr	r3, [r7, #4]
3418e8bc:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
3418e8c0:	e005      	b.n	3418e8ce <SFDP_BuildGenericDriver+0x6a>
#endif /* __CORTEX_M */
  }
  else
  {
    Object->sfpd_private.FlashSize = (uint8_t)(JEDEC_Basic.Params.Param_DWORD.D2.FlashSize & 0x7FFFFFFFu);
3418e8c2:	4bae      	ldr	r3, [pc, #696]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e8c4:	689b      	ldr	r3, [r3, #8]
3418e8c6:	b2da      	uxtb	r2, r3
3418e8c8:	687b      	ldr	r3, [r7, #4]
3418e8ca:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
  }

  /* Conversion bit to byte */
  Object->sfpd_private.FlashSize = Object->sfpd_private.FlashSize - 3u; /* divide by eight the value */
3418e8ce:	687b      	ldr	r3, [r7, #4]
3418e8d0:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3418e8d4:	3b03      	subs	r3, #3
3418e8d6:	b2da      	uxtb	r2, r3
3418e8d8:	687b      	ldr	r3, [r7, #4]
3418e8da:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e

  SFDP_DEBUG_INT("-> flash size: 2^", Object->sfpd_private.FlashSize);
  FlashSize = Object->sfpd_private.FlashSize - 1u;
3418e8de:	687b      	ldr	r3, [r7, #4]
3418e8e0:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
3418e8e4:	3b01      	subs	r3, #1
3418e8e6:	b2db      	uxtb	r3, r3
3418e8e8:	74fb      	strb	r3, [r7, #19]
  (void) SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_FLASHSIZE, &FlashSize);
3418e8ea:	687b      	ldr	r3, [r7, #4]
3418e8ec:	3308      	adds	r3, #8
3418e8ee:	f107 0213 	add.w	r2, r7, #19
3418e8f2:	2104      	movs	r1, #4
3418e8f4:	4618      	mov	r0, r3
3418e8f6:	f7ff f82f 	bl	3418d958 <SAL_XSPI_MemoryConfig>

  /* get the page size info */
  Object->sfpd_private.PageSize = ((uint32_t)1u <<  JEDEC_Basic.Params.Param_DWORD.D11.PageSize);
3418e8fa:	4ba0      	ldr	r3, [pc, #640]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e8fc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
3418e900:	f3c3 1303 	ubfx	r3, r3, #4, #4
3418e904:	b2db      	uxtb	r3, r3
3418e906:	461a      	mov	r2, r3
3418e908:	2301      	movs	r3, #1
3418e90a:	fa03 f202 	lsl.w	r2, r3, r2
3418e90e:	687b      	ldr	r3, [r7, #4]
3418e910:	661a      	str	r2, [r3, #96]	@ 0x60

  /* ---------------------------------------------------
   *  Set default command
   * ---------------------------------------------------
   */
  Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x02;
3418e912:	687b      	ldr	r3, [r7, #4]
3418e914:	2202      	movs	r2, #2
3418e916:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
  /* ---------------------------------------------------
   *  Erase management
   * ---------------------------------------------------
   */
  /* Manage erase data */
  Object->sfpd_private.DriverInfo.EraseType1Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Size;
3418e91a:	4b98      	ldr	r3, [pc, #608]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e91c:	f893 2020 	ldrb.w	r2, [r3, #32]
3418e920:	687b      	ldr	r3, [r7, #4]
3418e922:	f883 2077 	strb.w	r2, [r3, #119]	@ 0x77
  Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType1_Instruction;
3418e926:	4b95      	ldr	r3, [pc, #596]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e928:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
3418e92c:	687b      	ldr	r3, [r7, #4]
3418e92e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
  Object->sfpd_private.DriverInfo.EraseType2Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Size;
3418e932:	4b92      	ldr	r3, [pc, #584]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e934:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
3418e938:	687b      	ldr	r3, [r7, #4]
3418e93a:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
  Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D8.EraseType2_Instruction;
3418e93e:	4b8f      	ldr	r3, [pc, #572]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e940:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
3418e944:	687b      	ldr	r3, [r7, #4]
3418e946:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
  Object->sfpd_private.DriverInfo.EraseType3Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Size;
3418e94a:	4b8c      	ldr	r3, [pc, #560]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e94c:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
3418e950:	687b      	ldr	r3, [r7, #4]
3418e952:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
  Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType3_Instruction;
3418e956:	4b89      	ldr	r3, [pc, #548]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e958:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
3418e95c:	687b      	ldr	r3, [r7, #4]
3418e95e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
  Object->sfpd_private.DriverInfo.EraseType4Size      = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Size;
3418e962:	4b86      	ldr	r3, [pc, #536]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e964:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
3418e968:	687b      	ldr	r3, [r7, #4]
3418e96a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D9.EraseType4_Instruction;
3418e96e:	4b83      	ldr	r3, [pc, #524]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e970:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
3418e974:	687b      	ldr	r3, [r7, #4]
3418e976:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e

  if (Object->sfpd_private.DriverInfo.EraseType1Command != 0x0u)
3418e97a:	687b      	ldr	r3, [r7, #4]
3418e97c:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
3418e980:	2b00      	cmp	r3, #0
3418e982:	d01d      	beq.n	3418e9c0 <SFDP_BuildGenericDriver+0x15c>
  {
    Object->sfpd_private.DriverInfo.EraseType1Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType1_TypicalTime_units];
3418e984:	4b7d      	ldr	r3, [pc, #500]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418e98a:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418e98e:	b2db      	uxtb	r3, r3
3418e990:	461a      	mov	r2, r3
3418e992:	4b7a      	ldr	r3, [pc, #488]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
3418e996:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418e99a:	b2db      	uxtb	r3, r3
3418e99c:	3301      	adds	r3, #1
3418e99e:	fb02 f303 	mul.w	r3, r2, r3
3418e9a2:	4a76      	ldr	r2, [pc, #472]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e9a4:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
3418e9a8:	f3c2 0241 	ubfx	r2, r2, #1, #2
3418e9ac:	b2d2      	uxtb	r2, r2
3418e9ae:	4611      	mov	r1, r2
3418e9b0:	4a73      	ldr	r2, [pc, #460]	@ (3418eb80 <SFDP_BuildGenericDriver+0x31c>)
3418e9b2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418e9b6:	fb03 f202 	mul.w	r2, r3, r2
3418e9ba:	687b      	ldr	r3, [r7, #4]
3418e9bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  if (Object->sfpd_private.DriverInfo.EraseType2Command != 0x0u)
3418e9c0:	687b      	ldr	r3, [r7, #4]
3418e9c2:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
3418e9c6:	2b00      	cmp	r3, #0
3418e9c8:	d01e      	beq.n	3418ea08 <SFDP_BuildGenericDriver+0x1a4>
  {
    Object->sfpd_private.DriverInfo.EraseType2Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType2_TypicalTime_units];
3418e9ca:	4b6c      	ldr	r3, [pc, #432]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e9cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418e9d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418e9d4:	b2db      	uxtb	r3, r3
3418e9d6:	461a      	mov	r2, r3
3418e9d8:	4b68      	ldr	r3, [pc, #416]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e9da:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
3418e9de:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3418e9e2:	b2db      	uxtb	r3, r3
3418e9e4:	3301      	adds	r3, #1
3418e9e6:	fb02 f303 	mul.w	r3, r2, r3
3418e9ea:	4a64      	ldr	r2, [pc, #400]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418e9ec:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
3418e9f0:	f3c2 0201 	ubfx	r2, r2, #0, #2
3418e9f4:	b2d2      	uxtb	r2, r2
3418e9f6:	4611      	mov	r1, r2
3418e9f8:	4a61      	ldr	r2, [pc, #388]	@ (3418eb80 <SFDP_BuildGenericDriver+0x31c>)
3418e9fa:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418e9fe:	fb03 f202 	mul.w	r2, r3, r2
3418ea02:	687b      	ldr	r3, [r7, #4]
3418ea04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  if (Object->sfpd_private.DriverInfo.EraseType3Command != 0x0u)
3418ea08:	687b      	ldr	r3, [r7, #4]
3418ea0a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
3418ea0e:	2b00      	cmp	r3, #0
3418ea10:	d01d      	beq.n	3418ea4e <SFDP_BuildGenericDriver+0x1ea>
  {
    Object->sfpd_private.DriverInfo.EraseType3Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType3_TypicalTime_units];
3418ea12:	4b5a      	ldr	r3, [pc, #360]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418ea14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418ea18:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418ea1c:	b2db      	uxtb	r3, r3
3418ea1e:	461a      	mov	r2, r3
3418ea20:	4b56      	ldr	r3, [pc, #344]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418ea22:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
3418ea26:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418ea2a:	b2db      	uxtb	r3, r3
3418ea2c:	3301      	adds	r3, #1
3418ea2e:	fb02 f303 	mul.w	r3, r2, r3
3418ea32:	4a52      	ldr	r2, [pc, #328]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418ea34:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
3418ea36:	f3c2 12c1 	ubfx	r2, r2, #7, #2
3418ea3a:	b2d2      	uxtb	r2, r2
3418ea3c:	4611      	mov	r1, r2
3418ea3e:	4a50      	ldr	r2, [pc, #320]	@ (3418eb80 <SFDP_BuildGenericDriver+0x31c>)
3418ea40:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418ea44:	fb03 f202 	mul.w	r2, r3, r2
3418ea48:	687b      	ldr	r3, [r7, #4]
3418ea4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  if (Object->sfpd_private.DriverInfo.EraseType4Command != 0x0u)
3418ea4e:	687b      	ldr	r3, [r7, #4]
3418ea50:	f893 307e 	ldrb.w	r3, [r3, #126]	@ 0x7e
3418ea54:	2b00      	cmp	r3, #0
3418ea56:	d01e      	beq.n	3418ea96 <SFDP_BuildGenericDriver+0x232>
  {
    Object->sfpd_private.DriverInfo.EraseType4Timing   = (uint32_t)JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_count + 1u)* block_erase_unit[JEDEC_Basic.Params.Param_DWORD.D10.EraseType4_TypicalTime_units];
3418ea58:	4b48      	ldr	r3, [pc, #288]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418ea5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418ea5e:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418ea62:	b2db      	uxtb	r3, r3
3418ea64:	461a      	mov	r2, r3
3418ea66:	4b45      	ldr	r3, [pc, #276]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418ea68:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
3418ea6c:	f3c3 0344 	ubfx	r3, r3, #1, #5
3418ea70:	b2db      	uxtb	r3, r3
3418ea72:	3301      	adds	r3, #1
3418ea74:	fb02 f303 	mul.w	r3, r2, r3
3418ea78:	4a40      	ldr	r2, [pc, #256]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418ea7a:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
3418ea7e:	f3c2 1281 	ubfx	r2, r2, #6, #2
3418ea82:	b2d2      	uxtb	r2, r2
3418ea84:	4611      	mov	r1, r2
3418ea86:	4a3e      	ldr	r2, [pc, #248]	@ (3418eb80 <SFDP_BuildGenericDriver+0x31c>)
3418ea88:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
3418ea8c:	fb03 f202 	mul.w	r2, r3, r2
3418ea90:	687b      	ldr	r3, [r7, #4]
3418ea92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  Object->sfpd_private.DriverInfo.EraseChipTiming   = JEDEC_Basic.Params.Param_DWORD.D10.MutliplierEraseTime * (JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_count + 1u)* chip_erase_unit[JEDEC_Basic.Params.Param_DWORD.D11.ChipErase_TypicalTime_units];
3418ea96:	4b39      	ldr	r3, [pc, #228]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418ea98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
3418ea9c:	f3c3 0303 	ubfx	r3, r3, #0, #4
3418eaa0:	b2db      	uxtb	r3, r3
3418eaa2:	461a      	mov	r2, r3
3418eaa4:	4b35      	ldr	r3, [pc, #212]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418eaa6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
3418eaaa:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418eaae:	b2db      	uxtb	r3, r3
3418eab0:	3301      	adds	r3, #1
3418eab2:	fb02 f303 	mul.w	r3, r2, r3
3418eab6:	4a31      	ldr	r2, [pc, #196]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418eab8:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
3418eabc:	f3c2 1241 	ubfx	r2, r2, #5, #2
3418eac0:	b2d2      	uxtb	r2, r2
3418eac2:	4611      	mov	r1, r2
3418eac4:	4a2f      	ldr	r2, [pc, #188]	@ (3418eb84 <SFDP_BuildGenericDriver+0x320>)
3418eac6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
3418eaca:	fb03 f202 	mul.w	r2, r3, r2
3418eace:	687b      	ldr	r3, [r7, #4]
3418ead0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
   *   WIP/WEL : write in progress/ write enable management
   * ------------------------------------------------------
   */
  /* This bit definition is maintained for legacy compatibility only. New system implementations
  should refer to 6.4.19 for a full definition of volatile and non-volatile behavior. */
  Object->sfpd_private.DriverInfo.ReadWELCommand = 0x05;
3418ead4:	687b      	ldr	r3, [r7, #4]
3418ead6:	2205      	movs	r2, #5
3418ead8:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
  Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
3418eadc:	687b      	ldr	r3, [r7, #4]
3418eade:	2205      	movs	r2, #5
3418eae0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  if (JEDEC_Basic.Params.Param_DWORD.D1.WriteEnableInstructionVolatileRegister == 0u)
3418eae4:	4b25      	ldr	r3, [pc, #148]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418eae6:	791b      	ldrb	r3, [r3, #4]
3418eae8:	f003 0310 	and.w	r3, r3, #16
3418eaec:	b2db      	uxtb	r3, r3
3418eaee:	2b00      	cmp	r3, #0
3418eaf0:	d104      	bne.n	3418eafc <SFDP_BuildGenericDriver+0x298>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50U;
3418eaf2:	687b      	ldr	r3, [r7, #4]
3418eaf4:	2250      	movs	r2, #80	@ 0x50
3418eaf6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418eafa:	e003      	b.n	3418eb04 <SFDP_BuildGenericDriver+0x2a0>
  }
  else
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06U;
3418eafc:	687b      	ldr	r3, [r7, #4]
3418eafe:	2206      	movs	r2, #6
3418eb00:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
  /* Volatile or Non-Volatile Register and Write Enable Instruction for Status Register 1
  The instruction 01h is typically used to write status register 1 which contains Block Protection (BP) and other bits. Status register 1 is written by the first data byte following the instruction 01h. The protection bits must be written to zero to enable writes/erases to the device.
  This field describes how to modify the writable bits in status register 1 in either a volatile or non-volatile manner. Bits 1:0 in status register 1 are de-facto standard write enable and busy status and are excluded from the definitions below.
  */
  /* xxx_xxx1b: Non-Volatile Status Register 1, powers-up to last written value, use instruction 06h to enable write */
  if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x1u) != 0u)
3418eb04:	4b1d      	ldr	r3, [pc, #116]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418eb06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418eb0a:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418eb0e:	b2db      	uxtb	r3, r3
3418eb10:	f003 0301 	and.w	r3, r3, #1
3418eb14:	2b00      	cmp	r3, #0
3418eb16:	d004      	beq.n	3418eb22 <SFDP_BuildGenericDriver+0x2be>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418eb18:	687b      	ldr	r3, [r7, #4]
3418eb1a:	2206      	movs	r2, #6
3418eb1c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418eb20:	e046      	b.n	3418ebb0 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_xx1xb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 06h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x02u) != 0u)
3418eb22:	4b16      	ldr	r3, [pc, #88]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418eb24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418eb28:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418eb2c:	b2db      	uxtb	r3, r3
3418eb2e:	f003 0302 	and.w	r3, r3, #2
3418eb32:	2b00      	cmp	r3, #0
3418eb34:	d004      	beq.n	3418eb40 <SFDP_BuildGenericDriver+0x2dc>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418eb36:	687b      	ldr	r3, [r7, #4]
3418eb38:	2206      	movs	r2, #6
3418eb3a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418eb3e:	e037      	b.n	3418ebb0 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_x1xxb: Volatile Status Register 1, status register powers-up with bits set to "1"s, use instruction 50h to enable write */
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x04u) != 0u)
3418eb40:	4b0e      	ldr	r3, [pc, #56]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418eb42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418eb46:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418eb4a:	b2db      	uxtb	r3, r3
3418eb4c:	f003 0304 	and.w	r3, r3, #4
3418eb50:	2b00      	cmp	r3, #0
3418eb52:	d004      	beq.n	3418eb5e <SFDP_BuildGenericDriver+0x2fa>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x50;
3418eb54:	687b      	ldr	r3, [r7, #4]
3418eb56:	2250      	movs	r2, #80	@ 0x50
3418eb58:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418eb5c:	e028      	b.n	3418ebb0 <SFDP_BuildGenericDriver+0x34c>
  }
  /* xxx_1xxxb: Non-Volatile/Volatile status register 1 powers-up to last written value in the non-volatile status register,
  use instruction 06h to enable write to non-volatile status register. Volatile status register may be activated after
  power-up to override the non-volatile status register, use instruction 50h to enable write and activate the volatile
  status register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x08u) != 0u)
3418eb5e:	4b07      	ldr	r3, [pc, #28]	@ (3418eb7c <SFDP_BuildGenericDriver+0x318>)
3418eb60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418eb64:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418eb68:	b2db      	uxtb	r3, r3
3418eb6a:	f003 0308 	and.w	r3, r3, #8
3418eb6e:	2b00      	cmp	r3, #0
3418eb70:	d00a      	beq.n	3418eb88 <SFDP_BuildGenericDriver+0x324>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418eb72:	687b      	ldr	r3, [r7, #4]
3418eb74:	2206      	movs	r2, #6
3418eb76:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418eb7a:	e019      	b.n	3418ebb0 <SFDP_BuildGenericDriver+0x34c>
3418eb7c:	341c02ac 	.word	0x341c02ac
3418eb80:	341908b8 	.word	0x341908b8
3418eb84:	341908c0 	.word	0x341908c0
  }
  /* xx1_xxxxb: Status Register 1 contains a mix of volatile and non-volatile bits. The 06h instruction is used to
  enable writing of the register.*/
  else if ((JEDEC_Basic.Params.Param_DWORD.D16.VolatileNonVolatileRegister_WriteEnable & 0x10u) != 0u)
3418eb88:	4b66      	ldr	r3, [pc, #408]	@ (3418ed24 <SFDP_BuildGenericDriver+0x4c0>)
3418eb8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
3418eb8e:	f3c3 0306 	ubfx	r3, r3, #0, #7
3418eb92:	b2db      	uxtb	r3, r3
3418eb94:	f003 0310 	and.w	r3, r3, #16
3418eb98:	2b00      	cmp	r3, #0
3418eb9a:	d004      	beq.n	3418eba6 <SFDP_BuildGenericDriver+0x342>
  {
    Object->sfpd_private.DriverInfo.WriteWELCommand = 0x06;
3418eb9c:	687b      	ldr	r3, [r7, #4]
3418eb9e:	2206      	movs	r2, #6
3418eba0:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
3418eba4:	e004      	b.n	3418ebb0 <SFDP_BuildGenericDriver+0x34c>
  1xx_xxxxb: Reserved
  NOTE If the status register is read-only then this field will contain all zeros in bits 4:0.
  */
  else
  {
    retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D16;
3418eba6:	230a      	movs	r3, #10
3418eba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418ebac:	f000 bc04 	b.w	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
  }

  if(0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
3418ebb0:	687b      	ldr	r3, [r7, #4]
3418ebb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418ebb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418ebba:	2b00      	cmp	r3, #0
3418ebbc:	d078      	beq.n	3418ecb0 <SFDP_BuildGenericDriver+0x44c>
  {
    /* WIP */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitAvailable)
3418ebbe:	4b5a      	ldr	r3, [pc, #360]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ebc0:	7cdb      	ldrb	r3, [r3, #19]
3418ebc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418ebc6:	b2db      	uxtb	r3, r3
3418ebc8:	2b00      	cmp	r3, #0
3418ebca:	d034      	beq.n	3418ec36 <SFDP_BuildGenericDriver+0x3d2>
    {
      Object->sfpd_private.DriverInfo.ReadWIPCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.CommandReadAccess;
3418ebcc:	4b56      	ldr	r3, [pc, #344]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ebce:	7c5a      	ldrb	r2, [r3, #17]
3418ebd0:	687b      	ldr	r3, [r7, #4]
3418ebd2:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3418ebd6:	4b54      	ldr	r3, [pc, #336]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ebd8:	7cdb      	ldrb	r3, [r3, #19]
3418ebda:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418ebde:	b2db      	uxtb	r3, r3
3418ebe0:	461a      	mov	r2, r3
3418ebe2:	687b      	ldr	r3, [r7, #4]
3418ebe4:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
      Object->sfpd_private.DriverInfo.WIPBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.WIPpolarity;
3418ebe8:	4b4f      	ldr	r3, [pc, #316]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ebea:	7cdb      	ldrb	r3, [r3, #19]
3418ebec:	f3c3 1380 	ubfx	r3, r3, #6, #1
3418ebf0:	b2db      	uxtb	r3, r3
3418ebf2:	461a      	mov	r2, r3
3418ebf4:	687b      	ldr	r3, [r7, #4]
3418ebf6:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
      Object->sfpd_private.DriverInfo.WIPPosition     = JEDEC_SCCR_Map.Param_DWORD.D5.WIPBitLocationRegister;
3418ebfa:	4b4b      	ldr	r3, [pc, #300]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ebfc:	7cdb      	ldrb	r3, [r3, #19]
3418ebfe:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418ec02:	b2db      	uxtb	r3, r3
3418ec04:	461a      	mov	r2, r3
3418ec06:	687b      	ldr	r3, [r7, #4]
3418ec08:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
3418ec0c:	4b46      	ldr	r3, [pc, #280]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec0e:	7cdb      	ldrb	r3, [r3, #19]
3418ec10:	f003 0310 	and.w	r3, r3, #16
3418ec14:	b2db      	uxtb	r3, r3
3418ec16:	2b00      	cmp	r3, #0
3418ec18:	d009      	beq.n	3418ec2e <SFDP_BuildGenericDriver+0x3ca>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WIPAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D5.LocalAddressForWIP;
3418ec1a:	4b43      	ldr	r3, [pc, #268]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec1c:	7cdb      	ldrb	r3, [r3, #19]
3418ec1e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3418ec22:	b2db      	uxtb	r3, r3
3418ec24:	461a      	mov	r2, r3
3418ec26:	687b      	ldr	r3, [r7, #4]
3418ec28:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
3418ec2c:	e003      	b.n	3418ec36 <SFDP_BuildGenericDriver+0x3d2>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WIPAddress = EXTMEM_ADDRESS_NONE;
3418ec2e:	687b      	ldr	r3, [r7, #4]
3418ec30:	22ff      	movs	r2, #255	@ 0xff
3418ec32:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
      }
    }

    /* WEL */
    if (0u != JEDEC_SCCR_Map.Param_DWORD.D6.WELBitAvailable)
3418ec36:	4b3c      	ldr	r3, [pc, #240]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec38:	7ddb      	ldrb	r3, [r3, #23]
3418ec3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418ec3e:	b2db      	uxtb	r3, r3
3418ec40:	2b00      	cmp	r3, #0
3418ec42:	d073      	beq.n	3418ed2c <SFDP_BuildGenericDriver+0x4c8>
    {
      Object->sfpd_private.DriverInfo.ReadWELCommand  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.CommandReadAccess;
3418ec44:	4b38      	ldr	r3, [pc, #224]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec46:	7d5a      	ldrb	r2, [r3, #21]
3418ec48:	687b      	ldr	r3, [r7, #4]
3418ec4a:	f883 2071 	strb.w	r2, [r3, #113]	@ 0x71
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3418ec4e:	4b36      	ldr	r3, [pc, #216]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec50:	7ddb      	ldrb	r3, [r3, #23]
3418ec52:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418ec56:	b2db      	uxtb	r3, r3
3418ec58:	461a      	mov	r2, r3
3418ec5a:	687b      	ldr	r3, [r7, #4]
3418ec5c:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELpolarity;
3418ec60:	4b31      	ldr	r3, [pc, #196]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec62:	7ddb      	ldrb	r3, [r3, #23]
3418ec64:	f3c3 1380 	ubfx	r3, r3, #6, #1
3418ec68:	b2db      	uxtb	r3, r3
3418ec6a:	461a      	mov	r2, r3
3418ec6c:	687b      	ldr	r3, [r7, #4]
3418ec6e:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73
      Object->sfpd_private.DriverInfo.WELPosition     = JEDEC_SCCR_Map.Param_DWORD.D6.WELBitLocationRegister;
3418ec72:	4b2d      	ldr	r3, [pc, #180]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec74:	7ddb      	ldrb	r3, [r3, #23]
3418ec76:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418ec7a:	b2db      	uxtb	r3, r3
3418ec7c:	461a      	mov	r2, r3
3418ec7e:	687b      	ldr	r3, [r7, #4]
3418ec80:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72

      if (0u != JEDEC_SCCR_Map.Param_DWORD.D5.BitAccessedByCommandsUsingAddress)
3418ec84:	4b28      	ldr	r3, [pc, #160]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec86:	7cdb      	ldrb	r3, [r3, #19]
3418ec88:	f003 0310 	and.w	r3, r3, #16
3418ec8c:	b2db      	uxtb	r3, r3
3418ec8e:	2b00      	cmp	r3, #0
3418ec90:	d009      	beq.n	3418eca6 <SFDP_BuildGenericDriver+0x442>
      {
        /* Address management */
        Object->sfpd_private.DriverInfo.WELAddress  = (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D6.WELLocalAddress;
3418ec92:	4b25      	ldr	r3, [pc, #148]	@ (3418ed28 <SFDP_BuildGenericDriver+0x4c4>)
3418ec94:	7ddb      	ldrb	r3, [r3, #23]
3418ec96:	f3c3 03c0 	ubfx	r3, r3, #3, #1
3418ec9a:	b2db      	uxtb	r3, r3
3418ec9c:	461a      	mov	r2, r3
3418ec9e:	687b      	ldr	r3, [r7, #4]
3418eca0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
3418eca4:	e042      	b.n	3418ed2c <SFDP_BuildGenericDriver+0x4c8>
      }
      else
      {
        /* in that case there is no address to manage, the value EXTMEM_ADDRESS_NONE is used to detect the difference */
        Object->sfpd_private.DriverInfo.WELAddress = EXTMEM_ADDRESS_NONE;
3418eca6:	687b      	ldr	r3, [r7, #4]
3418eca8:	22ff      	movs	r2, #255	@ 0xff
3418ecaa:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
3418ecae:	e03d      	b.n	3418ed2c <SFDP_BuildGenericDriver+0x4c8>
      }
    }
  }
  else
  {
      Object->sfpd_private.DriverInfo.WELPosition     = 1;
3418ecb0:	687b      	ldr	r3, [r7, #4]
3418ecb2:	2201      	movs	r2, #1
3418ecb4:	f883 2072 	strb.w	r2, [r3, #114]	@ 0x72
      Object->sfpd_private.DriverInfo.WELBusyPolarity = 0;
3418ecb8:	687b      	ldr	r3, [r7, #4]
3418ecba:	2200      	movs	r2, #0
3418ecbc:	f883 2073 	strb.w	r2, [r3, #115]	@ 0x73

      /*
       *   WIP : Status register read management
       *         Basic D14 Status register Polling device Busy
       */
      if(0x01u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x01u))
3418ecc0:	4b18      	ldr	r3, [pc, #96]	@ (3418ed24 <SFDP_BuildGenericDriver+0x4c0>)
3418ecc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418ecc6:	f3c3 0385 	ubfx	r3, r3, #2, #6
3418ecca:	b2db      	uxtb	r3, r3
3418eccc:	f003 0301 	and.w	r3, r3, #1
3418ecd0:	2b00      	cmp	r3, #0
3418ecd2:	d00c      	beq.n	3418ecee <SFDP_BuildGenericDriver+0x48a>
      {
        /* xx_xxx1b: Use of legacy polling is supported by reading the Status Register with 05h instruction
        and checking WIP bit[0] (0=ready; 1=busy). */
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x05;
3418ecd4:	687b      	ldr	r3, [r7, #4]
3418ecd6:	2205      	movs	r2, #5
3418ecd8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 0u;
3418ecdc:	687b      	ldr	r3, [r7, #4]
3418ecde:	2200      	movs	r2, #0
3418ece0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
3418ece4:	687b      	ldr	r3, [r7, #4]
3418ece6:	2200      	movs	r2, #0
3418ece8:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
3418ecec:	e01e      	b.n	3418ed2c <SFDP_BuildGenericDriver+0x4c8>
      } else if (0x02u == (JEDEC_Basic.Params.Param_DWORD.D14.StatusRegister &  0x02u))
3418ecee:	4b0d      	ldr	r3, [pc, #52]	@ (3418ed24 <SFDP_BuildGenericDriver+0x4c0>)
3418ecf0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
3418ecf4:	f3c3 0385 	ubfx	r3, r3, #2, #6
3418ecf8:	b2db      	uxtb	r3, r3
3418ecfa:	f003 0302 	and.w	r3, r3, #2
3418ecfe:	2b00      	cmp	r3, #0
3418ed00:	d00c      	beq.n	3418ed1c <SFDP_BuildGenericDriver+0x4b8>
      {
        /* xx_xx1xb: Bit 7 of the Flag Status Register may be polled any time a Program, Erase, Suspend/Resume
        command is issued, or after a Reset command while the device is busy. The read instruction is 70h.
        Flag Status Register bit definitions: bit[7]: Program or erase controller status (0=busy; 1=ready)*/
        Object->sfpd_private.DriverInfo.ReadWIPCommand = 0x70;
3418ed02:	687b      	ldr	r3, [r7, #4]
3418ed04:	2270      	movs	r2, #112	@ 0x70
3418ed06:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
        Object->sfpd_private.DriverInfo.WIPPosition = 7u;
3418ed0a:	687b      	ldr	r3, [r7, #4]
3418ed0c:	2207      	movs	r2, #7
3418ed0e:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
        Object->sfpd_private.DriverInfo.WIPBusyPolarity = 0u;
3418ed12:	687b      	ldr	r3, [r7, #4]
3418ed14:	2200      	movs	r2, #0
3418ed16:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
3418ed1a:	e007      	b.n	3418ed2c <SFDP_BuildGenericDriver+0x4c8>
      } else
      {
          retr = EXTMEM_SFDP_ERROR_JEDECBASIC_D14;
3418ed1c:	2309      	movs	r3, #9
3418ed1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418ed22:	e349      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
3418ed24:	341c02ac 	.word	0x341c02ac
3418ed28:	341c032c 	.word	0x341c032c
      }
  }

  /* Set default value for instruction */
  Object->sfpd_private.DriverInfo.ReadInstruction     = 0x03U;
3418ed2c:	687b      	ldr	r3, [r7, #4]
3418ed2e:	2203      	movs	r2, #3
3418ed30:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76

  /* ---------------------------------------------------
   *  command based on SFPD_PARAMID_BASIC_SPIPROTOCOL
   * ---------------------------------------------------
   */
  if (Object->sfpd_private.Sfdp_table_mask == (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)
3418ed34:	687b      	ldr	r3, [r7, #4]
3418ed36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418ed3a:	2b08      	cmp	r3, #8
3418ed3c:	f040 80a9 	bne.w	3418ee92 <SFDP_BuildGenericDriver+0x62e>
  {
    dummyCycles = 0;
3418ed40:	2300      	movs	r3, #0
3418ed42:	617b      	str	r3, [r7, #20]
    Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3418ed44:	687b      	ldr	r3, [r7, #4]
3418ed46:	2200      	movs	r2, #0
3418ed48:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_1LINE)
3418ed4c:	687b      	ldr	r3, [r7, #4]
3418ed4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418ed52:	2b00      	cmp	r3, #0
3418ed54:	d04c      	beq.n	3418edf0 <SFDP_BuildGenericDriver+0x58c>
    {
      /* control if read 1s1s2s is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction != 0u)
3418ed56:	4bb4      	ldr	r3, [pc, #720]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ed58:	7c5b      	ldrb	r3, [r3, #17]
3418ed5a:	2b00      	cmp	r3, #0
3418ed5c:	d015      	beq.n	3418ed8a <SFDP_BuildGenericDriver+0x526>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_ModeClock;
3418ed5e:	4bb2      	ldr	r3, [pc, #712]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ed60:	7c1b      	ldrb	r3, [r3, #16]
3418ed62:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418ed66:	b2db      	uxtb	r3, r3
3418ed68:	461a      	mov	r2, r3
3418ed6a:	4baf      	ldr	r3, [pc, #700]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ed6c:	7c1b      	ldrb	r3, [r3, #16]
3418ed6e:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418ed72:	b2db      	uxtb	r3, r3
3418ed74:	4413      	add	r3, r2
3418ed76:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S1S2S_FastReadInstruction;
3418ed78:	4bab      	ldr	r3, [pc, #684]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ed7a:	7c5a      	ldrb	r2, [r3, #17]
3418ed7c:	687b      	ldr	r3, [r7, #4]
3418ed7e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S2S;
3418ed82:	687b      	ldr	r3, [r7, #4]
3418ed84:	2201      	movs	r2, #1
3418ed86:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* control if read 1S2S2S is available */
      if (JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction != 0u)
3418ed8a:	4ba7      	ldr	r3, [pc, #668]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ed8c:	7cdb      	ldrb	r3, [r3, #19]
3418ed8e:	2b00      	cmp	r3, #0
3418ed90:	d015      	beq.n	3418edbe <SFDP_BuildGenericDriver+0x55a>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_ModeClock;
3418ed92:	4ba5      	ldr	r3, [pc, #660]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ed94:	7c9b      	ldrb	r3, [r3, #18]
3418ed96:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418ed9a:	b2db      	uxtb	r3, r3
3418ed9c:	461a      	mov	r2, r3
3418ed9e:	4ba2      	ldr	r3, [pc, #648]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418eda0:	7c9b      	ldrb	r3, [r3, #18]
3418eda2:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418eda6:	b2db      	uxtb	r3, r3
3418eda8:	4413      	add	r3, r2
3418edaa:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D4._1S2S2S_FastReadInstruction;
3418edac:	4b9e      	ldr	r3, [pc, #632]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418edae:	7cda      	ldrb	r2, [r3, #19]
3418edb0:	687b      	ldr	r3, [r7, #4]
3418edb2:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S2S2S;
3418edb6:	687b      	ldr	r3, [r7, #4]
3418edb8:	2202      	movs	r2, #2
3418edba:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      }

      /* The memory work only in 2S2S2S */
      if (JEDEC_Basic.Params.Param_DWORD.D5._2S2S2S_FastReadSupport != 0u)
3418edbe:	4b9a      	ldr	r3, [pc, #616]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418edc0:	7d1b      	ldrb	r3, [r3, #20]
3418edc2:	f003 0301 	and.w	r3, r3, #1
3418edc6:	b2db      	uxtb	r3, r3
3418edc8:	2b00      	cmp	r3, #0
3418edca:	d011      	beq.n	3418edf0 <SFDP_BuildGenericDriver+0x58c>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_ModeClock;
3418edcc:	4b96      	ldr	r3, [pc, #600]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418edce:	7e9b      	ldrb	r3, [r3, #26]
3418edd0:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418edd4:	b2db      	uxtb	r3, r3
3418edd6:	461a      	mov	r2, r3
3418edd8:	4b93      	ldr	r3, [pc, #588]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418edda:	7e9b      	ldrb	r3, [r3, #26]
3418eddc:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418ede0:	b2db      	uxtb	r3, r3
3418ede2:	4413      	add	r3, r2
3418ede4:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D6._2S2S2S_FastReadInstruction;
3418ede6:	4b90      	ldr	r3, [pc, #576]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ede8:	7eda      	ldrb	r2, [r3, #27]
3418edea:	687b      	ldr	r3, [r7, #4]
3418edec:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      }
    }

    /* the command set is only based on this table */
    /* determine the best line configuration */
    if (Object->sfpd_private.Config > EXTMEM_LINK_CONFIG_2LINES)
3418edf0:	687b      	ldr	r3, [r7, #4]
3418edf2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418edf6:	2b01      	cmp	r3, #1
3418edf8:	d92c      	bls.n	3418ee54 <SFDP_BuildGenericDriver+0x5f0>
    {
      if (JEDEC_Basic.Params.Param_DWORD.D5._4S4S4S_FastReadSupport != 0u)
3418edfa:	4b8b      	ldr	r3, [pc, #556]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418edfc:	7d1b      	ldrb	r3, [r3, #20]
3418edfe:	f003 0310 	and.w	r3, r3, #16
3418ee02:	b2db      	uxtb	r3, r3
3418ee04:	2b00      	cmp	r3, #0
3418ee06:	d020      	beq.n	3418ee4a <SFDP_BuildGenericDriver+0x5e6>
      {
        dummyCycles = JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_DummyClock + JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_ModeClock;
3418ee08:	4b87      	ldr	r3, [pc, #540]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ee0a:	7f9b      	ldrb	r3, [r3, #30]
3418ee0c:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418ee10:	b2db      	uxtb	r3, r3
3418ee12:	461a      	mov	r2, r3
3418ee14:	4b84      	ldr	r3, [pc, #528]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ee16:	7f9b      	ldrb	r3, [r3, #30]
3418ee18:	f3c3 1342 	ubfx	r3, r3, #5, #3
3418ee1c:	b2db      	uxtb	r3, r3
3418ee1e:	4413      	add	r3, r2
3418ee20:	617b      	str	r3, [r7, #20]
        Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_Basic.Params.Param_DWORD.D7._4S4S4S_FastReadInstruction;
3418ee22:	4b81      	ldr	r3, [pc, #516]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ee24:	7fda      	ldrb	r2, [r3, #31]
3418ee26:	687b      	ldr	r3, [r7, #4]
3418ee28:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_4S4S4S;
3418ee2c:	687b      	ldr	r3, [r7, #4]
3418ee2e:	2204      	movs	r2, #4
3418ee30:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        retr = JEDEC_Basic_Manage4S4S4SEnableSequence(Object);
3418ee34:	6878      	ldr	r0, [r7, #4]
3418ee36:	f000 feab 	bl	3418fb90 <JEDEC_Basic_Manage4S4S4SEnableSequence>
3418ee3a:	4603      	mov	r3, r0
3418ee3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ( retr != EXTMEM_SFDP_OK)
3418ee40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
3418ee44:	2b00      	cmp	r3, #0
3418ee46:	f040 82b4 	bne.w	3418f3b2 <SFDP_BuildGenericDriver+0xb4e>
      }
      else /* other configuration with more 4 lines */
      {
        /* not yet handled */
      }
      SAL_XSPI_SET_SFDPDUMMYCYLE(Object->sfpd_private.SALObject, (uint8_t)dummyCycles);
3418ee4a:	697b      	ldr	r3, [r7, #20]
3418ee4c:	b2da      	uxtb	r2, r3
3418ee4e:	687b      	ldr	r3, [r7, #4]
3418ee50:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    }

    /* Configure the link */
    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418ee54:	687b      	ldr	r3, [r7, #4]
3418ee56:	f103 0008 	add.w	r0, r3, #8
3418ee5a:	687b      	ldr	r3, [r7, #4]
3418ee5c:	3364      	adds	r3, #100	@ 0x64
3418ee5e:	461a      	mov	r2, r3
3418ee60:	2100      	movs	r1, #0
3418ee62:	f7fe fd79 	bl	3418d958 <SAL_XSPI_MemoryConfig>
3418ee66:	4603      	mov	r3, r0
3418ee68:	2b00      	cmp	r3, #0
3418ee6a:	d003      	beq.n	3418ee74 <SFDP_BuildGenericDriver+0x610>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418ee6c:	230c      	movs	r3, #12
3418ee6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418ee72:	e2a1      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
    }

    if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, &dummyCycles))
3418ee74:	687b      	ldr	r3, [r7, #4]
3418ee76:	3308      	adds	r3, #8
3418ee78:	f107 0214 	add.w	r2, r7, #20
3418ee7c:	2101      	movs	r1, #1
3418ee7e:	4618      	mov	r0, r3
3418ee80:	f7fe fd6a 	bl	3418d958 <SAL_XSPI_MemoryConfig>
3418ee84:	4603      	mov	r3, r0
3418ee86:	2b00      	cmp	r3, #0
3418ee88:	d003      	beq.n	3418ee92 <SFDP_BuildGenericDriver+0x62e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418ee8a:	230c      	movs	r3, #12
3418ee8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418ee90:	e292      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>

     If an octal DDR table is present and the target is 8D8D8D,
     when switch in octal DDR mode
     -------------------------------------------------------------------------------------------------------------------
  */
  if (((uint32_t)SFPD_PARAMID_OCTAL_DDR == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_OCTAL_DDR))
3418ee92:	687b      	ldr	r3, [r7, #4]
3418ee94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418ee98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
3418ee9c:	2b00      	cmp	r3, #0
3418ee9e:	d069      	beq.n	3418ef74 <SFDP_BuildGenericDriver+0x710>
      && (EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config))
3418eea0:	687b      	ldr	r3, [r7, #4]
3418eea2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418eea6:	2b03      	cmp	r3, #3
3418eea8:	d164      	bne.n	3418ef74 <SFDP_BuildGenericDriver+0x710>
  {
    /* check if we are not already in octal mode */
    if (PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)
3418eeaa:	687b      	ldr	r3, [r7, #4]
3418eeac:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418eeb0:	2b09      	cmp	r3, #9
3418eeb2:	d103      	bne.n	3418eebc <SFDP_BuildGenericDriver+0x658>
    {
      flag4bitAddress = 1u;
3418eeb4:	2301      	movs	r3, #1
3418eeb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
3418eeba:	e03a      	b.n	3418ef32 <SFDP_BuildGenericDriver+0x6ce>
    }
    else
    {
      /* Execute the flash command sequence to switch in octal DDR */
      if (EXTMEM_SFDP_OK == sfpd_enter_octal_mode(Object))
3418eebc:	6878      	ldr	r0, [r7, #4]
3418eebe:	f000 fbdb 	bl	3418f678 <sfpd_enter_octal_mode>
3418eec2:	4603      	mov	r3, r0
3418eec4:	2b00      	cmp	r3, #0
3418eec6:	d134      	bne.n	3418ef32 <SFDP_BuildGenericDriver+0x6ce>
      {
        /* switch the memory interface configuration according the Access protocol field */
        flag4bitAddress = 1u;
3418eec8:	2301      	movs	r3, #1
3418eeca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_8D8D8D;
3418eece:	687b      	ldr	r3, [r7, #4]
3418eed0:	2209      	movs	r2, #9
3418eed2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64

        /* update the physical link */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418eed6:	687b      	ldr	r3, [r7, #4]
3418eed8:	f103 0008 	add.w	r0, r3, #8
3418eedc:	687b      	ldr	r3, [r7, #4]
3418eede:	3364      	adds	r3, #100	@ 0x64
3418eee0:	461a      	mov	r2, r3
3418eee2:	2100      	movs	r1, #0
3418eee4:	f7fe fd38 	bl	3418d958 <SAL_XSPI_MemoryConfig>
3418eee8:	4603      	mov	r3, r0
3418eeea:	2b00      	cmp	r3, #0
3418eeec:	d003      	beq.n	3418eef6 <SFDP_BuildGenericDriver+0x692>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418eeee:	230c      	movs	r3, #12
3418eef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418eef4:	e260      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
        }

        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFDu)
3418eef6:	687b      	ldr	r3, [r7, #4]
3418eef8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
3418eefc:	2bfd      	cmp	r3, #253	@ 0xfd
3418eefe:	d109      	bne.n	3418ef14 <SFDP_BuildGenericDriver+0x6b0>
        {
          /* set 20 wait state */
          dummyCycles = 20;
3418ef00:	2314      	movs	r3, #20
3418ef02:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418ef04:	687b      	ldr	r3, [r7, #4]
3418ef06:	3308      	adds	r3, #8
3418ef08:	f107 0214 	add.w	r2, r7, #20
3418ef0c:	2101      	movs	r1, #1
3418ef0e:	4618      	mov	r0, r3
3418ef10:	f7fe fd22 	bl	3418d958 <SAL_XSPI_MemoryConfig>
        }
        if (Object->sfpd_private.Sfdp_AccessProtocol == 0xFEu)
3418ef14:	687b      	ldr	r3, [r7, #4]
3418ef16:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
3418ef1a:	2bfe      	cmp	r3, #254	@ 0xfe
3418ef1c:	d109      	bne.n	3418ef32 <SFDP_BuildGenericDriver+0x6ce>
        {
          /* set 8 wait state */
          dummyCycles = 8;
3418ef1e:	2308      	movs	r3, #8
3418ef20:	617b      	str	r3, [r7, #20]
          (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418ef22:	687b      	ldr	r3, [r7, #4]
3418ef24:	3308      	adds	r3, #8
3418ef26:	f107 0214 	add.w	r2, r7, #20
3418ef2a:	2101      	movs	r1, #1
3418ef2c:	4618      	mov	r0, r3
3418ef2e:	f7fe fd13 	bl	3418d958 <SAL_XSPI_MemoryConfig>
        /* an error occurs when trying to switch the mode                        */
        /* when continue the process and check if another mode could be targeted */
      }
    }

    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
3418ef32:	687b      	ldr	r3, [r7, #4]
3418ef34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418ef38:	f003 0308 	and.w	r3, r3, #8
3418ef3c:	2b00      	cmp	r3, #0
3418ef3e:	d019      	beq.n	3418ef74 <SFDP_BuildGenericDriver+0x710>
        (JEDEC_Basic.size > 16u))
3418ef40:	4b39      	ldr	r3, [pc, #228]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ef42:	681b      	ldr	r3, [r3, #0]
    if ((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_BASIC_SPIPROTOCOL)) &&
3418ef44:	2b10      	cmp	r3, #16
3418ef46:	d915      	bls.n	3418ef74 <SFDP_BuildGenericDriver+0x710>
    {
      /* check octal information to determine */
      /* 0b00 The Command Extension is the same as the Command. (The Command / Command Extension has the same value for the whole clock period.)*/
      /* 0b01 The Command Extension is the inverse of the Command. The Command Extension acts as a confirmation of the Command */
      /* 0b11 Command and Command Extension forms a 16 bit command word */
      if (JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension > 1u)
3418ef48:	4b37      	ldr	r3, [pc, #220]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ef4a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3418ef4e:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418ef52:	b2db      	uxtb	r3, r3
3418ef54:	2b01      	cmp	r3, #1
3418ef56:	d903      	bls.n	3418ef60 <SFDP_BuildGenericDriver+0x6fc>
      {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418ef58:	230f      	movs	r3, #15
3418ef5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418ef5e:	e22b      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
      }
      SAL_XSPI_SET_COMMANDEXTENSION(Object->sfpd_private.SALObject, (uint8_t)JEDEC_Basic.Params.Param_DWORD.D18.OctalDTRCommandExtension);
3418ef60:	4b31      	ldr	r3, [pc, #196]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ef62:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
3418ef66:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418ef6a:	b2db      	uxtb	r3, r3
3418ef6c:	461a      	mov	r2, r3
3418ef6e:	687b      	ldr	r3, [r7, #4]
3418ef70:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    }
  }

  if ((Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION) == (uint32_t)SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION)
3418ef74:	687b      	ldr	r3, [r7, #4]
3418ef76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418ef7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418ef7e:	2b00      	cmp	r3, #0
3418ef80:	f000 813c 	beq.w	3418f1fc <SFDP_BuildGenericDriver+0x998>
  {
    if (0u == flag4bitAddress)
3418ef84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
3418ef88:	2b00      	cmp	r3, #0
3418ef8a:	f040 809e 	bne.w	3418f0ca <SFDP_BuildGenericDriver+0x866>
    {
      /* xxxx_xxx1b: issue instruction B7h (preceding write enable not required) */
      if (0x01u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x01u))
3418ef8e:	4b26      	ldr	r3, [pc, #152]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418ef90:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418ef94:	f003 0301 	and.w	r3, r3, #1
3418ef98:	2b00      	cmp	r3, #0
3418ef9a:	d01c      	beq.n	3418efd6 <SFDP_BuildGenericDriver+0x772>
      {
        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,0xB7, NULL, 0))
3418ef9c:	687b      	ldr	r3, [r7, #4]
3418ef9e:	f103 0008 	add.w	r0, r3, #8
3418efa2:	2300      	movs	r3, #0
3418efa4:	2200      	movs	r2, #0
3418efa6:	21b7      	movs	r1, #183	@ 0xb7
3418efa8:	f7fe ff88 	bl	3418debc <SAL_XSPI_CommandSendData>
3418efac:	4603      	mov	r3, r0
3418efae:	2b00      	cmp	r3, #0
3418efb0:	d003      	beq.n	3418efba <SFDP_BuildGenericDriver+0x756>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418efb2:	230c      	movs	r3, #12
3418efb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418efb8:	e1fe      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
        }

        /* Set 4Bit addressing on PHY side */
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
3418efba:	687b      	ldr	r3, [r7, #4]
3418efbc:	3308      	adds	r3, #8
3418efbe:	2200      	movs	r2, #0
3418efc0:	2102      	movs	r1, #2
3418efc2:	4618      	mov	r0, r3
3418efc4:	f7fe fcc8 	bl	3418d958 <SAL_XSPI_MemoryConfig>
3418efc8:	4603      	mov	r3, r0
3418efca:	2b00      	cmp	r3, #0
3418efcc:	d06b      	beq.n	3418f0a6 <SFDP_BuildGenericDriver+0x842>
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418efce:	230c      	movs	r3, #12
3418efd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418efd4:	e1f0      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
        }

        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xxxx_xx1xb: issue write enable instruction 06h, then issue instruction B7h */
      else if (0x2u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x2u))
3418efd6:	4b14      	ldr	r3, [pc, #80]	@ (3418f028 <SFDP_BuildGenericDriver+0x7c4>)
3418efd8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418efdc:	f003 0302 	and.w	r3, r3, #2
3418efe0:	2b00      	cmp	r3, #0
3418efe2:	d04e      	beq.n	3418f082 <SFDP_BuildGenericDriver+0x81e>
      {
        /* send command to write enable */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
3418efe4:	687b      	ldr	r3, [r7, #4]
3418efe6:	f103 0008 	add.w	r0, r3, #8
3418efea:	687b      	ldr	r3, [r7, #4]
3418efec:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418eff0:	2300      	movs	r3, #0
3418eff2:	2200      	movs	r2, #0
3418eff4:	f7fe ff62 	bl	3418debc <SAL_XSPI_CommandSendData>
3418eff8:	4603      	mov	r3, r0
3418effa:	2b00      	cmp	r3, #0
3418effc:	d003      	beq.n	3418f006 <SFDP_BuildGenericDriver+0x7a2>
                                           Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418effe:	230c      	movs	r3, #12
3418f000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418f004:	e1d8      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
        }

        /* control the write enable */
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f006:	687b      	ldr	r3, [r7, #4]
3418f008:	f103 0008 	add.w	r0, r3, #8
3418f00c:	687b      	ldr	r3, [r7, #4]
3418f00e:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
3418f012:	687b      	ldr	r3, [r7, #4]
3418f014:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f018:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
3418f01a:	687b      	ldr	r3, [r7, #4]
3418f01c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3418f020:	2b00      	cmp	r3, #0
3418f022:	d103      	bne.n	3418f02c <SFDP_BuildGenericDriver+0x7c8>
3418f024:	2301      	movs	r3, #1
3418f026:	e002      	b.n	3418f02e <SFDP_BuildGenericDriver+0x7ca>
3418f028:	341c02ac 	.word	0x341c02ac
3418f02c:	2300      	movs	r3, #0
3418f02e:	687a      	ldr	r2, [r7, #4]
3418f030:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
3418f034:	4093      	lsls	r3, r2
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f036:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
3418f038:	687b      	ldr	r3, [r7, #4]
3418f03a:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
3418f03e:	461c      	mov	r4, r3
3418f040:	2301      	movs	r3, #1
3418f042:	40a3      	lsls	r3, r4
        if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f044:	b2db      	uxtb	r3, r3
3418f046:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3418f04a:	9401      	str	r4, [sp, #4]
3418f04c:	9300      	str	r3, [sp, #0]
3418f04e:	4613      	mov	r3, r2
3418f050:	462a      	mov	r2, r5
3418f052:	f7ff f828 	bl	3418e0a6 <SAL_XSPI_CheckStatusRegister>
3418f056:	4603      	mov	r3, r0
3418f058:	2b00      	cmp	r3, #0
3418f05a:	d003      	beq.n	3418f064 <SFDP_BuildGenericDriver+0x800>
                                            1000))
        {
            retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f05c:	230c      	movs	r3, #12
3418f05e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            goto error;
3418f062:	e1a9      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
        }

        /* send command to enter 4bit@ mode */
        if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0xB7, NULL, 0u))
3418f064:	687b      	ldr	r3, [r7, #4]
3418f066:	f103 0008 	add.w	r0, r3, #8
3418f06a:	2300      	movs	r3, #0
3418f06c:	2200      	movs	r2, #0
3418f06e:	21b7      	movs	r1, #183	@ 0xb7
3418f070:	f7fe ff24 	bl	3418debc <SAL_XSPI_CommandSendData>
3418f074:	4603      	mov	r3, r0
3418f076:	2b00      	cmp	r3, #0
3418f078:	d015      	beq.n	3418f0a6 <SFDP_BuildGenericDriver+0x842>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f07a:	230c      	movs	r3, #12
3418f07c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418f080:	e19a      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
        }
      }
      /* x1xx_xxxxb: Always operates in 4-Byte address mode */
      else if (0x40u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x40u))
3418f082:	4ba3      	ldr	r3, [pc, #652]	@ (3418f310 <SFDP_BuildGenericDriver+0xaac>)
3418f084:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418f088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418f08c:	2b00      	cmp	r3, #0
3418f08e:	d10a      	bne.n	3418f0a6 <SFDP_BuildGenericDriver+0x842>
      {
        /* nothing to do */
        /* flag4bitAddress = 1u; this settings is not needed because variable is no more used */
      }
      /* xx1x_xxxxb: Supports dedicated 4-Byte address instruction set. Consult vendor data sheet for the instruction set definition.*/
      else if (0x20u == (JEDEC_Basic.Params.Param_DWORD.D16.Enter4ByteAddressing & 0x20u))
3418f090:	4b9f      	ldr	r3, [pc, #636]	@ (3418f310 <SFDP_BuildGenericDriver+0xaac>)
3418f092:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
3418f096:	f003 0320 	and.w	r3, r3, #32
3418f09a:	2b00      	cmp	r3, #0
3418f09c:	d103      	bne.n	3418f0a6 <SFDP_BuildGenericDriver+0x842>
        /* xxxx_x1xxb: 8-bit volatile extended address register used to define A[31:24] bits. Read with instruction C8h. Write instruction is C5h with 1 byte of data. Select the active 128 Mbit memory segment by setting the appropriate A[31:24] bits and use 3-Byte addressing.
           xxxx_1xxxb: 8-bit volatile bank register used to define A[30:A24] bits. MSB (bit[7]) is used to enable/disable 4-byte address mode. When MSB is set to 1, 4-byte address mode is active and A[30:24] bits are don not care. Read with instruction 16h. Write instruction is 17h with 1 byte of data. When MSB is cleared to 0, select the active 128 Mbit segment by setting the appropriate A[30:24] bits and use 3-Byte addressing.
           xxx1_xxxxb: A 16-bit nonvolatile configuration register controls 3-Byte/4-Byte address mode. Read instruction is B5h. Bit[0] controls address mode [0=3-Byte;1=4-Byte]. Write configuration register instruction is B1h, data length is 2 bytes.
        */
      else {
        retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418f09e:	230f      	movs	r3, #15
3418f0a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418f0a4:	e188      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>

      }

      /* Set 4Bit addressing on PHY side */
      if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_ADDRESS_4BITS, NULL))
3418f0a6:	687b      	ldr	r3, [r7, #4]
3418f0a8:	3308      	adds	r3, #8
3418f0aa:	2200      	movs	r2, #0
3418f0ac:	2102      	movs	r1, #2
3418f0ae:	4618      	mov	r0, r3
3418f0b0:	f7fe fc52 	bl	3418d958 <SAL_XSPI_MemoryConfig>
3418f0b4:	4603      	mov	r3, r0
3418f0b6:	2b00      	cmp	r3, #0
3418f0b8:	d003      	beq.n	3418f0c2 <SFDP_BuildGenericDriver+0x85e>
      {
        retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f0ba:	230c      	movs	r3, #12
3418f0bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
3418f0c0:	e17a      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
      }

      /* Set the read function for 4Bit Address */
      Object->sfpd_private.DriverInfo.ReadInstruction = 0x13U;
3418f0c2:	687b      	ldr	r3, [r7, #4]
3418f0c4:	2213      	movs	r2, #19
3418f0c6:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if ((EXTMEM_LINK_CONFIG_8LINES == Object->sfpd_private.Config) && (PHY_LINK_1S1S1S == Object->sfpd_private.DriverInfo.SpiPhyLink))
3418f0ca:	687b      	ldr	r3, [r7, #4]
3418f0cc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
3418f0d0:	2b03      	cmp	r3, #3
3418f0d2:	d12e      	bne.n	3418f132 <SFDP_BuildGenericDriver+0x8ce>
3418f0d4:	687b      	ldr	r3, [r7, #4]
3418f0d6:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418f0da:	2b00      	cmp	r3, #0
3418f0dc:	d129      	bne.n	3418f132 <SFDP_BuildGenericDriver+0x8ce>
    {
      /* check if we can switch to if the config is still 1S8S8S */
      if ((0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)  && (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand))
3418f0de:	4b8d      	ldr	r3, [pc, #564]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f0e0:	789b      	ldrb	r3, [r3, #2]
3418f0e2:	f003 0320 	and.w	r3, r3, #32
3418f0e6:	b2db      	uxtb	r3, r3
3418f0e8:	2b00      	cmp	r3, #0
3418f0ea:	d022      	beq.n	3418f132 <SFDP_BuildGenericDriver+0x8ce>
3418f0ec:	4b89      	ldr	r3, [pc, #548]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f0ee:	78db      	ldrb	r3, [r3, #3]
3418f0f0:	f003 0301 	and.w	r3, r3, #1
3418f0f4:	b2db      	uxtb	r3, r3
3418f0f6:	2b00      	cmp	r3, #0
3418f0f8:	d01b      	beq.n	3418f132 <SFDP_BuildGenericDriver+0x8ce>
      {
        /* Patch micron write command 0x81 @0x0 0xE7 */
        Object->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S8S8S;
3418f0fa:	687b      	ldr	r3, [r7, #4]
3418f0fc:	2207      	movs	r2, #7
3418f0fe:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
        if (HAL_OK != SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_PHY_LINK, &Object->sfpd_private.DriverInfo.SpiPhyLink))
3418f102:	687b      	ldr	r3, [r7, #4]
3418f104:	f103 0008 	add.w	r0, r3, #8
3418f108:	687b      	ldr	r3, [r7, #4]
3418f10a:	3364      	adds	r3, #100	@ 0x64
3418f10c:	461a      	mov	r2, r3
3418f10e:	2100      	movs	r1, #0
3418f110:	f7fe fc22 	bl	3418d958 <SAL_XSPI_MemoryConfig>
3418f114:	4603      	mov	r3, r0
3418f116:	2b00      	cmp	r3, #0
3418f118:	d003      	beq.n	3418f122 <SFDP_BuildGenericDriver+0x8be>
        {
          retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f11a:	230c      	movs	r3, #12
3418f11c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
3418f120:	e14a      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
        }
        Object->sfpd_private.DriverInfo.ReadInstruction = 0xCC;
3418f122:	687b      	ldr	r3, [r7, #4]
3418f124:	22cc      	movs	r2, #204	@ 0xcc
3418f126:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
        Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x8E;
3418f12a:	687b      	ldr	r3, [r7, #4]
3418f12c:	228e      	movs	r2, #142	@ 0x8e
3418f12e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75

    /*
      need to be study more; it seems that macromix used it to define the command maybe because only one mode is
      supported in their case
    */
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3418f132:	687b      	ldr	r3, [r7, #4]
3418f134:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418f138:	2b09      	cmp	r3, #9
3418f13a:	d004      	beq.n	3418f146 <SFDP_BuildGenericDriver+0x8e2>
        (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_1S1S1S))
3418f13c:	687b      	ldr	r3, [r7, #4]
3418f13e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
    if ((Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8D8D8D) ||
3418f142:	2b00      	cmp	r3, #0
3418f144:	d120      	bne.n	3418f188 <SFDP_BuildGenericDriver+0x924>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction = 0x12u;}
3418f146:	4b73      	ldr	r3, [pc, #460]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f148:	781b      	ldrb	r3, [r3, #0]
3418f14a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418f14e:	b2db      	uxtb	r3, r3
3418f150:	2b00      	cmp	r3, #0
3418f152:	d003      	beq.n	3418f15c <SFDP_BuildGenericDriver+0x8f8>
3418f154:	687b      	ldr	r3, [r7, #4]
3418f156:	2212      	movs	r2, #18
3418f158:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_ReadCommand)        {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x13u;}
3418f15c:	4b6d      	ldr	r3, [pc, #436]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f15e:	781b      	ldrb	r3, [r3, #0]
3418f160:	f003 0301 	and.w	r3, r3, #1
3418f164:	b2db      	uxtb	r3, r3
3418f166:	2b00      	cmp	r3, #0
3418f168:	d003      	beq.n	3418f172 <SFDP_BuildGenericDriver+0x90e>
3418f16a:	687b      	ldr	r3, [r7, #4]
3418f16c:	2213      	movs	r2, #19
3418f16e:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S1S1S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction        = 0x0Cu;}
3418f172:	4b68      	ldr	r3, [pc, #416]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f174:	781b      	ldrb	r3, [r3, #0]
3418f176:	f003 0302 	and.w	r3, r3, #2
3418f17a:	b2db      	uxtb	r3, r3
3418f17c:	2b00      	cmp	r3, #0
3418f17e:	d003      	beq.n	3418f188 <SFDP_BuildGenericDriver+0x924>
3418f180:	687b      	ldr	r3, [r7, #4]
3418f182:	220c      	movs	r2, #12
3418f184:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (Object->sfpd_private.DriverInfo.SpiPhyLink == PHY_LINK_8S8D8D)
3418f188:	687b      	ldr	r3, [r7, #4]
3418f18a:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418f18e:	2b08      	cmp	r3, #8
3418f190:	d120      	bne.n	3418f1d4 <SFDP_BuildGenericDriver+0x970>
    {
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_PageProgramCommand) {Object->sfpd_private.DriverInfo.PageProgramInstruction  = 0x02u;}
3418f192:	4b60      	ldr	r3, [pc, #384]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f194:	78db      	ldrb	r3, [r3, #3]
3418f196:	f003 0301 	and.w	r3, r3, #1
3418f19a:	b2db      	uxtb	r3, r3
3418f19c:	2b00      	cmp	r3, #0
3418f19e:	d003      	beq.n	3418f1a8 <SFDP_BuildGenericDriver+0x944>
3418f1a0:	687b      	ldr	r3, [r7, #4]
3418f1a2:	2202      	movs	r2, #2
3418f1a4:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8S8S_FastReadCommand)    {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xCCu;}
3418f1a8:	4b5a      	ldr	r3, [pc, #360]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f1aa:	789b      	ldrb	r3, [r3, #2]
3418f1ac:	f003 0320 	and.w	r3, r3, #32
3418f1b0:	b2db      	uxtb	r3, r3
3418f1b2:	2b00      	cmp	r3, #0
3418f1b4:	d003      	beq.n	3418f1be <SFDP_BuildGenericDriver+0x95a>
3418f1b6:	687b      	ldr	r3, [r7, #4]
3418f1b8:	22cc      	movs	r2, #204	@ 0xcc
3418f1ba:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
      if (0u != JEDEC_Address4Bit.Param_DWORD.D1.Support_1S8D8D_DTRReadCommand)     {Object->sfpd_private.DriverInfo.ReadInstruction         = 0xFDu;}
3418f1be:	4b55      	ldr	r3, [pc, #340]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f1c0:	789b      	ldrb	r3, [r3, #2]
3418f1c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3418f1c6:	b2db      	uxtb	r3, r3
3418f1c8:	2b00      	cmp	r3, #0
3418f1ca:	d003      	beq.n	3418f1d4 <SFDP_BuildGenericDriver+0x970>
3418f1cc:	687b      	ldr	r3, [r7, #4]
3418f1ce:	22fd      	movs	r2, #253	@ 0xfd
3418f1d0:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    Object->sfpd_private.DriverInfo.EraseType1Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType1;
3418f1d4:	4b4f      	ldr	r3, [pc, #316]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f1d6:	791a      	ldrb	r2, [r3, #4]
3418f1d8:	687b      	ldr	r3, [r7, #4]
3418f1da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
    Object->sfpd_private.DriverInfo.EraseType2Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType2;
3418f1de:	4b4d      	ldr	r3, [pc, #308]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f1e0:	795a      	ldrb	r2, [r3, #5]
3418f1e2:	687b      	ldr	r3, [r7, #4]
3418f1e4:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
    Object->sfpd_private.DriverInfo.EraseType3Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType3;
3418f1e8:	4b4a      	ldr	r3, [pc, #296]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f1ea:	799a      	ldrb	r2, [r3, #6]
3418f1ec:	687b      	ldr	r3, [r7, #4]
3418f1ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Object->sfpd_private.DriverInfo.EraseType4Command   = (uint8_t)JEDEC_Address4Bit.Param_DWORD.D2.InstructionEraseType4;
3418f1f2:	4b48      	ldr	r3, [pc, #288]	@ (3418f314 <SFDP_BuildGenericDriver+0xab0>)
3418f1f4:	79da      	ldrb	r2, [r3, #7]
3418f1f6:	687b      	ldr	r3, [r7, #4]
3418f1f8:	f883 207e 	strb.w	r2, [r3, #126]	@ 0x7e
  }

  if(((uint32_t)SFPD_PARAMID_XSPI_V1_0 == (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_XSPI_V1_0))
3418f1fc:	687b      	ldr	r3, [r7, #4]
3418f1fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418f202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3418f206:	2b00      	cmp	r3, #0
3418f208:	f000 80d5 	beq.w	3418f3b6 <SFDP_BuildGenericDriver+0xb52>
      &&
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
3418f20c:	687b      	ldr	r3, [r7, #4]
3418f20e:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
      &&
3418f212:	2b09      	cmp	r3, #9
3418f214:	d005      	beq.n	3418f222 <SFDP_BuildGenericDriver+0x9be>
      ((PHY_LINK_8D8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink) || (PHY_LINK_8S8D8D == Object->sfpd_private.DriverInfo.SpiPhyLink)))
3418f216:	687b      	ldr	r3, [r7, #4]
3418f218:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
3418f21c:	2b08      	cmp	r3, #8
3418f21e:	f040 80ca 	bne.w	3418f3b6 <SFDP_BuildGenericDriver+0xb52>
  {
    uint32_t ClockOut = 0u;
3418f222:	2300      	movs	r3, #0
3418f224:	60fb      	str	r3, [r7, #12]
    uint32_t MaxFreqMhz;
    /* Read command */
    if (0u != JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand)
3418f226:	4b3c      	ldr	r3, [pc, #240]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f228:	785b      	ldrb	r3, [r3, #1]
3418f22a:	2b00      	cmp	r3, #0
3418f22c:	d004      	beq.n	3418f238 <SFDP_BuildGenericDriver+0x9d4>
    {
      Object->sfpd_private.DriverInfo.ReadInstruction = (uint8_t)JEDEC_XSPI10.Param_DWORD.D1.ReadFastCommand;
3418f22e:	4b3a      	ldr	r3, [pc, #232]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f230:	785a      	ldrb	r2, [r3, #1]
3418f232:	687b      	ldr	r3, [r7, #4]
3418f234:	f883 2076 	strb.w	r2, [r3, #118]	@ 0x76
    }

    if (JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle != 0u)
3418f238:	4b37      	ldr	r3, [pc, #220]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f23a:	7d1b      	ldrb	r3, [r3, #20]
3418f23c:	f003 031f 	and.w	r3, r3, #31
3418f240:	b2db      	uxtb	r3, r3
3418f242:	2b00      	cmp	r3, #0
3418f244:	d00d      	beq.n	3418f262 <SFDP_BuildGenericDriver+0x9fe>
    {
      /* Set the default dummy cycle of this mode */
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D6._8D8D8DDefaultPOR_DummyCycle;
3418f246:	4b34      	ldr	r3, [pc, #208]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f248:	7d1b      	ldrb	r3, [r3, #20]
3418f24a:	f3c3 0304 	ubfx	r3, r3, #0, #5
3418f24e:	b2db      	uxtb	r3, r3
3418f250:	617b      	str	r3, [r7, #20]
      (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418f252:	687b      	ldr	r3, [r7, #4]
3418f254:	3308      	adds	r3, #8
3418f256:	f107 0214 	add.w	r2, r7, #20
3418f25a:	2101      	movs	r1, #1
3418f25c:	4618      	mov	r0, r3
3418f25e:	f7fe fb7b 	bl	3418d958 <SAL_XSPI_MemoryConfig>
    }

    /* adapt the memory freq according its capabilities */
    MaxFreqMhz = sfdp_getfrequencevalue(JEDEC_Basic.Params.Param_DWORD.D20._8D8D8D_MaximunSpeedWithStrobe);
3418f262:	4b2b      	ldr	r3, [pc, #172]	@ (3418f310 <SFDP_BuildGenericDriver+0xaac>)
3418f264:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
3418f268:	f3c3 1303 	ubfx	r3, r3, #4, #4
3418f26c:	b2db      	uxtb	r3, r3
3418f26e:	4618      	mov	r0, r3
3418f270:	f000 f8e8 	bl	3418f444 <sfdp_getfrequencevalue>
3418f274:	61f8      	str	r0, [r7, #28]
    if (MaxFreqMhz > Object->sfpd_private.DriverInfo.ClockIn)
3418f276:	687b      	ldr	r3, [r7, #4]
3418f278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418f27a:	69fa      	ldr	r2, [r7, #28]
3418f27c:	429a      	cmp	r2, r3
3418f27e:	d902      	bls.n	3418f286 <SFDP_BuildGenericDriver+0xa22>
    {
      /* Adjust the frequence with the ClokcIn */
      MaxFreqMhz = Object->sfpd_private.DriverInfo.ClockIn;
3418f280:	687b      	ldr	r3, [r7, #4]
3418f282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
3418f284:	61fb      	str	r3, [r7, #28]
    }

    /* Update the clock to be aligned with selected configuration */
    if(HAL_OK != SAL_XSPI_SetClock(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.ClockIn, MaxFreqMhz, &ClockOut))
3418f286:	687b      	ldr	r3, [r7, #4]
3418f288:	f103 0008 	add.w	r0, r3, #8
3418f28c:	687b      	ldr	r3, [r7, #4]
3418f28e:	6e99      	ldr	r1, [r3, #104]	@ 0x68
3418f290:	f107 030c 	add.w	r3, r7, #12
3418f294:	69fa      	ldr	r2, [r7, #28]
3418f296:	f7fe faed 	bl	3418d874 <SAL_XSPI_SetClock>
3418f29a:	4603      	mov	r3, r0
3418f29c:	2b00      	cmp	r3, #0
3418f29e:	d003      	beq.n	3418f2a8 <SFDP_BuildGenericDriver+0xa44>
    {
      retr = EXTMEM_SFDP_ERROR_SETCLOCK;
3418f2a0:	230d      	movs	r3, #13
3418f2a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418f2a6:	e087      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
    }
    *FreqUpdated = 1u; /* Used to indicate that the clock configuration has been updated */
3418f2a8:	683b      	ldr	r3, [r7, #0]
3418f2aa:	2201      	movs	r2, #1
3418f2ac:	701a      	strb	r2, [r3, #0]

    /* get the dummy cycle value according the real output clock */
    if ((ClockOut >= CLOCK_200MHZ) && (JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle != 0u))
3418f2ae:	68fb      	ldr	r3, [r7, #12]
3418f2b0:	4a1a      	ldr	r2, [pc, #104]	@ (3418f31c <SFDP_BuildGenericDriver+0xab8>)
3418f2b2:	4293      	cmp	r3, r2
3418f2b4:	d913      	bls.n	3418f2de <SFDP_BuildGenericDriver+0xa7a>
3418f2b6:	4b18      	ldr	r3, [pc, #96]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f2b8:	899b      	ldrh	r3, [r3, #12]
3418f2ba:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
3418f2be:	b29b      	uxth	r3, r3
3418f2c0:	2b00      	cmp	r3, #0
3418f2c2:	d00c      	beq.n	3418f2de <SFDP_BuildGenericDriver+0xa7a>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_DummyCycle;
3418f2c4:	4b14      	ldr	r3, [pc, #80]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f2c6:	899b      	ldrh	r3, [r3, #12]
3418f2c8:	f3c3 13c4 	ubfx	r3, r3, #7, #5
3418f2cc:	b2db      	uxtb	r3, r3
3418f2ce:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D4.Operation200Mhz_ConfigPattern;
3418f2d0:	4b11      	ldr	r3, [pc, #68]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f2d2:	7b1b      	ldrb	r3, [r3, #12]
3418f2d4:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418f2d8:	b2db      	uxtb	r3, r3
3418f2da:	623b      	str	r3, [r7, #32]
3418f2dc:	e046      	b.n	3418f36c <SFDP_BuildGenericDriver+0xb08>
    }
    else if ((ClockOut >= CLOCK_166MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle != 0u))
3418f2de:	68fb      	ldr	r3, [r7, #12]
3418f2e0:	4a0f      	ldr	r2, [pc, #60]	@ (3418f320 <SFDP_BuildGenericDriver+0xabc>)
3418f2e2:	4293      	cmp	r3, r2
3418f2e4:	d91e      	bls.n	3418f324 <SFDP_BuildGenericDriver+0xac0>
3418f2e6:	4b0c      	ldr	r3, [pc, #48]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f2e8:	7cdb      	ldrb	r3, [r3, #19]
3418f2ea:	f023 0307 	bic.w	r3, r3, #7
3418f2ee:	b2db      	uxtb	r3, r3
3418f2f0:	2b00      	cmp	r3, #0
3418f2f2:	d017      	beq.n	3418f324 <SFDP_BuildGenericDriver+0xac0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_DummyCycle;
3418f2f4:	4b08      	ldr	r3, [pc, #32]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f2f6:	7cdb      	ldrb	r3, [r3, #19]
3418f2f8:	f3c3 03c4 	ubfx	r3, r3, #3, #5
3418f2fc:	b2db      	uxtb	r3, r3
3418f2fe:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation166Mhz_ConfigPattern;
3418f300:	4b05      	ldr	r3, [pc, #20]	@ (3418f318 <SFDP_BuildGenericDriver+0xab4>)
3418f302:	8a5b      	ldrh	r3, [r3, #18]
3418f304:	f3c3 1384 	ubfx	r3, r3, #6, #5
3418f308:	b2db      	uxtb	r3, r3
3418f30a:	623b      	str	r3, [r7, #32]
3418f30c:	e02e      	b.n	3418f36c <SFDP_BuildGenericDriver+0xb08>
3418f30e:	bf00      	nop
3418f310:	341c02ac 	.word	0x341c02ac
3418f314:	341c030c 	.word	0x341c030c
3418f318:	341c0314 	.word	0x341c0314
3418f31c:	0bebc1ff 	.word	0x0bebc1ff
3418f320:	09e4f57f 	.word	0x09e4f57f
    }
    else if ((ClockOut >= CLOCK_133MHZ) && (JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle != 0u))
3418f324:	68fb      	ldr	r3, [r7, #12]
3418f326:	4a27      	ldr	r2, [pc, #156]	@ (3418f3c4 <SFDP_BuildGenericDriver+0xb60>)
3418f328:	4293      	cmp	r3, r2
3418f32a:	d913      	bls.n	3418f354 <SFDP_BuildGenericDriver+0xaf0>
3418f32c:	4b26      	ldr	r3, [pc, #152]	@ (3418f3c8 <SFDP_BuildGenericDriver+0xb64>)
3418f32e:	7c9b      	ldrb	r3, [r3, #18]
3418f330:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
3418f334:	b2db      	uxtb	r3, r3
3418f336:	2b00      	cmp	r3, #0
3418f338:	d00c      	beq.n	3418f354 <SFDP_BuildGenericDriver+0xaf0>
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_DummyCycle;
3418f33a:	4b23      	ldr	r3, [pc, #140]	@ (3418f3c8 <SFDP_BuildGenericDriver+0xb64>)
3418f33c:	7c9b      	ldrb	r3, [r3, #18]
3418f33e:	f3c3 0344 	ubfx	r3, r3, #1, #5
3418f342:	b2db      	uxtb	r3, r3
3418f344:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation133Mhz_ConfigPattern;
3418f346:	4b20      	ldr	r3, [pc, #128]	@ (3418f3c8 <SFDP_BuildGenericDriver+0xb64>)
3418f348:	691b      	ldr	r3, [r3, #16]
3418f34a:	f3c3 3304 	ubfx	r3, r3, #12, #5
3418f34e:	b2db      	uxtb	r3, r3
3418f350:	623b      	str	r3, [r7, #32]
3418f352:	e00b      	b.n	3418f36c <SFDP_BuildGenericDriver+0xb08>
    }
    else /* if (ClockOut =< 100Mhz) */
    {
      dummyCycles = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_DummyCycle;
3418f354:	4b1c      	ldr	r3, [pc, #112]	@ (3418f3c8 <SFDP_BuildGenericDriver+0xb64>)
3418f356:	8a1b      	ldrh	r3, [r3, #16]
3418f358:	f3c3 13c4 	ubfx	r3, r3, #7, #5
3418f35c:	b2db      	uxtb	r3, r3
3418f35e:	617b      	str	r3, [r7, #20]
      dummyCyclesValue = JEDEC_XSPI10.Param_DWORD.D5.Operation100Mhz_ConfigPattern;
3418f360:	4b19      	ldr	r3, [pc, #100]	@ (3418f3c8 <SFDP_BuildGenericDriver+0xb64>)
3418f362:	7c1b      	ldrb	r3, [r3, #16]
3418f364:	f3c3 0384 	ubfx	r3, r3, #2, #5
3418f368:	b2db      	uxtb	r3, r3
3418f36a:	623b      	str	r3, [r7, #32]
    }

    /* Write the dummy cycle value in the configuration register using information coming from SCCR Map */
    if((0u != (Object->sfpd_private.Sfdp_table_mask & (uint32_t)SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP))
3418f36c:	687b      	ldr	r3, [r7, #4]
3418f36e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
3418f372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
3418f376:	2b00      	cmp	r3, #0
3418f378:	d017      	beq.n	3418f3aa <SFDP_BuildGenericDriver+0xb46>
        && (0u != JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable))
3418f37a:	4b14      	ldr	r3, [pc, #80]	@ (3418f3cc <SFDP_BuildGenericDriver+0xb68>)
3418f37c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f380:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418f384:	b2db      	uxtb	r3, r3
3418f386:	2b00      	cmp	r3, #0
3418f388:	d00f      	beq.n	3418f3aa <SFDP_BuildGenericDriver+0xb46>
    {
      /* Update the frequence with MaxFreqMhz information */
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
3418f38a:	6a39      	ldr	r1, [r7, #32]
3418f38c:	6878      	ldr	r0, [r7, #4]
3418f38e:	f000 fa61 	bl	3418f854 <sfpd_set_dummycycle>
3418f392:	4603      	mov	r3, r0
3418f394:	2b00      	cmp	r3, #0
3418f396:	d10f      	bne.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
      {
        /* Set the dummy cycle corresponding */
        (void)SAL_XSPI_MemoryConfig(&Object->sfpd_private.SALObject, PARAM_DUMMY_CYCLES, (void*)&dummyCycles);
3418f398:	687b      	ldr	r3, [r7, #4]
3418f39a:	3308      	adds	r3, #8
3418f39c:	f107 0214 	add.w	r2, r7, #20
3418f3a0:	2101      	movs	r1, #1
3418f3a2:	4618      	mov	r0, r3
3418f3a4:	f7fe fad8 	bl	3418d958 <SAL_XSPI_MemoryConfig>
      if( sfpd_set_dummycycle(Object, dummyCyclesValue) == EXTMEM_SFDP_OK)
3418f3a8:	e006      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
      }
    }
    else
    {
      retr = EXTMEM_SFDP_ERROR_CONFIGDUMMY;
3418f3aa:	230e      	movs	r3, #14
3418f3ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      goto error;
3418f3b0:	e002      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
          goto error;
3418f3b2:	bf00      	nop
3418f3b4:	e000      	b.n	3418f3b8 <SFDP_BuildGenericDriver+0xb54>
    }
  }

error :
3418f3b6:	bf00      	nop
  return retr;
3418f3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
3418f3bc:	4618      	mov	r0, r3
3418f3be:	3728      	adds	r7, #40	@ 0x28
3418f3c0:	46bd      	mov	sp, r7
3418f3c2:	bdb0      	pop	{r4, r5, r7, pc}
3418f3c4:	07ed6b3f 	.word	0x07ed6b3f
3418f3c8:	341c0314 	.word	0x341c0314
3418f3cc:	341c032c 	.word	0x341c032c

3418f3d0 <driver_check_FlagBUSY>:


EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef driver_check_FlagBUSY(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Timeout)
{
3418f3d0:	b5b0      	push	{r4, r5, r7, lr}
3418f3d2:	b086      	sub	sp, #24
3418f3d4:	af02      	add	r7, sp, #8
3418f3d6:	6078      	str	r0, [r7, #4]
3418f3d8:	6039      	str	r1, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUSY;
3418f3da:	23fb      	movs	r3, #251	@ 0xfb
3418f3dc:	73fb      	strb	r3, [r7, #15]
  SFDP_DEBUG_STR((uint8_t *)__func__)
  if (0u != SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand)
3418f3de:	687b      	ldr	r3, [r7, #4]
3418f3e0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
3418f3e4:	2b00      	cmp	r3, #0
3418f3e6:	d026      	beq.n	3418f436 <driver_check_FlagBUSY+0x66>
  {
    /* check if the busy flag is enabled */
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418f3e8:	687b      	ldr	r3, [r7, #4]
3418f3ea:	f103 0008 	add.w	r0, r3, #8
3418f3ee:	687b      	ldr	r3, [r7, #4]
3418f3f0:	f893 106c 	ldrb.w	r1, [r3, #108]	@ 0x6c
                                               SFDPObject->sfpd_private.DriverInfo.ReadWIPCommand,
                                               SFDPObject->sfpd_private.DriverInfo.WIPAddress,
3418f3f4:	687b      	ldr	r3, [r7, #4]
3418f3f6:	f893 306f 	ldrb.w	r3, [r3, #111]	@ 0x6f
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418f3fa:	461d      	mov	r5, r3
                                               SFDPObject->sfpd_private.DriverInfo.WIPBusyPolarity << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
3418f3fc:	687b      	ldr	r3, [r7, #4]
3418f3fe:	f893 306e 	ldrb.w	r3, [r3, #110]	@ 0x6e
3418f402:	461a      	mov	r2, r3
3418f404:	687b      	ldr	r3, [r7, #4]
3418f406:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
3418f40a:	fa02 f303 	lsl.w	r3, r2, r3
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418f40e:	b2dc      	uxtb	r4, r3
                                               1u << SFDPObject->sfpd_private.DriverInfo.WIPPosition,
3418f410:	687b      	ldr	r3, [r7, #4]
3418f412:	f893 306d 	ldrb.w	r3, [r3, #109]	@ 0x6d
3418f416:	461a      	mov	r2, r3
3418f418:	2301      	movs	r3, #1
3418f41a:	4093      	lsls	r3, r2
    if (HAL_OK == SAL_XSPI_CheckStatusRegister(&SFDPObject->sfpd_private.SALObject,
3418f41c:	b2db      	uxtb	r3, r3
3418f41e:	683a      	ldr	r2, [r7, #0]
3418f420:	9201      	str	r2, [sp, #4]
3418f422:	9300      	str	r3, [sp, #0]
3418f424:	4623      	mov	r3, r4
3418f426:	462a      	mov	r2, r5
3418f428:	f7fe fe3d 	bl	3418e0a6 <SAL_XSPI_CheckStatusRegister>
3418f42c:	4603      	mov	r3, r0
3418f42e:	2b00      	cmp	r3, #0
3418f430:	d101      	bne.n	3418f436 <driver_check_FlagBUSY+0x66>
                                               Timeout))
    {
      retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418f432:	2300      	movs	r3, #0
3418f434:	73fb      	strb	r3, [r7, #15]
    }
  }
  return retr;
3418f436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418f43a:	4618      	mov	r0, r3
3418f43c:	3710      	adds	r7, #16
3418f43e:	46bd      	mov	sp, r7
3418f440:	bdb0      	pop	{r4, r5, r7, pc}
	...

3418f444 <sfdp_getfrequencevalue>:
 * @brief this function returns the frequence corresponding to a frequecy
 * @param BitField bit field value
 * @return frequency value
 */
uint32_t sfdp_getfrequencevalue(uint32_t BitField)
{
3418f444:	b4b0      	push	{r4, r5, r7}
3418f446:	b08b      	sub	sp, #44	@ 0x2c
3418f448:	af00      	add	r7, sp, #0
3418f44a:	6078      	str	r0, [r7, #4]
  const uint16_t freqMhz_table[] = { 0x0, 33, 50, 66, 80, 100, 133, 166, 200, 250, 266, 333, 400 };
3418f44c:	4b0e      	ldr	r3, [pc, #56]	@ (3418f488 <sfdp_getfrequencevalue+0x44>)
3418f44e:	f107 040c 	add.w	r4, r7, #12
3418f452:	461d      	mov	r5, r3
3418f454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
3418f456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
3418f458:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
3418f45c:	c403      	stmia	r4!, {r0, r1}
3418f45e:	8022      	strh	r2, [r4, #0]
  SFDP_DEBUG_STR(__func__);

  if (BitField < 0b1010u)
3418f460:	687b      	ldr	r3, [r7, #4]
3418f462:	2b09      	cmp	r3, #9
3418f464:	d80a      	bhi.n	3418f47c <sfdp_getfrequencevalue+0x38>
  {
    return (uint32_t)freqMhz_table[BitField]* 1000000u;
3418f466:	687b      	ldr	r3, [r7, #4]
3418f468:	005b      	lsls	r3, r3, #1
3418f46a:	3328      	adds	r3, #40	@ 0x28
3418f46c:	443b      	add	r3, r7
3418f46e:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
3418f472:	461a      	mov	r2, r3
3418f474:	4b05      	ldr	r3, [pc, #20]	@ (3418f48c <sfdp_getfrequencevalue+0x48>)
3418f476:	fb02 f303 	mul.w	r3, r2, r3
3418f47a:	e000      	b.n	3418f47e <sfdp_getfrequencevalue+0x3a>
  }
  return 0; /* the max frequency is unknown */
3418f47c:	2300      	movs	r3, #0
}
3418f47e:	4618      	mov	r0, r3
3418f480:	372c      	adds	r7, #44	@ 0x2c
3418f482:	46bd      	mov	sp, r7
3418f484:	bcb0      	pop	{r4, r5, r7}
3418f486:	4770      	bx	lr
3418f488:	34190874 	.word	0x34190874
3418f48c:	000f4240 	.word	0x000f4240

3418f490 <sfdp_get_paraminfo>:
 * @param sfdp_adress address of the SFDP table
 * @param sfdp_param_info pointer on parameter info
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfdp_get_paraminfo(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t sfdp_adress, SFDP_ParameterTableTypeDef *Param_info)
{
3418f490:	b580      	push	{r7, lr}
3418f492:	b088      	sub	sp, #32
3418f494:	af00      	add	r7, sp, #0
3418f496:	60f8      	str	r0, [r7, #12]
3418f498:	60b9      	str	r1, [r7, #8]
3418f49a:	607a      	str	r2, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418f49c:	2300      	movs	r3, #0
3418f49e:	77fb      	strb	r3, [r7, #31]
  SFDP_ParameterHeaderTypeDef sfdp_param_header = {0};
3418f4a0:	f107 0314 	add.w	r3, r7, #20
3418f4a4:	2200      	movs	r2, #0
3418f4a6:	601a      	str	r2, [r3, #0]
3418f4a8:	605a      	str	r2, [r3, #4]
  SFDP_DEBUG_STR(__func__);

  /* send the SFDP command to read the header */
  if(HAL_OK != SAL_XSPI_GetSFDP(&Object->sfpd_private.SALObject, sfdp_adress,
3418f4aa:	68fb      	ldr	r3, [r7, #12]
3418f4ac:	f103 0008 	add.w	r0, r3, #8
3418f4b0:	f107 0214 	add.w	r2, r7, #20
3418f4b4:	2308      	movs	r3, #8
3418f4b6:	68b9      	ldr	r1, [r7, #8]
3418f4b8:	f7fe fba0 	bl	3418dbfc <SAL_XSPI_GetSFDP>
3418f4bc:	4603      	mov	r3, r0
3418f4be:	2b00      	cmp	r3, #0
3418f4c0:	d002      	beq.n	3418f4c8 <sfdp_get_paraminfo+0x38>
                                (uint8_t*)&sfdp_param_header, SFDP_PARAM_HEADER_SIZE))
  {
    retr = EXTMEM_SFDP_ERROR_SFPDREAD;
3418f4c2:	2303      	movs	r3, #3
3418f4c4:	77fb      	strb	r3, [r7, #31]
    goto error;
3418f4c6:	e0d1      	b.n	3418f66c <sfdp_get_paraminfo+0x1dc>
  }

  Param_info->type = SFPD_PARAMID_UNKNOWN;
3418f4c8:	687b      	ldr	r3, [r7, #4]
3418f4ca:	2200      	movs	r2, #0
3418f4cc:	601a      	str	r2, [r3, #0]
  Param_info->size = sfdp_param_header.Length ;
3418f4ce:	7dfa      	ldrb	r2, [r7, #23]
3418f4d0:	687b      	ldr	r3, [r7, #4]
3418f4d2:	721a      	strb	r2, [r3, #8]
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
3418f4d4:	7ebb      	ldrb	r3, [r7, #26]
3418f4d6:	041a      	lsls	r2, r3, #16
                        |((uint32_t)sfdp_param_header.TableAddressPointer[1u] << 8u)
3418f4d8:	7e7b      	ldrb	r3, [r7, #25]
3418f4da:	021b      	lsls	r3, r3, #8
3418f4dc:	4313      	orrs	r3, r2
                        |((uint32_t)sfdp_param_header.TableAddressPointer[0u]));
3418f4de:	7e3a      	ldrb	r2, [r7, #24]
3418f4e0:	431a      	orrs	r2, r3
  Param_info->address = (((uint32_t)sfdp_param_header.TableAddressPointer[2u] << 16u)
3418f4e2:	687b      	ldr	r3, [r7, #4]
3418f4e4:	605a      	str	r2, [r3, #4]

  if ((sfdp_param_header.ID_msb > 0x00u) && (sfdp_param_header.ID_msb < 0x80u))
3418f4e6:	7efb      	ldrb	r3, [r7, #27]
3418f4e8:	2b00      	cmp	r3, #0
3418f4ea:	d010      	beq.n	3418f50e <sfdp_get_paraminfo+0x7e>
3418f4ec:	7efb      	ldrb	r3, [r7, #27]
3418f4ee:	b25b      	sxtb	r3, r3
3418f4f0:	2b00      	cmp	r3, #0
3418f4f2:	db0c      	blt.n	3418f50e <sfdp_get_paraminfo+0x7e>
  {
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418f4f4:	7efb      	ldrb	r3, [r7, #27]
3418f4f6:	f003 0301 	and.w	r3, r3, #1
3418f4fa:	2b00      	cmp	r3, #0
3418f4fc:	d003      	beq.n	3418f506 <sfdp_get_paraminfo+0x76>
    {
      Param_info->type = SFPD_PARAMID_VENDOR;
3418f4fe:	687b      	ldr	r3, [r7, #4]
3418f500:	2201      	movs	r2, #1
3418f502:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418f504:	e0b2      	b.n	3418f66c <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_VENDOR");
    }
    else
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_VENDOR;
3418f506:	687b      	ldr	r3, [r7, #4]
3418f508:	2202      	movs	r2, #2
3418f50a:	601a      	str	r2, [r3, #0]
    if ((sfdp_param_header.ID_msb & 0x01u) == 0x01u)
3418f50c:	e0ae      	b.n	3418f66c <sfdp_get_paraminfo+0x1dc>
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_VENDOR");
    }
  }
  else
  {
    if((sfdp_param_header.ID_lsb & 0x01u) == 0x00u)
3418f50e:	7d3b      	ldrb	r3, [r7, #20]
3418f510:	f003 0301 	and.w	r3, r3, #1
3418f514:	2b00      	cmp	r3, #0
3418f516:	d102      	bne.n	3418f51e <sfdp_get_paraminfo+0x8e>
    {
      Param_info->type = SFPD_PARAMID_FUNCTION_JEDEC;
3418f518:	687b      	ldr	r3, [r7, #4]
3418f51a:	2204      	movs	r2, #4
3418f51c:	601a      	str	r2, [r3, #0]
      SFDP_DEBUG_STR("-> type SFPD_PARAMID_FUNCTION_JEDEC");
    }

    if((0xFFu == sfdp_param_header.ID_msb))
3418f51e:	7efb      	ldrb	r3, [r7, #27]
3418f520:	2bff      	cmp	r3, #255	@ 0xff
3418f522:	f040 80a2 	bne.w	3418f66a <sfdp_get_paraminfo+0x1da>
    {
      switch(sfdp_param_header.ID_lsb)
3418f526:	7d3b      	ldrb	r3, [r7, #20]
3418f528:	2b0f      	cmp	r3, #15
3418f52a:	dc4b      	bgt.n	3418f5c4 <sfdp_get_paraminfo+0x134>
3418f52c:	2b00      	cmp	r3, #0
3418f52e:	da23      	bge.n	3418f578 <sfdp_get_paraminfo+0xe8>
        Param_info->type = SFPD_PARAMID_RESERVED;
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_RESERVED");
        break;
      default :
        SFDP_DEBUG_STR("-> info SFPD_PARAMID_????");
        break;
3418f530:	e09a      	b.n	3418f668 <sfdp_get_paraminfo+0x1d8>
      switch(sfdp_param_header.ID_lsb)
3418f532:	3b81      	subs	r3, #129	@ 0x81
3418f534:	2b0d      	cmp	r3, #13
3418f536:	f200 8097 	bhi.w	3418f668 <sfdp_get_paraminfo+0x1d8>
3418f53a:	a201      	add	r2, pc, #4	@ (adr r2, 3418f540 <sfdp_get_paraminfo+0xb0>)
3418f53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418f540:	3418f5e5 	.word	0x3418f5e5
3418f544:	3418f669 	.word	0x3418f669
3418f548:	3418f669 	.word	0x3418f669
3418f54c:	3418f5f5 	.word	0x3418f5f5
3418f550:	3418f669 	.word	0x3418f669
3418f554:	3418f669 	.word	0x3418f669
3418f558:	3418f60f 	.word	0x3418f60f
3418f55c:	3418f619 	.word	0x3418f619
3418f560:	3418f669 	.word	0x3418f669
3418f564:	3418f669 	.word	0x3418f669
3418f568:	3418f637 	.word	0x3418f637
3418f56c:	3418f669 	.word	0x3418f669
3418f570:	3418f64b 	.word	0x3418f64b
3418f574:	3418f655 	.word	0x3418f655
3418f578:	2b0f      	cmp	r3, #15
3418f57a:	d875      	bhi.n	3418f668 <sfdp_get_paraminfo+0x1d8>
3418f57c:	a201      	add	r2, pc, #4	@ (adr r2, 3418f584 <sfdp_get_paraminfo+0xf4>)
3418f57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418f582:	bf00      	nop
3418f584:	3418f5cf 	.word	0x3418f5cf
3418f588:	3418f669 	.word	0x3418f669
3418f58c:	3418f669 	.word	0x3418f669
3418f590:	3418f5ed 	.word	0x3418f5ed
3418f594:	3418f669 	.word	0x3418f669
3418f598:	3418f5fd 	.word	0x3418f5fd
3418f59c:	3418f605 	.word	0x3418f605
3418f5a0:	3418f669 	.word	0x3418f669
3418f5a4:	3418f669 	.word	0x3418f669
3418f5a8:	3418f623 	.word	0x3418f623
3418f5ac:	3418f62d 	.word	0x3418f62d
3418f5b0:	3418f669 	.word	0x3418f669
3418f5b4:	3418f641 	.word	0x3418f641
3418f5b8:	3418f669 	.word	0x3418f669
3418f5bc:	3418f669 	.word	0x3418f669
3418f5c0:	3418f65f 	.word	0x3418f65f
3418f5c4:	2b8e      	cmp	r3, #142	@ 0x8e
3418f5c6:	dc4f      	bgt.n	3418f668 <sfdp_get_paraminfo+0x1d8>
3418f5c8:	2b81      	cmp	r3, #129	@ 0x81
3418f5ca:	dab2      	bge.n	3418f532 <sfdp_get_paraminfo+0xa2>
        break;
3418f5cc:	e04c      	b.n	3418f668 <sfdp_get_paraminfo+0x1d8>
        Param_info->type = SFPD_PARAMID_BASIC_SPIPROTOCOL;
3418f5ce:	687b      	ldr	r3, [r7, #4]
3418f5d0:	2208      	movs	r2, #8
3418f5d2:	601a      	str	r2, [r3, #0]
        Param_info->size = ((sfdp_param_header.Length ) < SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE) ? SFPD_PARAMS_BASIC_TABLE_DEFAULTSIZE : sfdp_param_header.Length;
3418f5d4:	7dfb      	ldrb	r3, [r7, #23]
3418f5d6:	2b10      	cmp	r3, #16
3418f5d8:	bf38      	it	cc
3418f5da:	2310      	movcc	r3, #16
3418f5dc:	b2da      	uxtb	r2, r3
3418f5de:	687b      	ldr	r3, [r7, #4]
3418f5e0:	721a      	strb	r2, [r3, #8]
        break;
3418f5e2:	e042      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECTORMAP;
3418f5e4:	687b      	ldr	r3, [r7, #4]
3418f5e6:	2210      	movs	r2, #16
3418f5e8:	601a      	str	r2, [r3, #0]
        break;
3418f5ea:	e03e      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RPMC;
3418f5ec:	687b      	ldr	r3, [r7, #4]
3418f5ee:	2220      	movs	r2, #32
3418f5f0:	601a      	str	r2, [r3, #0]
        break;
3418f5f2:	e03a      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_4BYTE_ADDRESS_INSTRUCTION;
3418f5f4:	687b      	ldr	r3, [r7, #4]
3418f5f6:	2240      	movs	r2, #64	@ 0x40
3418f5f8:	601a      	str	r2, [r3, #0]
        break;
3418f5fa:	e036      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V1_0;
3418f5fc:	687b      	ldr	r3, [r7, #4]
3418f5fe:	2280      	movs	r2, #128	@ 0x80
3418f600:	601a      	str	r2, [r3, #0]
        break;
3418f602:	e032      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_XSPI_V2_0;
3418f604:	687b      	ldr	r3, [r7, #4]
3418f606:	f44f 7280 	mov.w	r2, #256	@ 0x100
3418f60a:	601a      	str	r2, [r3, #0]
        break;
3418f60c:	e02d      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP;
3418f60e:	687b      	ldr	r3, [r7, #4]
3418f610:	f44f 7200 	mov.w	r2, #512	@ 0x200
3418f614:	601a      	str	r2, [r3, #0]
        break;
3418f616:	e028      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_REGISTER_MAP_MULTICHIP;
3418f618:	687b      	ldr	r3, [r7, #4]
3418f61a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
3418f61e:	601a      	str	r2, [r3, #0]
        break;
3418f620:	e023      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_STATUS_CONTROL_CONFIG_XSPI_V2_0;
3418f622:	687b      	ldr	r3, [r7, #4]
3418f624:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3418f628:	601a      	str	r2, [r3, #0]
        break;
3418f62a:	e01e      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_OCTAL_DDR;
3418f62c:	687b      	ldr	r3, [r7, #4]
3418f62e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3418f632:	601a      	str	r2, [r3, #0]
        break;
3418f634:	e019      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_MSPT;
3418f636:	687b      	ldr	r3, [r7, #4]
3418f638:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
3418f63c:	601a      	str	r2, [r3, #0]
        break;
3418f63e:	e014      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_X4QUAD_DS;
3418f640:	687b      	ldr	r3, [r7, #4]
3418f642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
3418f646:	601a      	str	r2, [r3, #0]
        break;
3418f648:	e00f      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_QUAD_DDR;
3418f64a:	687b      	ldr	r3, [r7, #4]
3418f64c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
3418f650:	601a      	str	r2, [r3, #0]
        break;
3418f652:	e00a      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_SECURE_PACKET_READ_WRITE;
3418f654:	687b      	ldr	r3, [r7, #4]
3418f656:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
3418f65a:	601a      	str	r2, [r3, #0]
        break;
3418f65c:	e005      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        Param_info->type = SFPD_PARAMID_RESERVED;
3418f65e:	687b      	ldr	r3, [r7, #4]
3418f660:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
3418f664:	601a      	str	r2, [r3, #0]
        break;
3418f666:	e000      	b.n	3418f66a <sfdp_get_paraminfo+0x1da>
        break;
3418f668:	bf00      	nop
    {
      SFDP_DEBUG_STR("-> the table is not conform to JEDEC standard");
    }
  }

error:
3418f66a:	bf00      	nop
  return retr;
3418f66c:	7ffb      	ldrb	r3, [r7, #31]
}
3418f66e:	4618      	mov	r0, r3
3418f670:	3720      	adds	r7, #32
3418f672:	46bd      	mov	sp, r7
3418f674:	bd80      	pop	{r7, pc}
3418f676:	bf00      	nop

3418f678 <sfpd_enter_octal_mode>:
 * @brief this function executes the octal DDR table to enter octal DDR mode
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_enter_octal_mode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418f678:	b590      	push	{r4, r7, lr}
3418f67a:	b085      	sub	sp, #20
3418f67c:	af00      	add	r7, sp, #0
3418f67e:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418f680:	2300      	movs	r3, #0
3418f682:	73fb      	strb	r3, [r7, #15]
  uint8_t data[7];
  SFDP_DEBUG_STR(__func__);
  /* D1-D2 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand)
3418f684:	4b72      	ldr	r3, [pc, #456]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f686:	78db      	ldrb	r3, [r3, #3]
3418f688:	2b00      	cmp	r3, #0
3418f68a:	d032      	beq.n	3418f6f2 <sfpd_enter_octal_mode+0x7a>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte1CommandSequence;
3418f68c:	4b70      	ldr	r3, [pc, #448]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f68e:	789b      	ldrb	r3, [r3, #2]
3418f690:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte2CommandSequence;
3418f692:	4b6f      	ldr	r3, [pc, #444]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f694:	785b      	ldrb	r3, [r3, #1]
3418f696:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D1.Byte3CommandSequence;
3418f698:	4b6d      	ldr	r3, [pc, #436]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f69a:	781b      	ldrb	r3, [r3, #0]
3418f69c:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte4CommandSequence;
3418f69e:	4b6c      	ldr	r3, [pc, #432]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f6a0:	79db      	ldrb	r3, [r3, #7]
3418f6a2:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte5CommandSequence;
3418f6a4:	4b6a      	ldr	r3, [pc, #424]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f6a6:	799b      	ldrb	r3, [r3, #6]
3418f6a8:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte6CommandSequence;
3418f6aa:	4b69      	ldr	r3, [pc, #420]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f6ac:	795b      	ldrb	r3, [r3, #5]
3418f6ae:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D2.Byte7CommandSequence;
3418f6b0:	4b67      	ldr	r3, [pc, #412]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f6b2:	791b      	ldrb	r3, [r3, #4]
3418f6b4:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418f6b6:	687b      	ldr	r3, [r7, #4]
3418f6b8:	f103 0008 	add.w	r0, r3, #8
3418f6bc:	7a39      	ldrb	r1, [r7, #8]
                                        (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D1.LenghtCommand - 1u)))
3418f6be:	4b64      	ldr	r3, [pc, #400]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f6c0:	78db      	ldrb	r3, [r3, #3]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418f6c2:	3b01      	subs	r3, #1
3418f6c4:	b29c      	uxth	r4, r3
3418f6c6:	f107 0308 	add.w	r3, r7, #8
3418f6ca:	1c5a      	adds	r2, r3, #1
3418f6cc:	4623      	mov	r3, r4
3418f6ce:	f7fe fbf5 	bl	3418debc <SAL_XSPI_CommandSendData>
3418f6d2:	4603      	mov	r3, r0
3418f6d4:	2b00      	cmp	r3, #0
3418f6d6:	d002      	beq.n	3418f6de <sfpd_enter_octal_mode+0x66>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418f6d8:	230b      	movs	r3, #11
3418f6da:	73fb      	strb	r3, [r7, #15]
       goto error;
3418f6dc:	e0b3      	b.n	3418f846 <sfpd_enter_octal_mode+0x1ce>
     }

     /* wait for busy flag clear */
     if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418f6de:	2164      	movs	r1, #100	@ 0x64
3418f6e0:	6878      	ldr	r0, [r7, #4]
3418f6e2:	f7ff fe75 	bl	3418f3d0 <driver_check_FlagBUSY>
3418f6e6:	4603      	mov	r3, r0
3418f6e8:	2b00      	cmp	r3, #0
3418f6ea:	d002      	beq.n	3418f6f2 <sfpd_enter_octal_mode+0x7a>
     {
       retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f6ec:	230c      	movs	r3, #12
3418f6ee:	73fb      	strb	r3, [r7, #15]
       goto error;
3418f6f0:	e0a9      	b.n	3418f846 <sfpd_enter_octal_mode+0x1ce>
     }
  }

  /* D3-D4 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand)
3418f6f2:	4b57      	ldr	r3, [pc, #348]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f6f4:	7adb      	ldrb	r3, [r3, #11]
3418f6f6:	2b00      	cmp	r3, #0
3418f6f8:	d032      	beq.n	3418f760 <sfpd_enter_octal_mode+0xe8>
  {
     data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte1CommandSequence;
3418f6fa:	4b55      	ldr	r3, [pc, #340]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f6fc:	7a9b      	ldrb	r3, [r3, #10]
3418f6fe:	723b      	strb	r3, [r7, #8]
     data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte2CommandSequence;
3418f700:	4b53      	ldr	r3, [pc, #332]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f702:	7a5b      	ldrb	r3, [r3, #9]
3418f704:	727b      	strb	r3, [r7, #9]
     data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D3.Byte3CommandSequence;
3418f706:	4b52      	ldr	r3, [pc, #328]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f708:	7a1b      	ldrb	r3, [r3, #8]
3418f70a:	72bb      	strb	r3, [r7, #10]
     data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte4CommandSequence;
3418f70c:	4b50      	ldr	r3, [pc, #320]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f70e:	7bdb      	ldrb	r3, [r3, #15]
3418f710:	72fb      	strb	r3, [r7, #11]
     data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte5CommandSequence;
3418f712:	4b4f      	ldr	r3, [pc, #316]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f714:	7b9b      	ldrb	r3, [r3, #14]
3418f716:	733b      	strb	r3, [r7, #12]
     data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte6CommandSequence;
3418f718:	4b4d      	ldr	r3, [pc, #308]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f71a:	7b5b      	ldrb	r3, [r3, #13]
3418f71c:	737b      	strb	r3, [r7, #13]
     data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D4.Byte7CommandSequence;
3418f71e:	4b4c      	ldr	r3, [pc, #304]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f720:	7b1b      	ldrb	r3, [r3, #12]
3418f722:	73bb      	strb	r3, [r7, #14]

     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418f724:	687b      	ldr	r3, [r7, #4]
3418f726:	f103 0008 	add.w	r0, r3, #8
3418f72a:	7a39      	ldrb	r1, [r7, #8]
                                            (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D3.LenghtCommand - 1u)))
3418f72c:	4b48      	ldr	r3, [pc, #288]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f72e:	7adb      	ldrb	r3, [r3, #11]
     if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418f730:	3b01      	subs	r3, #1
3418f732:	b29c      	uxth	r4, r3
3418f734:	f107 0308 	add.w	r3, r7, #8
3418f738:	1c5a      	adds	r2, r3, #1
3418f73a:	4623      	mov	r3, r4
3418f73c:	f7fe fbbe 	bl	3418debc <SAL_XSPI_CommandSendData>
3418f740:	4603      	mov	r3, r0
3418f742:	2b00      	cmp	r3, #0
3418f744:	d002      	beq.n	3418f74c <sfpd_enter_octal_mode+0xd4>
     {
       retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418f746:	230b      	movs	r3, #11
3418f748:	73fb      	strb	r3, [r7, #15]
       goto error;
3418f74a:	e07c      	b.n	3418f846 <sfpd_enter_octal_mode+0x1ce>
     }

     /* wait for busy flag clear */
     if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418f74c:	2164      	movs	r1, #100	@ 0x64
3418f74e:	6878      	ldr	r0, [r7, #4]
3418f750:	f7ff fe3e 	bl	3418f3d0 <driver_check_FlagBUSY>
3418f754:	4603      	mov	r3, r0
3418f756:	2b00      	cmp	r3, #0
3418f758:	d002      	beq.n	3418f760 <sfpd_enter_octal_mode+0xe8>
     {
       retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f75a:	230c      	movs	r3, #12
3418f75c:	73fb      	strb	r3, [r7, #15]
       goto error;
3418f75e:	e072      	b.n	3418f846 <sfpd_enter_octal_mode+0x1ce>
     }
  }

  /* D5-D6 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand)
3418f760:	4b3b      	ldr	r3, [pc, #236]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f762:	7cdb      	ldrb	r3, [r3, #19]
3418f764:	2b00      	cmp	r3, #0
3418f766:	d032      	beq.n	3418f7ce <sfpd_enter_octal_mode+0x156>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte1CommandSequence;
3418f768:	4b39      	ldr	r3, [pc, #228]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f76a:	7c9b      	ldrb	r3, [r3, #18]
3418f76c:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte2CommandSequence;
3418f76e:	4b38      	ldr	r3, [pc, #224]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f770:	7c5b      	ldrb	r3, [r3, #17]
3418f772:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D5.Byte3CommandSequence;
3418f774:	4b36      	ldr	r3, [pc, #216]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f776:	7c1b      	ldrb	r3, [r3, #16]
3418f778:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte4CommandSequence;
3418f77a:	4b35      	ldr	r3, [pc, #212]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f77c:	7ddb      	ldrb	r3, [r3, #23]
3418f77e:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte5CommandSequence;
3418f780:	4b33      	ldr	r3, [pc, #204]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f782:	7d9b      	ldrb	r3, [r3, #22]
3418f784:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte6CommandSequence;
3418f786:	4b32      	ldr	r3, [pc, #200]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f788:	7d5b      	ldrb	r3, [r3, #21]
3418f78a:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D6.Byte7CommandSequence;
3418f78c:	4b30      	ldr	r3, [pc, #192]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f78e:	7d1b      	ldrb	r3, [r3, #20]
3418f790:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418f792:	687b      	ldr	r3, [r7, #4]
3418f794:	f103 0008 	add.w	r0, r3, #8
3418f798:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D5.LenghtCommand - 1u)))
3418f79a:	4b2d      	ldr	r3, [pc, #180]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f79c:	7cdb      	ldrb	r3, [r3, #19]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418f79e:	3b01      	subs	r3, #1
3418f7a0:	b29c      	uxth	r4, r3
3418f7a2:	f107 0308 	add.w	r3, r7, #8
3418f7a6:	1c5a      	adds	r2, r3, #1
3418f7a8:	4623      	mov	r3, r4
3418f7aa:	f7fe fb87 	bl	3418debc <SAL_XSPI_CommandSendData>
3418f7ae:	4603      	mov	r3, r0
3418f7b0:	2b00      	cmp	r3, #0
3418f7b2:	d002      	beq.n	3418f7ba <sfpd_enter_octal_mode+0x142>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418f7b4:	230b      	movs	r3, #11
3418f7b6:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f7b8:	e045      	b.n	3418f846 <sfpd_enter_octal_mode+0x1ce>
    }

     /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418f7ba:	2164      	movs	r1, #100	@ 0x64
3418f7bc:	6878      	ldr	r0, [r7, #4]
3418f7be:	f7ff fe07 	bl	3418f3d0 <driver_check_FlagBUSY>
3418f7c2:	4603      	mov	r3, r0
3418f7c4:	2b00      	cmp	r3, #0
3418f7c6:	d002      	beq.n	3418f7ce <sfpd_enter_octal_mode+0x156>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f7c8:	230c      	movs	r3, #12
3418f7ca:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f7cc:	e03b      	b.n	3418f846 <sfpd_enter_octal_mode+0x1ce>
    }
  }

  /* D7-D8 command */
  if (0u != JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand)
3418f7ce:	4b20      	ldr	r3, [pc, #128]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f7d0:	7edb      	ldrb	r3, [r3, #27]
3418f7d2:	2b00      	cmp	r3, #0
3418f7d4:	d032      	beq.n	3418f83c <sfpd_enter_octal_mode+0x1c4>
  {
    data[0] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte1CommandSequence;
3418f7d6:	4b1e      	ldr	r3, [pc, #120]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f7d8:	7e9b      	ldrb	r3, [r3, #26]
3418f7da:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte2CommandSequence;
3418f7dc:	4b1c      	ldr	r3, [pc, #112]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f7de:	7e5b      	ldrb	r3, [r3, #25]
3418f7e0:	727b      	strb	r3, [r7, #9]
    data[2] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D7.Byte3CommandSequence;
3418f7e2:	4b1b      	ldr	r3, [pc, #108]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f7e4:	7e1b      	ldrb	r3, [r3, #24]
3418f7e6:	72bb      	strb	r3, [r7, #10]
    data[3] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte4CommandSequence;
3418f7e8:	4b19      	ldr	r3, [pc, #100]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f7ea:	7fdb      	ldrb	r3, [r3, #31]
3418f7ec:	72fb      	strb	r3, [r7, #11]
    data[4] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte5CommandSequence;
3418f7ee:	4b18      	ldr	r3, [pc, #96]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f7f0:	7f9b      	ldrb	r3, [r3, #30]
3418f7f2:	733b      	strb	r3, [r7, #12]
    data[5] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte6CommandSequence;
3418f7f4:	4b16      	ldr	r3, [pc, #88]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f7f6:	7f5b      	ldrb	r3, [r3, #29]
3418f7f8:	737b      	strb	r3, [r7, #13]
    data[6] = (uint8_t)JEDEC_OctalDdr.Param_DWORD.D8.Byte7CommandSequence;
3418f7fa:	4b15      	ldr	r3, [pc, #84]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f7fc:	7f1b      	ldrb	r3, [r3, #28]
3418f7fe:	73bb      	strb	r3, [r7, #14]

    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418f800:	687b      	ldr	r3, [r7, #4]
3418f802:	f103 0008 	add.w	r0, r3, #8
3418f806:	7a39      	ldrb	r1, [r7, #8]
                                       (uint16_t)(JEDEC_OctalDdr.Param_DWORD.D7.LenghtCommand - 1u)))
3418f808:	4b11      	ldr	r3, [pc, #68]	@ (3418f850 <sfpd_enter_octal_mode+0x1d8>)
3418f80a:	7edb      	ldrb	r3, [r3, #27]
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, data[0], &data[1],
3418f80c:	3b01      	subs	r3, #1
3418f80e:	b29c      	uxth	r4, r3
3418f810:	f107 0308 	add.w	r3, r7, #8
3418f814:	1c5a      	adds	r2, r3, #1
3418f816:	4623      	mov	r3, r4
3418f818:	f7fe fb50 	bl	3418debc <SAL_XSPI_CommandSendData>
3418f81c:	4603      	mov	r3, r0
3418f81e:	2b00      	cmp	r3, #0
3418f820:	d002      	beq.n	3418f828 <sfpd_enter_octal_mode+0x1b0>
    {
      retr = EXTMEM_SFDP_ERROR_OCTALMODE;
3418f822:	230b      	movs	r3, #11
3418f824:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f826:	e00e      	b.n	3418f846 <sfpd_enter_octal_mode+0x1ce>
    }

    /* wait for busy flag clear */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418f828:	2164      	movs	r1, #100	@ 0x64
3418f82a:	6878      	ldr	r0, [r7, #4]
3418f82c:	f7ff fdd0 	bl	3418f3d0 <driver_check_FlagBUSY>
3418f830:	4603      	mov	r3, r0
3418f832:	2b00      	cmp	r3, #0
3418f834:	d002      	beq.n	3418f83c <sfpd_enter_octal_mode+0x1c4>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f836:	230c      	movs	r3, #12
3418f838:	73fb      	strb	r3, [r7, #15]
      goto error;
3418f83a:	e004      	b.n	3418f846 <sfpd_enter_octal_mode+0x1ce>
    }
  }

  /* Abort any ongoing tranfert to avoid perofomance issue */
  SAL_XSPI_Abort(&Object->sfpd_private.SALObject);
3418f83c:	687b      	ldr	r3, [r7, #4]
3418f83e:	3308      	adds	r3, #8
3418f840:	4618      	mov	r0, r3
3418f842:	f7fe fd5e 	bl	3418e302 <SAL_XSPI_Abort>

error:
  return retr;
3418f846:	7bfb      	ldrb	r3, [r7, #15]
}
3418f848:	4618      	mov	r0, r3
3418f84a:	3714      	adds	r7, #20
3418f84c:	46bd      	mov	sp, r7
3418f84e:	bd90      	pop	{r4, r7, pc}
3418f850:	341c039c 	.word	0x341c039c

3418f854 <sfpd_set_dummycycle>:
 * @brief this function writes the config register to set dummy cycle
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef sfpd_set_dummycycle(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t DummyValue)
{
3418f854:	b5b0      	push	{r4, r5, r7, lr}
3418f856:	b088      	sub	sp, #32
3418f858:	af02      	add	r7, sp, #8
3418f85a:	6078      	str	r0, [r7, #4]
3418f85c:	6039      	str	r1, [r7, #0]
const uint8_t MaskWaitStateValue[4] = { 0x3u, 0x7u, 0xFu, 0x1Fu };
3418f85e:	4b6d      	ldr	r3, [pc, #436]	@ (3418fa14 <sfpd_set_dummycycle+0x1c0>)
3418f860:	60fb      	str	r3, [r7, #12]
SFDP_StatusTypeDef retr = EXTMEM_SFDP_OK;
3418f862:	2300      	movs	r3, #0
3418f864:	75fb      	strb	r3, [r7, #23]
uint8_t localValue[2] = { 0 };
3418f866:	2300      	movs	r3, #0
3418f868:	813b      	strh	r3, [r7, #8]
uint32_t Address;

  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
3418f86a:	4b6b      	ldr	r3, [pc, #428]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f86c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f870:	f003 0310 	and.w	r3, r3, #16
3418f874:	b2db      	uxtb	r3, r3
3418f876:	2b00      	cmp	r3, #0
3418f878:	d10a      	bne.n	3418f890 <sfpd_set_dummycycle+0x3c>
    (JEDEC_SCCR_Map.Param_DWORD.D9.BitAvailable == 1u))
3418f87a:	4b67      	ldr	r3, [pc, #412]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f87c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f880:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
3418f884:	b2db      	uxtb	r3, r3
  if((JEDEC_SCCR_Map.Param_DWORD.D9.BitAccessedByCommandsUsingAddress == 0u) &&
3418f886:	2b00      	cmp	r3, #0
3418f888:	d002      	beq.n	3418f890 <sfpd_set_dummycycle+0x3c>
  {
    /* Not yet supported */
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f88a:	230c      	movs	r3, #12
3418f88c:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f88e:	e0bb      	b.n	3418fa08 <sfpd_set_dummycycle+0x1b4>
  }

  /* Compute the Address */
  if (JEDEC_SCCR_Map.Param_DWORD.D9.LocalAddress == 1u)
3418f890:	4b61      	ldr	r3, [pc, #388]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f892:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f896:	f003 0308 	and.w	r3, r3, #8
3418f89a:	b2db      	uxtb	r3, r3
3418f89c:	2b00      	cmp	r3, #0
3418f89e:	d005      	beq.n	3418f8ac <sfpd_set_dummycycle+0x58>
  {
    Address = JEDEC_SCCR_Map.Param_DWORD.D9.AdressRegisterOrModesSupported << 8;
3418f8a0:	4b5d      	ldr	r3, [pc, #372]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f8a2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
3418f8a6:	021b      	lsls	r3, r3, #8
3418f8a8:	613b      	str	r3, [r7, #16]
3418f8aa:	e001      	b.n	3418f8b0 <sfpd_set_dummycycle+0x5c>
  }
  else
  {
    /* patch no really universal */
    Address = 1;
3418f8ac:	2301      	movs	r3, #1
3418f8ae:	613b      	str	r3, [r7, #16]
  }

  /* Read the configuration */
  if (HAL_OK != SAL_XSPI_CommandSendReadAddress(&Object->sfpd_private.SALObject,
3418f8b0:	687b      	ldr	r3, [r7, #4]
3418f8b2:	f103 0008 	add.w	r0, r3, #8
3418f8b6:	4b58      	ldr	r3, [pc, #352]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f8b8:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
3418f8bc:	f107 0308 	add.w	r3, r7, #8
3418f8c0:	2202      	movs	r2, #2
3418f8c2:	9200      	str	r2, [sp, #0]
3418f8c4:	693a      	ldr	r2, [r7, #16]
3418f8c6:	f7fe fba1 	bl	3418e00c <SAL_XSPI_CommandSendReadAddress>
3418f8ca:	4603      	mov	r3, r0
3418f8cc:	2b00      	cmp	r3, #0
3418f8ce:	d002      	beq.n	3418f8d6 <sfpd_set_dummycycle+0x82>
                   (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess,
                   Address,
                   (uint8_t *)localValue,
                   2u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f8d0:	230c      	movs	r3, #12
3418f8d2:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f8d4:	e098      	b.n	3418fa08 <sfpd_set_dummycycle+0x1b4>
  }

  /* send command to write enable */
  if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject,
3418f8d6:	687b      	ldr	r3, [r7, #4]
3418f8d8:	f103 0008 	add.w	r0, r3, #8
3418f8dc:	687b      	ldr	r3, [r7, #4]
3418f8de:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418f8e2:	2300      	movs	r3, #0
3418f8e4:	2200      	movs	r2, #0
3418f8e6:	f7fe fae9 	bl	3418debc <SAL_XSPI_CommandSendData>
3418f8ea:	4603      	mov	r3, r0
3418f8ec:	2b00      	cmp	r3, #0
3418f8ee:	d002      	beq.n	3418f8f6 <sfpd_set_dummycycle+0xa2>
                                     Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f8f0:	230c      	movs	r3, #12
3418f8f2:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f8f4:	e088      	b.n	3418fa08 <sfpd_set_dummycycle+0x1b4>
  }

  /* control the write enable */
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f8f6:	687b      	ldr	r3, [r7, #4]
3418f8f8:	f103 0008 	add.w	r0, r3, #8
3418f8fc:	687b      	ldr	r3, [r7, #4]
3418f8fe:	f893 1071 	ldrb.w	r1, [r3, #113]	@ 0x71
                                            Object->sfpd_private.DriverInfo.ReadWELCommand,
                                            Object->sfpd_private.DriverInfo.WELAddress,
3418f902:	687b      	ldr	r3, [r7, #4]
3418f904:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f908:	461d      	mov	r5, r3
                                            ((Object->sfpd_private.DriverInfo.WELBusyPolarity == 0u) ? 1u: 0u) << Object->sfpd_private.DriverInfo.WELPosition,
3418f90a:	687b      	ldr	r3, [r7, #4]
3418f90c:	f893 3073 	ldrb.w	r3, [r3, #115]	@ 0x73
3418f910:	2b00      	cmp	r3, #0
3418f912:	d101      	bne.n	3418f918 <sfpd_set_dummycycle+0xc4>
3418f914:	2301      	movs	r3, #1
3418f916:	e000      	b.n	3418f91a <sfpd_set_dummycycle+0xc6>
3418f918:	2300      	movs	r3, #0
3418f91a:	687a      	ldr	r2, [r7, #4]
3418f91c:	f892 2072 	ldrb.w	r2, [r2, #114]	@ 0x72
3418f920:	4093      	lsls	r3, r2
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f922:	b2da      	uxtb	r2, r3
                                            1u << Object->sfpd_private.DriverInfo.WELPosition,
3418f924:	687b      	ldr	r3, [r7, #4]
3418f926:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
3418f92a:	461c      	mov	r4, r3
3418f92c:	2301      	movs	r3, #1
3418f92e:	40a3      	lsls	r3, r4
  if (HAL_OK != SAL_XSPI_CheckStatusRegister(&Object->sfpd_private.SALObject,
3418f930:	b2db      	uxtb	r3, r3
3418f932:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
3418f936:	9401      	str	r4, [sp, #4]
3418f938:	9300      	str	r3, [sp, #0]
3418f93a:	4613      	mov	r3, r2
3418f93c:	462a      	mov	r2, r5
3418f93e:	f7fe fbb2 	bl	3418e0a6 <SAL_XSPI_CheckStatusRegister>
3418f942:	4603      	mov	r3, r0
3418f944:	2b00      	cmp	r3, #0
3418f946:	d002      	beq.n	3418f94e <sfpd_set_dummycycle+0xfa>
                                            1000))
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f948:	230c      	movs	r3, #12
3418f94a:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f94c:	e05c      	b.n	3418fa08 <sfpd_set_dummycycle+0x1b4>
  }

  /* clear the value */
  localValue[0] = localValue[0] & ~(MaskWaitStateValue[JEDEC_SCCR_Map.Param_DWORD.D9.NumberBitsUsedToSetWaitStates] << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3418f94e:	7a3b      	ldrb	r3, [r7, #8]
3418f950:	b25a      	sxtb	r2, r3
3418f952:	4b31      	ldr	r3, [pc, #196]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f954:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f958:	f3c3 1341 	ubfx	r3, r3, #5, #2
3418f95c:	b2db      	uxtb	r3, r3
3418f95e:	3318      	adds	r3, #24
3418f960:	443b      	add	r3, r7
3418f962:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
3418f966:	4619      	mov	r1, r3
3418f968:	4b2b      	ldr	r3, [pc, #172]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f96a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f96e:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418f972:	b2db      	uxtb	r3, r3
3418f974:	fa01 f303 	lsl.w	r3, r1, r3
3418f978:	b25b      	sxtb	r3, r3
3418f97a:	43db      	mvns	r3, r3
3418f97c:	b25b      	sxtb	r3, r3
3418f97e:	4013      	ands	r3, r2
3418f980:	b25b      	sxtb	r3, r3
3418f982:	b2db      	uxtb	r3, r3
3418f984:	723b      	strb	r3, [r7, #8]

  /* Apply the value with the mask */
  localValue[0] =  localValue[0] | (uint8_t)(DummyValue << JEDEC_SCCR_Map.Param_DWORD.D9.BitLocationLSBPhysicalBitsRegister);
3418f986:	7a3a      	ldrb	r2, [r7, #8]
3418f988:	4b23      	ldr	r3, [pc, #140]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f98a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
3418f98e:	f3c3 0302 	ubfx	r3, r3, #0, #3
3418f992:	b2db      	uxtb	r3, r3
3418f994:	4619      	mov	r1, r3
3418f996:	683b      	ldr	r3, [r7, #0]
3418f998:	408b      	lsls	r3, r1
3418f99a:	b2db      	uxtb	r3, r3
3418f99c:	4313      	orrs	r3, r2
3418f99e:	b2db      	uxtb	r3, r3
3418f9a0:	723b      	strb	r3, [r7, #8]
  localValue[1] = localValue[0];
3418f9a2:	7a3b      	ldrb	r3, [r7, #8]
3418f9a4:	727b      	strb	r3, [r7, #9]

  /* Write de configuration */
  if (HAL_OK != SAL_XSPI_Write(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandWriteAccess, Address, (uint8_t *)localValue, 2u))
3418f9a6:	687b      	ldr	r3, [r7, #4]
3418f9a8:	f103 0008 	add.w	r0, r3, #8
3418f9ac:	4b1a      	ldr	r3, [pc, #104]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f9ae:	f893 1020 	ldrb.w	r1, [r3, #32]
3418f9b2:	f107 0308 	add.w	r3, r7, #8
3418f9b6:	2202      	movs	r2, #2
3418f9b8:	9200      	str	r2, [sp, #0]
3418f9ba:	693a      	ldr	r2, [r7, #16]
3418f9bc:	f7fe fa35 	bl	3418de2a <SAL_XSPI_Write>
3418f9c0:	4603      	mov	r3, r0
3418f9c2:	2b00      	cmp	r3, #0
3418f9c4:	d002      	beq.n	3418f9cc <sfpd_set_dummycycle+0x178>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f9c6:	230c      	movs	r3, #12
3418f9c8:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f9ca:	e01d      	b.n	3418fa08 <sfpd_set_dummycycle+0x1b4>
  }

  /* wait for busy flag clear */
  if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100u))
3418f9cc:	2164      	movs	r1, #100	@ 0x64
3418f9ce:	6878      	ldr	r0, [r7, #4]
3418f9d0:	f7ff fcfe 	bl	3418f3d0 <driver_check_FlagBUSY>
3418f9d4:	4603      	mov	r3, r0
3418f9d6:	2b00      	cmp	r3, #0
3418f9d8:	d002      	beq.n	3418f9e0 <sfpd_set_dummycycle+0x18c>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418f9da:	230c      	movs	r3, #12
3418f9dc:	75fb      	strb	r3, [r7, #23]
    goto error;
3418f9de:	e013      	b.n	3418fa08 <sfpd_set_dummycycle+0x1b4>
  }

  /* Read the configuration, line can be removed it is only used for debug purpose */
  if (HAL_OK != SAL_XSPI_Read(&Object->sfpd_private.SALObject, (uint8_t)JEDEC_SCCR_Map.Param_DWORD.D9.CommandReadAccess, Address, (uint8_t *)localValue, 2u))
3418f9e0:	687b      	ldr	r3, [r7, #4]
3418f9e2:	f103 0008 	add.w	r0, r3, #8
3418f9e6:	4b0c      	ldr	r3, [pc, #48]	@ (3418fa18 <sfpd_set_dummycycle+0x1c4>)
3418f9e8:	f893 1021 	ldrb.w	r1, [r3, #33]	@ 0x21
3418f9ec:	f107 0308 	add.w	r3, r7, #8
3418f9f0:	2202      	movs	r2, #2
3418f9f2:	9200      	str	r2, [sp, #0]
3418f9f4:	693a      	ldr	r2, [r7, #16]
3418f9f6:	f7fe f9b0 	bl	3418dd5a <SAL_XSPI_Read>
3418f9fa:	4603      	mov	r3, r0
3418f9fc:	2b00      	cmp	r3, #0
3418f9fe:	d002      	beq.n	3418fa06 <sfpd_set_dummycycle+0x1b2>
  {
    retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fa00:	230c      	movs	r3, #12
3418fa02:	75fb      	strb	r3, [r7, #23]
    goto error;
3418fa04:	e000      	b.n	3418fa08 <sfpd_set_dummycycle+0x1b4>
  }

error :
3418fa06:	bf00      	nop
  return retr;
3418fa08:	7dfb      	ldrb	r3, [r7, #23]
}
3418fa0a:	4618      	mov	r0, r3
3418fa0c:	3718      	adds	r7, #24
3418fa0e:	46bd      	mov	sp, r7
3418fa10:	bdb0      	pop	{r4, r5, r7, pc}
3418fa12:	bf00      	nop
3418fa14:	1f0f0703 	.word	0x1f0f0703
3418fa18:	341c032c 	.word	0x341c032c

3418fa1c <JEDEC_Basic_ManageQuadEnableRequierement>:
          JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_ManageQuadEnableRequierement(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418fa1c:	b580      	push	{r7, lr}
3418fa1e:	b084      	sub	sp, #16
3418fa20:	af00      	add	r7, sp, #0
3418fa22:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418fa24:	230f      	movs	r3, #15
3418fa26:	73fb      	strb	r3, [r7, #15]
  uint8_t localValue[2];

  /* switch the mode in QSPI if available */
  switch (JEDEC_Basic.Params.Param_DWORD.D15.QuadEnableRequierment & 0x7u)
3418fa28:	4b58      	ldr	r3, [pc, #352]	@ (3418fb8c <JEDEC_Basic_ManageQuadEnableRequierement+0x170>)
3418fa2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
3418fa2e:	f3c3 1302 	ubfx	r3, r3, #4, #3
3418fa32:	b2db      	uxtb	r3, r3
3418fa34:	2b07      	cmp	r3, #7
3418fa36:	f200 80a1 	bhi.w	3418fb7c <JEDEC_Basic_ManageQuadEnableRequierement+0x160>
3418fa3a:	a201      	add	r2, pc, #4	@ (adr r2, 3418fa40 <JEDEC_Basic_ManageQuadEnableRequierement+0x24>)
3418fa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3418fa40:	3418fb7d 	.word	0x3418fb7d
3418fa44:	3418fb7d 	.word	0x3418fb7d
3418fa48:	3418fa61 	.word	0x3418fa61
3418fa4c:	3418fb7d 	.word	0x3418fb7d
3418fa50:	3418fae1 	.word	0x3418fae1
3418fa54:	3418fb7d 	.word	0x3418fb7d
3418fa58:	3418fb7d 	.word	0x3418fb7d
3418fa5c:	3418fb7d 	.word	0x3418fb7d
              */
    break;
  case 0x2u: {/* 010b: QE is bit 6 of status register 1. It is set via Write Status with one data byte where bit 6 is one.
                 It is cleared via Write Status with one data byte where bit 6 is zero..*/
    /* 1 - set the write enable */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
3418fa60:	687b      	ldr	r3, [r7, #4]
3418fa62:	f103 0008 	add.w	r0, r3, #8
3418fa66:	687b      	ldr	r3, [r7, #4]
3418fa68:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418fa6c:	2300      	movs	r3, #0
3418fa6e:	2200      	movs	r2, #0
3418fa70:	f7fe fa78 	bl	3418df64 <SAL_XSPI_SendReadCommand>
3418fa74:	4603      	mov	r3, r0
3418fa76:	2b00      	cmp	r3, #0
3418fa78:	d002      	beq.n	3418fa80 <JEDEC_Basic_ManageQuadEnableRequierement+0x64>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fa7a:	230c      	movs	r3, #12
3418fa7c:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fa7e:	e080      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* 2 - read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5u, (uint8_t *)&localValue[0], 1u))
3418fa80:	687b      	ldr	r3, [r7, #4]
3418fa82:	f103 0008 	add.w	r0, r3, #8
3418fa86:	f107 020c 	add.w	r2, r7, #12
3418fa8a:	2301      	movs	r3, #1
3418fa8c:	2105      	movs	r1, #5
3418fa8e:	f7fe fa69 	bl	3418df64 <SAL_XSPI_SendReadCommand>
3418fa92:	4603      	mov	r3, r0
3418fa94:	2b00      	cmp	r3, #0
3418fa96:	d002      	beq.n	3418fa9e <JEDEC_Basic_ManageQuadEnableRequierement+0x82>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fa98:	230c      	movs	r3, #12
3418fa9a:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fa9c:	e071      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* 3 - update the status register to enable QPI mode*/
    localValue[0] = localValue[0] | 0x40u;
3418fa9e:	7b3b      	ldrb	r3, [r7, #12]
3418faa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418faa4:	b2db      	uxtb	r3, r3
3418faa6:	733b      	strb	r3, [r7, #12]

    /* 4 - write the status register with QPI mode to 1 */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 1u))
3418faa8:	687b      	ldr	r3, [r7, #4]
3418faaa:	f103 0008 	add.w	r0, r3, #8
3418faae:	f107 020c 	add.w	r2, r7, #12
3418fab2:	2301      	movs	r3, #1
3418fab4:	2101      	movs	r1, #1
3418fab6:	f7fe fa01 	bl	3418debc <SAL_XSPI_CommandSendData>
3418faba:	4603      	mov	r3, r0
3418fabc:	2b00      	cmp	r3, #0
3418fabe:	d002      	beq.n	3418fac6 <JEDEC_Basic_ManageQuadEnableRequierement+0xaa>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fac0:	230c      	movs	r3, #12
3418fac2:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fac4:	e05d      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
3418fac6:	2164      	movs	r1, #100	@ 0x64
3418fac8:	6878      	ldr	r0, [r7, #4]
3418faca:	f7ff fc81 	bl	3418f3d0 <driver_check_FlagBUSY>
3418face:	4603      	mov	r3, r0
3418fad0:	2b00      	cmp	r3, #0
3418fad2:	d002      	beq.n	3418fada <JEDEC_Basic_ManageQuadEnableRequierement+0xbe>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fad4:	230c      	movs	r3, #12
3418fad6:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fad8:	e053      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    retr = EXTMEM_SFDP_OK;
3418fada:	2300      	movs	r3, #0
3418fadc:	73fb      	strb	r3, [r7, #15]
    break;
3418fade:	e050      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x4u:{ /* 100b: QE is bit 1 of status register 2. It is set via Write Status with two data bytes where bit 1 of the second byte is one.
                It is cleared via Write Status with two data bytes where bit 1 of the second byte is zero.
                In contrast to the 001b code, writing one byte to the status register does not modify status register 2.*/

    /* read the status register */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3418fae0:	687b      	ldr	r3, [r7, #4]
3418fae2:	f103 0008 	add.w	r0, r3, #8
3418fae6:	f107 020c 	add.w	r2, r7, #12
3418faea:	2302      	movs	r3, #2
3418faec:	2105      	movs	r1, #5
3418faee:	f7fe fa39 	bl	3418df64 <SAL_XSPI_SendReadCommand>
3418faf2:	4603      	mov	r3, r0
3418faf4:	2b00      	cmp	r3, #0
3418faf6:	d002      	beq.n	3418fafe <JEDEC_Basic_ManageQuadEnableRequierement+0xe2>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418faf8:	230c      	movs	r3, #12
3418fafa:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fafc:	e041      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* update the status register */
    localValue[1] |= 2u;
3418fafe:	7b7b      	ldrb	r3, [r7, #13]
3418fb00:	f043 0302 	orr.w	r3, r3, #2
3418fb04:	b2db      	uxtb	r3, r3
3418fb06:	737b      	strb	r3, [r7, #13]

    /* WEL */
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, Object->sfpd_private.DriverInfo.WriteWELCommand, NULL, 0u))
3418fb08:	687b      	ldr	r3, [r7, #4]
3418fb0a:	f103 0008 	add.w	r0, r3, #8
3418fb0e:	687b      	ldr	r3, [r7, #4]
3418fb10:	f893 1070 	ldrb.w	r1, [r3, #112]	@ 0x70
3418fb14:	2300      	movs	r3, #0
3418fb16:	2200      	movs	r2, #0
3418fb18:	f7fe fa24 	bl	3418df64 <SAL_XSPI_SendReadCommand>
3418fb1c:	4603      	mov	r3, r0
3418fb1e:	2b00      	cmp	r3, #0
3418fb20:	d002      	beq.n	3418fb28 <JEDEC_Basic_ManageQuadEnableRequierement+0x10c>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fb22:	230c      	movs	r3, #12
3418fb24:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fb26:	e02c      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* write the status register */
    if (HAL_OK != SAL_XSPI_CommandSendData(&Object->sfpd_private.SALObject, 0x1u, (uint8_t *)&localValue[0], 2u))
3418fb28:	687b      	ldr	r3, [r7, #4]
3418fb2a:	f103 0008 	add.w	r0, r3, #8
3418fb2e:	f107 020c 	add.w	r2, r7, #12
3418fb32:	2302      	movs	r3, #2
3418fb34:	2101      	movs	r1, #1
3418fb36:	f7fe f9c1 	bl	3418debc <SAL_XSPI_CommandSendData>
3418fb3a:	4603      	mov	r3, r0
3418fb3c:	2b00      	cmp	r3, #0
3418fb3e:	d002      	beq.n	3418fb46 <JEDEC_Basic_ManageQuadEnableRequierement+0x12a>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fb40:	230c      	movs	r3, #12
3418fb42:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fb44:	e01d      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* wait busy flag  */
    if (EXTMEM_DRIVER_NOR_SFDP_OK != driver_check_FlagBUSY(Object, 100))
3418fb46:	2164      	movs	r1, #100	@ 0x64
3418fb48:	6878      	ldr	r0, [r7, #4]
3418fb4a:	f7ff fc41 	bl	3418f3d0 <driver_check_FlagBUSY>
3418fb4e:	4603      	mov	r3, r0
3418fb50:	2b00      	cmp	r3, #0
3418fb52:	d002      	beq.n	3418fb5a <JEDEC_Basic_ManageQuadEnableRequierement+0x13e>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fb54:	230c      	movs	r3, #12
3418fb56:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fb58:	e013      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    }

    /* Optional : only for control read the status register and check write operation is OK */
    localValue[1] = 0xFF;
3418fb5a:	23ff      	movs	r3, #255	@ 0xff
3418fb5c:	737b      	strb	r3, [r7, #13]
    if (HAL_OK != SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, 0x5, (uint8_t *)&localValue[0], 2u))
3418fb5e:	687b      	ldr	r3, [r7, #4]
3418fb60:	f103 0008 	add.w	r0, r3, #8
3418fb64:	f107 020c 	add.w	r2, r7, #12
3418fb68:	2302      	movs	r3, #2
3418fb6a:	2105      	movs	r1, #5
3418fb6c:	f7fe f9fa 	bl	3418df64 <SAL_XSPI_SendReadCommand>
3418fb70:	4603      	mov	r3, r0
3418fb72:	2b00      	cmp	r3, #0
3418fb74:	d004      	beq.n	3418fb80 <JEDEC_Basic_ManageQuadEnableRequierement+0x164>
    {
      retr = EXTMEM_SFDP_ERROR_DRIVER;
3418fb76:	230c      	movs	r3, #12
3418fb78:	73fb      	strb	r3, [r7, #15]
      goto error;
3418fb7a:	e002      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
  case 0x6u: /* 110b: QE is bit 1 of the status register 2. Status register 1 is read using Read Status instruction 05h. Status register 2 is read using instruction 35h, and status register 3 is read using instruction 15h. QE is set via Write Status Register instruction 31h with one data byte where bit 1 is one. It is cleared via Write Status Register instruction 31h with one data byte where bit 1 is zero.*/
    break;
  case 0x7u: /*111b: Reserved */
    break;
  default :/* Added for Misra */
    break;
3418fb7c:	bf00      	nop
3418fb7e:	e000      	b.n	3418fb82 <JEDEC_Basic_ManageQuadEnableRequierement+0x166>
    break;
3418fb80:	bf00      	nop
  }
error :
  return retr;
3418fb82:	7bfb      	ldrb	r3, [r7, #15]
}
3418fb84:	4618      	mov	r0, r3
3418fb86:	3710      	adds	r7, #16
3418fb88:	46bd      	mov	sp, r7
3418fb8a:	bd80      	pop	{r7, pc}
3418fb8c:	341c02ac 	.word	0x341c02ac

3418fb90 <JEDEC_Basic_Manage4S4S4SEnableSequence>:
          JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence parameter
 * @param Object memory Object
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef JEDEC_Basic_Manage4S4S4SEnableSequence(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object)
{
3418fb90:	b580      	push	{r7, lr}
3418fb92:	b084      	sub	sp, #16
3418fb94:	af00      	add	r7, sp, #0
3418fb96:	6078      	str	r0, [r7, #4]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_NOTYETHANDLED;
3418fb98:	230f      	movs	r3, #15
3418fb9a:	73fb      	strb	r3, [r7, #15]
  uint8_t instruction = 0x00u;
3418fb9c:	2300      	movs	r3, #0
3418fb9e:	73bb      	strb	r3, [r7, #14]
    /* 4-4-4 mode enable sequences, This field describes the supported methods to enter 4-4-4 mode from 1-1-1 mode */
    /* x_xxx1b: set QE per QER description above, then issue instruction 38h */
    if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x1u) == 0x1u)
3418fba0:	4b19      	ldr	r3, [pc, #100]	@ (3418fc08 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
3418fba2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
3418fba4:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418fba8:	b2db      	uxtb	r3, r3
3418fbaa:	f003 0301 	and.w	r3, r3, #1
3418fbae:	2b00      	cmp	r3, #0
3418fbb0:	d007      	beq.n	3418fbc2 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x32>
    {
      retr = JEDEC_Basic_ManageQuadEnableRequierement(Object);
3418fbb2:	6878      	ldr	r0, [r7, #4]
3418fbb4:	f7ff ff32 	bl	3418fa1c <JEDEC_Basic_ManageQuadEnableRequierement>
3418fbb8:	4603      	mov	r3, r0
3418fbba:	73fb      	strb	r3, [r7, #15]
      instruction = 0x38u;
3418fbbc:	2338      	movs	r3, #56	@ 0x38
3418fbbe:	73bb      	strb	r3, [r7, #14]
3418fbc0:	e00c      	b.n	3418fbdc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    }
    /* x_x1xxb: issue instruction 35h */
    else if ((JEDEC_Basic.Params.Param_DWORD.D15._4S4S4S_EnableSequence & 0x4u) == 0x4u)
3418fbc2:	4b11      	ldr	r3, [pc, #68]	@ (3418fc08 <JEDEC_Basic_Manage4S4S4SEnableSequence+0x78>)
3418fbc4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
3418fbc6:	f3c3 1304 	ubfx	r3, r3, #4, #5
3418fbca:	b2db      	uxtb	r3, r3
3418fbcc:	f003 0304 	and.w	r3, r3, #4
3418fbd0:	2b00      	cmp	r3, #0
3418fbd2:	d003      	beq.n	3418fbdc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x4c>
    {
      retr = EXTMEM_SFDP_OK;
3418fbd4:	2300      	movs	r3, #0
3418fbd6:	73fb      	strb	r3, [r7, #15]
      instruction = 0x35u;
3418fbd8:	2335      	movs	r3, #53	@ 0x35
3418fbda:	73bb      	strb	r3, [r7, #14]
device uses a read-modify-write sequence of operations:
Read Volatile Enhanced Configuration Register using instruction 65h, no address is required, set bit 7 to 1.
Write Volatile Enhanced Configuration Register using instruction 61h, no address is required. This configuration is volatile.
NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 enable sequence is issued.
*/
    if ((retr == EXTMEM_SFDP_OK) && (instruction != 0u))
3418fbdc:	7bfb      	ldrb	r3, [r7, #15]
3418fbde:	2b00      	cmp	r3, #0
3418fbe0:	d10c      	bne.n	3418fbfc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
3418fbe2:	7bbb      	ldrb	r3, [r7, #14]
3418fbe4:	2b00      	cmp	r3, #0
3418fbe6:	d009      	beq.n	3418fbfc <JEDEC_Basic_Manage4S4S4SEnableSequence+0x6c>
    {
        (void)SAL_XSPI_SendReadCommand(&Object->sfpd_private.SALObject, instruction, NULL, 0u);
3418fbe8:	687b      	ldr	r3, [r7, #4]
3418fbea:	f103 0008 	add.w	r0, r3, #8
3418fbee:	7bb9      	ldrb	r1, [r7, #14]
3418fbf0:	2300      	movs	r3, #0
3418fbf2:	2200      	movs	r2, #0
3418fbf4:	f7fe f9b6 	bl	3418df64 <SAL_XSPI_SendReadCommand>
        /* @note on memory W25Q64JV the command 38h does not exist so the control on command execution has been removed */
        retr = EXTMEM_SFDP_OK;
3418fbf8:	2300      	movs	r3, #0
3418fbfa:	73fb      	strb	r3, [r7, #15]

    // x1xxb: device uses a read-modify-write sequence of operations: read configuration using instruction 65h followed by address 800003h, clear bit 6, write configuration using instruction 71h followed by address 800003h.. This configuration is volatile.
    // 1xxxb: issue the Soft Reset 66/99 sequence, see 6.4.19
    // NOTE If device is in 0-4-4 mode, then this mode must be exited before the 4-4-4 disable sequence is issued.

  return retr;
3418fbfc:	7bfb      	ldrb	r3, [r7, #15]
}
3418fbfe:	4618      	mov	r0, r3
3418fc00:	3710      	adds	r7, #16
3418fc02:	46bd      	mov	sp, r7
3418fc04:	bd80      	pop	{r7, pc}
3418fc06:	bf00      	nop
3418fc08:	341c02ac 	.word	0x341c02ac

3418fc0c <CheckSFDP_Signature>:
 * @param Object memory Object
 * @param Signature value of the SFDP signature
 * @return @ref SFDP_StatusTypeDef
 */
SFDP_StatusTypeDef CheckSFDP_Signature(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *Object, uint32_t Signature )
{
3418fc0c:	b580      	push	{r7, lr}
3418fc0e:	b084      	sub	sp, #16
3418fc10:	af00      	add	r7, sp, #0
3418fc12:	6078      	str	r0, [r7, #4]
3418fc14:	6039      	str	r1, [r7, #0]
  SFDP_StatusTypeDef retr = EXTMEM_SFDP_ERROR_SIGNATURE;
3418fc16:	2304      	movs	r3, #4
3418fc18:	73fb      	strb	r3, [r7, #15]

  /* check the magic number */
  switch(Signature)
3418fc1a:	683b      	ldr	r3, [r7, #0]
3418fc1c:	4a0e      	ldr	r2, [pc, #56]	@ (3418fc58 <CheckSFDP_Signature+0x4c>)
3418fc1e:	4293      	cmp	r3, r2
3418fc20:	d006      	beq.n	3418fc30 <CheckSFDP_Signature+0x24>
3418fc22:	683b      	ldr	r3, [r7, #0]
3418fc24:	4a0d      	ldr	r2, [pc, #52]	@ (3418fc5c <CheckSFDP_Signature+0x50>)
3418fc26:	4293      	cmp	r3, r2
3418fc28:	d10e      	bne.n	3418fc48 <CheckSFDP_Signature+0x3c>
  {
  case SFDP_SIGNATURE :
    SFDP_DEBUG_STR("signature of the header: OK");
    retr = EXTMEM_SFDP_OK;
3418fc2a:	2300      	movs	r3, #0
3418fc2c:	73fb      	strb	r3, [r7, #15]
    break;
3418fc2e:	e00e      	b.n	3418fc4e <CheckSFDP_Signature+0x42>
  case 0x44505346U :
    SFDP_DEBUG_STR("signature of the header: KO inverted data order");
    /* Change the Mtype settings */
    if (HAL_OK == SAL_XSPI_UpdateMemoryType(&Object->sfpd_private.SALObject, SAL_XSPI_ORDERINVERTED))
3418fc30:	687b      	ldr	r3, [r7, #4]
3418fc32:	3308      	adds	r3, #8
3418fc34:	2100      	movs	r1, #0
3418fc36:	4618      	mov	r0, r3
3418fc38:	f7fe fb2b 	bl	3418e292 <SAL_XSPI_UpdateMemoryType>
3418fc3c:	4603      	mov	r3, r0
3418fc3e:	2b00      	cmp	r3, #0
3418fc40:	d104      	bne.n	3418fc4c <CheckSFDP_Signature+0x40>
    {
      retr = EXTMEM_SFDP_ERROR_SIGNATUREMTYPE;
3418fc42:	2305      	movs	r3, #5
3418fc44:	73fb      	strb	r3, [r7, #15]
    }
    break;
3418fc46:	e001      	b.n	3418fc4c <CheckSFDP_Signature+0x40>
  default :
    SFDP_DEBUG_STR("signature of the header: KO");
    break;
3418fc48:	bf00      	nop
3418fc4a:	e000      	b.n	3418fc4e <CheckSFDP_Signature+0x42>
    break;
3418fc4c:	bf00      	nop
  }
  return retr;
3418fc4e:	7bfb      	ldrb	r3, [r7, #15]
}
3418fc50:	4618      	mov	r0, r3
3418fc52:	3710      	adds	r7, #16
3418fc54:	46bd      	mov	sp, r7
3418fc56:	bd80      	pop	{r7, pc}
3418fc58:	44505346 	.word	0x44505346
3418fc5c:	50444653 	.word	0x50444653

3418fc60 <EXTMEM_DRIVER_NOR_SFDP_Init>:
/** @defgroup DRIVER_SFDP_Exported_Functions DRIVER SFDP Exported Functions
  * @{
  */

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Init(void *Peripheral, EXTMEM_LinkConfig_TypeDef Config, uint32_t ClockInput, EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418fc60:	b580      	push	{r7, lr}
3418fc62:	b08a      	sub	sp, #40	@ 0x28
3418fc64:	af00      	add	r7, sp, #0
3418fc66:	60f8      	str	r0, [r7, #12]
3418fc68:	607a      	str	r2, [r7, #4]
3418fc6a:	603b      	str	r3, [r7, #0]
3418fc6c:	460b      	mov	r3, r1
3418fc6e:	72fb      	strb	r3, [r7, #11]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418fc70:	2300      	movs	r3, #0
3418fc72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  SFPD_HeaderTypeDef JEDEC_SFDP_Header;
  uint8_t FreqUpdate = 0u;
3418fc76:	2300      	movs	r3, #0
3418fc78:	76fb      	strb	r3, [r7, #27]
  uint8_t DataID[6];
  uint32_t ClockOut;

  /* reset data of SFDPObject to zero */
  SFDP_DEBUG_STR("1 - reset data SFDPObject to zero")
  (void)memset((void *)&SFDPObject->sfpd_private, 0x0, sizeof(SFDPObject->sfpd_private));
3418fc7a:	683b      	ldr	r3, [r7, #0]
3418fc7c:	3308      	adds	r3, #8
3418fc7e:	2298      	movs	r2, #152	@ 0x98
3418fc80:	2100      	movs	r1, #0
3418fc82:	4618      	mov	r0, r3
3418fc84:	f000 fb18 	bl	341902b8 <memset>

  /* initialize the SFDPObject */
  SFDP_DEBUG_STR("2 - initialize the SFDPObject")
  SFDPObject->sfpd_private.Config = Config;
3418fc88:	683b      	ldr	r3, [r7, #0]
3418fc8a:	7afa      	ldrb	r2, [r7, #11]
3418fc8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  SFDPObject->sfpd_private.DriverInfo.SpiPhyLink = PHY_LINK_1S1S1S;
3418fc90:	683b      	ldr	r3, [r7, #0]
3418fc92:	2200      	movs	r2, #0
3418fc94:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  SFDPObject->sfpd_private.DriverInfo.ClockIn = ClockInput;
3418fc98:	683b      	ldr	r3, [r7, #0]
3418fc9a:	687a      	ldr	r2, [r7, #4]
3418fc9c:	669a      	str	r2, [r3, #104]	@ 0x68
  SAL_XSPI_SET_SFDPDUMMYCYLE(SFDPObject->sfpd_private.SALObject, 8);
3418fc9e:	683b      	ldr	r3, [r7, #0]
3418fca0:	2208      	movs	r2, #8
3418fca2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* set memory speed to 50Mhz maximum */
  SFDP_DEBUG_STR("3 - set memory link and speed to 50Mhz maximum")
  (void)SAL_XSPI_Init(&SFDPObject->sfpd_private.SALObject, Peripheral);
3418fca6:	683b      	ldr	r3, [r7, #0]
3418fca8:	3308      	adds	r3, #8
3418fcaa:	68f9      	ldr	r1, [r7, #12]
3418fcac:	4618      	mov	r0, r3
3418fcae:	f7fd fe20 	bl	3418d8f2 <SAL_XSPI_Init>
  (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, DRIVER_SFDP_DEFAULT_CLOCK, &ClockOut);
3418fcb2:	683b      	ldr	r3, [r7, #0]
3418fcb4:	f103 0008 	add.w	r0, r3, #8
3418fcb8:	f107 0310 	add.w	r3, r7, #16
3418fcbc:	4a44      	ldr	r2, [pc, #272]	@ (3418fdd0 <EXTMEM_DRIVER_NOR_SFDP_Init+0x170>)
3418fcbe:	6879      	ldr	r1, [r7, #4]
3418fcc0:	f7fd fdd8 	bl	3418d874 <SAL_XSPI_SetClock>

  /* Abort any ongoing XSPI action */
  (void)SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject);
3418fcc4:	683b      	ldr	r3, [r7, #0]
3418fcc6:	3308      	adds	r3, #8
3418fcc8:	4618      	mov	r0, r3
3418fcca:	f7fe fad1 	bl	3418e270 <SAL_XSPI_DisableMapMode>

  /* analyse the SFPD structure to get driver information */
  SFDP_DEBUG_STR("4 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
3418fcce:	f107 031c 	add.w	r3, r7, #28
3418fcd2:	4619      	mov	r1, r3
3418fcd4:	6838      	ldr	r0, [r7, #0]
3418fcd6:	f7fe fbaf 	bl	3418e438 <SFDP_GetHeader>
3418fcda:	4603      	mov	r3, r0
3418fcdc:	2b00      	cmp	r3, #0
3418fcde:	d003      	beq.n	3418fce8 <EXTMEM_DRIVER_NOR_SFDP_Init+0x88>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only performed in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418fce0:	23ff      	movs	r3, #255	@ 0xff
3418fce2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418fce6:	e06c      	b.n	3418fdc2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Reset the memory */
  SFDP_DEBUG_STR("5 - reset the memory")
  if(EXTMEM_SFDP_OK != SFDP_MemoryReset(SFDPObject))
3418fce8:	6838      	ldr	r0, [r7, #0]
3418fcea:	f7fe fcdf 	bl	3418e6ac <SFDP_MemoryReset>
     */
    SFDP_DEBUG_STR("ERROR::on the call of SFDP_MemoryReset but no error returned")
  }

  /* wait few ms after the reset operation, this is done to avoid issue on SFDP read */
  HAL_Delay(10);
3418fcee:	200a      	movs	r0, #10
3418fcf0:	f7f1 fd9a 	bl	34181828 <HAL_Delay>

  /* analyse the SFPD structure to get driver information after the reset */
  SFDP_DEBUG_STR("6 - analyse the SFPD structure to get driver information")
  if(EXTMEM_SFDP_OK != SFDP_GetHeader(SFDPObject, &JEDEC_SFDP_Header))
3418fcf4:	f107 031c 	add.w	r3, r7, #28
3418fcf8:	4619      	mov	r1, r3
3418fcfa:	6838      	ldr	r0, [r7, #0]
3418fcfc:	f7fe fb9c 	bl	3418e438 <SFDP_GetHeader>
3418fd00:	4603      	mov	r3, r0
3418fd02:	2b00      	cmp	r3, #0
3418fd04:	d003      	beq.n	3418fd0e <EXTMEM_DRIVER_NOR_SFDP_Init+0xae>
    /*
     *  for the future, we can try to get SFDP by using different mode
     *  the SFDP read is only perform in 1S1S1S mode
     */
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418fd06:	23ff      	movs	r3, #255	@ 0xff
3418fd08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418fd0c:	e059      	b.n	3418fdc2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* Save information from the SFDP table */
  SFDPObject->sfpd_private.Sfdp_param_number = JEDEC_SFDP_Header.param_number;
3418fd0e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
3418fd12:	683b      	ldr	r3, [r7, #0]
3418fd14:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
  SFDPObject->sfpd_private.Sfdp_AccessProtocol = JEDEC_SFDP_Header.AccessProtocol;
3418fd18:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
3418fd1c:	683b      	ldr	r3, [r7, #0]
3418fd1e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

  /* read the flash ID */
  SFDP_DEBUG_STR("7 - read the flash ID")
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
3418fd22:	683b      	ldr	r3, [r7, #0]
3418fd24:	3308      	adds	r3, #8
3418fd26:	f107 0114 	add.w	r1, r7, #20
3418fd2a:	2204      	movs	r2, #4
3418fd2c:	4618      	mov	r0, r3
3418fd2e:	f7fd ffc1 	bl	3418dcb4 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

  /* keep manufacturer information, it could be used to help in
     building of consistent driver */
  SFDPObject->sfpd_private.ManuID = DataID[0];
3418fd32:	7d3a      	ldrb	r2, [r7, #20]
3418fd34:	683b      	ldr	r3, [r7, #0]
3418fd36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* get the SFDP data */
  SFDP_DEBUG_STR("8 - collect the SFDP data")
  if(EXTMEM_SFDP_OK != SFDP_CollectData(SFDPObject))
3418fd3a:	6838      	ldr	r0, [r7, #0]
3418fd3c:	f7fe fbda 	bl	3418e4f4 <SFDP_CollectData>
3418fd40:	4603      	mov	r3, r0
3418fd42:	2b00      	cmp	r3, #0
3418fd44:	d003      	beq.n	3418fd4e <EXTMEM_DRIVER_NOR_SFDP_Init+0xee>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_SFDP;
3418fd46:	23ff      	movs	r3, #255	@ 0xff
3418fd48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418fd4c:	e039      	b.n	3418fdc2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  /* setup the generic driver information and prepare the physical layer */
  SFDP_DEBUG_STR("9 - build the generic driver information and prepare the physical layer")
  if(EXTMEM_SFDP_OK !=  SFDP_BuildGenericDriver(SFDPObject, &FreqUpdate))
3418fd4e:	f107 031b 	add.w	r3, r7, #27
3418fd52:	4619      	mov	r1, r3
3418fd54:	6838      	ldr	r0, [r7, #0]
3418fd56:	f7fe fd85 	bl	3418e864 <SFDP_BuildGenericDriver>
3418fd5a:	4603      	mov	r3, r0
3418fd5c:	2b00      	cmp	r3, #0
3418fd5e:	d003      	beq.n	3418fd68 <EXTMEM_DRIVER_NOR_SFDP_Init+0x108>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_BUILD;
3418fd60:	23fd      	movs	r3, #253	@ 0xfd
3418fd62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418fd66:	e02c      	b.n	3418fdc2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  SFDP_DEBUG_STR("10 - adjust the frequency if required")
  if ((FreqUpdate == 0u) && (SFDPObject->sfdp_public.MaxFreq != 0u))
3418fd68:	7efb      	ldrb	r3, [r7, #27]
3418fd6a:	2b00      	cmp	r3, #0
3418fd6c:	d10d      	bne.n	3418fd8a <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
3418fd6e:	683b      	ldr	r3, [r7, #0]
3418fd70:	681b      	ldr	r3, [r3, #0]
3418fd72:	2b00      	cmp	r3, #0
3418fd74:	d009      	beq.n	3418fd8a <EXTMEM_DRIVER_NOR_SFDP_Init+0x12a>
  {
    (void)SAL_XSPI_SetClock(&SFDPObject->sfpd_private.SALObject, ClockInput, SFDPObject->sfdp_public.MaxFreq, &ClockOut);
3418fd76:	683b      	ldr	r3, [r7, #0]
3418fd78:	f103 0008 	add.w	r0, r3, #8
3418fd7c:	683b      	ldr	r3, [r7, #0]
3418fd7e:	681a      	ldr	r2, [r3, #0]
3418fd80:	f107 0310 	add.w	r3, r7, #16
3418fd84:	6879      	ldr	r1, [r7, #4]
3418fd86:	f7fd fd75 	bl	3418d874 <SAL_XSPI_SetClock>
    SFDP_DEBUG_STR("--> new freq configured");
  }

  SFDP_DEBUG_STR("11 - read again the SFDP header to adjust memory type if necessary")
  if(EXTMEM_SFDP_OK != SFDP_ReadHeader(SFDPObject, &JEDEC_SFDP_Header))
3418fd8a:	f107 031c 	add.w	r3, r7, #28
3418fd8e:	4619      	mov	r1, r3
3418fd90:	6838      	ldr	r0, [r7, #0]
3418fd92:	f7fe fb13 	bl	3418e3bc <SFDP_ReadHeader>
3418fd96:	4603      	mov	r3, r0
3418fd98:	2b00      	cmp	r3, #0
3418fd9a:	d003      	beq.n	3418fda4 <EXTMEM_DRIVER_NOR_SFDP_Init+0x144>
  {
    SFDP_DEBUG_STR("ERROR::EXTMEM_DRIVER_NOR_SFDP_MEMTYPE_CHECK")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MEMTYPE_CHECK;
3418fd9c:	23f2      	movs	r3, #242	@ 0xf2
3418fd9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    goto error;
3418fda2:	e00e      	b.n	3418fdc2 <EXTMEM_DRIVER_NOR_SFDP_Init+0x162>
  }

  (void)memset(DataID, 0xAA, sizeof(DataID));
3418fda4:	f107 0314 	add.w	r3, r7, #20
3418fda8:	2206      	movs	r2, #6
3418fdaa:	21aa      	movs	r1, #170	@ 0xaa
3418fdac:	4618      	mov	r0, r3
3418fdae:	f000 fa83 	bl	341902b8 <memset>
  (void)SAL_XSPI_GetId(&SFDPObject->sfpd_private.SALObject, DataID, 4);
3418fdb2:	683b      	ldr	r3, [r7, #0]
3418fdb4:	3308      	adds	r3, #8
3418fdb6:	f107 0114 	add.w	r1, r7, #20
3418fdba:	2204      	movs	r2, #4
3418fdbc:	4618      	mov	r0, r3
3418fdbe:	f7fd ff79 	bl	3418dcb4 <SAL_XSPI_GetId>
  DEBUG_ID(DataID);

error:
  return retr;
3418fdc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
3418fdc6:	4618      	mov	r0, r3
3418fdc8:	3728      	adds	r7, #40	@ 0x28
3418fdca:	46bd      	mov	sp, r7
3418fdcc:	bd80      	pop	{r7, pc}
3418fdce:	bf00      	nop
3418fdd0:	02faf080 	.word	0x02faf080

3418fdd4 <EXTMEM_DRIVER_NOR_SFDP_Read>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Read(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject, uint32_t Address, uint8_t* Data, uint32_t Size)
{
3418fdd4:	b580      	push	{r7, lr}
3418fdd6:	b088      	sub	sp, #32
3418fdd8:	af02      	add	r7, sp, #8
3418fdda:	60f8      	str	r0, [r7, #12]
3418fddc:	60b9      	str	r1, [r7, #8]
3418fdde:	607a      	str	r2, [r7, #4]
3418fde0:	603b      	str	r3, [r7, #0]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr;
  DEBUG_DRIVER((uint8_t *)__func__)
  /* check busy flag */
  retr = driver_check_FlagBUSY(SFDPObject, 5000);
3418fde2:	f241 3188 	movw	r1, #5000	@ 0x1388
3418fde6:	68f8      	ldr	r0, [r7, #12]
3418fde8:	f7ff faf2 	bl	3418f3d0 <driver_check_FlagBUSY>
3418fdec:	4603      	mov	r3, r0
3418fdee:	75fb      	strb	r3, [r7, #23]
  if ( EXTMEM_DRIVER_NOR_SFDP_OK != retr)
3418fdf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
3418fdf4:	2b00      	cmp	r3, #0
3418fdf6:	d111      	bne.n	3418fe1c <EXTMEM_DRIVER_NOR_SFDP_Read+0x48>
  {
    DEBUG_DRIVER_ERROR("EXTMEM_DRIVER_NOR_SFDP_Read::ERROR_CHECK_BUSY")
    goto error;
  }

  if (HAL_OK != SAL_XSPI_Read(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction, Address, Data, Size))
3418fdf8:	68fb      	ldr	r3, [r7, #12]
3418fdfa:	f103 0008 	add.w	r0, r3, #8
3418fdfe:	68fb      	ldr	r3, [r7, #12]
3418fe00:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
3418fe04:	683b      	ldr	r3, [r7, #0]
3418fe06:	9300      	str	r3, [sp, #0]
3418fe08:	687b      	ldr	r3, [r7, #4]
3418fe0a:	68ba      	ldr	r2, [r7, #8]
3418fe0c:	f7fd ffa5 	bl	3418dd5a <SAL_XSPI_Read>
3418fe10:	4603      	mov	r3, r0
3418fe12:	2b00      	cmp	r3, #0
3418fe14:	d004      	beq.n	3418fe20 <EXTMEM_DRIVER_NOR_SFDP_Read+0x4c>
  {
    DEBUG_DRIVER_ERROR("EXTMEM_DRIVER_NOR_SFDP_Read::ERROR_READ")
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_READ;
3418fe16:	23fe      	movs	r3, #254	@ 0xfe
3418fe18:	75fb      	strb	r3, [r7, #23]
3418fe1a:	e002      	b.n	3418fe22 <EXTMEM_DRIVER_NOR_SFDP_Read+0x4e>
    goto error;
3418fe1c:	bf00      	nop
3418fe1e:	e000      	b.n	3418fe22 <EXTMEM_DRIVER_NOR_SFDP_Read+0x4e>
  }
error :
3418fe20:	bf00      	nop
  return retr;
3418fe22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
3418fe26:	4618      	mov	r0, r3
3418fe28:	3718      	adds	r7, #24
3418fe2a:	46bd      	mov	sp, r7
3418fe2c:	bd80      	pop	{r7, pc}

3418fe2e <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode>:
error:
  return retr;
}

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418fe2e:	b590      	push	{r4, r7, lr}
3418fe30:	b087      	sub	sp, #28
3418fe32:	af02      	add	r7, sp, #8
3418fe34:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418fe36:	2300      	movs	r3, #0
3418fe38:	73fb      	strb	r3, [r7, #15]

  /* enter the mapped mode */
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
3418fe3a:	687b      	ldr	r3, [r7, #4]
3418fe3c:	f103 0008 	add.w	r0, r3, #8
3418fe40:	687b      	ldr	r3, [r7, #4]
3418fe42:	f893 1076 	ldrb.w	r1, [r3, #118]	@ 0x76
                                        (uint8_t)SFDPObject->sfpd_private.SALObject.Commandbase.DummyCycles,
3418fe46:	687b      	ldr	r3, [r7, #4]
3418fe48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  if (HAL_OK != SAL_XSPI_EnableMapMode(&SFDPObject->sfpd_private.SALObject, SFDPObject->sfpd_private.DriverInfo.ReadInstruction,
3418fe4a:	b2da      	uxtb	r2, r3
3418fe4c:	687b      	ldr	r3, [r7, #4]
3418fe4e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
3418fe52:	2400      	movs	r4, #0
3418fe54:	9400      	str	r4, [sp, #0]
3418fe56:	f7fe f992 	bl	3418e17e <SAL_XSPI_EnableMapMode>
3418fe5a:	4603      	mov	r3, r0
3418fe5c:	2b00      	cmp	r3, #0
3418fe5e:	d001      	beq.n	3418fe64 <EXTMEM_DRIVER_NOR_SFDP_Enable_MemoryMappedMode+0x36>
                                        SFDPObject->sfpd_private.DriverInfo.PageProgramInstruction, 0))
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
3418fe60:	23f3      	movs	r3, #243	@ 0xf3
3418fe62:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
3418fe64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418fe68:	4618      	mov	r0, r3
3418fe6a:	3714      	adds	r7, #20
3418fe6c:	46bd      	mov	sp, r7
3418fe6e:	bd90      	pop	{r4, r7, pc}

3418fe70 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode>:

EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode(EXTMEM_DRIVER_NOR_SFDP_ObjectTypeDef *SFDPObject)
{
3418fe70:	b580      	push	{r7, lr}
3418fe72:	b084      	sub	sp, #16
3418fe74:	af00      	add	r7, sp, #0
3418fe76:	6078      	str	r0, [r7, #4]
  EXTMEM_DRIVER_NOR_SFDP_StatusTypeDef retr = EXTMEM_DRIVER_NOR_SFDP_OK;
3418fe78:	2300      	movs	r3, #0
3418fe7a:	73fb      	strb	r3, [r7, #15]

  /* exit the mapped mode */
  if (HAL_OK != SAL_XSPI_DisableMapMode(&SFDPObject->sfpd_private.SALObject))
3418fe7c:	687b      	ldr	r3, [r7, #4]
3418fe7e:	3308      	adds	r3, #8
3418fe80:	4618      	mov	r0, r3
3418fe82:	f7fe f9f5 	bl	3418e270 <SAL_XSPI_DisableMapMode>
3418fe86:	4603      	mov	r3, r0
3418fe88:	2b00      	cmp	r3, #0
3418fe8a:	d001      	beq.n	3418fe90 <EXTMEM_DRIVER_NOR_SFDP_Disable_MemoryMappedMode+0x20>
  {
    retr = EXTMEM_DRIVER_NOR_SFDP_ERROR_MAP_ENABLE;
3418fe8c:	23f3      	movs	r3, #243	@ 0xf3
3418fe8e:	73fb      	strb	r3, [r7, #15]
  }

  return retr;
3418fe90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
3418fe94:	4618      	mov	r0, r3
3418fe96:	3710      	adds	r7, #16
3418fe98:	46bd      	mov	sp, r7
3418fe9a:	bd80      	pop	{r7, pc}

3418fe9c <_write>:
#ifdef __ICCARM__
int __write(int file, char *ptr, int len)
#else
int _write(int file, char *ptr, int len)
#endif
{
3418fe9c:	b580      	push	{r7, lr}
3418fe9e:	b084      	sub	sp, #16
3418fea0:	af00      	add	r7, sp, #0
3418fea2:	60f8      	str	r0, [r7, #12]
3418fea4:	60b9      	str	r1, [r7, #8]
3418fea6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&STDOUT_UART_HANDLER,(uint8_t *)ptr, len, 0xFFFFFFFF);
3418fea8:	687b      	ldr	r3, [r7, #4]
3418feaa:	b29a      	uxth	r2, r3
3418feac:	f04f 33ff 	mov.w	r3, #4294967295
3418feb0:	68b9      	ldr	r1, [r7, #8]
3418feb2:	4804      	ldr	r0, [pc, #16]	@ (3418fec4 <_write+0x28>)
3418feb4:	f7fb fd18 	bl	3418b8e8 <HAL_UART_Transmit>
  
  return len;
3418feb8:	687b      	ldr	r3, [r7, #4]
}
3418feba:	4618      	mov	r0, r3
3418febc:	3710      	adds	r7, #16
3418febe:	46bd      	mov	sp, r7
3418fec0:	bd80      	pop	{r7, pc}
3418fec2:	bf00      	nop
3418fec4:	341c0084 	.word	0x341c0084

3418fec8 <std>:
3418fec8:	2300      	movs	r3, #0
3418feca:	b510      	push	{r4, lr}
3418fecc:	4604      	mov	r4, r0
3418fece:	6083      	str	r3, [r0, #8]
3418fed0:	8181      	strh	r1, [r0, #12]
3418fed2:	4619      	mov	r1, r3
3418fed4:	6643      	str	r3, [r0, #100]	@ 0x64
3418fed6:	81c2      	strh	r2, [r0, #14]
3418fed8:	2208      	movs	r2, #8
3418feda:	6183      	str	r3, [r0, #24]
3418fedc:	e9c0 3300 	strd	r3, r3, [r0]
3418fee0:	e9c0 3304 	strd	r3, r3, [r0, #16]
3418fee4:	305c      	adds	r0, #92	@ 0x5c
3418fee6:	f000 f9e7 	bl	341902b8 <memset>
3418feea:	4b0d      	ldr	r3, [pc, #52]	@ (3418ff20 <std+0x58>)
3418feec:	6224      	str	r4, [r4, #32]
3418feee:	6263      	str	r3, [r4, #36]	@ 0x24
3418fef0:	4b0c      	ldr	r3, [pc, #48]	@ (3418ff24 <std+0x5c>)
3418fef2:	62a3      	str	r3, [r4, #40]	@ 0x28
3418fef4:	4b0c      	ldr	r3, [pc, #48]	@ (3418ff28 <std+0x60>)
3418fef6:	62e3      	str	r3, [r4, #44]	@ 0x2c
3418fef8:	4b0c      	ldr	r3, [pc, #48]	@ (3418ff2c <std+0x64>)
3418fefa:	6323      	str	r3, [r4, #48]	@ 0x30
3418fefc:	4b0c      	ldr	r3, [pc, #48]	@ (3418ff30 <std+0x68>)
3418fefe:	429c      	cmp	r4, r3
3418ff00:	d006      	beq.n	3418ff10 <std+0x48>
3418ff02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3418ff06:	4294      	cmp	r4, r2
3418ff08:	d002      	beq.n	3418ff10 <std+0x48>
3418ff0a:	33d0      	adds	r3, #208	@ 0xd0
3418ff0c:	429c      	cmp	r4, r3
3418ff0e:	d105      	bne.n	3418ff1c <std+0x54>
3418ff10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3418ff14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3418ff18:	f000 ba46 	b.w	341903a8 <__retarget_lock_init_recursive>
3418ff1c:	bd10      	pop	{r4, pc}
3418ff1e:	bf00      	nop
3418ff20:	34190109 	.word	0x34190109
3418ff24:	3419012b 	.word	0x3419012b
3418ff28:	34190163 	.word	0x34190163
3418ff2c:	34190187 	.word	0x34190187
3418ff30:	341c03bc 	.word	0x341c03bc

3418ff34 <stdio_exit_handler>:
3418ff34:	4a02      	ldr	r2, [pc, #8]	@ (3418ff40 <stdio_exit_handler+0xc>)
3418ff36:	4903      	ldr	r1, [pc, #12]	@ (3418ff44 <stdio_exit_handler+0x10>)
3418ff38:	4803      	ldr	r0, [pc, #12]	@ (3418ff48 <stdio_exit_handler+0x14>)
3418ff3a:	f000 b869 	b.w	34190010 <_fwalk_sglue>
3418ff3e:	bf00      	nop
3418ff40:	341c000c 	.word	0x341c000c
3418ff44:	341906c1 	.word	0x341906c1
3418ff48:	341c001c 	.word	0x341c001c

3418ff4c <cleanup_stdio>:
3418ff4c:	6841      	ldr	r1, [r0, #4]
3418ff4e:	4b0c      	ldr	r3, [pc, #48]	@ (3418ff80 <cleanup_stdio+0x34>)
3418ff50:	4299      	cmp	r1, r3
3418ff52:	b510      	push	{r4, lr}
3418ff54:	4604      	mov	r4, r0
3418ff56:	d001      	beq.n	3418ff5c <cleanup_stdio+0x10>
3418ff58:	f000 fbb2 	bl	341906c0 <_fflush_r>
3418ff5c:	68a1      	ldr	r1, [r4, #8]
3418ff5e:	4b09      	ldr	r3, [pc, #36]	@ (3418ff84 <cleanup_stdio+0x38>)
3418ff60:	4299      	cmp	r1, r3
3418ff62:	d002      	beq.n	3418ff6a <cleanup_stdio+0x1e>
3418ff64:	4620      	mov	r0, r4
3418ff66:	f000 fbab 	bl	341906c0 <_fflush_r>
3418ff6a:	68e1      	ldr	r1, [r4, #12]
3418ff6c:	4b06      	ldr	r3, [pc, #24]	@ (3418ff88 <cleanup_stdio+0x3c>)
3418ff6e:	4299      	cmp	r1, r3
3418ff70:	d004      	beq.n	3418ff7c <cleanup_stdio+0x30>
3418ff72:	4620      	mov	r0, r4
3418ff74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3418ff78:	f000 bba2 	b.w	341906c0 <_fflush_r>
3418ff7c:	bd10      	pop	{r4, pc}
3418ff7e:	bf00      	nop
3418ff80:	341c03bc 	.word	0x341c03bc
3418ff84:	341c0424 	.word	0x341c0424
3418ff88:	341c048c 	.word	0x341c048c

3418ff8c <global_stdio_init.part.0>:
3418ff8c:	b510      	push	{r4, lr}
3418ff8e:	4b0b      	ldr	r3, [pc, #44]	@ (3418ffbc <global_stdio_init.part.0+0x30>)
3418ff90:	2104      	movs	r1, #4
3418ff92:	4c0b      	ldr	r4, [pc, #44]	@ (3418ffc0 <global_stdio_init.part.0+0x34>)
3418ff94:	4a0b      	ldr	r2, [pc, #44]	@ (3418ffc4 <global_stdio_init.part.0+0x38>)
3418ff96:	4620      	mov	r0, r4
3418ff98:	601a      	str	r2, [r3, #0]
3418ff9a:	2200      	movs	r2, #0
3418ff9c:	f7ff ff94 	bl	3418fec8 <std>
3418ffa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3418ffa4:	2201      	movs	r2, #1
3418ffa6:	2109      	movs	r1, #9
3418ffa8:	f7ff ff8e 	bl	3418fec8 <std>
3418ffac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3418ffb0:	2202      	movs	r2, #2
3418ffb2:	2112      	movs	r1, #18
3418ffb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3418ffb8:	f7ff bf86 	b.w	3418fec8 <std>
3418ffbc:	341c04f4 	.word	0x341c04f4
3418ffc0:	341c03bc 	.word	0x341c03bc
3418ffc4:	3418ff35 	.word	0x3418ff35

3418ffc8 <__sfp_lock_acquire>:
3418ffc8:	4801      	ldr	r0, [pc, #4]	@ (3418ffd0 <__sfp_lock_acquire+0x8>)
3418ffca:	f000 b9ee 	b.w	341903aa <__retarget_lock_acquire_recursive>
3418ffce:	bf00      	nop
3418ffd0:	341c04fd 	.word	0x341c04fd

3418ffd4 <__sfp_lock_release>:
3418ffd4:	4801      	ldr	r0, [pc, #4]	@ (3418ffdc <__sfp_lock_release+0x8>)
3418ffd6:	f000 b9e9 	b.w	341903ac <__retarget_lock_release_recursive>
3418ffda:	bf00      	nop
3418ffdc:	341c04fd 	.word	0x341c04fd

3418ffe0 <__sinit>:
3418ffe0:	b510      	push	{r4, lr}
3418ffe2:	4604      	mov	r4, r0
3418ffe4:	f7ff fff0 	bl	3418ffc8 <__sfp_lock_acquire>
3418ffe8:	6a23      	ldr	r3, [r4, #32]
3418ffea:	b11b      	cbz	r3, 3418fff4 <__sinit+0x14>
3418ffec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3418fff0:	f7ff bff0 	b.w	3418ffd4 <__sfp_lock_release>
3418fff4:	4b04      	ldr	r3, [pc, #16]	@ (34190008 <__sinit+0x28>)
3418fff6:	6223      	str	r3, [r4, #32]
3418fff8:	4b04      	ldr	r3, [pc, #16]	@ (3419000c <__sinit+0x2c>)
3418fffa:	681b      	ldr	r3, [r3, #0]
3418fffc:	2b00      	cmp	r3, #0
3418fffe:	d1f5      	bne.n	3418ffec <__sinit+0xc>
34190000:	f7ff ffc4 	bl	3418ff8c <global_stdio_init.part.0>
34190004:	e7f2      	b.n	3418ffec <__sinit+0xc>
34190006:	bf00      	nop
34190008:	3418ff4d 	.word	0x3418ff4d
3419000c:	341c04f4 	.word	0x341c04f4

34190010 <_fwalk_sglue>:
34190010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34190014:	4607      	mov	r7, r0
34190016:	4688      	mov	r8, r1
34190018:	4614      	mov	r4, r2
3419001a:	2600      	movs	r6, #0
3419001c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
34190020:	f1b9 0901 	subs.w	r9, r9, #1
34190024:	d505      	bpl.n	34190032 <_fwalk_sglue+0x22>
34190026:	6824      	ldr	r4, [r4, #0]
34190028:	2c00      	cmp	r4, #0
3419002a:	d1f7      	bne.n	3419001c <_fwalk_sglue+0xc>
3419002c:	4630      	mov	r0, r6
3419002e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
34190032:	89ab      	ldrh	r3, [r5, #12]
34190034:	2b01      	cmp	r3, #1
34190036:	d907      	bls.n	34190048 <_fwalk_sglue+0x38>
34190038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3419003c:	3301      	adds	r3, #1
3419003e:	d003      	beq.n	34190048 <_fwalk_sglue+0x38>
34190040:	4629      	mov	r1, r5
34190042:	4638      	mov	r0, r7
34190044:	47c0      	blx	r8
34190046:	4306      	orrs	r6, r0
34190048:	3568      	adds	r5, #104	@ 0x68
3419004a:	e7e9      	b.n	34190020 <_fwalk_sglue+0x10>

3419004c <_puts_r>:
3419004c:	6a03      	ldr	r3, [r0, #32]
3419004e:	b570      	push	{r4, r5, r6, lr}
34190050:	4605      	mov	r5, r0
34190052:	460e      	mov	r6, r1
34190054:	6884      	ldr	r4, [r0, #8]
34190056:	b90b      	cbnz	r3, 3419005c <_puts_r+0x10>
34190058:	f7ff ffc2 	bl	3418ffe0 <__sinit>
3419005c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3419005e:	07db      	lsls	r3, r3, #31
34190060:	d405      	bmi.n	3419006e <_puts_r+0x22>
34190062:	89a3      	ldrh	r3, [r4, #12]
34190064:	0598      	lsls	r0, r3, #22
34190066:	d402      	bmi.n	3419006e <_puts_r+0x22>
34190068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3419006a:	f000 f99e 	bl	341903aa <__retarget_lock_acquire_recursive>
3419006e:	89a3      	ldrh	r3, [r4, #12]
34190070:	0719      	lsls	r1, r3, #28
34190072:	d502      	bpl.n	3419007a <_puts_r+0x2e>
34190074:	6923      	ldr	r3, [r4, #16]
34190076:	2b00      	cmp	r3, #0
34190078:	d135      	bne.n	341900e6 <_puts_r+0x9a>
3419007a:	4621      	mov	r1, r4
3419007c:	4628      	mov	r0, r5
3419007e:	f000 f8c5 	bl	3419020c <__swsetup_r>
34190082:	b380      	cbz	r0, 341900e6 <_puts_r+0x9a>
34190084:	f04f 35ff 	mov.w	r5, #4294967295
34190088:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3419008a:	07da      	lsls	r2, r3, #31
3419008c:	d405      	bmi.n	3419009a <_puts_r+0x4e>
3419008e:	89a3      	ldrh	r3, [r4, #12]
34190090:	059b      	lsls	r3, r3, #22
34190092:	d402      	bmi.n	3419009a <_puts_r+0x4e>
34190094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
34190096:	f000 f989 	bl	341903ac <__retarget_lock_release_recursive>
3419009a:	4628      	mov	r0, r5
3419009c:	bd70      	pop	{r4, r5, r6, pc}
3419009e:	2b00      	cmp	r3, #0
341900a0:	da04      	bge.n	341900ac <_puts_r+0x60>
341900a2:	69a2      	ldr	r2, [r4, #24]
341900a4:	429a      	cmp	r2, r3
341900a6:	dc17      	bgt.n	341900d8 <_puts_r+0x8c>
341900a8:	290a      	cmp	r1, #10
341900aa:	d015      	beq.n	341900d8 <_puts_r+0x8c>
341900ac:	6823      	ldr	r3, [r4, #0]
341900ae:	1c5a      	adds	r2, r3, #1
341900b0:	6022      	str	r2, [r4, #0]
341900b2:	7019      	strb	r1, [r3, #0]
341900b4:	68a3      	ldr	r3, [r4, #8]
341900b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
341900ba:	3b01      	subs	r3, #1
341900bc:	60a3      	str	r3, [r4, #8]
341900be:	2900      	cmp	r1, #0
341900c0:	d1ed      	bne.n	3419009e <_puts_r+0x52>
341900c2:	2b00      	cmp	r3, #0
341900c4:	da11      	bge.n	341900ea <_puts_r+0x9e>
341900c6:	4622      	mov	r2, r4
341900c8:	210a      	movs	r1, #10
341900ca:	4628      	mov	r0, r5
341900cc:	f000 f85f 	bl	3419018e <__swbuf_r>
341900d0:	3001      	adds	r0, #1
341900d2:	d0d7      	beq.n	34190084 <_puts_r+0x38>
341900d4:	250a      	movs	r5, #10
341900d6:	e7d7      	b.n	34190088 <_puts_r+0x3c>
341900d8:	4622      	mov	r2, r4
341900da:	4628      	mov	r0, r5
341900dc:	f000 f857 	bl	3419018e <__swbuf_r>
341900e0:	3001      	adds	r0, #1
341900e2:	d1e7      	bne.n	341900b4 <_puts_r+0x68>
341900e4:	e7ce      	b.n	34190084 <_puts_r+0x38>
341900e6:	3e01      	subs	r6, #1
341900e8:	e7e4      	b.n	341900b4 <_puts_r+0x68>
341900ea:	6823      	ldr	r3, [r4, #0]
341900ec:	1c5a      	adds	r2, r3, #1
341900ee:	6022      	str	r2, [r4, #0]
341900f0:	220a      	movs	r2, #10
341900f2:	701a      	strb	r2, [r3, #0]
341900f4:	e7ee      	b.n	341900d4 <_puts_r+0x88>
	...

341900f8 <puts>:
341900f8:	4b02      	ldr	r3, [pc, #8]	@ (34190104 <puts+0xc>)
341900fa:	4601      	mov	r1, r0
341900fc:	6818      	ldr	r0, [r3, #0]
341900fe:	f7ff bfa5 	b.w	3419004c <_puts_r>
34190102:	bf00      	nop
34190104:	341c0018 	.word	0x341c0018

34190108 <__sread>:
34190108:	b510      	push	{r4, lr}
3419010a:	460c      	mov	r4, r1
3419010c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34190110:	f000 f8fc 	bl	3419030c <_read_r>
34190114:	2800      	cmp	r0, #0
34190116:	bfab      	itete	ge
34190118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3419011a:	89a3      	ldrhlt	r3, [r4, #12]
3419011c:	181b      	addge	r3, r3, r0
3419011e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
34190122:	bfac      	ite	ge
34190124:	6563      	strge	r3, [r4, #84]	@ 0x54
34190126:	81a3      	strhlt	r3, [r4, #12]
34190128:	bd10      	pop	{r4, pc}

3419012a <__swrite>:
3419012a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3419012e:	461f      	mov	r7, r3
34190130:	898b      	ldrh	r3, [r1, #12]
34190132:	4605      	mov	r5, r0
34190134:	460c      	mov	r4, r1
34190136:	05db      	lsls	r3, r3, #23
34190138:	4616      	mov	r6, r2
3419013a:	d505      	bpl.n	34190148 <__swrite+0x1e>
3419013c:	2302      	movs	r3, #2
3419013e:	2200      	movs	r2, #0
34190140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34190144:	f000 f8d0 	bl	341902e8 <_lseek_r>
34190148:	89a3      	ldrh	r3, [r4, #12]
3419014a:	4632      	mov	r2, r6
3419014c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
34190150:	4628      	mov	r0, r5
34190152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
34190156:	81a3      	strh	r3, [r4, #12]
34190158:	463b      	mov	r3, r7
3419015a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3419015e:	f000 b8e7 	b.w	34190330 <_write_r>

34190162 <__sseek>:
34190162:	b510      	push	{r4, lr}
34190164:	460c      	mov	r4, r1
34190166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3419016a:	f000 f8bd 	bl	341902e8 <_lseek_r>
3419016e:	1c43      	adds	r3, r0, #1
34190170:	89a3      	ldrh	r3, [r4, #12]
34190172:	bf15      	itete	ne
34190174:	6560      	strne	r0, [r4, #84]	@ 0x54
34190176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3419017a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3419017e:	81a3      	strheq	r3, [r4, #12]
34190180:	bf18      	it	ne
34190182:	81a3      	strhne	r3, [r4, #12]
34190184:	bd10      	pop	{r4, pc}

34190186 <__sclose>:
34190186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3419018a:	f000 b89d 	b.w	341902c8 <_close_r>

3419018e <__swbuf_r>:
3419018e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34190190:	460e      	mov	r6, r1
34190192:	4614      	mov	r4, r2
34190194:	4605      	mov	r5, r0
34190196:	b118      	cbz	r0, 341901a0 <__swbuf_r+0x12>
34190198:	6a03      	ldr	r3, [r0, #32]
3419019a:	b90b      	cbnz	r3, 341901a0 <__swbuf_r+0x12>
3419019c:	f7ff ff20 	bl	3418ffe0 <__sinit>
341901a0:	69a3      	ldr	r3, [r4, #24]
341901a2:	60a3      	str	r3, [r4, #8]
341901a4:	89a3      	ldrh	r3, [r4, #12]
341901a6:	071a      	lsls	r2, r3, #28
341901a8:	d501      	bpl.n	341901ae <__swbuf_r+0x20>
341901aa:	6923      	ldr	r3, [r4, #16]
341901ac:	b943      	cbnz	r3, 341901c0 <__swbuf_r+0x32>
341901ae:	4621      	mov	r1, r4
341901b0:	4628      	mov	r0, r5
341901b2:	f000 f82b 	bl	3419020c <__swsetup_r>
341901b6:	b118      	cbz	r0, 341901c0 <__swbuf_r+0x32>
341901b8:	f04f 37ff 	mov.w	r7, #4294967295
341901bc:	4638      	mov	r0, r7
341901be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
341901c0:	6823      	ldr	r3, [r4, #0]
341901c2:	b2f6      	uxtb	r6, r6
341901c4:	6922      	ldr	r2, [r4, #16]
341901c6:	4637      	mov	r7, r6
341901c8:	1a98      	subs	r0, r3, r2
341901ca:	6963      	ldr	r3, [r4, #20]
341901cc:	4283      	cmp	r3, r0
341901ce:	dc05      	bgt.n	341901dc <__swbuf_r+0x4e>
341901d0:	4621      	mov	r1, r4
341901d2:	4628      	mov	r0, r5
341901d4:	f000 fa74 	bl	341906c0 <_fflush_r>
341901d8:	2800      	cmp	r0, #0
341901da:	d1ed      	bne.n	341901b8 <__swbuf_r+0x2a>
341901dc:	68a3      	ldr	r3, [r4, #8]
341901de:	3b01      	subs	r3, #1
341901e0:	60a3      	str	r3, [r4, #8]
341901e2:	6823      	ldr	r3, [r4, #0]
341901e4:	1c5a      	adds	r2, r3, #1
341901e6:	6022      	str	r2, [r4, #0]
341901e8:	701e      	strb	r6, [r3, #0]
341901ea:	1c43      	adds	r3, r0, #1
341901ec:	6962      	ldr	r2, [r4, #20]
341901ee:	429a      	cmp	r2, r3
341901f0:	d004      	beq.n	341901fc <__swbuf_r+0x6e>
341901f2:	89a3      	ldrh	r3, [r4, #12]
341901f4:	07db      	lsls	r3, r3, #31
341901f6:	d5e1      	bpl.n	341901bc <__swbuf_r+0x2e>
341901f8:	2e0a      	cmp	r6, #10
341901fa:	d1df      	bne.n	341901bc <__swbuf_r+0x2e>
341901fc:	4621      	mov	r1, r4
341901fe:	4628      	mov	r0, r5
34190200:	f000 fa5e 	bl	341906c0 <_fflush_r>
34190204:	2800      	cmp	r0, #0
34190206:	d0d9      	beq.n	341901bc <__swbuf_r+0x2e>
34190208:	e7d6      	b.n	341901b8 <__swbuf_r+0x2a>
	...

3419020c <__swsetup_r>:
3419020c:	b538      	push	{r3, r4, r5, lr}
3419020e:	4b29      	ldr	r3, [pc, #164]	@ (341902b4 <__swsetup_r+0xa8>)
34190210:	4605      	mov	r5, r0
34190212:	460c      	mov	r4, r1
34190214:	6818      	ldr	r0, [r3, #0]
34190216:	b118      	cbz	r0, 34190220 <__swsetup_r+0x14>
34190218:	6a03      	ldr	r3, [r0, #32]
3419021a:	b90b      	cbnz	r3, 34190220 <__swsetup_r+0x14>
3419021c:	f7ff fee0 	bl	3418ffe0 <__sinit>
34190220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34190224:	0719      	lsls	r1, r3, #28
34190226:	d422      	bmi.n	3419026e <__swsetup_r+0x62>
34190228:	06da      	lsls	r2, r3, #27
3419022a:	d407      	bmi.n	3419023c <__swsetup_r+0x30>
3419022c:	2209      	movs	r2, #9
3419022e:	602a      	str	r2, [r5, #0]
34190230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34190234:	f04f 30ff 	mov.w	r0, #4294967295
34190238:	81a3      	strh	r3, [r4, #12]
3419023a:	e033      	b.n	341902a4 <__swsetup_r+0x98>
3419023c:	0758      	lsls	r0, r3, #29
3419023e:	d512      	bpl.n	34190266 <__swsetup_r+0x5a>
34190240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34190242:	b141      	cbz	r1, 34190256 <__swsetup_r+0x4a>
34190244:	f104 0344 	add.w	r3, r4, #68	@ 0x44
34190248:	4299      	cmp	r1, r3
3419024a:	d002      	beq.n	34190252 <__swsetup_r+0x46>
3419024c:	4628      	mov	r0, r5
3419024e:	f000 f8bb 	bl	341903c8 <_free_r>
34190252:	2300      	movs	r3, #0
34190254:	6363      	str	r3, [r4, #52]	@ 0x34
34190256:	89a3      	ldrh	r3, [r4, #12]
34190258:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3419025c:	81a3      	strh	r3, [r4, #12]
3419025e:	2300      	movs	r3, #0
34190260:	6063      	str	r3, [r4, #4]
34190262:	6923      	ldr	r3, [r4, #16]
34190264:	6023      	str	r3, [r4, #0]
34190266:	89a3      	ldrh	r3, [r4, #12]
34190268:	f043 0308 	orr.w	r3, r3, #8
3419026c:	81a3      	strh	r3, [r4, #12]
3419026e:	6923      	ldr	r3, [r4, #16]
34190270:	b94b      	cbnz	r3, 34190286 <__swsetup_r+0x7a>
34190272:	89a3      	ldrh	r3, [r4, #12]
34190274:	f403 7320 	and.w	r3, r3, #640	@ 0x280
34190278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3419027c:	d003      	beq.n	34190286 <__swsetup_r+0x7a>
3419027e:	4621      	mov	r1, r4
34190280:	4628      	mov	r0, r5
34190282:	f000 fa6a 	bl	3419075a <__smakebuf_r>
34190286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3419028a:	f013 0201 	ands.w	r2, r3, #1
3419028e:	d00a      	beq.n	341902a6 <__swsetup_r+0x9a>
34190290:	2200      	movs	r2, #0
34190292:	60a2      	str	r2, [r4, #8]
34190294:	6962      	ldr	r2, [r4, #20]
34190296:	4252      	negs	r2, r2
34190298:	61a2      	str	r2, [r4, #24]
3419029a:	6922      	ldr	r2, [r4, #16]
3419029c:	b942      	cbnz	r2, 341902b0 <__swsetup_r+0xa4>
3419029e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
341902a2:	d1c5      	bne.n	34190230 <__swsetup_r+0x24>
341902a4:	bd38      	pop	{r3, r4, r5, pc}
341902a6:	0799      	lsls	r1, r3, #30
341902a8:	bf58      	it	pl
341902aa:	6962      	ldrpl	r2, [r4, #20]
341902ac:	60a2      	str	r2, [r4, #8]
341902ae:	e7f4      	b.n	3419029a <__swsetup_r+0x8e>
341902b0:	2000      	movs	r0, #0
341902b2:	e7f7      	b.n	341902a4 <__swsetup_r+0x98>
341902b4:	341c0018 	.word	0x341c0018

341902b8 <memset>:
341902b8:	4402      	add	r2, r0
341902ba:	4603      	mov	r3, r0
341902bc:	4293      	cmp	r3, r2
341902be:	d100      	bne.n	341902c2 <memset+0xa>
341902c0:	4770      	bx	lr
341902c2:	f803 1b01 	strb.w	r1, [r3], #1
341902c6:	e7f9      	b.n	341902bc <memset+0x4>

341902c8 <_close_r>:
341902c8:	b538      	push	{r3, r4, r5, lr}
341902ca:	2300      	movs	r3, #0
341902cc:	4d05      	ldr	r5, [pc, #20]	@ (341902e4 <_close_r+0x1c>)
341902ce:	4604      	mov	r4, r0
341902d0:	4608      	mov	r0, r1
341902d2:	602b      	str	r3, [r5, #0]
341902d4:	f7f0 ff00 	bl	341810d8 <_close>
341902d8:	1c43      	adds	r3, r0, #1
341902da:	d102      	bne.n	341902e2 <_close_r+0x1a>
341902dc:	682b      	ldr	r3, [r5, #0]
341902de:	b103      	cbz	r3, 341902e2 <_close_r+0x1a>
341902e0:	6023      	str	r3, [r4, #0]
341902e2:	bd38      	pop	{r3, r4, r5, pc}
341902e4:	341c04f8 	.word	0x341c04f8

341902e8 <_lseek_r>:
341902e8:	b538      	push	{r3, r4, r5, lr}
341902ea:	4604      	mov	r4, r0
341902ec:	4d06      	ldr	r5, [pc, #24]	@ (34190308 <_lseek_r+0x20>)
341902ee:	4608      	mov	r0, r1
341902f0:	4611      	mov	r1, r2
341902f2:	2200      	movs	r2, #0
341902f4:	602a      	str	r2, [r5, #0]
341902f6:	461a      	mov	r2, r3
341902f8:	f7f0 ff15 	bl	34181126 <_lseek>
341902fc:	1c43      	adds	r3, r0, #1
341902fe:	d102      	bne.n	34190306 <_lseek_r+0x1e>
34190300:	682b      	ldr	r3, [r5, #0]
34190302:	b103      	cbz	r3, 34190306 <_lseek_r+0x1e>
34190304:	6023      	str	r3, [r4, #0]
34190306:	bd38      	pop	{r3, r4, r5, pc}
34190308:	341c04f8 	.word	0x341c04f8

3419030c <_read_r>:
3419030c:	b538      	push	{r3, r4, r5, lr}
3419030e:	4604      	mov	r4, r0
34190310:	4d06      	ldr	r5, [pc, #24]	@ (3419032c <_read_r+0x20>)
34190312:	4608      	mov	r0, r1
34190314:	4611      	mov	r1, r2
34190316:	2200      	movs	r2, #0
34190318:	602a      	str	r2, [r5, #0]
3419031a:	461a      	mov	r2, r3
3419031c:	f7f0 febf 	bl	3418109e <_read>
34190320:	1c43      	adds	r3, r0, #1
34190322:	d102      	bne.n	3419032a <_read_r+0x1e>
34190324:	682b      	ldr	r3, [r5, #0]
34190326:	b103      	cbz	r3, 3419032a <_read_r+0x1e>
34190328:	6023      	str	r3, [r4, #0]
3419032a:	bd38      	pop	{r3, r4, r5, pc}
3419032c:	341c04f8 	.word	0x341c04f8

34190330 <_write_r>:
34190330:	b538      	push	{r3, r4, r5, lr}
34190332:	4604      	mov	r4, r0
34190334:	4d06      	ldr	r5, [pc, #24]	@ (34190350 <_write_r+0x20>)
34190336:	4608      	mov	r0, r1
34190338:	4611      	mov	r1, r2
3419033a:	2200      	movs	r2, #0
3419033c:	602a      	str	r2, [r5, #0]
3419033e:	461a      	mov	r2, r3
34190340:	f7ff fdac 	bl	3418fe9c <_write>
34190344:	1c43      	adds	r3, r0, #1
34190346:	d102      	bne.n	3419034e <_write_r+0x1e>
34190348:	682b      	ldr	r3, [r5, #0]
3419034a:	b103      	cbz	r3, 3419034e <_write_r+0x1e>
3419034c:	6023      	str	r3, [r4, #0]
3419034e:	bd38      	pop	{r3, r4, r5, pc}
34190350:	341c04f8 	.word	0x341c04f8

34190354 <__errno>:
34190354:	4b01      	ldr	r3, [pc, #4]	@ (3419035c <__errno+0x8>)
34190356:	6818      	ldr	r0, [r3, #0]
34190358:	4770      	bx	lr
3419035a:	bf00      	nop
3419035c:	341c0018 	.word	0x341c0018

34190360 <__libc_init_array>:
34190360:	b570      	push	{r4, r5, r6, lr}
34190362:	4d0d      	ldr	r5, [pc, #52]	@ (34190398 <__libc_init_array+0x38>)
34190364:	2600      	movs	r6, #0
34190366:	4c0d      	ldr	r4, [pc, #52]	@ (3419039c <__libc_init_array+0x3c>)
34190368:	1b64      	subs	r4, r4, r5
3419036a:	10a4      	asrs	r4, r4, #2
3419036c:	42a6      	cmp	r6, r4
3419036e:	d109      	bne.n	34190384 <__libc_init_array+0x24>
34190370:	4d0b      	ldr	r5, [pc, #44]	@ (341903a0 <__libc_init_array+0x40>)
34190372:	2600      	movs	r6, #0
34190374:	4c0b      	ldr	r4, [pc, #44]	@ (341903a4 <__libc_init_array+0x44>)
34190376:	f000 fa5f 	bl	34190838 <_init>
3419037a:	1b64      	subs	r4, r4, r5
3419037c:	10a4      	asrs	r4, r4, #2
3419037e:	42a6      	cmp	r6, r4
34190380:	d105      	bne.n	3419038e <__libc_init_array+0x2e>
34190382:	bd70      	pop	{r4, r5, r6, pc}
34190384:	f855 3b04 	ldr.w	r3, [r5], #4
34190388:	3601      	adds	r6, #1
3419038a:	4798      	blx	r3
3419038c:	e7ee      	b.n	3419036c <__libc_init_array+0xc>
3419038e:	f855 3b04 	ldr.w	r3, [r5], #4
34190392:	3601      	adds	r6, #1
34190394:	4798      	blx	r3
34190396:	e7f2      	b.n	3419037e <__libc_init_array+0x1e>
34190398:	341908d8 	.word	0x341908d8
3419039c:	341908d8 	.word	0x341908d8
341903a0:	341908d8 	.word	0x341908d8
341903a4:	341908dc 	.word	0x341908dc

341903a8 <__retarget_lock_init_recursive>:
341903a8:	4770      	bx	lr

341903aa <__retarget_lock_acquire_recursive>:
341903aa:	4770      	bx	lr

341903ac <__retarget_lock_release_recursive>:
341903ac:	4770      	bx	lr

341903ae <memcpy>:
341903ae:	440a      	add	r2, r1
341903b0:	1e43      	subs	r3, r0, #1
341903b2:	4291      	cmp	r1, r2
341903b4:	d100      	bne.n	341903b8 <memcpy+0xa>
341903b6:	4770      	bx	lr
341903b8:	b510      	push	{r4, lr}
341903ba:	f811 4b01 	ldrb.w	r4, [r1], #1
341903be:	4291      	cmp	r1, r2
341903c0:	f803 4f01 	strb.w	r4, [r3, #1]!
341903c4:	d1f9      	bne.n	341903ba <memcpy+0xc>
341903c6:	bd10      	pop	{r4, pc}

341903c8 <_free_r>:
341903c8:	b538      	push	{r3, r4, r5, lr}
341903ca:	4605      	mov	r5, r0
341903cc:	2900      	cmp	r1, #0
341903ce:	d041      	beq.n	34190454 <_free_r+0x8c>
341903d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
341903d4:	1f0c      	subs	r4, r1, #4
341903d6:	2b00      	cmp	r3, #0
341903d8:	bfb8      	it	lt
341903da:	18e4      	addlt	r4, r4, r3
341903dc:	f000 f8e0 	bl	341905a0 <__malloc_lock>
341903e0:	4a1d      	ldr	r2, [pc, #116]	@ (34190458 <_free_r+0x90>)
341903e2:	6813      	ldr	r3, [r2, #0]
341903e4:	b933      	cbnz	r3, 341903f4 <_free_r+0x2c>
341903e6:	6063      	str	r3, [r4, #4]
341903e8:	6014      	str	r4, [r2, #0]
341903ea:	4628      	mov	r0, r5
341903ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
341903f0:	f000 b8dc 	b.w	341905ac <__malloc_unlock>
341903f4:	42a3      	cmp	r3, r4
341903f6:	d908      	bls.n	3419040a <_free_r+0x42>
341903f8:	6820      	ldr	r0, [r4, #0]
341903fa:	1821      	adds	r1, r4, r0
341903fc:	428b      	cmp	r3, r1
341903fe:	bf01      	itttt	eq
34190400:	6819      	ldreq	r1, [r3, #0]
34190402:	685b      	ldreq	r3, [r3, #4]
34190404:	1809      	addeq	r1, r1, r0
34190406:	6021      	streq	r1, [r4, #0]
34190408:	e7ed      	b.n	341903e6 <_free_r+0x1e>
3419040a:	461a      	mov	r2, r3
3419040c:	685b      	ldr	r3, [r3, #4]
3419040e:	b10b      	cbz	r3, 34190414 <_free_r+0x4c>
34190410:	42a3      	cmp	r3, r4
34190412:	d9fa      	bls.n	3419040a <_free_r+0x42>
34190414:	6811      	ldr	r1, [r2, #0]
34190416:	1850      	adds	r0, r2, r1
34190418:	42a0      	cmp	r0, r4
3419041a:	d10b      	bne.n	34190434 <_free_r+0x6c>
3419041c:	6820      	ldr	r0, [r4, #0]
3419041e:	4401      	add	r1, r0
34190420:	1850      	adds	r0, r2, r1
34190422:	6011      	str	r1, [r2, #0]
34190424:	4283      	cmp	r3, r0
34190426:	d1e0      	bne.n	341903ea <_free_r+0x22>
34190428:	6818      	ldr	r0, [r3, #0]
3419042a:	685b      	ldr	r3, [r3, #4]
3419042c:	4408      	add	r0, r1
3419042e:	6053      	str	r3, [r2, #4]
34190430:	6010      	str	r0, [r2, #0]
34190432:	e7da      	b.n	341903ea <_free_r+0x22>
34190434:	d902      	bls.n	3419043c <_free_r+0x74>
34190436:	230c      	movs	r3, #12
34190438:	602b      	str	r3, [r5, #0]
3419043a:	e7d6      	b.n	341903ea <_free_r+0x22>
3419043c:	6820      	ldr	r0, [r4, #0]
3419043e:	1821      	adds	r1, r4, r0
34190440:	428b      	cmp	r3, r1
34190442:	bf02      	ittt	eq
34190444:	6819      	ldreq	r1, [r3, #0]
34190446:	685b      	ldreq	r3, [r3, #4]
34190448:	1809      	addeq	r1, r1, r0
3419044a:	6063      	str	r3, [r4, #4]
3419044c:	bf08      	it	eq
3419044e:	6021      	streq	r1, [r4, #0]
34190450:	6054      	str	r4, [r2, #4]
34190452:	e7ca      	b.n	341903ea <_free_r+0x22>
34190454:	bd38      	pop	{r3, r4, r5, pc}
34190456:	bf00      	nop
34190458:	341c0504 	.word	0x341c0504

3419045c <sbrk_aligned>:
3419045c:	b570      	push	{r4, r5, r6, lr}
3419045e:	4e0f      	ldr	r6, [pc, #60]	@ (3419049c <sbrk_aligned+0x40>)
34190460:	460c      	mov	r4, r1
34190462:	4605      	mov	r5, r0
34190464:	6831      	ldr	r1, [r6, #0]
34190466:	b911      	cbnz	r1, 3419046e <sbrk_aligned+0x12>
34190468:	f000 f9d6 	bl	34190818 <_sbrk_r>
3419046c:	6030      	str	r0, [r6, #0]
3419046e:	4621      	mov	r1, r4
34190470:	4628      	mov	r0, r5
34190472:	f000 f9d1 	bl	34190818 <_sbrk_r>
34190476:	1c43      	adds	r3, r0, #1
34190478:	d103      	bne.n	34190482 <sbrk_aligned+0x26>
3419047a:	f04f 34ff 	mov.w	r4, #4294967295
3419047e:	4620      	mov	r0, r4
34190480:	bd70      	pop	{r4, r5, r6, pc}
34190482:	1cc4      	adds	r4, r0, #3
34190484:	f024 0403 	bic.w	r4, r4, #3
34190488:	42a0      	cmp	r0, r4
3419048a:	d0f8      	beq.n	3419047e <sbrk_aligned+0x22>
3419048c:	1a21      	subs	r1, r4, r0
3419048e:	4628      	mov	r0, r5
34190490:	f000 f9c2 	bl	34190818 <_sbrk_r>
34190494:	3001      	adds	r0, #1
34190496:	d1f2      	bne.n	3419047e <sbrk_aligned+0x22>
34190498:	e7ef      	b.n	3419047a <sbrk_aligned+0x1e>
3419049a:	bf00      	nop
3419049c:	341c0500 	.word	0x341c0500

341904a0 <_malloc_r>:
341904a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
341904a4:	1ccd      	adds	r5, r1, #3
341904a6:	4606      	mov	r6, r0
341904a8:	f025 0503 	bic.w	r5, r5, #3
341904ac:	3508      	adds	r5, #8
341904ae:	2d0c      	cmp	r5, #12
341904b0:	bf38      	it	cc
341904b2:	250c      	movcc	r5, #12
341904b4:	2d00      	cmp	r5, #0
341904b6:	db01      	blt.n	341904bc <_malloc_r+0x1c>
341904b8:	42a9      	cmp	r1, r5
341904ba:	d904      	bls.n	341904c6 <_malloc_r+0x26>
341904bc:	230c      	movs	r3, #12
341904be:	6033      	str	r3, [r6, #0]
341904c0:	2000      	movs	r0, #0
341904c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
341904c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3419059c <_malloc_r+0xfc>
341904ca:	f000 f869 	bl	341905a0 <__malloc_lock>
341904ce:	f8d8 3000 	ldr.w	r3, [r8]
341904d2:	461c      	mov	r4, r3
341904d4:	bb44      	cbnz	r4, 34190528 <_malloc_r+0x88>
341904d6:	4629      	mov	r1, r5
341904d8:	4630      	mov	r0, r6
341904da:	f7ff ffbf 	bl	3419045c <sbrk_aligned>
341904de:	1c43      	adds	r3, r0, #1
341904e0:	4604      	mov	r4, r0
341904e2:	d158      	bne.n	34190596 <_malloc_r+0xf6>
341904e4:	f8d8 4000 	ldr.w	r4, [r8]
341904e8:	4627      	mov	r7, r4
341904ea:	2f00      	cmp	r7, #0
341904ec:	d143      	bne.n	34190576 <_malloc_r+0xd6>
341904ee:	2c00      	cmp	r4, #0
341904f0:	d04b      	beq.n	3419058a <_malloc_r+0xea>
341904f2:	6823      	ldr	r3, [r4, #0]
341904f4:	4639      	mov	r1, r7
341904f6:	4630      	mov	r0, r6
341904f8:	eb04 0903 	add.w	r9, r4, r3
341904fc:	f000 f98c 	bl	34190818 <_sbrk_r>
34190500:	4581      	cmp	r9, r0
34190502:	d142      	bne.n	3419058a <_malloc_r+0xea>
34190504:	6821      	ldr	r1, [r4, #0]
34190506:	4630      	mov	r0, r6
34190508:	1a6d      	subs	r5, r5, r1
3419050a:	4629      	mov	r1, r5
3419050c:	f7ff ffa6 	bl	3419045c <sbrk_aligned>
34190510:	3001      	adds	r0, #1
34190512:	d03a      	beq.n	3419058a <_malloc_r+0xea>
34190514:	6823      	ldr	r3, [r4, #0]
34190516:	442b      	add	r3, r5
34190518:	6023      	str	r3, [r4, #0]
3419051a:	f8d8 3000 	ldr.w	r3, [r8]
3419051e:	685a      	ldr	r2, [r3, #4]
34190520:	bb62      	cbnz	r2, 3419057c <_malloc_r+0xdc>
34190522:	f8c8 7000 	str.w	r7, [r8]
34190526:	e00f      	b.n	34190548 <_malloc_r+0xa8>
34190528:	6822      	ldr	r2, [r4, #0]
3419052a:	1b52      	subs	r2, r2, r5
3419052c:	d420      	bmi.n	34190570 <_malloc_r+0xd0>
3419052e:	2a0b      	cmp	r2, #11
34190530:	d917      	bls.n	34190562 <_malloc_r+0xc2>
34190532:	1961      	adds	r1, r4, r5
34190534:	42a3      	cmp	r3, r4
34190536:	6025      	str	r5, [r4, #0]
34190538:	bf18      	it	ne
3419053a:	6059      	strne	r1, [r3, #4]
3419053c:	6863      	ldr	r3, [r4, #4]
3419053e:	bf08      	it	eq
34190540:	f8c8 1000 	streq.w	r1, [r8]
34190544:	5162      	str	r2, [r4, r5]
34190546:	604b      	str	r3, [r1, #4]
34190548:	4630      	mov	r0, r6
3419054a:	f000 f82f 	bl	341905ac <__malloc_unlock>
3419054e:	f104 000b 	add.w	r0, r4, #11
34190552:	1d23      	adds	r3, r4, #4
34190554:	f020 0007 	bic.w	r0, r0, #7
34190558:	1ac2      	subs	r2, r0, r3
3419055a:	bf1c      	itt	ne
3419055c:	1a1b      	subne	r3, r3, r0
3419055e:	50a3      	strne	r3, [r4, r2]
34190560:	e7af      	b.n	341904c2 <_malloc_r+0x22>
34190562:	6862      	ldr	r2, [r4, #4]
34190564:	42a3      	cmp	r3, r4
34190566:	bf0c      	ite	eq
34190568:	f8c8 2000 	streq.w	r2, [r8]
3419056c:	605a      	strne	r2, [r3, #4]
3419056e:	e7eb      	b.n	34190548 <_malloc_r+0xa8>
34190570:	4623      	mov	r3, r4
34190572:	6864      	ldr	r4, [r4, #4]
34190574:	e7ae      	b.n	341904d4 <_malloc_r+0x34>
34190576:	463c      	mov	r4, r7
34190578:	687f      	ldr	r7, [r7, #4]
3419057a:	e7b6      	b.n	341904ea <_malloc_r+0x4a>
3419057c:	461a      	mov	r2, r3
3419057e:	685b      	ldr	r3, [r3, #4]
34190580:	42a3      	cmp	r3, r4
34190582:	d1fb      	bne.n	3419057c <_malloc_r+0xdc>
34190584:	2300      	movs	r3, #0
34190586:	6053      	str	r3, [r2, #4]
34190588:	e7de      	b.n	34190548 <_malloc_r+0xa8>
3419058a:	230c      	movs	r3, #12
3419058c:	4630      	mov	r0, r6
3419058e:	6033      	str	r3, [r6, #0]
34190590:	f000 f80c 	bl	341905ac <__malloc_unlock>
34190594:	e794      	b.n	341904c0 <_malloc_r+0x20>
34190596:	6005      	str	r5, [r0, #0]
34190598:	e7d6      	b.n	34190548 <_malloc_r+0xa8>
3419059a:	bf00      	nop
3419059c:	341c0504 	.word	0x341c0504

341905a0 <__malloc_lock>:
341905a0:	4801      	ldr	r0, [pc, #4]	@ (341905a8 <__malloc_lock+0x8>)
341905a2:	f7ff bf02 	b.w	341903aa <__retarget_lock_acquire_recursive>
341905a6:	bf00      	nop
341905a8:	341c04fc 	.word	0x341c04fc

341905ac <__malloc_unlock>:
341905ac:	4801      	ldr	r0, [pc, #4]	@ (341905b4 <__malloc_unlock+0x8>)
341905ae:	f7ff befd 	b.w	341903ac <__retarget_lock_release_recursive>
341905b2:	bf00      	nop
341905b4:	341c04fc 	.word	0x341c04fc

341905b8 <__sflush_r>:
341905b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
341905bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
341905c0:	0716      	lsls	r6, r2, #28
341905c2:	4605      	mov	r5, r0
341905c4:	460c      	mov	r4, r1
341905c6:	d454      	bmi.n	34190672 <__sflush_r+0xba>
341905c8:	684b      	ldr	r3, [r1, #4]
341905ca:	2b00      	cmp	r3, #0
341905cc:	dc02      	bgt.n	341905d4 <__sflush_r+0x1c>
341905ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
341905d0:	2b00      	cmp	r3, #0
341905d2:	dd48      	ble.n	34190666 <__sflush_r+0xae>
341905d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
341905d6:	2e00      	cmp	r6, #0
341905d8:	d045      	beq.n	34190666 <__sflush_r+0xae>
341905da:	2300      	movs	r3, #0
341905dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
341905e0:	682f      	ldr	r7, [r5, #0]
341905e2:	6a21      	ldr	r1, [r4, #32]
341905e4:	602b      	str	r3, [r5, #0]
341905e6:	d030      	beq.n	3419064a <__sflush_r+0x92>
341905e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
341905ea:	89a3      	ldrh	r3, [r4, #12]
341905ec:	0759      	lsls	r1, r3, #29
341905ee:	d505      	bpl.n	341905fc <__sflush_r+0x44>
341905f0:	6863      	ldr	r3, [r4, #4]
341905f2:	1ad2      	subs	r2, r2, r3
341905f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
341905f6:	b10b      	cbz	r3, 341905fc <__sflush_r+0x44>
341905f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
341905fa:	1ad2      	subs	r2, r2, r3
341905fc:	2300      	movs	r3, #0
341905fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
34190600:	6a21      	ldr	r1, [r4, #32]
34190602:	4628      	mov	r0, r5
34190604:	47b0      	blx	r6
34190606:	1c43      	adds	r3, r0, #1
34190608:	89a3      	ldrh	r3, [r4, #12]
3419060a:	d106      	bne.n	3419061a <__sflush_r+0x62>
3419060c:	6829      	ldr	r1, [r5, #0]
3419060e:	291d      	cmp	r1, #29
34190610:	d82b      	bhi.n	3419066a <__sflush_r+0xb2>
34190612:	4a2a      	ldr	r2, [pc, #168]	@ (341906bc <__sflush_r+0x104>)
34190614:	410a      	asrs	r2, r1
34190616:	07d6      	lsls	r6, r2, #31
34190618:	d427      	bmi.n	3419066a <__sflush_r+0xb2>
3419061a:	2200      	movs	r2, #0
3419061c:	04d9      	lsls	r1, r3, #19
3419061e:	6062      	str	r2, [r4, #4]
34190620:	6922      	ldr	r2, [r4, #16]
34190622:	6022      	str	r2, [r4, #0]
34190624:	d504      	bpl.n	34190630 <__sflush_r+0x78>
34190626:	1c42      	adds	r2, r0, #1
34190628:	d101      	bne.n	3419062e <__sflush_r+0x76>
3419062a:	682b      	ldr	r3, [r5, #0]
3419062c:	b903      	cbnz	r3, 34190630 <__sflush_r+0x78>
3419062e:	6560      	str	r0, [r4, #84]	@ 0x54
34190630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
34190632:	602f      	str	r7, [r5, #0]
34190634:	b1b9      	cbz	r1, 34190666 <__sflush_r+0xae>
34190636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3419063a:	4299      	cmp	r1, r3
3419063c:	d002      	beq.n	34190644 <__sflush_r+0x8c>
3419063e:	4628      	mov	r0, r5
34190640:	f7ff fec2 	bl	341903c8 <_free_r>
34190644:	2300      	movs	r3, #0
34190646:	6363      	str	r3, [r4, #52]	@ 0x34
34190648:	e00d      	b.n	34190666 <__sflush_r+0xae>
3419064a:	2301      	movs	r3, #1
3419064c:	4628      	mov	r0, r5
3419064e:	47b0      	blx	r6
34190650:	4602      	mov	r2, r0
34190652:	1c50      	adds	r0, r2, #1
34190654:	d1c9      	bne.n	341905ea <__sflush_r+0x32>
34190656:	682b      	ldr	r3, [r5, #0]
34190658:	2b00      	cmp	r3, #0
3419065a:	d0c6      	beq.n	341905ea <__sflush_r+0x32>
3419065c:	2b1d      	cmp	r3, #29
3419065e:	d001      	beq.n	34190664 <__sflush_r+0xac>
34190660:	2b16      	cmp	r3, #22
34190662:	d11d      	bne.n	341906a0 <__sflush_r+0xe8>
34190664:	602f      	str	r7, [r5, #0]
34190666:	2000      	movs	r0, #0
34190668:	e021      	b.n	341906ae <__sflush_r+0xf6>
3419066a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3419066e:	b21b      	sxth	r3, r3
34190670:	e01a      	b.n	341906a8 <__sflush_r+0xf0>
34190672:	690f      	ldr	r7, [r1, #16]
34190674:	2f00      	cmp	r7, #0
34190676:	d0f6      	beq.n	34190666 <__sflush_r+0xae>
34190678:	0793      	lsls	r3, r2, #30
3419067a:	680e      	ldr	r6, [r1, #0]
3419067c:	600f      	str	r7, [r1, #0]
3419067e:	bf0c      	ite	eq
34190680:	694b      	ldreq	r3, [r1, #20]
34190682:	2300      	movne	r3, #0
34190684:	eba6 0807 	sub.w	r8, r6, r7
34190688:	608b      	str	r3, [r1, #8]
3419068a:	f1b8 0f00 	cmp.w	r8, #0
3419068e:	ddea      	ble.n	34190666 <__sflush_r+0xae>
34190690:	4643      	mov	r3, r8
34190692:	463a      	mov	r2, r7
34190694:	6a21      	ldr	r1, [r4, #32]
34190696:	4628      	mov	r0, r5
34190698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3419069a:	47b0      	blx	r6
3419069c:	2800      	cmp	r0, #0
3419069e:	dc08      	bgt.n	341906b2 <__sflush_r+0xfa>
341906a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341906a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
341906a8:	f04f 30ff 	mov.w	r0, #4294967295
341906ac:	81a3      	strh	r3, [r4, #12]
341906ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
341906b2:	4407      	add	r7, r0
341906b4:	eba8 0800 	sub.w	r8, r8, r0
341906b8:	e7e7      	b.n	3419068a <__sflush_r+0xd2>
341906ba:	bf00      	nop
341906bc:	dfbffffe 	.word	0xdfbffffe

341906c0 <_fflush_r>:
341906c0:	b538      	push	{r3, r4, r5, lr}
341906c2:	690b      	ldr	r3, [r1, #16]
341906c4:	4605      	mov	r5, r0
341906c6:	460c      	mov	r4, r1
341906c8:	b913      	cbnz	r3, 341906d0 <_fflush_r+0x10>
341906ca:	2500      	movs	r5, #0
341906cc:	4628      	mov	r0, r5
341906ce:	bd38      	pop	{r3, r4, r5, pc}
341906d0:	b118      	cbz	r0, 341906da <_fflush_r+0x1a>
341906d2:	6a03      	ldr	r3, [r0, #32]
341906d4:	b90b      	cbnz	r3, 341906da <_fflush_r+0x1a>
341906d6:	f7ff fc83 	bl	3418ffe0 <__sinit>
341906da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
341906de:	2b00      	cmp	r3, #0
341906e0:	d0f3      	beq.n	341906ca <_fflush_r+0xa>
341906e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
341906e4:	07d0      	lsls	r0, r2, #31
341906e6:	d404      	bmi.n	341906f2 <_fflush_r+0x32>
341906e8:	0599      	lsls	r1, r3, #22
341906ea:	d402      	bmi.n	341906f2 <_fflush_r+0x32>
341906ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
341906ee:	f7ff fe5c 	bl	341903aa <__retarget_lock_acquire_recursive>
341906f2:	4628      	mov	r0, r5
341906f4:	4621      	mov	r1, r4
341906f6:	f7ff ff5f 	bl	341905b8 <__sflush_r>
341906fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
341906fc:	4605      	mov	r5, r0
341906fe:	07da      	lsls	r2, r3, #31
34190700:	d4e4      	bmi.n	341906cc <_fflush_r+0xc>
34190702:	89a3      	ldrh	r3, [r4, #12]
34190704:	059b      	lsls	r3, r3, #22
34190706:	d4e1      	bmi.n	341906cc <_fflush_r+0xc>
34190708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3419070a:	f7ff fe4f 	bl	341903ac <__retarget_lock_release_recursive>
3419070e:	e7dd      	b.n	341906cc <_fflush_r+0xc>

34190710 <__swhatbuf_r>:
34190710:	b570      	push	{r4, r5, r6, lr}
34190712:	460c      	mov	r4, r1
34190714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34190718:	b096      	sub	sp, #88	@ 0x58
3419071a:	4615      	mov	r5, r2
3419071c:	2900      	cmp	r1, #0
3419071e:	461e      	mov	r6, r3
34190720:	da0c      	bge.n	3419073c <__swhatbuf_r+0x2c>
34190722:	89a3      	ldrh	r3, [r4, #12]
34190724:	2100      	movs	r1, #0
34190726:	f013 0f80 	tst.w	r3, #128	@ 0x80
3419072a:	bf14      	ite	ne
3419072c:	2340      	movne	r3, #64	@ 0x40
3419072e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
34190732:	2000      	movs	r0, #0
34190734:	6031      	str	r1, [r6, #0]
34190736:	602b      	str	r3, [r5, #0]
34190738:	b016      	add	sp, #88	@ 0x58
3419073a:	bd70      	pop	{r4, r5, r6, pc}
3419073c:	466a      	mov	r2, sp
3419073e:	f000 f849 	bl	341907d4 <_fstat_r>
34190742:	2800      	cmp	r0, #0
34190744:	dbed      	blt.n	34190722 <__swhatbuf_r+0x12>
34190746:	9901      	ldr	r1, [sp, #4]
34190748:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3419074c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
34190750:	4259      	negs	r1, r3
34190752:	4159      	adcs	r1, r3
34190754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
34190758:	e7eb      	b.n	34190732 <__swhatbuf_r+0x22>

3419075a <__smakebuf_r>:
3419075a:	898b      	ldrh	r3, [r1, #12]
3419075c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3419075e:	079d      	lsls	r5, r3, #30
34190760:	4606      	mov	r6, r0
34190762:	460c      	mov	r4, r1
34190764:	d507      	bpl.n	34190776 <__smakebuf_r+0x1c>
34190766:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3419076a:	6023      	str	r3, [r4, #0]
3419076c:	6123      	str	r3, [r4, #16]
3419076e:	2301      	movs	r3, #1
34190770:	6163      	str	r3, [r4, #20]
34190772:	b003      	add	sp, #12
34190774:	bdf0      	pop	{r4, r5, r6, r7, pc}
34190776:	ab01      	add	r3, sp, #4
34190778:	466a      	mov	r2, sp
3419077a:	f7ff ffc9 	bl	34190710 <__swhatbuf_r>
3419077e:	9f00      	ldr	r7, [sp, #0]
34190780:	4605      	mov	r5, r0
34190782:	4630      	mov	r0, r6
34190784:	4639      	mov	r1, r7
34190786:	f7ff fe8b 	bl	341904a0 <_malloc_r>
3419078a:	b948      	cbnz	r0, 341907a0 <__smakebuf_r+0x46>
3419078c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
34190790:	059a      	lsls	r2, r3, #22
34190792:	d4ee      	bmi.n	34190772 <__smakebuf_r+0x18>
34190794:	f023 0303 	bic.w	r3, r3, #3
34190798:	f043 0302 	orr.w	r3, r3, #2
3419079c:	81a3      	strh	r3, [r4, #12]
3419079e:	e7e2      	b.n	34190766 <__smakebuf_r+0xc>
341907a0:	89a3      	ldrh	r3, [r4, #12]
341907a2:	6020      	str	r0, [r4, #0]
341907a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
341907a8:	81a3      	strh	r3, [r4, #12]
341907aa:	9b01      	ldr	r3, [sp, #4]
341907ac:	e9c4 0704 	strd	r0, r7, [r4, #16]
341907b0:	b15b      	cbz	r3, 341907ca <__smakebuf_r+0x70>
341907b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
341907b6:	4630      	mov	r0, r6
341907b8:	f000 f81e 	bl	341907f8 <_isatty_r>
341907bc:	b128      	cbz	r0, 341907ca <__smakebuf_r+0x70>
341907be:	89a3      	ldrh	r3, [r4, #12]
341907c0:	f023 0303 	bic.w	r3, r3, #3
341907c4:	f043 0301 	orr.w	r3, r3, #1
341907c8:	81a3      	strh	r3, [r4, #12]
341907ca:	89a3      	ldrh	r3, [r4, #12]
341907cc:	431d      	orrs	r5, r3
341907ce:	81a5      	strh	r5, [r4, #12]
341907d0:	e7cf      	b.n	34190772 <__smakebuf_r+0x18>
	...

341907d4 <_fstat_r>:
341907d4:	b538      	push	{r3, r4, r5, lr}
341907d6:	2300      	movs	r3, #0
341907d8:	4d06      	ldr	r5, [pc, #24]	@ (341907f4 <_fstat_r+0x20>)
341907da:	4604      	mov	r4, r0
341907dc:	4608      	mov	r0, r1
341907de:	4611      	mov	r1, r2
341907e0:	602b      	str	r3, [r5, #0]
341907e2:	f7f0 fc85 	bl	341810f0 <_fstat>
341907e6:	1c43      	adds	r3, r0, #1
341907e8:	d102      	bne.n	341907f0 <_fstat_r+0x1c>
341907ea:	682b      	ldr	r3, [r5, #0]
341907ec:	b103      	cbz	r3, 341907f0 <_fstat_r+0x1c>
341907ee:	6023      	str	r3, [r4, #0]
341907f0:	bd38      	pop	{r3, r4, r5, pc}
341907f2:	bf00      	nop
341907f4:	341c04f8 	.word	0x341c04f8

341907f8 <_isatty_r>:
341907f8:	b538      	push	{r3, r4, r5, lr}
341907fa:	2300      	movs	r3, #0
341907fc:	4d05      	ldr	r5, [pc, #20]	@ (34190814 <_isatty_r+0x1c>)
341907fe:	4604      	mov	r4, r0
34190800:	4608      	mov	r0, r1
34190802:	602b      	str	r3, [r5, #0]
34190804:	f7f0 fc84 	bl	34181110 <_isatty>
34190808:	1c43      	adds	r3, r0, #1
3419080a:	d102      	bne.n	34190812 <_isatty_r+0x1a>
3419080c:	682b      	ldr	r3, [r5, #0]
3419080e:	b103      	cbz	r3, 34190812 <_isatty_r+0x1a>
34190810:	6023      	str	r3, [r4, #0]
34190812:	bd38      	pop	{r3, r4, r5, pc}
34190814:	341c04f8 	.word	0x341c04f8

34190818 <_sbrk_r>:
34190818:	b538      	push	{r3, r4, r5, lr}
3419081a:	2300      	movs	r3, #0
3419081c:	4d05      	ldr	r5, [pc, #20]	@ (34190834 <_sbrk_r+0x1c>)
3419081e:	4604      	mov	r4, r0
34190820:	4608      	mov	r0, r1
34190822:	602b      	str	r3, [r5, #0]
34190824:	f7f0 fc8c 	bl	34181140 <_sbrk>
34190828:	1c43      	adds	r3, r0, #1
3419082a:	d102      	bne.n	34190832 <_sbrk_r+0x1a>
3419082c:	682b      	ldr	r3, [r5, #0]
3419082e:	b103      	cbz	r3, 34190832 <_sbrk_r+0x1a>
34190830:	6023      	str	r3, [r4, #0]
34190832:	bd38      	pop	{r3, r4, r5, pc}
34190834:	341c04f8 	.word	0x341c04f8

34190838 <_init>:
34190838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3419083a:	bf00      	nop
3419083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
3419083e:	bc08      	pop	{r3}
34190840:	469e      	mov	lr, r3
34190842:	4770      	bx	lr

34190844 <_fini>:
34190844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
34190846:	bf00      	nop
34190848:	bcf8      	pop	{r3, r4, r5, r6, r7}
3419084a:	bc08      	pop	{r3}
3419084c:	469e      	mov	lr, r3
3419084e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

34190960 <SECURE_SystemCoreClockUpdate>:
34190960:	e97f e97f 	sg
34190964:	f7f0 beb0 	b.w	341816c8 <__acle_se_SECURE_SystemCoreClockUpdate>
	...
