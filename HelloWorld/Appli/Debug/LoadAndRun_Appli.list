
HelloWorld_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34000400  34000400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c148  3400074c  3400074c  0000074c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  3400c894  3400c894  0000c894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  3400d37c  3400d37c  0000d420  2**0
                  CONTENTS
  4 .ARM          00000008  3400d37c  3400d37c  0000d37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  3400d384  3400d420  0000d420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  3400d384  3400d384  0000d384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  3400d388  3400d388  0000d388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  3400d38c  3400d38c  0000d38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .noncacheable 00000000  3400d3f8  3400d3f8  0000d420  2**0
                  CONTENTS
 10 .gnu.sgstubs  00000020  3400d400  3400d400  0000d400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss          000003b0  3400d420  3400d420  0000d420  2**2
                  ALLOC
 12 ._user_heap_stack 00000a00  3400d7d0  3400d7d0  0000d420  2**0
                  ALLOC
 13 .ARM.attributes 0000003a  00000000  00000000  0000d420  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018bdb  00000000  00000000  0000d45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027c4  00000000  00000000  00026035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001970  00000000  00000000  00028800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001352  00000000  00000000  0002a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000539d0  00000000  00000000  0002b4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015cb7  00000000  00000000  0007ee92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0020f42a  00000000  00000000  00094b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002a3f73  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000073bc  00000000  00000000  002a3fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000046  00000000  00000000  002ab374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

3400074c <__do_global_dtors_aux>:
3400074c:	b510      	push	{r4, lr}
3400074e:	4c05      	ldr	r4, [pc, #20]	@ (34000764 <__do_global_dtors_aux+0x18>)
34000750:	7823      	ldrb	r3, [r4, #0]
34000752:	b933      	cbnz	r3, 34000762 <__do_global_dtors_aux+0x16>
34000754:	4b04      	ldr	r3, [pc, #16]	@ (34000768 <__do_global_dtors_aux+0x1c>)
34000756:	b113      	cbz	r3, 3400075e <__do_global_dtors_aux+0x12>
34000758:	4804      	ldr	r0, [pc, #16]	@ (3400076c <__do_global_dtors_aux+0x20>)
3400075a:	f3af 8000 	nop.w
3400075e:	2301      	movs	r3, #1
34000760:	7023      	strb	r3, [r4, #0]
34000762:	bd10      	pop	{r4, pc}
34000764:	3400d420 	.word	0x3400d420
34000768:	00000000 	.word	0x00000000
3400076c:	3400c87c 	.word	0x3400c87c

34000770 <frame_dummy>:
34000770:	b508      	push	{r3, lr}
34000772:	4b03      	ldr	r3, [pc, #12]	@ (34000780 <frame_dummy+0x10>)
34000774:	b11b      	cbz	r3, 3400077e <frame_dummy+0xe>
34000776:	4903      	ldr	r1, [pc, #12]	@ (34000784 <frame_dummy+0x14>)
34000778:	4803      	ldr	r0, [pc, #12]	@ (34000788 <frame_dummy+0x18>)
3400077a:	f3af 8000 	nop.w
3400077e:	bd08      	pop	{r3, pc}
34000780:	00000000 	.word	0x00000000
34000784:	3400d424 	.word	0x3400d424
34000788:	3400c87c 	.word	0x3400c87c

3400078c <strcmp>:
3400078c:	f810 2b01 	ldrb.w	r2, [r0], #1
34000790:	f811 3b01 	ldrb.w	r3, [r1], #1
34000794:	2a01      	cmp	r2, #1
34000796:	bf28      	it	cs
34000798:	429a      	cmpcs	r2, r3
3400079a:	d0f7      	beq.n	3400078c <strcmp>
3400079c:	1ad0      	subs	r0, r2, r3
3400079e:	4770      	bx	lr

340007a0 <strlen>:
340007a0:	4603      	mov	r3, r0
340007a2:	f813 2b01 	ldrb.w	r2, [r3], #1
340007a6:	2a00      	cmp	r2, #0
340007a8:	d1fb      	bne.n	340007a2 <strlen+0x2>
340007aa:	1a18      	subs	r0, r3, r0
340007ac:	3801      	subs	r0, #1
340007ae:	4770      	bx	lr

340007b0 <__aeabi_uldivmod>:
340007b0:	b953      	cbnz	r3, 340007c8 <__aeabi_uldivmod+0x18>
340007b2:	b94a      	cbnz	r2, 340007c8 <__aeabi_uldivmod+0x18>
340007b4:	2900      	cmp	r1, #0
340007b6:	bf08      	it	eq
340007b8:	2800      	cmpeq	r0, #0
340007ba:	bf1c      	itt	ne
340007bc:	f04f 31ff 	movne.w	r1, #4294967295
340007c0:	f04f 30ff 	movne.w	r0, #4294967295
340007c4:	f000 b97e 	b.w	34000ac4 <__aeabi_idiv0>
340007c8:	f1ad 0c08 	sub.w	ip, sp, #8
340007cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
340007d0:	f000 f806 	bl	340007e0 <__udivmoddi4>
340007d4:	f8dd e004 	ldr.w	lr, [sp, #4]
340007d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
340007dc:	b004      	add	sp, #16
340007de:	4770      	bx	lr

340007e0 <__udivmoddi4>:
340007e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
340007e4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
340007e6:	460c      	mov	r4, r1
340007e8:	2b00      	cmp	r3, #0
340007ea:	d14d      	bne.n	34000888 <__udivmoddi4+0xa8>
340007ec:	428a      	cmp	r2, r1
340007ee:	460f      	mov	r7, r1
340007f0:	4684      	mov	ip, r0
340007f2:	4696      	mov	lr, r2
340007f4:	fab2 f382 	clz	r3, r2
340007f8:	d960      	bls.n	340008bc <__udivmoddi4+0xdc>
340007fa:	b14b      	cbz	r3, 34000810 <__udivmoddi4+0x30>
340007fc:	fa02 fe03 	lsl.w	lr, r2, r3
34000800:	f1c3 0220 	rsb	r2, r3, #32
34000804:	409f      	lsls	r7, r3
34000806:	fa00 fc03 	lsl.w	ip, r0, r3
3400080a:	fa20 f202 	lsr.w	r2, r0, r2
3400080e:	4317      	orrs	r7, r2
34000810:	ea4f 461e 	mov.w	r6, lr, lsr #16
34000814:	fa1f f48e 	uxth.w	r4, lr
34000818:	ea4f 421c 	mov.w	r2, ip, lsr #16
3400081c:	fbb7 f1f6 	udiv	r1, r7, r6
34000820:	fb06 7711 	mls	r7, r6, r1, r7
34000824:	fb01 f004 	mul.w	r0, r1, r4
34000828:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
3400082c:	4290      	cmp	r0, r2
3400082e:	d908      	bls.n	34000842 <__udivmoddi4+0x62>
34000830:	eb1e 0202 	adds.w	r2, lr, r2
34000834:	f101 37ff 	add.w	r7, r1, #4294967295
34000838:	d202      	bcs.n	34000840 <__udivmoddi4+0x60>
3400083a:	4290      	cmp	r0, r2
3400083c:	f200 812d 	bhi.w	34000a9a <__udivmoddi4+0x2ba>
34000840:	4639      	mov	r1, r7
34000842:	1a12      	subs	r2, r2, r0
34000844:	fa1f fc8c 	uxth.w	ip, ip
34000848:	fbb2 f0f6 	udiv	r0, r2, r6
3400084c:	fb06 2210 	mls	r2, r6, r0, r2
34000850:	fb00 f404 	mul.w	r4, r0, r4
34000854:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
34000858:	4564      	cmp	r4, ip
3400085a:	d908      	bls.n	3400086e <__udivmoddi4+0x8e>
3400085c:	eb1e 0c0c 	adds.w	ip, lr, ip
34000860:	f100 32ff 	add.w	r2, r0, #4294967295
34000864:	d202      	bcs.n	3400086c <__udivmoddi4+0x8c>
34000866:	4564      	cmp	r4, ip
34000868:	f200 811a 	bhi.w	34000aa0 <__udivmoddi4+0x2c0>
3400086c:	4610      	mov	r0, r2
3400086e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34000872:	ebac 0c04 	sub.w	ip, ip, r4
34000876:	2100      	movs	r1, #0
34000878:	b125      	cbz	r5, 34000884 <__udivmoddi4+0xa4>
3400087a:	fa2c f303 	lsr.w	r3, ip, r3
3400087e:	2200      	movs	r2, #0
34000880:	e9c5 3200 	strd	r3, r2, [r5]
34000884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34000888:	428b      	cmp	r3, r1
3400088a:	d905      	bls.n	34000898 <__udivmoddi4+0xb8>
3400088c:	b10d      	cbz	r5, 34000892 <__udivmoddi4+0xb2>
3400088e:	e9c5 0100 	strd	r0, r1, [r5]
34000892:	2100      	movs	r1, #0
34000894:	4608      	mov	r0, r1
34000896:	e7f5      	b.n	34000884 <__udivmoddi4+0xa4>
34000898:	fab3 f183 	clz	r1, r3
3400089c:	2900      	cmp	r1, #0
3400089e:	d14d      	bne.n	3400093c <__udivmoddi4+0x15c>
340008a0:	42a3      	cmp	r3, r4
340008a2:	f0c0 80f2 	bcc.w	34000a8a <__udivmoddi4+0x2aa>
340008a6:	4290      	cmp	r0, r2
340008a8:	f080 80ef 	bcs.w	34000a8a <__udivmoddi4+0x2aa>
340008ac:	4606      	mov	r6, r0
340008ae:	4623      	mov	r3, r4
340008b0:	4608      	mov	r0, r1
340008b2:	2d00      	cmp	r5, #0
340008b4:	d0e6      	beq.n	34000884 <__udivmoddi4+0xa4>
340008b6:	e9c5 6300 	strd	r6, r3, [r5]
340008ba:	e7e3      	b.n	34000884 <__udivmoddi4+0xa4>
340008bc:	2b00      	cmp	r3, #0
340008be:	f040 80a2 	bne.w	34000a06 <__udivmoddi4+0x226>
340008c2:	1a8a      	subs	r2, r1, r2
340008c4:	ea4f 471e 	mov.w	r7, lr, lsr #16
340008c8:	fa1f f68e 	uxth.w	r6, lr
340008cc:	2101      	movs	r1, #1
340008ce:	fbb2 f4f7 	udiv	r4, r2, r7
340008d2:	fb07 2014 	mls	r0, r7, r4, r2
340008d6:	ea4f 421c 	mov.w	r2, ip, lsr #16
340008da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
340008de:	fb06 f004 	mul.w	r0, r6, r4
340008e2:	4290      	cmp	r0, r2
340008e4:	d90f      	bls.n	34000906 <__udivmoddi4+0x126>
340008e6:	eb1e 0202 	adds.w	r2, lr, r2
340008ea:	f104 38ff 	add.w	r8, r4, #4294967295
340008ee:	bf2c      	ite	cs
340008f0:	f04f 0901 	movcs.w	r9, #1
340008f4:	f04f 0900 	movcc.w	r9, #0
340008f8:	4290      	cmp	r0, r2
340008fa:	d903      	bls.n	34000904 <__udivmoddi4+0x124>
340008fc:	f1b9 0f00 	cmp.w	r9, #0
34000900:	f000 80c8 	beq.w	34000a94 <__udivmoddi4+0x2b4>
34000904:	4644      	mov	r4, r8
34000906:	1a12      	subs	r2, r2, r0
34000908:	fa1f fc8c 	uxth.w	ip, ip
3400090c:	fbb2 f0f7 	udiv	r0, r2, r7
34000910:	fb07 2210 	mls	r2, r7, r0, r2
34000914:	fb00 f606 	mul.w	r6, r0, r6
34000918:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
3400091c:	4566      	cmp	r6, ip
3400091e:	d908      	bls.n	34000932 <__udivmoddi4+0x152>
34000920:	eb1e 0c0c 	adds.w	ip, lr, ip
34000924:	f100 32ff 	add.w	r2, r0, #4294967295
34000928:	d202      	bcs.n	34000930 <__udivmoddi4+0x150>
3400092a:	4566      	cmp	r6, ip
3400092c:	f200 80bb 	bhi.w	34000aa6 <__udivmoddi4+0x2c6>
34000930:	4610      	mov	r0, r2
34000932:	ebac 0c06 	sub.w	ip, ip, r6
34000936:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
3400093a:	e79d      	b.n	34000878 <__udivmoddi4+0x98>
3400093c:	f1c1 0620 	rsb	r6, r1, #32
34000940:	408b      	lsls	r3, r1
34000942:	fa04 fe01 	lsl.w	lr, r4, r1
34000946:	fa22 f706 	lsr.w	r7, r2, r6
3400094a:	fa20 fc06 	lsr.w	ip, r0, r6
3400094e:	40f4      	lsrs	r4, r6
34000950:	408a      	lsls	r2, r1
34000952:	431f      	orrs	r7, r3
34000954:	ea4e 030c 	orr.w	r3, lr, ip
34000958:	fa00 fe01 	lsl.w	lr, r0, r1
3400095c:	ea4f 4817 	mov.w	r8, r7, lsr #16
34000960:	ea4f 4913 	mov.w	r9, r3, lsr #16
34000964:	fa1f fc87 	uxth.w	ip, r7
34000968:	fbb4 f0f8 	udiv	r0, r4, r8
3400096c:	fb08 4410 	mls	r4, r8, r0, r4
34000970:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
34000974:	fb00 f90c 	mul.w	r9, r0, ip
34000978:	45a1      	cmp	r9, r4
3400097a:	d90e      	bls.n	3400099a <__udivmoddi4+0x1ba>
3400097c:	193c      	adds	r4, r7, r4
3400097e:	f100 3aff 	add.w	sl, r0, #4294967295
34000982:	bf2c      	ite	cs
34000984:	f04f 0b01 	movcs.w	fp, #1
34000988:	f04f 0b00 	movcc.w	fp, #0
3400098c:	45a1      	cmp	r9, r4
3400098e:	d903      	bls.n	34000998 <__udivmoddi4+0x1b8>
34000990:	f1bb 0f00 	cmp.w	fp, #0
34000994:	f000 8093 	beq.w	34000abe <__udivmoddi4+0x2de>
34000998:	4650      	mov	r0, sl
3400099a:	eba4 0409 	sub.w	r4, r4, r9
3400099e:	fa1f f983 	uxth.w	r9, r3
340009a2:	fbb4 f3f8 	udiv	r3, r4, r8
340009a6:	fb08 4413 	mls	r4, r8, r3, r4
340009aa:	fb03 fc0c 	mul.w	ip, r3, ip
340009ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
340009b2:	45a4      	cmp	ip, r4
340009b4:	d906      	bls.n	340009c4 <__udivmoddi4+0x1e4>
340009b6:	193c      	adds	r4, r7, r4
340009b8:	f103 38ff 	add.w	r8, r3, #4294967295
340009bc:	d201      	bcs.n	340009c2 <__udivmoddi4+0x1e2>
340009be:	45a4      	cmp	ip, r4
340009c0:	d87a      	bhi.n	34000ab8 <__udivmoddi4+0x2d8>
340009c2:	4643      	mov	r3, r8
340009c4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
340009c8:	eba4 040c 	sub.w	r4, r4, ip
340009cc:	fba0 9802 	umull	r9, r8, r0, r2
340009d0:	4544      	cmp	r4, r8
340009d2:	46cc      	mov	ip, r9
340009d4:	4643      	mov	r3, r8
340009d6:	d302      	bcc.n	340009de <__udivmoddi4+0x1fe>
340009d8:	d106      	bne.n	340009e8 <__udivmoddi4+0x208>
340009da:	45ce      	cmp	lr, r9
340009dc:	d204      	bcs.n	340009e8 <__udivmoddi4+0x208>
340009de:	3801      	subs	r0, #1
340009e0:	ebb9 0c02 	subs.w	ip, r9, r2
340009e4:	eb68 0307 	sbc.w	r3, r8, r7
340009e8:	b15d      	cbz	r5, 34000a02 <__udivmoddi4+0x222>
340009ea:	ebbe 020c 	subs.w	r2, lr, ip
340009ee:	eb64 0403 	sbc.w	r4, r4, r3
340009f2:	fa04 f606 	lsl.w	r6, r4, r6
340009f6:	fa22 f301 	lsr.w	r3, r2, r1
340009fa:	40cc      	lsrs	r4, r1
340009fc:	431e      	orrs	r6, r3
340009fe:	e9c5 6400 	strd	r6, r4, [r5]
34000a02:	2100      	movs	r1, #0
34000a04:	e73e      	b.n	34000884 <__udivmoddi4+0xa4>
34000a06:	fa02 fe03 	lsl.w	lr, r2, r3
34000a0a:	f1c3 0120 	rsb	r1, r3, #32
34000a0e:	fa04 f203 	lsl.w	r2, r4, r3
34000a12:	fa00 fc03 	lsl.w	ip, r0, r3
34000a16:	40cc      	lsrs	r4, r1
34000a18:	ea4f 471e 	mov.w	r7, lr, lsr #16
34000a1c:	fa20 f101 	lsr.w	r1, r0, r1
34000a20:	fa1f f68e 	uxth.w	r6, lr
34000a24:	fbb4 f0f7 	udiv	r0, r4, r7
34000a28:	430a      	orrs	r2, r1
34000a2a:	fb07 4410 	mls	r4, r7, r0, r4
34000a2e:	0c11      	lsrs	r1, r2, #16
34000a30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
34000a34:	fb00 f406 	mul.w	r4, r0, r6
34000a38:	428c      	cmp	r4, r1
34000a3a:	d90e      	bls.n	34000a5a <__udivmoddi4+0x27a>
34000a3c:	eb1e 0101 	adds.w	r1, lr, r1
34000a40:	f100 38ff 	add.w	r8, r0, #4294967295
34000a44:	bf2c      	ite	cs
34000a46:	f04f 0901 	movcs.w	r9, #1
34000a4a:	f04f 0900 	movcc.w	r9, #0
34000a4e:	428c      	cmp	r4, r1
34000a50:	d902      	bls.n	34000a58 <__udivmoddi4+0x278>
34000a52:	f1b9 0f00 	cmp.w	r9, #0
34000a56:	d02c      	beq.n	34000ab2 <__udivmoddi4+0x2d2>
34000a58:	4640      	mov	r0, r8
34000a5a:	1b09      	subs	r1, r1, r4
34000a5c:	b292      	uxth	r2, r2
34000a5e:	fbb1 f4f7 	udiv	r4, r1, r7
34000a62:	fb07 1114 	mls	r1, r7, r4, r1
34000a66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
34000a6a:	fb04 f106 	mul.w	r1, r4, r6
34000a6e:	4291      	cmp	r1, r2
34000a70:	d907      	bls.n	34000a82 <__udivmoddi4+0x2a2>
34000a72:	eb1e 0202 	adds.w	r2, lr, r2
34000a76:	f104 38ff 	add.w	r8, r4, #4294967295
34000a7a:	d201      	bcs.n	34000a80 <__udivmoddi4+0x2a0>
34000a7c:	4291      	cmp	r1, r2
34000a7e:	d815      	bhi.n	34000aac <__udivmoddi4+0x2cc>
34000a80:	4644      	mov	r4, r8
34000a82:	1a52      	subs	r2, r2, r1
34000a84:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
34000a88:	e721      	b.n	340008ce <__udivmoddi4+0xee>
34000a8a:	1a86      	subs	r6, r0, r2
34000a8c:	eb64 0303 	sbc.w	r3, r4, r3
34000a90:	2001      	movs	r0, #1
34000a92:	e70e      	b.n	340008b2 <__udivmoddi4+0xd2>
34000a94:	3c02      	subs	r4, #2
34000a96:	4472      	add	r2, lr
34000a98:	e735      	b.n	34000906 <__udivmoddi4+0x126>
34000a9a:	3902      	subs	r1, #2
34000a9c:	4472      	add	r2, lr
34000a9e:	e6d0      	b.n	34000842 <__udivmoddi4+0x62>
34000aa0:	44f4      	add	ip, lr
34000aa2:	3802      	subs	r0, #2
34000aa4:	e6e3      	b.n	3400086e <__udivmoddi4+0x8e>
34000aa6:	44f4      	add	ip, lr
34000aa8:	3802      	subs	r0, #2
34000aaa:	e742      	b.n	34000932 <__udivmoddi4+0x152>
34000aac:	3c02      	subs	r4, #2
34000aae:	4472      	add	r2, lr
34000ab0:	e7e7      	b.n	34000a82 <__udivmoddi4+0x2a2>
34000ab2:	3802      	subs	r0, #2
34000ab4:	4471      	add	r1, lr
34000ab6:	e7d0      	b.n	34000a5a <__udivmoddi4+0x27a>
34000ab8:	3b02      	subs	r3, #2
34000aba:	443c      	add	r4, r7
34000abc:	e782      	b.n	340009c4 <__udivmoddi4+0x1e4>
34000abe:	3802      	subs	r0, #2
34000ac0:	443c      	add	r4, r7
34000ac2:	e76a      	b.n	3400099a <__udivmoddi4+0x1ba>

34000ac4 <__aeabi_idiv0>:
34000ac4:	4770      	bx	lr
34000ac6:	bf00      	nop

34000ac8 <LL_AHB3_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
34000ac8:	b480      	push	{r7}
34000aca:	b085      	sub	sp, #20
34000acc:	af00      	add	r7, sp, #0
34000ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB3ENSR, Periphs);
34000ad0:	4a07      	ldr	r2, [pc, #28]	@ (34000af0 <LL_AHB3_GRP1_EnableClock+0x28>)
34000ad2:	687b      	ldr	r3, [r7, #4]
34000ad4:	f8c2 3a58 	str.w	r3, [r2, #2648]	@ 0xa58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB3ENR);
34000ad8:	4b05      	ldr	r3, [pc, #20]	@ (34000af0 <LL_AHB3_GRP1_EnableClock+0x28>)
34000ada:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
34000ade:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000ae0:	68fb      	ldr	r3, [r7, #12]
}
34000ae2:	bf00      	nop
34000ae4:	3714      	adds	r7, #20
34000ae6:	46bd      	mov	sp, r7
34000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
34000aec:	4770      	bx	lr
34000aee:	bf00      	nop
34000af0:	56028000 	.word	0x56028000

34000af4 <LL_AHB4_GRP1_EnableClock>:
  *         @arg @ref LL_AHB4_GRP1_PERIPH_PWR
  *         @arg @ref LL_AHB4_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
34000af4:	b480      	push	{r7}
34000af6:	b085      	sub	sp, #20
34000af8:	af00      	add	r7, sp, #0
34000afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34000afc:	4a07      	ldr	r2, [pc, #28]	@ (34000b1c <LL_AHB4_GRP1_EnableClock+0x28>)
34000afe:	687b      	ldr	r3, [r7, #4]
34000b00:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34000b04:	4b05      	ldr	r3, [pc, #20]	@ (34000b1c <LL_AHB4_GRP1_EnableClock+0x28>)
34000b06:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34000b0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000b0c:	68fb      	ldr	r3, [r7, #12]
}
34000b0e:	bf00      	nop
34000b10:	3714      	adds	r7, #20
34000b12:	46bd      	mov	sp, r7
34000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
34000b18:	4770      	bx	lr
34000b1a:	bf00      	nop
34000b1c:	56028000 	.word	0x56028000

34000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
34000b20:	b580      	push	{r7, lr}
34000b22:	b084      	sub	sp, #16
34000b24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Update SystemCoreClock variable according to RCC registers values. */
  SystemCoreClockUpdate();
34000b26:	f000 fb91 	bl	3400124c <SystemCoreClockUpdate>
  HAL_Init();
34000b2a:	f000 fd7c 	bl	34001626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Update SystemCoreClock variable */
  SystemCoreClockUpdate();
34000b2e:	f000 fb8d 	bl	3400124c <SystemCoreClockUpdate>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
34000b32:	f000 f8ef 	bl	34000d14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
34000b36:	f000 f855 	bl	34000be4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
34000b3a:	f000 f89f 	bl	34000c7c <MX_USART2_UART_Init>
  MX_ExpressLink_Init();
34000b3e:	f00a f8ab 	bl	3400ac98 <MX_ExpressLink_Init>
  SystemIsolation_Config();
34000b42:	f000 f821 	bl	34000b88 <SystemIsolation_Config>
  /* USER CODE BEGIN 2 */
  uint8_t buffer[] = {"Main App\r\n"};
34000b46:	4a0d      	ldr	r2, [pc, #52]	@ (34000b7c <main+0x5c>)
34000b48:	1d3b      	adds	r3, r7, #4
34000b4a:	ca07      	ldmia	r2, {r0, r1, r2}
34000b4c:	c303      	stmia	r3!, {r0, r1}
34000b4e:	801a      	strh	r2, [r3, #0]
34000b50:	3302      	adds	r3, #2
34000b52:	0c12      	lsrs	r2, r2, #16
34000b54:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, buffer, sizeof("Main App\r\n"), 0xFFFFFFFF);
34000b56:	1d39      	adds	r1, r7, #4
34000b58:	f04f 33ff 	mov.w	r3, #4294967295
34000b5c:	220b      	movs	r2, #11
34000b5e:	4808      	ldr	r0, [pc, #32]	@ (34000b80 <main+0x60>)
34000b60:	f009 fa20 	bl	34009fa4 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_ExpressLink_Process();
34000b64:	f00a f940 	bl	3400ade8 <MX_ExpressLink_Process>
    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
34000b68:	2102      	movs	r1, #2
34000b6a:	4806      	ldr	r0, [pc, #24]	@ (34000b84 <main+0x64>)
34000b6c:	f001 f89a 	bl	34001ca4 <HAL_GPIO_TogglePin>

	  HAL_Delay(200);
34000b70:	20c8      	movs	r0, #200	@ 0xc8
34000b72:	f000 fdc3 	bl	340016fc <HAL_Delay>
  MX_ExpressLink_Process();
34000b76:	bf00      	nop
34000b78:	e7f4      	b.n	34000b64 <main+0x44>
34000b7a:	bf00      	nop
34000b7c:	3400c894 	.word	0x3400c894
34000b80:	3400d43c 	.word	0x3400d43c
34000b84:	56023800 	.word	0x56023800

34000b88 <SystemIsolation_Config>:
  * @brief RIF Initialization Function
  * @param None
  * @retval None
  */
  static void SystemIsolation_Config(void)
{
34000b88:	b580      	push	{r7, lr}
34000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RIF_Init 0 */

  /* USER CODE END RIF_Init 0 */

  /* set all required IPs as secure privileged */
  __HAL_RCC_RIFSC_CLK_ENABLE();
34000b8c:	f44f 7000 	mov.w	r0, #512	@ 0x200
34000b90:	f7ff ff9a 	bl	34000ac8 <LL_AHB3_GRP1_EnableClock>

  /* RIF-Aware IPs Config */

  /* set up GPIO configuration */
  HAL_GPIO_ConfigPinAttributes(GPIOD,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34000b94:	f240 3201 	movw	r2, #769	@ 0x301
34000b98:	2120      	movs	r1, #32
34000b9a:	480e      	ldr	r0, [pc, #56]	@ (34000bd4 <SystemIsolation_Config+0x4c>)
34000b9c:	f001 f89c 	bl	34001cd8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_5,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34000ba0:	f240 3201 	movw	r2, #769	@ 0x301
34000ba4:	2120      	movs	r1, #32
34000ba6:	480c      	ldr	r0, [pc, #48]	@ (34000bd8 <SystemIsolation_Config+0x50>)
34000ba8:	f001 f896 	bl	34001cd8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34000bac:	f240 3201 	movw	r2, #769	@ 0x301
34000bb0:	2140      	movs	r1, #64	@ 0x40
34000bb2:	4809      	ldr	r0, [pc, #36]	@ (34000bd8 <SystemIsolation_Config+0x50>)
34000bb4:	f001 f890 	bl	34001cd8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOF,GPIO_PIN_6,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34000bb8:	f240 3201 	movw	r2, #769	@ 0x301
34000bbc:	2140      	movs	r1, #64	@ 0x40
34000bbe:	4807      	ldr	r0, [pc, #28]	@ (34000bdc <SystemIsolation_Config+0x54>)
34000bc0:	f001 f88a 	bl	34001cd8 <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOO,GPIO_PIN_1,GPIO_PIN_SEC|GPIO_PIN_NPRIV);
34000bc4:	f240 3201 	movw	r2, #769	@ 0x301
34000bc8:	2102      	movs	r1, #2
34000bca:	4805      	ldr	r0, [pc, #20]	@ (34000be0 <SystemIsolation_Config+0x58>)
34000bcc:	f001 f884 	bl	34001cd8 <HAL_GPIO_ConfigPinAttributes>
  /* USER CODE END RIF_Init 1 */
  /* USER CODE BEGIN RIF_Init 2 */

  /* USER CODE END RIF_Init 2 */

}
34000bd0:	bf00      	nop
34000bd2:	bd80      	pop	{r7, pc}
34000bd4:	56020c00 	.word	0x56020c00
34000bd8:	56021000 	.word	0x56021000
34000bdc:	56021400 	.word	0x56021400
34000be0:	56023800 	.word	0x56023800

34000be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
34000be4:	b580      	push	{r7, lr}
34000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
34000be8:	4b22      	ldr	r3, [pc, #136]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000bea:	4a23      	ldr	r2, [pc, #140]	@ (34000c78 <MX_USART1_UART_Init+0x94>)
34000bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
34000bee:	4b21      	ldr	r3, [pc, #132]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
34000bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
34000bf6:	4b1f      	ldr	r3, [pc, #124]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000bf8:	2200      	movs	r2, #0
34000bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
34000bfc:	4b1d      	ldr	r3, [pc, #116]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000bfe:	2200      	movs	r2, #0
34000c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
34000c02:	4b1c      	ldr	r3, [pc, #112]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c04:	2200      	movs	r2, #0
34000c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
34000c08:	4b1a      	ldr	r3, [pc, #104]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c0a:	220c      	movs	r2, #12
34000c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
34000c0e:	4b19      	ldr	r3, [pc, #100]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c10:	2200      	movs	r2, #0
34000c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
34000c14:	4b17      	ldr	r3, [pc, #92]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c16:	2200      	movs	r2, #0
34000c18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
34000c1a:	4b16      	ldr	r3, [pc, #88]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c1c:	2200      	movs	r2, #0
34000c1e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
34000c20:	4b14      	ldr	r3, [pc, #80]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c22:	2200      	movs	r2, #0
34000c24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
34000c26:	4b13      	ldr	r3, [pc, #76]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c28:	2200      	movs	r2, #0
34000c2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
34000c2c:	4811      	ldr	r0, [pc, #68]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c2e:	f009 f969 	bl	34009f04 <HAL_UART_Init>
34000c32:	4603      	mov	r3, r0
34000c34:	2b00      	cmp	r3, #0
34000c36:	d001      	beq.n	34000c3c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
34000c38:	f000 f89c 	bl	34000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
34000c3c:	2100      	movs	r1, #0
34000c3e:	480d      	ldr	r0, [pc, #52]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c40:	f009 ff4a 	bl	3400aad8 <HAL_UARTEx_SetTxFifoThreshold>
34000c44:	4603      	mov	r3, r0
34000c46:	2b00      	cmp	r3, #0
34000c48:	d001      	beq.n	34000c4e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
34000c4a:	f000 f893 	bl	34000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
34000c4e:	2100      	movs	r1, #0
34000c50:	4808      	ldr	r0, [pc, #32]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c52:	f009 ff7f 	bl	3400ab54 <HAL_UARTEx_SetRxFifoThreshold>
34000c56:	4603      	mov	r3, r0
34000c58:	2b00      	cmp	r3, #0
34000c5a:	d001      	beq.n	34000c60 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
34000c5c:	f000 f88a 	bl	34000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
34000c60:	4804      	ldr	r0, [pc, #16]	@ (34000c74 <MX_USART1_UART_Init+0x90>)
34000c62:	f009 ff00 	bl	3400aa66 <HAL_UARTEx_DisableFifoMode>
34000c66:	4603      	mov	r3, r0
34000c68:	2b00      	cmp	r3, #0
34000c6a:	d001      	beq.n	34000c70 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
34000c6c:	f000 f882 	bl	34000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
34000c70:	bf00      	nop
34000c72:	bd80      	pop	{r7, pc}
34000c74:	3400d43c 	.word	0x3400d43c
34000c78:	52001000 	.word	0x52001000

34000c7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
34000c7c:	b580      	push	{r7, lr}
34000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
34000c80:	4b22      	ldr	r3, [pc, #136]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000c82:	4a23      	ldr	r2, [pc, #140]	@ (34000d10 <MX_USART2_UART_Init+0x94>)
34000c84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
34000c86:	4b21      	ldr	r3, [pc, #132]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000c88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
34000c8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
34000c8e:	4b1f      	ldr	r3, [pc, #124]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000c90:	2200      	movs	r2, #0
34000c92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
34000c94:	4b1d      	ldr	r3, [pc, #116]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000c96:	2200      	movs	r2, #0
34000c98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
34000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000c9c:	2200      	movs	r2, #0
34000c9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
34000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000ca2:	220c      	movs	r2, #12
34000ca4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
34000ca6:	4b19      	ldr	r3, [pc, #100]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000ca8:	2200      	movs	r2, #0
34000caa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
34000cac:	4b17      	ldr	r3, [pc, #92]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000cae:	2200      	movs	r2, #0
34000cb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
34000cb2:	4b16      	ldr	r3, [pc, #88]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000cb4:	2200      	movs	r2, #0
34000cb6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
34000cb8:	4b14      	ldr	r3, [pc, #80]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000cba:	2200      	movs	r2, #0
34000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
34000cbe:	4b13      	ldr	r3, [pc, #76]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000cc0:	2200      	movs	r2, #0
34000cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
34000cc4:	4811      	ldr	r0, [pc, #68]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000cc6:	f009 f91d 	bl	34009f04 <HAL_UART_Init>
34000cca:	4603      	mov	r3, r0
34000ccc:	2b00      	cmp	r3, #0
34000cce:	d001      	beq.n	34000cd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
34000cd0:	f000 f850 	bl	34000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
34000cd4:	2100      	movs	r1, #0
34000cd6:	480d      	ldr	r0, [pc, #52]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000cd8:	f009 fefe 	bl	3400aad8 <HAL_UARTEx_SetTxFifoThreshold>
34000cdc:	4603      	mov	r3, r0
34000cde:	2b00      	cmp	r3, #0
34000ce0:	d001      	beq.n	34000ce6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
34000ce2:	f000 f847 	bl	34000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
34000ce6:	2100      	movs	r1, #0
34000ce8:	4808      	ldr	r0, [pc, #32]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000cea:	f009 ff33 	bl	3400ab54 <HAL_UARTEx_SetRxFifoThreshold>
34000cee:	4603      	mov	r3, r0
34000cf0:	2b00      	cmp	r3, #0
34000cf2:	d001      	beq.n	34000cf8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
34000cf4:	f000 f83e 	bl	34000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
34000cf8:	4804      	ldr	r0, [pc, #16]	@ (34000d0c <MX_USART2_UART_Init+0x90>)
34000cfa:	f009 feb4 	bl	3400aa66 <HAL_UARTEx_DisableFifoMode>
34000cfe:	4603      	mov	r3, r0
34000d00:	2b00      	cmp	r3, #0
34000d02:	d001      	beq.n	34000d08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
34000d04:	f000 f836 	bl	34000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
34000d08:	bf00      	nop
34000d0a:	bd80      	pop	{r7, pc}
34000d0c:	3400d4d0 	.word	0x3400d4d0
34000d10:	50004400 	.word	0x50004400

34000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
34000d14:	b580      	push	{r7, lr}
34000d16:	b086      	sub	sp, #24
34000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34000d1a:	1d3b      	adds	r3, r7, #4
34000d1c:	2200      	movs	r2, #0
34000d1e:	601a      	str	r2, [r3, #0]
34000d20:	605a      	str	r2, [r3, #4]
34000d22:	609a      	str	r2, [r3, #8]
34000d24:	60da      	str	r2, [r3, #12]
34000d26:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
34000d28:	2010      	movs	r0, #16
34000d2a:	f7ff fee3 	bl	34000af4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
34000d2e:	2008      	movs	r0, #8
34000d30:	f7ff fee0 	bl	34000af4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOO_CLK_ENABLE();
34000d34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
34000d38:	f7ff fedc 	bl	34000af4 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOF_CLK_ENABLE();
34000d3c:	2020      	movs	r0, #32
34000d3e:	f7ff fed9 	bl	34000af4 <LL_AHB4_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
34000d42:	2200      	movs	r2, #0
34000d44:	2102      	movs	r1, #2
34000d46:	480a      	ldr	r0, [pc, #40]	@ (34000d70 <MX_GPIO_Init+0x5c>)
34000d48:	f000 ff94 	bl	34001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
34000d4c:	2302      	movs	r3, #2
34000d4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
34000d50:	2301      	movs	r3, #1
34000d52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34000d54:	2300      	movs	r3, #0
34000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34000d58:	2300      	movs	r3, #0
34000d5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
34000d5c:	1d3b      	adds	r3, r7, #4
34000d5e:	4619      	mov	r1, r3
34000d60:	4803      	ldr	r0, [pc, #12]	@ (34000d70 <MX_GPIO_Init+0x5c>)
34000d62:	f000 fdd5 	bl	34001910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
34000d66:	bf00      	nop
34000d68:	3718      	adds	r7, #24
34000d6a:	46bd      	mov	sp, r7
34000d6c:	bd80      	pop	{r7, pc}
34000d6e:	bf00      	nop
34000d70:	56023800 	.word	0x56023800

34000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
34000d74:	b480      	push	{r7}
34000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
34000d78:	b672      	cpsid	i
}
34000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
34000d7c:	bf00      	nop
34000d7e:	e7fd      	b.n	34000d7c <Error_Handler+0x8>

34000d80 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
34000d80:	b2c0      	uxtb	r0, r0
34000d82:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34000d86:	b480      	push	{r7}
34000d88:	b082      	sub	sp, #8
34000d8a:	af00      	add	r7, sp, #0
34000d8c:	4603      	mov	r3, r0
34000d8e:	6039      	str	r1, [r7, #0]
34000d90:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
34000d92:	683b      	ldr	r3, [r7, #0]
34000d94:	2b00      	cmp	r3, #0
34000d96:	d00d      	beq.n	34000db4 <__acle_se_SECURE_RegisterCallback+0x34>
  {
    switch(CallbackId)
34000d98:	79fb      	ldrb	r3, [r7, #7]
34000d9a:	2b00      	cmp	r3, #0
34000d9c:	d002      	beq.n	34000da4 <__acle_se_SECURE_RegisterCallback+0x24>
34000d9e:	2b01      	cmp	r3, #1
34000da0:	d004      	beq.n	34000dac <__acle_se_SECURE_RegisterCallback+0x2c>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
34000da2:	e007      	b.n	34000db4 <__acle_se_SECURE_RegisterCallback+0x34>
        pSecureFaultCallback = func;
34000da4:	4a09      	ldr	r2, [pc, #36]	@ (34000dcc <__acle_se_SECURE_RegisterCallback+0x4c>)
34000da6:	683b      	ldr	r3, [r7, #0]
34000da8:	6013      	str	r3, [r2, #0]
        break;
34000daa:	e003      	b.n	34000db4 <__acle_se_SECURE_RegisterCallback+0x34>
        pSecureErrorCallback = func;
34000dac:	4a08      	ldr	r2, [pc, #32]	@ (34000dd0 <__acle_se_SECURE_RegisterCallback+0x50>)
34000dae:	683b      	ldr	r3, [r7, #0]
34000db0:	6013      	str	r3, [r2, #0]
        break;
34000db2:	bf00      	nop
    }
  }
}
34000db4:	bf00      	nop
34000db6:	3708      	adds	r7, #8
34000db8:	46bd      	mov	sp, r7
34000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
34000dbe:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
34000dc2:	e89f 900f 	clrm	{r0, r1, r2, r3, ip, APSR}
34000dc6:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
34000dca:	4774      	bxns	lr
34000dcc:	3400d564 	.word	0x3400d564
34000dd0:	3400d568 	.word	0x3400d568

34000dd4 <LL_AHB4_GRP1_EnableClock>:
{
34000dd4:	b480      	push	{r7}
34000dd6:	b085      	sub	sp, #20
34000dd8:	af00      	add	r7, sp, #0
34000dda:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34000ddc:	4a07      	ldr	r2, [pc, #28]	@ (34000dfc <LL_AHB4_GRP1_EnableClock+0x28>)
34000dde:	687b      	ldr	r3, [r7, #4]
34000de0:	f8c2 3a5c 	str.w	r3, [r2, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
34000de4:	4b05      	ldr	r3, [pc, #20]	@ (34000dfc <LL_AHB4_GRP1_EnableClock+0x28>)
34000de6:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34000dea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000dec:	68fb      	ldr	r3, [r7, #12]
}
34000dee:	bf00      	nop
34000df0:	3714      	adds	r7, #20
34000df2:	46bd      	mov	sp, r7
34000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
34000df8:	4770      	bx	lr
34000dfa:	bf00      	nop
34000dfc:	56028000 	.word	0x56028000

34000e00 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_UART8
  *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
34000e00:	b480      	push	{r7}
34000e02:	b085      	sub	sp, #20
34000e04:	af00      	add	r7, sp, #0
34000e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB1ENSR1, Periphs);
34000e08:	4a07      	ldr	r2, [pc, #28]	@ (34000e28 <LL_APB1_GRP1_EnableClock+0x28>)
34000e0a:	687b      	ldr	r3, [r7, #4]
34000e0c:	f8c2 3a64 	str.w	r3, [r2, #2660]	@ 0xa64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB1ENR1);
34000e10:	4b05      	ldr	r3, [pc, #20]	@ (34000e28 <LL_APB1_GRP1_EnableClock+0x28>)
34000e12:	f8d3 3264 	ldr.w	r3, [r3, #612]	@ 0x264
34000e16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000e18:	68fb      	ldr	r3, [r7, #12]
}
34000e1a:	bf00      	nop
34000e1c:	3714      	adds	r7, #20
34000e1e:	46bd      	mov	sp, r7
34000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e24:	4770      	bx	lr
34000e26:	bf00      	nop
34000e28:	56028000 	.word	0x56028000

34000e2c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_UART9
  *         @arg @ref LL_APB2_GRP1_PERIPH_USART10
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
34000e2c:	b480      	push	{r7}
34000e2e:	b085      	sub	sp, #20
34000e30:	af00      	add	r7, sp, #0
34000e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
34000e34:	4a07      	ldr	r2, [pc, #28]	@ (34000e54 <LL_APB2_GRP1_EnableClock+0x28>)
34000e36:	687b      	ldr	r3, [r7, #4]
34000e38:	f8c2 3a6c 	str.w	r3, [r2, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
34000e3c:	4b05      	ldr	r3, [pc, #20]	@ (34000e54 <LL_APB2_GRP1_EnableClock+0x28>)
34000e3e:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
34000e42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
34000e44:	68fb      	ldr	r3, [r7, #12]
}
34000e46:	bf00      	nop
34000e48:	3714      	adds	r7, #20
34000e4a:	46bd      	mov	sp, r7
34000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
34000e50:	4770      	bx	lr
34000e52:	bf00      	nop
34000e54:	56028000 	.word	0x56028000

34000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
34000e58:	b580      	push	{r7, lr}
34000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
34000e5c:	f000 ff84 	bl	34001d68 <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
34000e60:	f000 ff92 	bl	34001d88 <HAL_PWREx_EnableVddIO3>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
34000e64:	bf00      	nop
34000e66:	bd80      	pop	{r7, pc}

34000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
34000e68:	b580      	push	{r7, lr}
34000e6a:	b0ec      	sub	sp, #432	@ 0x1b0
34000e6c:	af00      	add	r7, sp, #0
34000e6e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34000e72:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34000e76:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34000e78:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34000e7c:	2200      	movs	r2, #0
34000e7e:	601a      	str	r2, [r3, #0]
34000e80:	605a      	str	r2, [r3, #4]
34000e82:	609a      	str	r2, [r3, #8]
34000e84:	60da      	str	r2, [r3, #12]
34000e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34000e88:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34000e8c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34000e90:	4618      	mov	r0, r3
34000e92:	f44f 73c8 	mov.w	r3, #400	@ 0x190
34000e96:	461a      	mov	r2, r3
34000e98:	2100      	movs	r1, #0
34000e9a:	f00a fd8d 	bl	3400b9b8 <memset>
  if(huart->Instance==USART1)
34000e9e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34000ea2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34000ea6:	681b      	ldr	r3, [r3, #0]
34000ea8:	681b      	ldr	r3, [r3, #0]
34000eaa:	4a4b      	ldr	r2, [pc, #300]	@ (34000fd8 <HAL_UART_MspInit+0x170>)
34000eac:	4293      	cmp	r3, r2
34000eae:	d136      	bne.n	34000f1e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
34000eb0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34000eb4:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34000eb8:	f04f 0200 	mov.w	r2, #0
34000ebc:	f44f 7380 	mov.w	r3, #256	@ 0x100
34000ec0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
34000ec4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34000ec8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34000ecc:	4a43      	ldr	r2, [pc, #268]	@ (34000fdc <HAL_UART_MspInit+0x174>)
34000ece:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34000ed2:	f107 0308 	add.w	r3, r7, #8
34000ed6:	4618      	mov	r0, r3
34000ed8:	f002 fb68 	bl	340035ac <HAL_RCCEx_PeriphCLKConfig>
34000edc:	4603      	mov	r3, r0
34000ede:	2b00      	cmp	r3, #0
34000ee0:	d001      	beq.n	34000ee6 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
34000ee2:	f7ff ff47 	bl	34000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
34000ee6:	2010      	movs	r0, #16
34000ee8:	f7ff ffa0 	bl	34000e2c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOE_CLK_ENABLE();
34000eec:	2010      	movs	r0, #16
34000eee:	f7ff ff71 	bl	34000dd4 <LL_AHB4_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PE5     ------> USART1_TX
    PE6     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
34000ef2:	2360      	movs	r3, #96	@ 0x60
34000ef4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34000ef8:	2302      	movs	r3, #2
34000efa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34000efe:	2300      	movs	r3, #0
34000f00:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34000f04:	2300      	movs	r3, #0
34000f06:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
34000f0a:	2307      	movs	r3, #7
34000f0c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
34000f10:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34000f14:	4619      	mov	r1, r3
34000f16:	4832      	ldr	r0, [pc, #200]	@ (34000fe0 <HAL_UART_MspInit+0x178>)
34000f18:	f000 fcfa 	bl	34001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
34000f1c:	e057      	b.n	34000fce <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
34000f1e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34000f22:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
34000f26:	681b      	ldr	r3, [r3, #0]
34000f28:	681b      	ldr	r3, [r3, #0]
34000f2a:	4a2e      	ldr	r2, [pc, #184]	@ (34000fe4 <HAL_UART_MspInit+0x17c>)
34000f2c:	4293      	cmp	r3, r2
34000f2e:	d14e      	bne.n	34000fce <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
34000f30:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34000f34:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
34000f38:	f04f 0200 	mov.w	r2, #0
34000f3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
34000f40:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
34000f44:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
34000f48:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
34000f4c:	4a26      	ldr	r2, [pc, #152]	@ (34000fe8 <HAL_UART_MspInit+0x180>)
34000f4e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
34000f52:	f107 0308 	add.w	r3, r7, #8
34000f56:	4618      	mov	r0, r3
34000f58:	f002 fb28 	bl	340035ac <HAL_RCCEx_PeriphCLKConfig>
34000f5c:	4603      	mov	r3, r0
34000f5e:	2b00      	cmp	r3, #0
34000f60:	d001      	beq.n	34000f66 <HAL_UART_MspInit+0xfe>
      Error_Handler();
34000f62:	f7ff ff07 	bl	34000d74 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
34000f66:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
34000f6a:	f7ff ff49 	bl	34000e00 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
34000f6e:	2008      	movs	r0, #8
34000f70:	f7ff ff30 	bl	34000dd4 <LL_AHB4_GRP1_EnableClock>
    __HAL_RCC_GPIOF_CLK_ENABLE();
34000f74:	2020      	movs	r0, #32
34000f76:	f7ff ff2d 	bl	34000dd4 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
34000f7a:	2320      	movs	r3, #32
34000f7c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34000f80:	2302      	movs	r3, #2
34000f82:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34000f86:	2300      	movs	r3, #0
34000f88:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34000f8c:	2300      	movs	r3, #0
34000f8e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
34000f92:	2307      	movs	r3, #7
34000f94:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
34000f98:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34000f9c:	4619      	mov	r1, r3
34000f9e:	4813      	ldr	r0, [pc, #76]	@ (34000fec <HAL_UART_MspInit+0x184>)
34000fa0:	f000 fcb6 	bl	34001910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
34000fa4:	2340      	movs	r3, #64	@ 0x40
34000fa6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
34000faa:	2302      	movs	r3, #2
34000fac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
34000fb0:	2300      	movs	r3, #0
34000fb2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34000fb6:	2300      	movs	r3, #0
34000fb8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
34000fbc:	2307      	movs	r3, #7
34000fbe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
34000fc2:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
34000fc6:	4619      	mov	r1, r3
34000fc8:	4809      	ldr	r0, [pc, #36]	@ (34000ff0 <HAL_UART_MspInit+0x188>)
34000fca:	f000 fca1 	bl	34001910 <HAL_GPIO_Init>
}
34000fce:	bf00      	nop
34000fd0:	f507 77d8 	add.w	r7, r7, #432	@ 0x1b0
34000fd4:	46bd      	mov	sp, r7
34000fd6:	bd80      	pop	{r7, pc}
34000fd8:	52001000 	.word	0x52001000
34000fdc:	07000030 	.word	0x07000030
34000fe0:	56021000 	.word	0x56021000
34000fe4:	50004400 	.word	0x50004400
34000fe8:	07000430 	.word	0x07000430
34000fec:	56020c00 	.word	0x56020c00
34000ff0:	56021400 	.word	0x56021400

34000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
34000ff4:	b480      	push	{r7}
34000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
34000ff8:	bf00      	nop
34000ffa:	e7fd      	b.n	34000ff8 <NMI_Handler+0x4>

34000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
34000ffc:	b480      	push	{r7}
34000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
34001000:	bf00      	nop
34001002:	e7fd      	b.n	34001000 <HardFault_Handler+0x4>

34001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
34001004:	b480      	push	{r7}
34001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
34001008:	bf00      	nop
3400100a:	e7fd      	b.n	34001008 <MemManage_Handler+0x4>

3400100c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
3400100c:	b480      	push	{r7}
3400100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
34001010:	bf00      	nop
34001012:	e7fd      	b.n	34001010 <BusFault_Handler+0x4>

34001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
34001014:	b480      	push	{r7}
34001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
34001018:	bf00      	nop
3400101a:	e7fd      	b.n	34001018 <UsageFault_Handler+0x4>

3400101c <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
3400101c:	b480      	push	{r7}
3400101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
34001020:	bf00      	nop
34001022:	e7fd      	b.n	34001020 <SecureFault_Handler+0x4>

34001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
34001024:	b480      	push	{r7}
34001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
34001028:	bf00      	nop
3400102a:	46bd      	mov	sp, r7
3400102c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001030:	4770      	bx	lr

34001032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
34001032:	b480      	push	{r7}
34001034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
34001036:	bf00      	nop
34001038:	46bd      	mov	sp, r7
3400103a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400103e:	4770      	bx	lr

34001040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
34001040:	b480      	push	{r7}
34001042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
34001044:	bf00      	nop
34001046:	46bd      	mov	sp, r7
34001048:	f85d 7b04 	ldr.w	r7, [sp], #4
3400104c:	4770      	bx	lr

3400104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
3400104e:	b580      	push	{r7, lr}
34001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
34001052:	f000 fb33 	bl	340016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
34001056:	bf00      	nop
34001058:	bd80      	pop	{r7, pc}

3400105a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
3400105a:	b580      	push	{r7, lr}
3400105c:	b086      	sub	sp, #24
3400105e:	af00      	add	r7, sp, #0
34001060:	60f8      	str	r0, [r7, #12]
34001062:	60b9      	str	r1, [r7, #8]
34001064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
34001066:	2300      	movs	r3, #0
34001068:	617b      	str	r3, [r7, #20]
3400106a:	e00a      	b.n	34001082 <_read+0x28>
  {
    *ptr++ = __io_getchar();
3400106c:	f3af 8000 	nop.w
34001070:	4601      	mov	r1, r0
34001072:	68bb      	ldr	r3, [r7, #8]
34001074:	1c5a      	adds	r2, r3, #1
34001076:	60ba      	str	r2, [r7, #8]
34001078:	b2ca      	uxtb	r2, r1
3400107a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
3400107c:	697b      	ldr	r3, [r7, #20]
3400107e:	3301      	adds	r3, #1
34001080:	617b      	str	r3, [r7, #20]
34001082:	697a      	ldr	r2, [r7, #20]
34001084:	687b      	ldr	r3, [r7, #4]
34001086:	429a      	cmp	r2, r3
34001088:	dbf0      	blt.n	3400106c <_read+0x12>
  }

  return len;
3400108a:	687b      	ldr	r3, [r7, #4]
}
3400108c:	4618      	mov	r0, r3
3400108e:	3718      	adds	r7, #24
34001090:	46bd      	mov	sp, r7
34001092:	bd80      	pop	{r7, pc}

34001094 <_close>:
  }
  return len;
}

int _close(int file)
{
34001094:	b480      	push	{r7}
34001096:	b083      	sub	sp, #12
34001098:	af00      	add	r7, sp, #0
3400109a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
3400109c:	f04f 33ff 	mov.w	r3, #4294967295
}
340010a0:	4618      	mov	r0, r3
340010a2:	370c      	adds	r7, #12
340010a4:	46bd      	mov	sp, r7
340010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
340010aa:	4770      	bx	lr

340010ac <_fstat>:


int _fstat(int file, struct stat *st)
{
340010ac:	b480      	push	{r7}
340010ae:	b083      	sub	sp, #12
340010b0:	af00      	add	r7, sp, #0
340010b2:	6078      	str	r0, [r7, #4]
340010b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
340010b6:	683b      	ldr	r3, [r7, #0]
340010b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340010bc:	605a      	str	r2, [r3, #4]
  return 0;
340010be:	2300      	movs	r3, #0
}
340010c0:	4618      	mov	r0, r3
340010c2:	370c      	adds	r7, #12
340010c4:	46bd      	mov	sp, r7
340010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
340010ca:	4770      	bx	lr

340010cc <_isatty>:

int _isatty(int file)
{
340010cc:	b480      	push	{r7}
340010ce:	b083      	sub	sp, #12
340010d0:	af00      	add	r7, sp, #0
340010d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
340010d4:	2301      	movs	r3, #1
}
340010d6:	4618      	mov	r0, r3
340010d8:	370c      	adds	r7, #12
340010da:	46bd      	mov	sp, r7
340010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
340010e0:	4770      	bx	lr

340010e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
340010e2:	b480      	push	{r7}
340010e4:	b085      	sub	sp, #20
340010e6:	af00      	add	r7, sp, #0
340010e8:	60f8      	str	r0, [r7, #12]
340010ea:	60b9      	str	r1, [r7, #8]
340010ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
340010ee:	2300      	movs	r3, #0
}
340010f0:	4618      	mov	r0, r3
340010f2:	3714      	adds	r7, #20
340010f4:	46bd      	mov	sp, r7
340010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
340010fa:	4770      	bx	lr

340010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
340010fc:	b580      	push	{r7, lr}
340010fe:	b086      	sub	sp, #24
34001100:	af00      	add	r7, sp, #0
34001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
34001104:	4a14      	ldr	r2, [pc, #80]	@ (34001158 <_sbrk+0x5c>)
34001106:	4b15      	ldr	r3, [pc, #84]	@ (3400115c <_sbrk+0x60>)
34001108:	1ad3      	subs	r3, r2, r3
3400110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
3400110c:	697b      	ldr	r3, [r7, #20]
3400110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
34001110:	4b13      	ldr	r3, [pc, #76]	@ (34001160 <_sbrk+0x64>)
34001112:	681b      	ldr	r3, [r3, #0]
34001114:	2b00      	cmp	r3, #0
34001116:	d102      	bne.n	3400111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
34001118:	4b11      	ldr	r3, [pc, #68]	@ (34001160 <_sbrk+0x64>)
3400111a:	4a12      	ldr	r2, [pc, #72]	@ (34001164 <_sbrk+0x68>)
3400111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
3400111e:	4b10      	ldr	r3, [pc, #64]	@ (34001160 <_sbrk+0x64>)
34001120:	681a      	ldr	r2, [r3, #0]
34001122:	687b      	ldr	r3, [r7, #4]
34001124:	4413      	add	r3, r2
34001126:	693a      	ldr	r2, [r7, #16]
34001128:	429a      	cmp	r2, r3
3400112a:	d207      	bcs.n	3400113c <_sbrk+0x40>
  {
    errno = ENOMEM;
3400112c:	f00a fca8 	bl	3400ba80 <__errno>
34001130:	4603      	mov	r3, r0
34001132:	220c      	movs	r2, #12
34001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
34001136:	f04f 33ff 	mov.w	r3, #4294967295
3400113a:	e009      	b.n	34001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
3400113c:	4b08      	ldr	r3, [pc, #32]	@ (34001160 <_sbrk+0x64>)
3400113e:	681b      	ldr	r3, [r3, #0]
34001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
34001142:	4b07      	ldr	r3, [pc, #28]	@ (34001160 <_sbrk+0x64>)
34001144:	681a      	ldr	r2, [r3, #0]
34001146:	687b      	ldr	r3, [r7, #4]
34001148:	4413      	add	r3, r2
3400114a:	4a05      	ldr	r2, [pc, #20]	@ (34001160 <_sbrk+0x64>)
3400114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
3400114e:	68fb      	ldr	r3, [r7, #12]
}
34001150:	4618      	mov	r0, r3
34001152:	3718      	adds	r7, #24
34001154:	46bd      	mov	sp, r7
34001156:	bd80      	pop	{r7, pc}
34001158:	34200000 	.word	0x34200000
3400115c:	00000800 	.word	0x00000800
34001160:	3400d56c 	.word	0x3400d56c
34001164:	3400d7d0 	.word	0x3400d7d0

34001168 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
34001168:	b480      	push	{r7}
3400116a:	af00      	add	r7, sp, #0
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
3400116c:	4b18      	ldr	r3, [pc, #96]	@ (340011d0 <TZ_SAU_Setup+0x68>)
3400116e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34001172:	4a17      	ldr	r2, [pc, #92]	@ (340011d0 <TZ_SAU_Setup+0x68>)
34001174:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
34001178:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
3400117c:	4b15      	ldr	r3, [pc, #84]	@ (340011d4 <TZ_SAU_Setup+0x6c>)
3400117e:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
34001180:	f023 53e0 	bic.w	r3, r3, #469762048	@ 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
34001184:	4a13      	ldr	r2, [pc, #76]	@ (340011d4 <TZ_SAU_Setup+0x6c>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
34001186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
3400118a:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
3400118c:	4b12      	ldr	r3, [pc, #72]	@ (340011d8 <TZ_SAU_Setup+0x70>)
3400118e:	2200      	movs	r2, #0
34001190:	f8c3 2280 	str.w	r2, [r3, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
34001194:	4b10      	ldr	r3, [pc, #64]	@ (340011d8 <TZ_SAU_Setup+0x70>)
34001196:	2200      	movs	r2, #0
34001198:	f8c3 2284 	str.w	r2, [r3, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
3400119c:	4b0e      	ldr	r3, [pc, #56]	@ (340011d8 <TZ_SAU_Setup+0x70>)
3400119e:	2200      	movs	r2, #0
340011a0:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
340011a4:	4b0c      	ldr	r3, [pc, #48]	@ (340011d8 <TZ_SAU_Setup+0x70>)
340011a6:	2200      	movs	r2, #0
340011a8:	f8c3 228c 	str.w	r2, [r3, #652]	@ 0x28c
  #endif

  #if defined (NVIC_INIT_ITNS4) && (NVIC_INIT_ITNS4 == 1U)
    NVIC->ITNS[4] = NVIC_INIT_ITNS4_VAL;
340011ac:	4b0a      	ldr	r3, [pc, #40]	@ (340011d8 <TZ_SAU_Setup+0x70>)
340011ae:	2200      	movs	r2, #0
340011b0:	f8c3 2290 	str.w	r2, [r3, #656]	@ 0x290
  #endif

  #if defined (NVIC_INIT_ITNS5) && (NVIC_INIT_ITNS5 == 1U)
    NVIC->ITNS[5] = NVIC_INIT_ITNS5_VAL;
340011b4:	4b08      	ldr	r3, [pc, #32]	@ (340011d8 <TZ_SAU_Setup+0x70>)
340011b6:	2200      	movs	r2, #0
340011b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  #endif

  #if defined (NVIC_INIT_ITNS6) && (NVIC_INIT_ITNS6 == 1U)
    NVIC->ITNS[6] = NVIC_INIT_ITNS6_VAL;
340011bc:	4b06      	ldr	r3, [pc, #24]	@ (340011d8 <TZ_SAU_Setup+0x70>)
340011be:	2200      	movs	r2, #0
340011c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298
  #endif

}
340011c4:	bf00      	nop
340011c6:	46bd      	mov	sp, r7
340011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
340011cc:	4770      	bx	lr
340011ce:	bf00      	nop
340011d0:	e000ed00 	.word	0xe000ed00
340011d4:	e000ef30 	.word	0xe000ef30
340011d8:	e000e100 	.word	0xe000e100

340011dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
340011dc:	b580      	push	{r7, lr}
340011de:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
340011e0:	f7ff ffc2 	bl	34001168 <TZ_SAU_Setup>

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
340011e4:	4b14      	ldr	r3, [pc, #80]	@ (34001238 <SystemInit+0x5c>)
340011e6:	4a15      	ldr	r2, [pc, #84]	@ (3400123c <SystemInit+0x60>)
340011e8:	609a      	str	r2, [r3, #8]
#endif  /* USER_VECT_TAB_ADDRESS */

  /* System configuration setup */
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
340011ea:	4b15      	ldr	r3, [pc, #84]	@ (34001240 <SystemInit+0x64>)
340011ec:	2201      	movs	r2, #1
340011ee:	f8c3 2a78 	str.w	r2, [r3, #2680]	@ 0xa78
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;
340011f2:	4b13      	ldr	r3, [pc, #76]	@ (34001240 <SystemInit+0x64>)
340011f4:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
340011f8:	4b0f      	ldr	r3, [pc, #60]	@ (34001238 <SystemInit+0x5c>)
340011fa:	4a12      	ldr	r2, [pc, #72]	@ (34001244 <SystemInit+0x68>)
340011fc:	689b      	ldr	r3, [r3, #8]
340011fe:	6113      	str	r3, [r2, #16]
  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
34001200:	4b10      	ldr	r3, [pc, #64]	@ (34001244 <SystemInit+0x68>)
34001202:	691b      	ldr	r3, [r3, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34001204:	4b0e      	ldr	r3, [pc, #56]	@ (34001240 <SystemInit+0x64>)
34001206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
3400120a:	461a      	mov	r2, r3
3400120c:	2301      	movs	r3, #1
3400120e:	f8c2 3278 	str.w	r3, [r2, #632]	@ 0x278
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34001212:	4b09      	ldr	r3, [pc, #36]	@ (34001238 <SystemInit+0x5c>)
34001214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34001218:	4a07      	ldr	r2, [pc, #28]	@ (34001238 <SystemInit+0x5c>)
3400121a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3400121e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34001222:	4b09      	ldr	r3, [pc, #36]	@ (34001248 <SystemInit+0x6c>)
34001224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34001228:	4a07      	ldr	r2, [pc, #28]	@ (34001248 <SystemInit+0x6c>)
3400122a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
3400122e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34001232:	bf00      	nop
34001234:	bd80      	pop	{r7, pc}
34001236:	bf00      	nop
34001238:	e000ed00 	.word	0xe000ed00
3400123c:	34000400 	.word	0x34000400
34001240:	56028000 	.word	0x56028000
34001244:	56008000 	.word	0x56008000
34001248:	e002ed00 	.word	0xe002ed00

3400124c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
3400124c:	b480      	push	{r7}
3400124e:	b08d      	sub	sp, #52	@ 0x34
34001250:	af00      	add	r7, sp, #0
  uint32_t sysclk = 0;
34001252:	2300      	movs	r3, #0
34001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllm = 0;
34001256:	2300      	movs	r3, #0
34001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t plln = 0;
3400125a:	2300      	movs	r3, #0
3400125c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllfracn = 0;
3400125e:	2300      	movs	r3, #0
34001260:	623b      	str	r3, [r7, #32]
  uint32_t pllp1 = 0;
34001262:	2300      	movs	r3, #0
34001264:	61fb      	str	r3, [r7, #28]
  uint32_t pllp2 = 0;
34001266:	2300      	movs	r3, #0
34001268:	61bb      	str	r3, [r7, #24]
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
3400126a:	4b9b      	ldr	r3, [pc, #620]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
3400126c:	6a1b      	ldr	r3, [r3, #32]
3400126e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34001272:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
34001276:	d029      	beq.n	340012cc <SystemCoreClockUpdate+0x80>
34001278:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
3400127c:	f200 8180 	bhi.w	34001580 <SystemCoreClockUpdate+0x334>
34001280:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34001284:	d01f      	beq.n	340012c6 <SystemCoreClockUpdate+0x7a>
34001286:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
3400128a:	f200 8179 	bhi.w	34001580 <SystemCoreClockUpdate+0x334>
3400128e:	2b00      	cmp	r3, #0
34001290:	d003      	beq.n	3400129a <SystemCoreClockUpdate+0x4e>
34001292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34001296:	d00a      	beq.n	340012ae <SystemCoreClockUpdate+0x62>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
    sysclk = sysclk / ic_divider;
    break;
  default:
    /* Nothing to do, should not occur */
    break;
34001298:	e172      	b.n	34001580 <SystemCoreClockUpdate+0x334>
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
3400129a:	4b8f      	ldr	r3, [pc, #572]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
3400129c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3400129e:	09db      	lsrs	r3, r3, #7
340012a0:	f003 0303 	and.w	r3, r3, #3
340012a4:	4a8d      	ldr	r2, [pc, #564]	@ (340014dc <SystemCoreClockUpdate+0x290>)
340012a6:	fa22 f303 	lsr.w	r3, r2, r3
340012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340012ac:	e169      	b.n	34001582 <SystemCoreClockUpdate+0x336>
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340012ae:	4b8a      	ldr	r3, [pc, #552]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
340012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340012b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340012b6:	2b00      	cmp	r3, #0
340012b8:	d102      	bne.n	340012c0 <SystemCoreClockUpdate+0x74>
      sysclk = MSI_VALUE;
340012ba:	4b89      	ldr	r3, [pc, #548]	@ (340014e0 <SystemCoreClockUpdate+0x294>)
340012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340012be:	e160      	b.n	34001582 <SystemCoreClockUpdate+0x336>
      sysclk = 16000000UL;
340012c0:	4b88      	ldr	r3, [pc, #544]	@ (340014e4 <SystemCoreClockUpdate+0x298>)
340012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340012c4:	e15d      	b.n	34001582 <SystemCoreClockUpdate+0x336>
    sysclk = HSE_VALUE;
340012c6:	4b88      	ldr	r3, [pc, #544]	@ (340014e8 <SystemCoreClockUpdate+0x29c>)
340012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
340012ca:	e15a      	b.n	34001582 <SystemCoreClockUpdate+0x336>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
340012cc:	4b82      	ldr	r3, [pc, #520]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
340012ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
340012d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
340012d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340012da:	d066      	beq.n	340013aa <SystemCoreClockUpdate+0x15e>
340012dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340012e0:	f200 8091 	bhi.w	34001406 <SystemCoreClockUpdate+0x1ba>
340012e4:	2b00      	cmp	r3, #0
340012e6:	d003      	beq.n	340012f0 <SystemCoreClockUpdate+0xa4>
340012e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340012ec:	d02f      	beq.n	3400134e <SystemCoreClockUpdate+0x102>
340012ee:	e08a      	b.n	34001406 <SystemCoreClockUpdate+0x1ba>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
340012f0:	4b79      	ldr	r3, [pc, #484]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
340012f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340012f6:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
340012f8:	68fb      	ldr	r3, [r7, #12]
340012fa:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
340012fe:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL1CFGR1_PLL1BYP;
34001300:	68fb      	ldr	r3, [r7, #12]
34001302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34001306:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34001308:	693b      	ldr	r3, [r7, #16]
3400130a:	2b00      	cmp	r3, #0
3400130c:	f040 80a9 	bne.w	34001462 <SystemCoreClockUpdate+0x216>
        pllm = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVM) >>  RCC_PLL1CFGR1_PLL1DIVM_Pos;
34001310:	68fb      	ldr	r3, [r7, #12]
34001312:	0d1b      	lsrs	r3, r3, #20
34001314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34001318:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3400131a:	68fb      	ldr	r3, [r7, #12]
3400131c:	0a1b      	lsrs	r3, r3, #8
3400131e:	f3c3 030b 	ubfx	r3, r3, #0, #12
34001322:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34001324:	4b6c      	ldr	r3, [pc, #432]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
34001326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400132a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400132e:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
34001330:	4b69      	ldr	r3, [pc, #420]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
34001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34001336:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV1) >>  RCC_PLL1CFGR3_PLL1PDIV1_Pos;
34001338:	68fb      	ldr	r3, [r7, #12]
3400133a:	0edb      	lsrs	r3, r3, #27
3400133c:	f003 0307 	and.w	r3, r3, #7
34001340:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL1CFGR3_PLL1PDIV2) >>  RCC_PLL1CFGR3_PLL1PDIV2_Pos;
34001342:	68fb      	ldr	r3, [r7, #12]
34001344:	0e1b      	lsrs	r3, r3, #24
34001346:	f003 0307 	and.w	r3, r3, #7
3400134a:	61bb      	str	r3, [r7, #24]
      break;
3400134c:	e089      	b.n	34001462 <SystemCoreClockUpdate+0x216>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
3400134e:	4b62      	ldr	r3, [pc, #392]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
34001350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34001354:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
34001356:	68fb      	ldr	r3, [r7, #12]
34001358:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
3400135c:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL2CFGR1_PLL2BYP;
3400135e:	68fb      	ldr	r3, [r7, #12]
34001360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34001364:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
34001366:	693b      	ldr	r3, [r7, #16]
34001368:	2b00      	cmp	r3, #0
3400136a:	d17c      	bne.n	34001466 <SystemCoreClockUpdate+0x21a>
        pllm = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVM) >>  RCC_PLL2CFGR1_PLL2DIVM_Pos;
3400136c:	68fb      	ldr	r3, [r7, #12]
3400136e:	0d1b      	lsrs	r3, r3, #20
34001370:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
34001374:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34001376:	68fb      	ldr	r3, [r7, #12]
34001378:	0a1b      	lsrs	r3, r3, #8
3400137a:	f3c3 030b 	ubfx	r3, r3, #0, #12
3400137e:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34001380:	4b55      	ldr	r3, [pc, #340]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
34001382:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34001386:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
3400138a:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
3400138c:	4b52      	ldr	r3, [pc, #328]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
3400138e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34001392:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34001394:	68fb      	ldr	r3, [r7, #12]
34001396:	0edb      	lsrs	r3, r3, #27
34001398:	f003 0307 	and.w	r3, r3, #7
3400139c:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV2) >>  RCC_PLL2CFGR3_PLL2PDIV2_Pos;
3400139e:	68fb      	ldr	r3, [r7, #12]
340013a0:	0e1b      	lsrs	r3, r3, #24
340013a2:	f003 0307 	and.w	r3, r3, #7
340013a6:	61bb      	str	r3, [r7, #24]
      break;
340013a8:	e05d      	b.n	34001466 <SystemCoreClockUpdate+0x21a>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
340013aa:	4b4b      	ldr	r3, [pc, #300]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
340013ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
340013b0:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
340013b2:	68fb      	ldr	r3, [r7, #12]
340013b4:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
340013b8:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL3CFGR1_PLL3BYP;
340013ba:	68fb      	ldr	r3, [r7, #12]
340013bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340013c0:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
340013c2:	693b      	ldr	r3, [r7, #16]
340013c4:	2b00      	cmp	r3, #0
340013c6:	d150      	bne.n	3400146a <SystemCoreClockUpdate+0x21e>
        pllm = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVM) >>  RCC_PLL3CFGR1_PLL3DIVM_Pos;
340013c8:	68fb      	ldr	r3, [r7, #12]
340013ca:	0d1b      	lsrs	r3, r3, #20
340013cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
340013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
340013d2:	68fb      	ldr	r3, [r7, #12]
340013d4:	0a1b      	lsrs	r3, r3, #8
340013d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
340013da:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
340013dc:	4b3e      	ldr	r3, [pc, #248]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
340013de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
340013e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
340013e6:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
340013e8:	4b3b      	ldr	r3, [pc, #236]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
340013ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
340013ee:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
340013f0:	68fb      	ldr	r3, [r7, #12]
340013f2:	0edb      	lsrs	r3, r3, #27
340013f4:	f003 0307 	and.w	r3, r3, #7
340013f8:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV2) >>  RCC_PLL3CFGR3_PLL3PDIV2_Pos;
340013fa:	68fb      	ldr	r3, [r7, #12]
340013fc:	0e1b      	lsrs	r3, r3, #24
340013fe:	f003 0307 	and.w	r3, r3, #7
34001402:	61bb      	str	r3, [r7, #24]
      break;
34001404:	e031      	b.n	3400146a <SystemCoreClockUpdate+0x21e>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34001406:	4b34      	ldr	r3, [pc, #208]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
34001408:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400140c:	60fb      	str	r3, [r7, #12]
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
3400140e:	68fb      	ldr	r3, [r7, #12]
34001410:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
34001414:	617b      	str	r3, [r7, #20]
      pllbypass = pllcfgr & RCC_PLL4CFGR1_PLL4BYP;
34001416:	68fb      	ldr	r3, [r7, #12]
34001418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
3400141c:	613b      	str	r3, [r7, #16]
      if (pllbypass == 0U)
3400141e:	693b      	ldr	r3, [r7, #16]
34001420:	2b00      	cmp	r3, #0
34001422:	d124      	bne.n	3400146e <SystemCoreClockUpdate+0x222>
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34001424:	68fb      	ldr	r3, [r7, #12]
34001426:	0d1b      	lsrs	r3, r3, #20
34001428:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
3400142c:	62bb      	str	r3, [r7, #40]	@ 0x28
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
3400142e:	68fb      	ldr	r3, [r7, #12]
34001430:	0a1b      	lsrs	r3, r3, #8
34001432:	f3c3 030b 	ubfx	r3, r3, #0, #12
34001436:	627b      	str	r3, [r7, #36]	@ 0x24
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
34001438:	4b27      	ldr	r3, [pc, #156]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
3400143a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
3400143e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34001442:	623b      	str	r3, [r7, #32]
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
34001444:	4b24      	ldr	r3, [pc, #144]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
34001446:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400144a:	60fb      	str	r3, [r7, #12]
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
3400144c:	68fb      	ldr	r3, [r7, #12]
3400144e:	0edb      	lsrs	r3, r3, #27
34001450:	f003 0307 	and.w	r3, r3, #7
34001454:	61fb      	str	r3, [r7, #28]
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34001456:	68fb      	ldr	r3, [r7, #12]
34001458:	0e1b      	lsrs	r3, r3, #24
3400145a:	f003 0307 	and.w	r3, r3, #7
3400145e:	61bb      	str	r3, [r7, #24]
      break;
34001460:	e005      	b.n	3400146e <SystemCoreClockUpdate+0x222>
      break;
34001462:	bf00      	nop
34001464:	e004      	b.n	34001470 <SystemCoreClockUpdate+0x224>
      break;
34001466:	bf00      	nop
34001468:	e002      	b.n	34001470 <SystemCoreClockUpdate+0x224>
      break;
3400146a:	bf00      	nop
3400146c:	e000      	b.n	34001470 <SystemCoreClockUpdate+0x224>
      break;
3400146e:	bf00      	nop
34001470:	697b      	ldr	r3, [r7, #20]
34001472:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34001476:	d02c      	beq.n	340014d2 <SystemCoreClockUpdate+0x286>
34001478:	697b      	ldr	r3, [r7, #20]
3400147a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400147e:	d839      	bhi.n	340014f4 <SystemCoreClockUpdate+0x2a8>
34001480:	697b      	ldr	r3, [r7, #20]
34001482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34001486:	d021      	beq.n	340014cc <SystemCoreClockUpdate+0x280>
34001488:	697b      	ldr	r3, [r7, #20]
3400148a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400148e:	d831      	bhi.n	340014f4 <SystemCoreClockUpdate+0x2a8>
34001490:	697b      	ldr	r3, [r7, #20]
34001492:	2b00      	cmp	r3, #0
34001494:	d004      	beq.n	340014a0 <SystemCoreClockUpdate+0x254>
34001496:	697b      	ldr	r3, [r7, #20]
34001498:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400149c:	d00a      	beq.n	340014b4 <SystemCoreClockUpdate+0x268>
      break;
3400149e:	e029      	b.n	340014f4 <SystemCoreClockUpdate+0x2a8>
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
340014a0:	4b0d      	ldr	r3, [pc, #52]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
340014a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
340014a4:	09db      	lsrs	r3, r3, #7
340014a6:	f003 0303 	and.w	r3, r3, #3
340014aa:	4a0c      	ldr	r2, [pc, #48]	@ (340014dc <SystemCoreClockUpdate+0x290>)
340014ac:	fa22 f303 	lsr.w	r3, r2, r3
340014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340014b2:	e020      	b.n	340014f6 <SystemCoreClockUpdate+0x2aa>
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
340014b4:	4b08      	ldr	r3, [pc, #32]	@ (340014d8 <SystemCoreClockUpdate+0x28c>)
340014b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
340014b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
340014bc:	2b00      	cmp	r3, #0
340014be:	d102      	bne.n	340014c6 <SystemCoreClockUpdate+0x27a>
        sysclk = MSI_VALUE;
340014c0:	4b07      	ldr	r3, [pc, #28]	@ (340014e0 <SystemCoreClockUpdate+0x294>)
340014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340014c4:	e017      	b.n	340014f6 <SystemCoreClockUpdate+0x2aa>
        sysclk = 16000000UL;
340014c6:	4b07      	ldr	r3, [pc, #28]	@ (340014e4 <SystemCoreClockUpdate+0x298>)
340014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340014ca:	e014      	b.n	340014f6 <SystemCoreClockUpdate+0x2aa>
      sysclk = HSE_VALUE;
340014cc:	4b06      	ldr	r3, [pc, #24]	@ (340014e8 <SystemCoreClockUpdate+0x29c>)
340014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340014d0:	e011      	b.n	340014f6 <SystemCoreClockUpdate+0x2aa>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
340014d2:	4b06      	ldr	r3, [pc, #24]	@ (340014ec <SystemCoreClockUpdate+0x2a0>)
340014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
340014d6:	e00e      	b.n	340014f6 <SystemCoreClockUpdate+0x2aa>
340014d8:	56028000 	.word	0x56028000
340014dc:	03d09000 	.word	0x03d09000
340014e0:	003d0900 	.word	0x003d0900
340014e4:	00f42400 	.word	0x00f42400
340014e8:	02dc6c00 	.word	0x02dc6c00
340014ec:	00bb8000 	.word	0x00bb8000
340014f0:	4b800000 	.word	0x4b800000
      break;
340014f4:	bf00      	nop
    if (pllbypass == 0U)
340014f6:	693b      	ldr	r3, [r7, #16]
340014f8:	2b00      	cmp	r3, #0
340014fa:	d134      	bne.n	34001566 <SystemCoreClockUpdate+0x31a>
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
340014fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
340014fe:	ee07 3a90 	vmov	s15, r3
34001502:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34001506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
34001508:	ee07 3a90 	vmov	s15, r3
3400150c:	eef8 6a67 	vcvt.f32.u32	s13, s15
34001510:	6a3b      	ldr	r3, [r7, #32]
34001512:	ee07 3a90 	vmov	s15, r3
34001516:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3400151a:	ed5f 5a0b 	vldr	s11, [pc, #-44]	@ 340014f0 <SystemCoreClockUpdate+0x2a4>
3400151e:	eec6 7a25 	vdiv.f32	s15, s12, s11
34001522:	ee76 7aa7 	vadd.f32	s15, s13, s15
34001526:	ee67 6a27 	vmul.f32	s13, s14, s15
3400152a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400152c:	ee07 3a90 	vmov	s15, r3
34001530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34001534:	eec6 7a87 	vdiv.f32	s15, s13, s14
34001538:	edc7 7a02 	vstr	s15, [r7, #8]
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3400153c:	69fb      	ldr	r3, [r7, #28]
3400153e:	ee07 3a90 	vmov	s15, r3
34001542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34001546:	69bb      	ldr	r3, [r7, #24]
34001548:	ee07 3a90 	vmov	s15, r3
3400154c:	eef8 7a67 	vcvt.f32.u32	s15, s15
34001550:	ee27 7a27 	vmul.f32	s14, s14, s15
34001554:	edd7 6a02 	vldr	s13, [r7, #8]
34001558:	eec6 7a87 	vdiv.f32	s15, s13, s14
3400155c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34001560:	ee17 3a90 	vmov	r3, s15
34001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
34001566:	4b0b      	ldr	r3, [pc, #44]	@ (34001594 <SystemCoreClockUpdate+0x348>)
34001568:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
3400156c:	0c1b      	lsrs	r3, r3, #16
3400156e:	b2db      	uxtb	r3, r3
34001570:	3301      	adds	r3, #1
34001572:	607b      	str	r3, [r7, #4]
    sysclk = sysclk / ic_divider;
34001574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
34001576:	687b      	ldr	r3, [r7, #4]
34001578:	fbb2 f3f3 	udiv	r3, r2, r3
3400157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    break;
3400157e:	e000      	b.n	34001582 <SystemCoreClockUpdate+0x336>
    break;
34001580:	bf00      	nop
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
34001582:	4a05      	ldr	r2, [pc, #20]	@ (34001598 <SystemCoreClockUpdate+0x34c>)
34001584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
34001586:	6013      	str	r3, [r2, #0]
}
34001588:	bf00      	nop
3400158a:	3734      	adds	r7, #52	@ 0x34
3400158c:	46bd      	mov	sp, r7
3400158e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001592:	4770      	bx	lr
34001594:	56028000 	.word	0x56028000
34001598:	3400d38c 	.word	0x3400d38c

3400159c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
3400159c:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
340015a0:	b588      	push	{r3, r7, lr}
340015a2:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
340015a4:	f7ff fe52 	bl	3400124c <SystemCoreClockUpdate>

  return SystemCoreClock;
340015a8:	4b06      	ldr	r3, [pc, #24]	@ (340015c4 <__acle_se_SECURE_SystemCoreClockUpdate+0x28>)
340015aa:	681b      	ldr	r3, [r3, #0]
}
340015ac:	4618      	mov	r0, r3
340015ae:	46bd      	mov	sp, r7
340015b0:	e8bd 4088 	ldmia.w	sp!, {r3, r7, lr}
340015b4:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
340015b8:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
340015bc:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
340015c0:	4774      	bxns	lr
340015c2:	bf00      	nop
340015c4:	3400d38c 	.word	0x3400d38c

340015c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
340015c8:	480f      	ldr	r0, [pc, #60]	@ (34001608 <LoopForever+0x4>)
  msr   MSPLIM, r0
340015ca:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
340015ce:	480f      	ldr	r0, [pc, #60]	@ (3400160c <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
340015d0:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
340015d2:	f7ff fe03 	bl	340011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
340015d6:	480e      	ldr	r0, [pc, #56]	@ (34001610 <LoopForever+0xc>)
  ldr r1, =_edata
340015d8:	490e      	ldr	r1, [pc, #56]	@ (34001614 <LoopForever+0x10>)
  ldr r2, =_sidata
340015da:	4a0f      	ldr	r2, [pc, #60]	@ (34001618 <LoopForever+0x14>)
  movs r3, #0
340015dc:	2300      	movs	r3, #0
  b LoopCopyDataInit
340015de:	e002      	b.n	340015e6 <LoopCopyDataInit>

340015e0 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
340015e0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
340015e2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
340015e4:	3304      	adds	r3, #4

340015e6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
340015e6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
340015e8:	428c      	cmp	r4, r1
  bcc CopyDataInit
340015ea:	d3f9      	bcc.n	340015e0 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
340015ec:	4a0b      	ldr	r2, [pc, #44]	@ (3400161c <LoopForever+0x18>)
  ldr r4, =_ebss
340015ee:	4c0c      	ldr	r4, [pc, #48]	@ (34001620 <LoopForever+0x1c>)
  movs r3, #0
340015f0:	2300      	movs	r3, #0
  b LoopFillZerobss
340015f2:	e001      	b.n	340015f8 <LoopFillZerobss>

340015f4 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
340015f4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
340015f6:	3204      	adds	r2, #4

340015f8 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
340015f8:	42a2      	cmp	r2, r4
  bcc FillZerobss
340015fa:	d3fb      	bcc.n	340015f4 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
340015fc:	f00a fa46 	bl	3400ba8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
34001600:	f7ff fa8e 	bl	34000b20 <main>

34001604 <LoopForever>:

LoopForever:
  b LoopForever
34001604:	e7fe      	b.n	34001604 <LoopForever>
34001606:	0000      	.short	0x0000
  ldr   r0, =_sstack
34001608:	341ff800 	.word	0x341ff800
  ldr   r0, =_estack
3400160c:	34200000 	.word	0x34200000
  ldr r0, =_sdata
34001610:	3400d38c 	.word	0x3400d38c
  ldr r1, =_edata
34001614:	3400d3f8 	.word	0x3400d3f8
  ldr r2, =_sidata
34001618:	3400d38c 	.word	0x3400d38c
  ldr r2, =_sbss
3400161c:	3400d420 	.word	0x3400d420
  ldr r4, =_ebss
34001620:	3400d7d0 	.word	0x3400d7d0

34001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
34001624:	e7fe      	b.n	34001624 <ADC1_2_IRQHandler>

34001626 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
34001626:	b580      	push	{r7, lr}
34001628:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
3400162a:	2003      	movs	r0, #3
3400162c:	f000 f93c 	bl	340018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Ensure time base clock coherency in SystemCoreClock global variable */
  SystemCoreClockUpdate();
34001630:	f7ff fe0c 	bl	3400124c <SystemCoreClockUpdate>

  /* Initialize 1ms tick time base (default SysTick based on HSI clock after Reset) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34001634:	200f      	movs	r0, #15
34001636:	f000 f80b 	bl	34001650 <HAL_InitTick>
3400163a:	4603      	mov	r3, r0
3400163c:	2b00      	cmp	r3, #0
3400163e:	d001      	beq.n	34001644 <HAL_Init+0x1e>
  {
    return HAL_ERROR;
34001640:	2301      	movs	r3, #1
34001642:	e002      	b.n	3400164a <HAL_Init+0x24>
  }

  /* Init the low level hardware */
  HAL_MspInit();
34001644:	f7ff fc08 	bl	34000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
34001648:	2300      	movs	r3, #0
}
3400164a:	4618      	mov	r0, r3
3400164c:	bd80      	pop	{r7, pc}
	...

34001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34001650:	b580      	push	{r7, lr}
34001652:	b082      	sub	sp, #8
34001654:	af00      	add	r7, sp, #0
34001656:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34001658:	4b15      	ldr	r3, [pc, #84]	@ (340016b0 <HAL_InitTick+0x60>)
3400165a:	781b      	ldrb	r3, [r3, #0]
3400165c:	2b00      	cmp	r3, #0
3400165e:	d101      	bne.n	34001664 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
34001660:	2301      	movs	r3, #1
34001662:	e021      	b.n	340016a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
34001664:	4b13      	ldr	r3, [pc, #76]	@ (340016b4 <HAL_InitTick+0x64>)
34001666:	681a      	ldr	r2, [r3, #0]
34001668:	4b11      	ldr	r3, [pc, #68]	@ (340016b0 <HAL_InitTick+0x60>)
3400166a:	781b      	ldrb	r3, [r3, #0]
3400166c:	4619      	mov	r1, r3
3400166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34001672:	fbb3 f3f1 	udiv	r3, r3, r1
34001676:	fbb2 f3f3 	udiv	r3, r2, r3
3400167a:	4618      	mov	r0, r3
3400167c:	f000 f93c 	bl	340018f8 <HAL_SYSTICK_Config>
34001680:	4603      	mov	r3, r0
34001682:	2b00      	cmp	r3, #0
34001684:	d001      	beq.n	3400168a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
34001686:	2301      	movs	r3, #1
34001688:	e00e      	b.n	340016a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
3400168a:	687b      	ldr	r3, [r7, #4]
3400168c:	2b0f      	cmp	r3, #15
3400168e:	d80a      	bhi.n	340016a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
34001690:	2200      	movs	r2, #0
34001692:	6879      	ldr	r1, [r7, #4]
34001694:	f04f 30ff 	mov.w	r0, #4294967295
34001698:	f000 f911 	bl	340018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
3400169c:	4a06      	ldr	r2, [pc, #24]	@ (340016b8 <HAL_InitTick+0x68>)
3400169e:	687b      	ldr	r3, [r7, #4]
340016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
340016a2:	2300      	movs	r3, #0
340016a4:	e000      	b.n	340016a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
340016a6:	2301      	movs	r3, #1
}
340016a8:	4618      	mov	r0, r3
340016aa:	3708      	adds	r7, #8
340016ac:	46bd      	mov	sp, r7
340016ae:	bd80      	pop	{r7, pc}
340016b0:	3400d394 	.word	0x3400d394
340016b4:	3400d38c 	.word	0x3400d38c
340016b8:	3400d390 	.word	0x3400d390

340016bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
340016bc:	b480      	push	{r7}
340016be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
340016c0:	4b06      	ldr	r3, [pc, #24]	@ (340016dc <HAL_IncTick+0x20>)
340016c2:	781b      	ldrb	r3, [r3, #0]
340016c4:	461a      	mov	r2, r3
340016c6:	4b06      	ldr	r3, [pc, #24]	@ (340016e0 <HAL_IncTick+0x24>)
340016c8:	681b      	ldr	r3, [r3, #0]
340016ca:	4413      	add	r3, r2
340016cc:	4a04      	ldr	r2, [pc, #16]	@ (340016e0 <HAL_IncTick+0x24>)
340016ce:	6013      	str	r3, [r2, #0]
}
340016d0:	bf00      	nop
340016d2:	46bd      	mov	sp, r7
340016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
340016d8:	4770      	bx	lr
340016da:	bf00      	nop
340016dc:	3400d394 	.word	0x3400d394
340016e0:	3400d570 	.word	0x3400d570

340016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
340016e4:	b480      	push	{r7}
340016e6:	af00      	add	r7, sp, #0
  return uwTick;
340016e8:	4b03      	ldr	r3, [pc, #12]	@ (340016f8 <HAL_GetTick+0x14>)
340016ea:	681b      	ldr	r3, [r3, #0]
}
340016ec:	4618      	mov	r0, r3
340016ee:	46bd      	mov	sp, r7
340016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
340016f4:	4770      	bx	lr
340016f6:	bf00      	nop
340016f8:	3400d570 	.word	0x3400d570

340016fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
340016fc:	b580      	push	{r7, lr}
340016fe:	b084      	sub	sp, #16
34001700:	af00      	add	r7, sp, #0
34001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
34001704:	f7ff ffee 	bl	340016e4 <HAL_GetTick>
34001708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
3400170a:	687b      	ldr	r3, [r7, #4]
3400170c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
3400170e:	68fb      	ldr	r3, [r7, #12]
34001710:	f1b3 3fff 	cmp.w	r3, #4294967295
34001714:	d005      	beq.n	34001722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
34001716:	4b0a      	ldr	r3, [pc, #40]	@ (34001740 <HAL_Delay+0x44>)
34001718:	781b      	ldrb	r3, [r3, #0]
3400171a:	461a      	mov	r2, r3
3400171c:	68fb      	ldr	r3, [r7, #12]
3400171e:	4413      	add	r3, r2
34001720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
34001722:	bf00      	nop
34001724:	f7ff ffde 	bl	340016e4 <HAL_GetTick>
34001728:	4602      	mov	r2, r0
3400172a:	68bb      	ldr	r3, [r7, #8]
3400172c:	1ad3      	subs	r3, r2, r3
3400172e:	68fa      	ldr	r2, [r7, #12]
34001730:	429a      	cmp	r2, r3
34001732:	d8f7      	bhi.n	34001724 <HAL_Delay+0x28>
  {
  }
}
34001734:	bf00      	nop
34001736:	bf00      	nop
34001738:	3710      	adds	r7, #16
3400173a:	46bd      	mov	sp, r7
3400173c:	bd80      	pop	{r7, pc}
3400173e:	bf00      	nop
34001740:	3400d394 	.word	0x3400d394

34001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
34001744:	b480      	push	{r7}
34001746:	b085      	sub	sp, #20
34001748:	af00      	add	r7, sp, #0
3400174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
3400174c:	687b      	ldr	r3, [r7, #4]
3400174e:	f003 0307 	and.w	r3, r3, #7
34001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
34001754:	4b0c      	ldr	r3, [pc, #48]	@ (34001788 <__NVIC_SetPriorityGrouping+0x44>)
34001756:	68db      	ldr	r3, [r3, #12]
34001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
3400175a:	68ba      	ldr	r2, [r7, #8]
3400175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
34001760:	4013      	ands	r3, r2
34001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
34001764:	68fb      	ldr	r3, [r7, #12]
34001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
34001768:	68bb      	ldr	r3, [r7, #8]
3400176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
3400176c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
34001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
34001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
34001776:	4a04      	ldr	r2, [pc, #16]	@ (34001788 <__NVIC_SetPriorityGrouping+0x44>)
34001778:	68bb      	ldr	r3, [r7, #8]
3400177a:	60d3      	str	r3, [r2, #12]
}
3400177c:	bf00      	nop
3400177e:	3714      	adds	r7, #20
34001780:	46bd      	mov	sp, r7
34001782:	f85d 7b04 	ldr.w	r7, [sp], #4
34001786:	4770      	bx	lr
34001788:	e000ed00 	.word	0xe000ed00

3400178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
3400178c:	b480      	push	{r7}
3400178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34001790:	4b04      	ldr	r3, [pc, #16]	@ (340017a4 <__NVIC_GetPriorityGrouping+0x18>)
34001792:	68db      	ldr	r3, [r3, #12]
34001794:	0a1b      	lsrs	r3, r3, #8
34001796:	f003 0307 	and.w	r3, r3, #7
}
3400179a:	4618      	mov	r0, r3
3400179c:	46bd      	mov	sp, r7
3400179e:	f85d 7b04 	ldr.w	r7, [sp], #4
340017a2:	4770      	bx	lr
340017a4:	e000ed00 	.word	0xe000ed00

340017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
340017a8:	b480      	push	{r7}
340017aa:	b083      	sub	sp, #12
340017ac:	af00      	add	r7, sp, #0
340017ae:	4603      	mov	r3, r0
340017b0:	6039      	str	r1, [r7, #0]
340017b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
340017b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340017b8:	2b00      	cmp	r3, #0
340017ba:	db0a      	blt.n	340017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340017bc:	683b      	ldr	r3, [r7, #0]
340017be:	b2da      	uxtb	r2, r3
340017c0:	490c      	ldr	r1, [pc, #48]	@ (340017f4 <__NVIC_SetPriority+0x4c>)
340017c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
340017c6:	0112      	lsls	r2, r2, #4
340017c8:	b2d2      	uxtb	r2, r2
340017ca:	440b      	add	r3, r1
340017cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
340017d0:	e00a      	b.n	340017e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
340017d2:	683b      	ldr	r3, [r7, #0]
340017d4:	b2da      	uxtb	r2, r3
340017d6:	4908      	ldr	r1, [pc, #32]	@ (340017f8 <__NVIC_SetPriority+0x50>)
340017d8:	88fb      	ldrh	r3, [r7, #6]
340017da:	f003 030f 	and.w	r3, r3, #15
340017de:	3b04      	subs	r3, #4
340017e0:	0112      	lsls	r2, r2, #4
340017e2:	b2d2      	uxtb	r2, r2
340017e4:	440b      	add	r3, r1
340017e6:	761a      	strb	r2, [r3, #24]
}
340017e8:	bf00      	nop
340017ea:	370c      	adds	r7, #12
340017ec:	46bd      	mov	sp, r7
340017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
340017f2:	4770      	bx	lr
340017f4:	e000e100 	.word	0xe000e100
340017f8:	e000ed00 	.word	0xe000ed00

340017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
340017fc:	b480      	push	{r7}
340017fe:	b089      	sub	sp, #36	@ 0x24
34001800:	af00      	add	r7, sp, #0
34001802:	60f8      	str	r0, [r7, #12]
34001804:	60b9      	str	r1, [r7, #8]
34001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
34001808:	68fb      	ldr	r3, [r7, #12]
3400180a:	f003 0307 	and.w	r3, r3, #7
3400180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34001810:	69fb      	ldr	r3, [r7, #28]
34001812:	f1c3 0307 	rsb	r3, r3, #7
34001816:	2b04      	cmp	r3, #4
34001818:	bf28      	it	cs
3400181a:	2304      	movcs	r3, #4
3400181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
3400181e:	69fb      	ldr	r3, [r7, #28]
34001820:	3304      	adds	r3, #4
34001822:	2b06      	cmp	r3, #6
34001824:	d902      	bls.n	3400182c <NVIC_EncodePriority+0x30>
34001826:	69fb      	ldr	r3, [r7, #28]
34001828:	3b03      	subs	r3, #3
3400182a:	e000      	b.n	3400182e <NVIC_EncodePriority+0x32>
3400182c:	2300      	movs	r3, #0
3400182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34001830:	f04f 32ff 	mov.w	r2, #4294967295
34001834:	69bb      	ldr	r3, [r7, #24]
34001836:	fa02 f303 	lsl.w	r3, r2, r3
3400183a:	43da      	mvns	r2, r3
3400183c:	68bb      	ldr	r3, [r7, #8]
3400183e:	401a      	ands	r2, r3
34001840:	697b      	ldr	r3, [r7, #20]
34001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34001844:	f04f 31ff 	mov.w	r1, #4294967295
34001848:	697b      	ldr	r3, [r7, #20]
3400184a:	fa01 f303 	lsl.w	r3, r1, r3
3400184e:	43d9      	mvns	r1, r3
34001850:	687b      	ldr	r3, [r7, #4]
34001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
34001854:	4313      	orrs	r3, r2
         );
}
34001856:	4618      	mov	r0, r3
34001858:	3724      	adds	r7, #36	@ 0x24
3400185a:	46bd      	mov	sp, r7
3400185c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001860:	4770      	bx	lr
	...

34001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
34001864:	b580      	push	{r7, lr}
34001866:	b082      	sub	sp, #8
34001868:	af00      	add	r7, sp, #0
3400186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
3400186c:	687b      	ldr	r3, [r7, #4]
3400186e:	3b01      	subs	r3, #1
34001870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34001874:	d301      	bcc.n	3400187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
34001876:	2301      	movs	r3, #1
34001878:	e00f      	b.n	3400189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
3400187a:	4a0a      	ldr	r2, [pc, #40]	@ (340018a4 <SysTick_Config+0x40>)
3400187c:	687b      	ldr	r3, [r7, #4]
3400187e:	3b01      	subs	r3, #1
34001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
34001882:	210f      	movs	r1, #15
34001884:	f04f 30ff 	mov.w	r0, #4294967295
34001888:	f7ff ff8e 	bl	340017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
3400188c:	4b05      	ldr	r3, [pc, #20]	@ (340018a4 <SysTick_Config+0x40>)
3400188e:	2200      	movs	r2, #0
34001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
34001892:	4b04      	ldr	r3, [pc, #16]	@ (340018a4 <SysTick_Config+0x40>)
34001894:	2207      	movs	r2, #7
34001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
34001898:	2300      	movs	r3, #0
}
3400189a:	4618      	mov	r0, r3
3400189c:	3708      	adds	r7, #8
3400189e:	46bd      	mov	sp, r7
340018a0:	bd80      	pop	{r7, pc}
340018a2:	bf00      	nop
340018a4:	e000e010 	.word	0xe000e010

340018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
340018a8:	b580      	push	{r7, lr}
340018aa:	b082      	sub	sp, #8
340018ac:	af00      	add	r7, sp, #0
340018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
340018b0:	6878      	ldr	r0, [r7, #4]
340018b2:	f7ff ff47 	bl	34001744 <__NVIC_SetPriorityGrouping>
}
340018b6:	bf00      	nop
340018b8:	3708      	adds	r7, #8
340018ba:	46bd      	mov	sp, r7
340018bc:	bd80      	pop	{r7, pc}

340018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
340018be:	b580      	push	{r7, lr}
340018c0:	b086      	sub	sp, #24
340018c2:	af00      	add	r7, sp, #0
340018c4:	4603      	mov	r3, r0
340018c6:	60b9      	str	r1, [r7, #8]
340018c8:	607a      	str	r2, [r7, #4]
340018ca:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
340018cc:	f7ff ff5e 	bl	3400178c <__NVIC_GetPriorityGrouping>
340018d0:	4603      	mov	r3, r0
340018d2:	f003 0307 	and.w	r3, r3, #7
340018d6:	617b      	str	r3, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
340018d8:	687a      	ldr	r2, [r7, #4]
340018da:	68b9      	ldr	r1, [r7, #8]
340018dc:	6978      	ldr	r0, [r7, #20]
340018de:	f7ff ff8d 	bl	340017fc <NVIC_EncodePriority>
340018e2:	4602      	mov	r2, r0
340018e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
340018e8:	4611      	mov	r1, r2
340018ea:	4618      	mov	r0, r3
340018ec:	f7ff ff5c 	bl	340017a8 <__NVIC_SetPriority>
}
340018f0:	bf00      	nop
340018f2:	3718      	adds	r7, #24
340018f4:	46bd      	mov	sp, r7
340018f6:	bd80      	pop	{r7, pc}

340018f8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
340018f8:	b580      	push	{r7, lr}
340018fa:	b082      	sub	sp, #8
340018fc:	af00      	add	r7, sp, #0
340018fe:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
34001900:	6878      	ldr	r0, [r7, #4]
34001902:	f7ff ffaf 	bl	34001864 <SysTick_Config>
34001906:	4603      	mov	r3, r0
}
34001908:	4618      	mov	r0, r3
3400190a:	3708      	adds	r7, #8
3400190c:	46bd      	mov	sp, r7
3400190e:	bd80      	pop	{r7, pc}

34001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
34001910:	b480      	push	{r7}
34001912:	b087      	sub	sp, #28
34001914:	af00      	add	r7, sp, #0
34001916:	6078      	str	r0, [r7, #4]
34001918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
3400191a:	2300      	movs	r3, #0
3400191c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
3400191e:	e180      	b.n	34001c22 <HAL_GPIO_Init+0x312>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34001920:	683b      	ldr	r3, [r7, #0]
34001922:	681a      	ldr	r2, [r3, #0]
34001924:	2101      	movs	r1, #1
34001926:	697b      	ldr	r3, [r7, #20]
34001928:	fa01 f303 	lsl.w	r3, r1, r3
3400192c:	4013      	ands	r3, r2
3400192e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
34001930:	68fb      	ldr	r3, [r7, #12]
34001932:	2b00      	cmp	r3, #0
34001934:	f000 8172 	beq.w	34001c1c <HAL_GPIO_Init+0x30c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34001938:	683b      	ldr	r3, [r7, #0]
3400193a:	685b      	ldr	r3, [r3, #4]
3400193c:	f003 0303 	and.w	r3, r3, #3
34001940:	2b01      	cmp	r3, #1
34001942:	d005      	beq.n	34001950 <HAL_GPIO_Init+0x40>
34001944:	683b      	ldr	r3, [r7, #0]
34001946:	685b      	ldr	r3, [r3, #4]
34001948:	f003 0303 	and.w	r3, r3, #3
3400194c:	2b02      	cmp	r3, #2
3400194e:	d130      	bne.n	340019b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
34001950:	687b      	ldr	r3, [r7, #4]
34001952:	689b      	ldr	r3, [r3, #8]
34001954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34001956:	697b      	ldr	r3, [r7, #20]
34001958:	005b      	lsls	r3, r3, #1
3400195a:	2203      	movs	r2, #3
3400195c:	fa02 f303 	lsl.w	r3, r2, r3
34001960:	43db      	mvns	r3, r3
34001962:	693a      	ldr	r2, [r7, #16]
34001964:	4013      	ands	r3, r2
34001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34001968:	683b      	ldr	r3, [r7, #0]
3400196a:	68da      	ldr	r2, [r3, #12]
3400196c:	697b      	ldr	r3, [r7, #20]
3400196e:	005b      	lsls	r3, r3, #1
34001970:	fa02 f303 	lsl.w	r3, r2, r3
34001974:	693a      	ldr	r2, [r7, #16]
34001976:	4313      	orrs	r3, r2
34001978:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
3400197a:	687b      	ldr	r3, [r7, #4]
3400197c:	693a      	ldr	r2, [r7, #16]
3400197e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
34001980:	687b      	ldr	r3, [r7, #4]
34001982:	685b      	ldr	r3, [r3, #4]
34001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
34001986:	2201      	movs	r2, #1
34001988:	697b      	ldr	r3, [r7, #20]
3400198a:	fa02 f303 	lsl.w	r3, r2, r3
3400198e:	43db      	mvns	r3, r3
34001990:	693a      	ldr	r2, [r7, #16]
34001992:	4013      	ands	r3, r2
34001994:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34001996:	683b      	ldr	r3, [r7, #0]
34001998:	685b      	ldr	r3, [r3, #4]
3400199a:	091b      	lsrs	r3, r3, #4
3400199c:	f003 0201 	and.w	r2, r3, #1
340019a0:	697b      	ldr	r3, [r7, #20]
340019a2:	fa02 f303 	lsl.w	r3, r2, r3
340019a6:	693a      	ldr	r2, [r7, #16]
340019a8:	4313      	orrs	r3, r2
340019aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
340019ac:	687b      	ldr	r3, [r7, #4]
340019ae:	693a      	ldr	r2, [r7, #16]
340019b0:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
340019b2:	683b      	ldr	r3, [r7, #0]
340019b4:	685b      	ldr	r3, [r3, #4]
340019b6:	f003 0303 	and.w	r3, r3, #3
340019ba:	2b03      	cmp	r3, #3
340019bc:	d109      	bne.n	340019d2 <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
340019be:	683b      	ldr	r3, [r7, #0]
340019c0:	685b      	ldr	r3, [r3, #4]
340019c2:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
340019c6:	2b03      	cmp	r3, #3
340019c8:	d11b      	bne.n	34001a02 <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
340019ca:	683b      	ldr	r3, [r7, #0]
340019cc:	689b      	ldr	r3, [r3, #8]
340019ce:	2b01      	cmp	r3, #1
340019d0:	d017      	beq.n	34001a02 <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
340019d2:	687b      	ldr	r3, [r7, #4]
340019d4:	68db      	ldr	r3, [r3, #12]
340019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
340019d8:	697b      	ldr	r3, [r7, #20]
340019da:	005b      	lsls	r3, r3, #1
340019dc:	2203      	movs	r2, #3
340019de:	fa02 f303 	lsl.w	r3, r2, r3
340019e2:	43db      	mvns	r3, r3
340019e4:	693a      	ldr	r2, [r7, #16]
340019e6:	4013      	ands	r3, r2
340019e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
340019ea:	683b      	ldr	r3, [r7, #0]
340019ec:	689a      	ldr	r2, [r3, #8]
340019ee:	697b      	ldr	r3, [r7, #20]
340019f0:	005b      	lsls	r3, r3, #1
340019f2:	fa02 f303 	lsl.w	r3, r2, r3
340019f6:	693a      	ldr	r2, [r7, #16]
340019f8:	4313      	orrs	r3, r2
340019fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
340019fc:	687b      	ldr	r3, [r7, #4]
340019fe:	693a      	ldr	r2, [r7, #16]
34001a00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
34001a02:	683b      	ldr	r3, [r7, #0]
34001a04:	685b      	ldr	r3, [r3, #4]
34001a06:	f003 0303 	and.w	r3, r3, #3
34001a0a:	2b02      	cmp	r3, #2
34001a0c:	d123      	bne.n	34001a56 <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
34001a0e:	697b      	ldr	r3, [r7, #20]
34001a10:	08da      	lsrs	r2, r3, #3
34001a12:	687b      	ldr	r3, [r7, #4]
34001a14:	3208      	adds	r2, #8
34001a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
34001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34001a1c:	697b      	ldr	r3, [r7, #20]
34001a1e:	f003 0307 	and.w	r3, r3, #7
34001a22:	009b      	lsls	r3, r3, #2
34001a24:	220f      	movs	r2, #15
34001a26:	fa02 f303 	lsl.w	r3, r2, r3
34001a2a:	43db      	mvns	r3, r3
34001a2c:	693a      	ldr	r2, [r7, #16]
34001a2e:	4013      	ands	r3, r2
34001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34001a32:	683b      	ldr	r3, [r7, #0]
34001a34:	691a      	ldr	r2, [r3, #16]
34001a36:	697b      	ldr	r3, [r7, #20]
34001a38:	f003 0307 	and.w	r3, r3, #7
34001a3c:	009b      	lsls	r3, r3, #2
34001a3e:	fa02 f303 	lsl.w	r3, r2, r3
34001a42:	693a      	ldr	r2, [r7, #16]
34001a44:	4313      	orrs	r3, r2
34001a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
34001a48:	697b      	ldr	r3, [r7, #20]
34001a4a:	08da      	lsrs	r2, r3, #3
34001a4c:	687b      	ldr	r3, [r7, #4]
34001a4e:	3208      	adds	r2, #8
34001a50:	6939      	ldr	r1, [r7, #16]
34001a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
34001a56:	687b      	ldr	r3, [r7, #4]
34001a58:	681b      	ldr	r3, [r3, #0]
34001a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34001a5c:	697b      	ldr	r3, [r7, #20]
34001a5e:	005b      	lsls	r3, r3, #1
34001a60:	2203      	movs	r2, #3
34001a62:	fa02 f303 	lsl.w	r3, r2, r3
34001a66:	43db      	mvns	r3, r3
34001a68:	693a      	ldr	r2, [r7, #16]
34001a6a:	4013      	ands	r3, r2
34001a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34001a6e:	683b      	ldr	r3, [r7, #0]
34001a70:	685b      	ldr	r3, [r3, #4]
34001a72:	f003 0203 	and.w	r2, r3, #3
34001a76:	697b      	ldr	r3, [r7, #20]
34001a78:	005b      	lsls	r3, r3, #1
34001a7a:	fa02 f303 	lsl.w	r3, r2, r3
34001a7e:	693a      	ldr	r2, [r7, #16]
34001a80:	4313      	orrs	r3, r2
34001a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
34001a84:	687b      	ldr	r3, [r7, #4]
34001a86:	693a      	ldr	r2, [r7, #16]
34001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34001a8a:	683b      	ldr	r3, [r7, #0]
34001a8c:	685b      	ldr	r3, [r3, #4]
34001a8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
34001a92:	2b00      	cmp	r3, #0
34001a94:	f000 80c2 	beq.w	34001c1c <HAL_GPIO_Init+0x30c>
      {
        temp = EXTI->EXTICR[position >> 2u];
34001a98:	4a69      	ldr	r2, [pc, #420]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001a9a:	697b      	ldr	r3, [r7, #20]
34001a9c:	089b      	lsrs	r3, r3, #2
34001a9e:	3318      	adds	r3, #24
34001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
34001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34001aa6:	697b      	ldr	r3, [r7, #20]
34001aa8:	f003 0303 	and.w	r3, r3, #3
34001aac:	00db      	lsls	r3, r3, #3
34001aae:	220f      	movs	r2, #15
34001ab0:	fa02 f303 	lsl.w	r3, r2, r3
34001ab4:	43db      	mvns	r3, r3
34001ab6:	693a      	ldr	r2, [r7, #16]
34001ab8:	4013      	ands	r3, r2
34001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34001abc:	687b      	ldr	r3, [r7, #4]
34001abe:	4a61      	ldr	r2, [pc, #388]	@ (34001c44 <HAL_GPIO_Init+0x334>)
34001ac0:	4293      	cmp	r3, r2
34001ac2:	d043      	beq.n	34001b4c <HAL_GPIO_Init+0x23c>
34001ac4:	687b      	ldr	r3, [r7, #4]
34001ac6:	4a60      	ldr	r2, [pc, #384]	@ (34001c48 <HAL_GPIO_Init+0x338>)
34001ac8:	4293      	cmp	r3, r2
34001aca:	d03d      	beq.n	34001b48 <HAL_GPIO_Init+0x238>
34001acc:	687b      	ldr	r3, [r7, #4]
34001ace:	4a5f      	ldr	r2, [pc, #380]	@ (34001c4c <HAL_GPIO_Init+0x33c>)
34001ad0:	4293      	cmp	r3, r2
34001ad2:	d037      	beq.n	34001b44 <HAL_GPIO_Init+0x234>
34001ad4:	687b      	ldr	r3, [r7, #4]
34001ad6:	4a5e      	ldr	r2, [pc, #376]	@ (34001c50 <HAL_GPIO_Init+0x340>)
34001ad8:	4293      	cmp	r3, r2
34001ada:	d031      	beq.n	34001b40 <HAL_GPIO_Init+0x230>
34001adc:	687b      	ldr	r3, [r7, #4]
34001ade:	4a5d      	ldr	r2, [pc, #372]	@ (34001c54 <HAL_GPIO_Init+0x344>)
34001ae0:	4293      	cmp	r3, r2
34001ae2:	d02b      	beq.n	34001b3c <HAL_GPIO_Init+0x22c>
34001ae4:	687b      	ldr	r3, [r7, #4]
34001ae6:	4a5c      	ldr	r2, [pc, #368]	@ (34001c58 <HAL_GPIO_Init+0x348>)
34001ae8:	4293      	cmp	r3, r2
34001aea:	d025      	beq.n	34001b38 <HAL_GPIO_Init+0x228>
34001aec:	687b      	ldr	r3, [r7, #4]
34001aee:	4a5b      	ldr	r2, [pc, #364]	@ (34001c5c <HAL_GPIO_Init+0x34c>)
34001af0:	4293      	cmp	r3, r2
34001af2:	d01f      	beq.n	34001b34 <HAL_GPIO_Init+0x224>
34001af4:	687b      	ldr	r3, [r7, #4]
34001af6:	4a5a      	ldr	r2, [pc, #360]	@ (34001c60 <HAL_GPIO_Init+0x350>)
34001af8:	4293      	cmp	r3, r2
34001afa:	d019      	beq.n	34001b30 <HAL_GPIO_Init+0x220>
34001afc:	687b      	ldr	r3, [r7, #4]
34001afe:	4a59      	ldr	r2, [pc, #356]	@ (34001c64 <HAL_GPIO_Init+0x354>)
34001b00:	4293      	cmp	r3, r2
34001b02:	d013      	beq.n	34001b2c <HAL_GPIO_Init+0x21c>
34001b04:	687b      	ldr	r3, [r7, #4]
34001b06:	4a58      	ldr	r2, [pc, #352]	@ (34001c68 <HAL_GPIO_Init+0x358>)
34001b08:	4293      	cmp	r3, r2
34001b0a:	d00d      	beq.n	34001b28 <HAL_GPIO_Init+0x218>
34001b0c:	687b      	ldr	r3, [r7, #4]
34001b0e:	4a57      	ldr	r2, [pc, #348]	@ (34001c6c <HAL_GPIO_Init+0x35c>)
34001b10:	4293      	cmp	r3, r2
34001b12:	d007      	beq.n	34001b24 <HAL_GPIO_Init+0x214>
34001b14:	687b      	ldr	r3, [r7, #4]
34001b16:	4a56      	ldr	r2, [pc, #344]	@ (34001c70 <HAL_GPIO_Init+0x360>)
34001b18:	4293      	cmp	r3, r2
34001b1a:	d101      	bne.n	34001b20 <HAL_GPIO_Init+0x210>
34001b1c:	230b      	movs	r3, #11
34001b1e:	e016      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b20:	2310      	movs	r3, #16
34001b22:	e014      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b24:	230a      	movs	r3, #10
34001b26:	e012      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b28:	2309      	movs	r3, #9
34001b2a:	e010      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b2c:	2308      	movs	r3, #8
34001b2e:	e00e      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b30:	2307      	movs	r3, #7
34001b32:	e00c      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b34:	2306      	movs	r3, #6
34001b36:	e00a      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b38:	2305      	movs	r3, #5
34001b3a:	e008      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b3c:	2304      	movs	r3, #4
34001b3e:	e006      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b40:	2303      	movs	r3, #3
34001b42:	e004      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b44:	2302      	movs	r3, #2
34001b46:	e002      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b48:	2301      	movs	r3, #1
34001b4a:	e000      	b.n	34001b4e <HAL_GPIO_Init+0x23e>
34001b4c:	2300      	movs	r3, #0
34001b4e:	697a      	ldr	r2, [r7, #20]
34001b50:	f002 0203 	and.w	r2, r2, #3
34001b54:	00d2      	lsls	r2, r2, #3
34001b56:	4093      	lsls	r3, r2
34001b58:	693a      	ldr	r2, [r7, #16]
34001b5a:	4313      	orrs	r3, r2
34001b5c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
34001b5e:	4938      	ldr	r1, [pc, #224]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001b60:	697b      	ldr	r3, [r7, #20]
34001b62:	089b      	lsrs	r3, r3, #2
34001b64:	3318      	adds	r3, #24
34001b66:	693a      	ldr	r2, [r7, #16]
34001b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
34001b6c:	4b34      	ldr	r3, [pc, #208]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34001b74:	68fb      	ldr	r3, [r7, #12]
34001b76:	43db      	mvns	r3, r3
34001b78:	693a      	ldr	r2, [r7, #16]
34001b7a:	4013      	ands	r3, r2
34001b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
34001b7e:	683b      	ldr	r3, [r7, #0]
34001b80:	685b      	ldr	r3, [r3, #4]
34001b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34001b86:	2b00      	cmp	r3, #0
34001b88:	d003      	beq.n	34001b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
34001b8a:	693a      	ldr	r2, [r7, #16]
34001b8c:	68fb      	ldr	r3, [r7, #12]
34001b8e:	4313      	orrs	r3, r2
34001b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
34001b92:	4a2b      	ldr	r2, [pc, #172]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001b94:	693b      	ldr	r3, [r7, #16]
34001b96:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
34001b9a:	4b29      	ldr	r3, [pc, #164]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
34001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34001ba2:	68fb      	ldr	r3, [r7, #12]
34001ba4:	43db      	mvns	r3, r3
34001ba6:	693a      	ldr	r2, [r7, #16]
34001ba8:	4013      	ands	r3, r2
34001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
34001bac:	683b      	ldr	r3, [r7, #0]
34001bae:	685b      	ldr	r3, [r3, #4]
34001bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34001bb4:	2b00      	cmp	r3, #0
34001bb6:	d003      	beq.n	34001bc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
34001bb8:	693a      	ldr	r2, [r7, #16]
34001bba:	68fb      	ldr	r3, [r7, #12]
34001bbc:	4313      	orrs	r3, r2
34001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
34001bc0:	4a1f      	ldr	r2, [pc, #124]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001bc2:	693b      	ldr	r3, [r7, #16]
34001bc4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
34001bc8:	4b1d      	ldr	r3, [pc, #116]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001bca:	681b      	ldr	r3, [r3, #0]
34001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34001bce:	68fb      	ldr	r3, [r7, #12]
34001bd0:	43db      	mvns	r3, r3
34001bd2:	693a      	ldr	r2, [r7, #16]
34001bd4:	4013      	ands	r3, r2
34001bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
34001bd8:	683b      	ldr	r3, [r7, #0]
34001bda:	685b      	ldr	r3, [r3, #4]
34001bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
34001be0:	2b00      	cmp	r3, #0
34001be2:	d003      	beq.n	34001bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
34001be4:	693a      	ldr	r2, [r7, #16]
34001be6:	68fb      	ldr	r3, [r7, #12]
34001be8:	4313      	orrs	r3, r2
34001bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
34001bec:	4a14      	ldr	r2, [pc, #80]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001bee:	693b      	ldr	r3, [r7, #16]
34001bf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
34001bf2:	4b13      	ldr	r3, [pc, #76]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001bf4:	685b      	ldr	r3, [r3, #4]
34001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
34001bf8:	68fb      	ldr	r3, [r7, #12]
34001bfa:	43db      	mvns	r3, r3
34001bfc:	693a      	ldr	r2, [r7, #16]
34001bfe:	4013      	ands	r3, r2
34001c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
34001c02:	683b      	ldr	r3, [r7, #0]
34001c04:	685b      	ldr	r3, [r3, #4]
34001c06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34001c0a:	2b00      	cmp	r3, #0
34001c0c:	d003      	beq.n	34001c16 <HAL_GPIO_Init+0x306>
        {
          temp |= iocurrent;
34001c0e:	693a      	ldr	r2, [r7, #16]
34001c10:	68fb      	ldr	r3, [r7, #12]
34001c12:	4313      	orrs	r3, r2
34001c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
34001c16:	4a0a      	ldr	r2, [pc, #40]	@ (34001c40 <HAL_GPIO_Init+0x330>)
34001c18:	693b      	ldr	r3, [r7, #16]
34001c1a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
34001c1c:	697b      	ldr	r3, [r7, #20]
34001c1e:	3301      	adds	r3, #1
34001c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
34001c22:	683b      	ldr	r3, [r7, #0]
34001c24:	681a      	ldr	r2, [r3, #0]
34001c26:	697b      	ldr	r3, [r7, #20]
34001c28:	fa22 f303 	lsr.w	r3, r2, r3
34001c2c:	2b00      	cmp	r3, #0
34001c2e:	f47f ae77 	bne.w	34001920 <HAL_GPIO_Init+0x10>
  }
}
34001c32:	bf00      	nop
34001c34:	bf00      	nop
34001c36:	371c      	adds	r7, #28
34001c38:	46bd      	mov	sp, r7
34001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
34001c3e:	4770      	bx	lr
34001c40:	56025000 	.word	0x56025000
34001c44:	56020000 	.word	0x56020000
34001c48:	56020400 	.word	0x56020400
34001c4c:	56020800 	.word	0x56020800
34001c50:	56020c00 	.word	0x56020c00
34001c54:	56021000 	.word	0x56021000
34001c58:	56021400 	.word	0x56021400
34001c5c:	56021800 	.word	0x56021800
34001c60:	56021c00 	.word	0x56021c00
34001c64:	56023400 	.word	0x56023400
34001c68:	56023800 	.word	0x56023800
34001c6c:	56023c00 	.word	0x56023c00
34001c70:	56024000 	.word	0x56024000

34001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34001c74:	b480      	push	{r7}
34001c76:	b083      	sub	sp, #12
34001c78:	af00      	add	r7, sp, #0
34001c7a:	6078      	str	r0, [r7, #4]
34001c7c:	460b      	mov	r3, r1
34001c7e:	807b      	strh	r3, [r7, #2]
34001c80:	4613      	mov	r3, r2
34001c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
34001c84:	787b      	ldrb	r3, [r7, #1]
34001c86:	2b00      	cmp	r3, #0
34001c88:	d003      	beq.n	34001c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34001c8a:	887a      	ldrh	r2, [r7, #2]
34001c8c:	687b      	ldr	r3, [r7, #4]
34001c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34001c90:	e002      	b.n	34001c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34001c92:	887a      	ldrh	r2, [r7, #2]
34001c94:	687b      	ldr	r3, [r7, #4]
34001c96:	629a      	str	r2, [r3, #40]	@ 0x28
}
34001c98:	bf00      	nop
34001c9a:	370c      	adds	r7, #12
34001c9c:	46bd      	mov	sp, r7
34001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001ca2:	4770      	bx	lr

34001ca4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
34001ca4:	b480      	push	{r7}
34001ca6:	b085      	sub	sp, #20
34001ca8:	af00      	add	r7, sp, #0
34001caa:	6078      	str	r0, [r7, #4]
34001cac:	460b      	mov	r3, r1
34001cae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
34001cb0:	687b      	ldr	r3, [r7, #4]
34001cb2:	695b      	ldr	r3, [r3, #20]
34001cb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
34001cb6:	887a      	ldrh	r2, [r7, #2]
34001cb8:	68fb      	ldr	r3, [r7, #12]
34001cba:	4013      	ands	r3, r2
34001cbc:	041a      	lsls	r2, r3, #16
34001cbe:	68fb      	ldr	r3, [r7, #12]
34001cc0:	43d9      	mvns	r1, r3
34001cc2:	887b      	ldrh	r3, [r7, #2]
34001cc4:	400b      	ands	r3, r1
34001cc6:	431a      	orrs	r2, r3
34001cc8:	687b      	ldr	r3, [r7, #4]
34001cca:	619a      	str	r2, [r3, #24]
}
34001ccc:	bf00      	nop
34001cce:	3714      	adds	r7, #20
34001cd0:	46bd      	mov	sp, r7
34001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
34001cd6:	4770      	bx	lr

34001cd8 <HAL_GPIO_ConfigPinAttributes>:
  *            @arg @ref GPIO_PIN_SEC          Secure-only access
  *            @arg @ref GPIO_PIN_NSEC         Secure/Non-secure access
  * @retval None.
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
34001cd8:	b480      	push	{r7}
34001cda:	b087      	sub	sp, #28
34001cdc:	af00      	add	r7, sp, #0
34001cde:	60f8      	str	r0, [r7, #12]
34001ce0:	460b      	mov	r3, r1
34001ce2:	607a      	str	r2, [r7, #4]
34001ce4:	817b      	strh	r3, [r7, #10]
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

#if defined CPU_IN_SECURE_STATE
  /* Configure the port pins */
  sec = GPIOx->SECCFGR;
34001ce6:	68fb      	ldr	r3, [r7, #12]
34001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
34001cea:	617b      	str	r3, [r7, #20]
  if ((PinAttributes & GPIO_PIN_SEC) == GPIO_PIN_SEC)
34001cec:	687a      	ldr	r2, [r7, #4]
34001cee:	f240 1301 	movw	r3, #257	@ 0x101
34001cf2:	4013      	ands	r3, r2
34001cf4:	f240 1201 	movw	r2, #257	@ 0x101
34001cf8:	4293      	cmp	r3, r2
34001cfa:	d104      	bne.n	34001d06 <HAL_GPIO_ConfigPinAttributes+0x2e>
  {
    sec |= (uint32_t)GPIO_Pin;
34001cfc:	897b      	ldrh	r3, [r7, #10]
34001cfe:	697a      	ldr	r2, [r7, #20]
34001d00:	4313      	orrs	r3, r2
34001d02:	617b      	str	r3, [r7, #20]
34001d04:	e009      	b.n	34001d1a <HAL_GPIO_ConfigPinAttributes+0x42>
  }
  else if ((PinAttributes & GPIO_PIN_NSEC) == GPIO_PIN_NSEC)
34001d06:	687b      	ldr	r3, [r7, #4]
34001d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34001d0c:	2b00      	cmp	r3, #0
34001d0e:	d004      	beq.n	34001d1a <HAL_GPIO_ConfigPinAttributes+0x42>
  {
    sec &= ~((uint32_t)GPIO_Pin);
34001d10:	897b      	ldrh	r3, [r7, #10]
34001d12:	43db      	mvns	r3, r3
34001d14:	697a      	ldr	r2, [r7, #20]
34001d16:	4013      	ands	r3, r2
34001d18:	617b      	str	r3, [r7, #20]
  }
  else
  {
    /* do nothing */
  }
  GPIOx->SECCFGR = sec;
34001d1a:	68fb      	ldr	r3, [r7, #12]
34001d1c:	697a      	ldr	r2, [r7, #20]
34001d1e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* CPU_IN_SECURE_STATE */

  priv = GPIOx->PRIVCFGR;
34001d20:	68fb      	ldr	r3, [r7, #12]
34001d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
34001d24:	613b      	str	r3, [r7, #16]
  if ((PinAttributes & GPIO_PIN_PRIV) == GPIO_PIN_PRIV)
34001d26:	687a      	ldr	r2, [r7, #4]
34001d28:	f240 2302 	movw	r3, #514	@ 0x202
34001d2c:	4013      	ands	r3, r2
34001d2e:	f240 2202 	movw	r2, #514	@ 0x202
34001d32:	4293      	cmp	r3, r2
34001d34:	d104      	bne.n	34001d40 <HAL_GPIO_ConfigPinAttributes+0x68>
  {
    priv |= (uint32_t)GPIO_Pin;
34001d36:	897b      	ldrh	r3, [r7, #10]
34001d38:	693a      	ldr	r2, [r7, #16]
34001d3a:	4313      	orrs	r3, r2
34001d3c:	613b      	str	r3, [r7, #16]
34001d3e:	e009      	b.n	34001d54 <HAL_GPIO_ConfigPinAttributes+0x7c>
  }
  else if ((PinAttributes & GPIO_PIN_NPRIV) == GPIO_PIN_NPRIV)
34001d40:	687b      	ldr	r3, [r7, #4]
34001d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34001d46:	2b00      	cmp	r3, #0
34001d48:	d004      	beq.n	34001d54 <HAL_GPIO_ConfigPinAttributes+0x7c>
  {
    priv &= ~((uint32_t)GPIO_Pin);
34001d4a:	897b      	ldrh	r3, [r7, #10]
34001d4c:	43db      	mvns	r3, r3
34001d4e:	693a      	ldr	r2, [r7, #16]
34001d50:	4013      	ands	r3, r2
34001d52:	613b      	str	r3, [r7, #16]
  else
  {
    /* do nothing */
  }

  GPIOx->PRIVCFGR = priv;
34001d54:	68fb      	ldr	r3, [r7, #12]
34001d56:	693a      	ldr	r2, [r7, #16]
34001d58:	635a      	str	r2, [r3, #52]	@ 0x34
}
34001d5a:	bf00      	nop
34001d5c:	371c      	adds	r7, #28
34001d5e:	46bd      	mov	sp, r7
34001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
34001d64:	4770      	bx	lr
	...

34001d68 <HAL_PWREx_EnableVddIO2>:
  * @brief  Enable VDDIO2 supply valid.
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
34001d68:	b480      	push	{r7}
34001d6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34001d6c:	4b05      	ldr	r3, [pc, #20]	@ (34001d84 <HAL_PWREx_EnableVddIO2+0x1c>)
34001d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34001d70:	4a04      	ldr	r2, [pc, #16]	@ (34001d84 <HAL_PWREx_EnableVddIO2+0x1c>)
34001d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34001d76:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34001d78:	bf00      	nop
34001d7a:	46bd      	mov	sp, r7
34001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001d80:	4770      	bx	lr
34001d82:	bf00      	nop
34001d84:	56024800 	.word	0x56024800

34001d88 <HAL_PWREx_EnableVddIO3>:
  * @brief  Enable VDDIO3 supply valid.
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
34001d88:	b480      	push	{r7}
34001d8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34001d8c:	4b05      	ldr	r3, [pc, #20]	@ (34001da4 <HAL_PWREx_EnableVddIO3+0x1c>)
34001d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34001d90:	4a04      	ldr	r2, [pc, #16]	@ (34001da4 <HAL_PWREx_EnableVddIO3+0x1c>)
34001d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34001d96:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34001d98:	bf00      	nop
34001d9a:	46bd      	mov	sp, r7
34001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001da0:	4770      	bx	lr
34001da2:	bf00      	nop
34001da4:	56024800 	.word	0x56024800

34001da8 <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV_2
  *         @arg @ref LL_RCC_HSI_DIV_4
  *         @arg @ref LL_RCC_HSI_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
34001da8:	b480      	push	{r7}
34001daa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34001dac:	4b04      	ldr	r3, [pc, #16]	@ (34001dc0 <LL_RCC_HSI_GetDivider+0x18>)
34001dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34001db0:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34001db4:	4618      	mov	r0, r3
34001db6:	46bd      	mov	sp, r7
34001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
34001dbc:	4770      	bx	lr
34001dbe:	bf00      	nop
34001dc0:	56028000 	.word	0x56028000

34001dc4 <LL_RCC_MSI_GetFrequency>:
  * @retval can be one of the following values:
  *         @arg @ref LL_RCC_MSI_FREQ_4MHZ
  *         @arg @ref LL_RCC_MSI_FREQ_16MHZ
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetFrequency(void)
{
34001dc4:	b480      	push	{r7}
34001dc6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34001dc8:	4b04      	ldr	r3, [pc, #16]	@ (34001ddc <LL_RCC_MSI_GetFrequency+0x18>)
34001dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34001dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
34001dd0:	4618      	mov	r0, r3
34001dd2:	46bd      	mov	sp, r7
34001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
34001dd8:	4770      	bx	lr
34001dda:	bf00      	nop
34001ddc:	56028000 	.word	0x56028000

34001de0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_MSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_IC2_IC6_IC11
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
34001de0:	b480      	push	{r7}
34001de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34001de4:	4b04      	ldr	r3, [pc, #16]	@ (34001df8 <LL_RCC_GetSysClkSource+0x18>)
34001de6:	6a1b      	ldr	r3, [r3, #32]
34001de8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34001dec:	4618      	mov	r0, r3
34001dee:	46bd      	mov	sp, r7
34001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
34001df4:	4770      	bx	lr
34001df6:	bf00      	nop
34001df8:	56028000 	.word	0x56028000

34001dfc <LL_RCC_IC2_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
34001dfc:	b480      	push	{r7}
34001dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34001e00:	4b04      	ldr	r3, [pc, #16]	@ (34001e14 <LL_RCC_IC2_GetSource+0x18>)
34001e02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34001e06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34001e0a:	4618      	mov	r0, r3
34001e0c:	46bd      	mov	sp, r7
34001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001e12:	4770      	bx	lr
34001e14:	56028000 	.word	0x56028000

34001e18 <LL_RCC_IC2_GetDivider>:
  * @brief  Get IC2 divider
  * @rmtoll IC2CFGR      IC2INT        LL_RCC_IC2_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetDivider(void)
{
34001e18:	b480      	push	{r7}
34001e1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34001e1c:	4b05      	ldr	r3, [pc, #20]	@ (34001e34 <LL_RCC_IC2_GetDivider+0x1c>)
34001e1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34001e22:	0c1b      	lsrs	r3, r3, #16
34001e24:	b2db      	uxtb	r3, r3
34001e26:	3301      	adds	r3, #1
}
34001e28:	4618      	mov	r0, r3
34001e2a:	46bd      	mov	sp, r7
34001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
34001e30:	4770      	bx	lr
34001e32:	bf00      	nop
34001e34:	56028000 	.word	0x56028000

34001e38 <HAL_RCC_GetSysClockFreq>:
  *         will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
34001e38:	b580      	push	{r7, lr}
34001e3a:	b082      	sub	sp, #8
34001e3c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
34001e3e:	2300      	movs	r3, #0
34001e40:	607b      	str	r3, [r7, #4]
  uint32_t ic_divider;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
34001e42:	f7ff ffcd 	bl	34001de0 <LL_RCC_GetSysClkSource>
34001e46:	4603      	mov	r3, r0
34001e48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34001e4c:	d025      	beq.n	34001e9a <HAL_RCC_GetSysClockFreq+0x62>
34001e4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34001e52:	d860      	bhi.n	34001f16 <HAL_RCC_GetSysClockFreq+0xde>
34001e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34001e58:	d01c      	beq.n	34001e94 <HAL_RCC_GetSysClockFreq+0x5c>
34001e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34001e5e:	d85a      	bhi.n	34001f16 <HAL_RCC_GetSysClockFreq+0xde>
34001e60:	2b00      	cmp	r3, #0
34001e62:	d003      	beq.n	34001e6c <HAL_RCC_GetSysClockFreq+0x34>
34001e64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34001e68:	d009      	beq.n	34001e7e <HAL_RCC_GetSysClockFreq+0x46>
      }
      break;

    default:
      /* Unexpected case */
      break;
34001e6a:	e054      	b.n	34001f16 <HAL_RCC_GetSysClockFreq+0xde>
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34001e6c:	f7ff ff9c 	bl	34001da8 <LL_RCC_HSI_GetDivider>
34001e70:	4603      	mov	r3, r0
34001e72:	09db      	lsrs	r3, r3, #7
34001e74:	4a2b      	ldr	r2, [pc, #172]	@ (34001f24 <HAL_RCC_GetSysClockFreq+0xec>)
34001e76:	fa22 f303 	lsr.w	r3, r2, r3
34001e7a:	607b      	str	r3, [r7, #4]
      break;
34001e7c:	e04c      	b.n	34001f18 <HAL_RCC_GetSysClockFreq+0xe0>
      if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
34001e7e:	f7ff ffa1 	bl	34001dc4 <LL_RCC_MSI_GetFrequency>
34001e82:	4603      	mov	r3, r0
34001e84:	2b00      	cmp	r3, #0
34001e86:	d102      	bne.n	34001e8e <HAL_RCC_GetSysClockFreq+0x56>
        frequency = MSI_VALUE;
34001e88:	4b27      	ldr	r3, [pc, #156]	@ (34001f28 <HAL_RCC_GetSysClockFreq+0xf0>)
34001e8a:	607b      	str	r3, [r7, #4]
      break;
34001e8c:	e044      	b.n	34001f18 <HAL_RCC_GetSysClockFreq+0xe0>
        frequency = 16000000UL;
34001e8e:	4b27      	ldr	r3, [pc, #156]	@ (34001f2c <HAL_RCC_GetSysClockFreq+0xf4>)
34001e90:	607b      	str	r3, [r7, #4]
      break;
34001e92:	e041      	b.n	34001f18 <HAL_RCC_GetSysClockFreq+0xe0>
      frequency = HSE_VALUE;
34001e94:	4b26      	ldr	r3, [pc, #152]	@ (34001f30 <HAL_RCC_GetSysClockFreq+0xf8>)
34001e96:	607b      	str	r3, [r7, #4]
      break;
34001e98:	e03e      	b.n	34001f18 <HAL_RCC_GetSysClockFreq+0xe0>
      ic_divider = LL_RCC_IC2_GetDivider();
34001e9a:	f7ff ffbd 	bl	34001e18 <LL_RCC_IC2_GetDivider>
34001e9e:	6038      	str	r0, [r7, #0]
      switch (LL_RCC_IC2_GetSource())
34001ea0:	f7ff ffac 	bl	34001dfc <LL_RCC_IC2_GetSource>
34001ea4:	4603      	mov	r3, r0
34001ea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34001eaa:	d029      	beq.n	34001f00 <HAL_RCC_GetSysClockFreq+0xc8>
34001eac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34001eb0:	d82f      	bhi.n	34001f12 <HAL_RCC_GetSysClockFreq+0xda>
34001eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34001eb6:	d01a      	beq.n	34001eee <HAL_RCC_GetSysClockFreq+0xb6>
34001eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34001ebc:	d829      	bhi.n	34001f12 <HAL_RCC_GetSysClockFreq+0xda>
34001ebe:	2b00      	cmp	r3, #0
34001ec0:	d003      	beq.n	34001eca <HAL_RCC_GetSysClockFreq+0x92>
34001ec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34001ec6:	d009      	beq.n	34001edc <HAL_RCC_GetSysClockFreq+0xa4>
          break;
34001ec8:	e023      	b.n	34001f12 <HAL_RCC_GetSysClockFreq+0xda>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34001eca:	f004 faef 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34001ece:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34001ed0:	687a      	ldr	r2, [r7, #4]
34001ed2:	683b      	ldr	r3, [r7, #0]
34001ed4:	fbb2 f3f3 	udiv	r3, r2, r3
34001ed8:	607b      	str	r3, [r7, #4]
          break;
34001eda:	e01b      	b.n	34001f14 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34001edc:	f004 fb2c 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34001ee0:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34001ee2:	687a      	ldr	r2, [r7, #4]
34001ee4:	683b      	ldr	r3, [r7, #0]
34001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
34001eea:	607b      	str	r3, [r7, #4]
          break;
34001eec:	e012      	b.n	34001f14 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34001eee:	f004 fb69 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34001ef2:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34001ef4:	687a      	ldr	r2, [r7, #4]
34001ef6:	683b      	ldr	r3, [r7, #0]
34001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
34001efc:	607b      	str	r3, [r7, #4]
          break;
34001efe:	e009      	b.n	34001f14 <HAL_RCC_GetSysClockFreq+0xdc>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34001f00:	f004 fba6 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34001f04:	6078      	str	r0, [r7, #4]
          frequency = frequency / ic_divider;
34001f06:	687a      	ldr	r2, [r7, #4]
34001f08:	683b      	ldr	r3, [r7, #0]
34001f0a:	fbb2 f3f3 	udiv	r3, r2, r3
34001f0e:	607b      	str	r3, [r7, #4]
          break;
34001f10:	e000      	b.n	34001f14 <HAL_RCC_GetSysClockFreq+0xdc>
          break;
34001f12:	bf00      	nop
      break;
34001f14:	e000      	b.n	34001f18 <HAL_RCC_GetSysClockFreq+0xe0>
      break;
34001f16:	bf00      	nop
  }

  return frequency;
34001f18:	687b      	ldr	r3, [r7, #4]
}
34001f1a:	4618      	mov	r0, r3
34001f1c:	3708      	adds	r7, #8
34001f1e:	46bd      	mov	sp, r7
34001f20:	bd80      	pop	{r7, pc}
34001f22:	bf00      	nop
34001f24:	03d09000 	.word	0x03d09000
34001f28:	003d0900 	.word	0x003d0900
34001f2c:	00f42400 	.word	0x00f42400
34001f30:	02dc6c00 	.word	0x02dc6c00

34001f34 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
{
34001f34:	b480      	push	{r7}
34001f36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34001f38:	4b05      	ldr	r3, [pc, #20]	@ (34001f50 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34001f3c:	4a04      	ldr	r2, [pc, #16]	@ (34001f50 <LL_RCC_HSE_SelectHSEAsDiv2Clock+0x1c>)
34001f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34001f42:	6553      	str	r3, [r2, #84]	@ 0x54
}
34001f44:	bf00      	nop
34001f46:	46bd      	mov	sp, r7
34001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
34001f4c:	4770      	bx	lr
34001f4e:	bf00      	nop
34001f50:	56028000 	.word	0x56028000

34001f54 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
{
34001f54:	b480      	push	{r7}
34001f56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34001f58:	4b05      	ldr	r3, [pc, #20]	@ (34001f70 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34001f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34001f5c:	4a04      	ldr	r2, [pc, #16]	@ (34001f70 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0x1c>)
34001f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34001f62:	6553      	str	r3, [r2, #84]	@ 0x54
}
34001f64:	bf00      	nop
34001f66:	46bd      	mov	sp, r7
34001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
34001f6c:	4770      	bx	lr
34001f6e:	bf00      	nop
34001f70:	56028000 	.word	0x56028000

34001f74 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
{
34001f74:	b480      	push	{r7}
34001f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34001f78:	4b06      	ldr	r3, [pc, #24]	@ (34001f94 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x20>)
34001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34001f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34001f80:	2b40      	cmp	r3, #64	@ 0x40
34001f82:	d101      	bne.n	34001f88 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x14>
34001f84:	2301      	movs	r3, #1
34001f86:	e000      	b.n	34001f8a <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0x16>
34001f88:	2300      	movs	r3, #0
}
34001f8a:	4618      	mov	r0, r3
34001f8c:	46bd      	mov	sp, r7
34001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
34001f92:	4770      	bx	lr
34001f94:	56028000 	.word	0x56028000

34001f98 <LL_RCC_HSE_IsReady>:
{
34001f98:	b480      	push	{r7}
34001f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34001f9c:	4b06      	ldr	r3, [pc, #24]	@ (34001fb8 <LL_RCC_HSE_IsReady+0x20>)
34001f9e:	685b      	ldr	r3, [r3, #4]
34001fa0:	f003 0310 	and.w	r3, r3, #16
34001fa4:	2b00      	cmp	r3, #0
34001fa6:	d001      	beq.n	34001fac <LL_RCC_HSE_IsReady+0x14>
34001fa8:	2301      	movs	r3, #1
34001faa:	e000      	b.n	34001fae <LL_RCC_HSE_IsReady+0x16>
34001fac:	2300      	movs	r3, #0
}
34001fae:	4618      	mov	r0, r3
34001fb0:	46bd      	mov	sp, r7
34001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
34001fb6:	4770      	bx	lr
34001fb8:	56028000 	.word	0x56028000

34001fbc <LL_RCC_HSI_IsReady>:
{
34001fbc:	b480      	push	{r7}
34001fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34001fc0:	4b06      	ldr	r3, [pc, #24]	@ (34001fdc <LL_RCC_HSI_IsReady+0x20>)
34001fc2:	685b      	ldr	r3, [r3, #4]
34001fc4:	f003 0308 	and.w	r3, r3, #8
34001fc8:	2b00      	cmp	r3, #0
34001fca:	d001      	beq.n	34001fd0 <LL_RCC_HSI_IsReady+0x14>
34001fcc:	2301      	movs	r3, #1
34001fce:	e000      	b.n	34001fd2 <LL_RCC_HSI_IsReady+0x16>
34001fd0:	2300      	movs	r3, #0
}
34001fd2:	4618      	mov	r0, r3
34001fd4:	46bd      	mov	sp, r7
34001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
34001fda:	4770      	bx	lr
34001fdc:	56028000 	.word	0x56028000

34001fe0 <LL_RCC_HSI_GetDivider>:
{
34001fe0:	b480      	push	{r7}
34001fe2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34001fe4:	4b04      	ldr	r3, [pc, #16]	@ (34001ff8 <LL_RCC_HSI_GetDivider+0x18>)
34001fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34001fe8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
}
34001fec:	4618      	mov	r0, r3
34001fee:	46bd      	mov	sp, r7
34001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
34001ff4:	4770      	bx	lr
34001ff6:	bf00      	nop
34001ff8:	56028000 	.word	0x56028000

34001ffc <LL_RCC_MSI_IsReady>:
{
34001ffc:	b480      	push	{r7}
34001ffe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34002000:	4b06      	ldr	r3, [pc, #24]	@ (3400201c <LL_RCC_MSI_IsReady+0x20>)
34002002:	685b      	ldr	r3, [r3, #4]
34002004:	f003 0304 	and.w	r3, r3, #4
34002008:	2b00      	cmp	r3, #0
3400200a:	d001      	beq.n	34002010 <LL_RCC_MSI_IsReady+0x14>
3400200c:	2301      	movs	r3, #1
3400200e:	e000      	b.n	34002012 <LL_RCC_MSI_IsReady+0x16>
34002010:	2300      	movs	r3, #0
}
34002012:	4618      	mov	r0, r3
34002014:	46bd      	mov	sp, r7
34002016:	f85d 7b04 	ldr.w	r7, [sp], #4
3400201a:	4770      	bx	lr
3400201c:	56028000 	.word	0x56028000

34002020 <LL_RCC_MSI_GetFrequency>:
{
34002020:	b480      	push	{r7}
34002022:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34002024:	4b04      	ldr	r3, [pc, #16]	@ (34002038 <LL_RCC_MSI_GetFrequency+0x18>)
34002026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34002028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
}
3400202c:	4618      	mov	r0, r3
3400202e:	46bd      	mov	sp, r7
34002030:	f85d 7b04 	ldr.w	r7, [sp], #4
34002034:	4770      	bx	lr
34002036:	bf00      	nop
34002038:	56028000 	.word	0x56028000

3400203c <LL_RCC_LSE_IsReady>:
{
3400203c:	b480      	push	{r7}
3400203e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34002040:	4b06      	ldr	r3, [pc, #24]	@ (3400205c <LL_RCC_LSE_IsReady+0x20>)
34002042:	685b      	ldr	r3, [r3, #4]
34002044:	f003 0302 	and.w	r3, r3, #2
34002048:	2b00      	cmp	r3, #0
3400204a:	d001      	beq.n	34002050 <LL_RCC_LSE_IsReady+0x14>
3400204c:	2301      	movs	r3, #1
3400204e:	e000      	b.n	34002052 <LL_RCC_LSE_IsReady+0x16>
34002050:	2300      	movs	r3, #0
}
34002052:	4618      	mov	r0, r3
34002054:	46bd      	mov	sp, r7
34002056:	f85d 7b04 	ldr.w	r7, [sp], #4
3400205a:	4770      	bx	lr
3400205c:	56028000 	.word	0x56028000

34002060 <LL_RCC_LSI_IsReady>:
{
34002060:	b480      	push	{r7}
34002062:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34002064:	4b04      	ldr	r3, [pc, #16]	@ (34002078 <LL_RCC_LSI_IsReady+0x18>)
34002066:	685b      	ldr	r3, [r3, #4]
34002068:	f003 0301 	and.w	r3, r3, #1
}
3400206c:	4618      	mov	r0, r3
3400206e:	46bd      	mov	sp, r7
34002070:	f85d 7b04 	ldr.w	r7, [sp], #4
34002074:	4770      	bx	lr
34002076:	bf00      	nop
34002078:	56028000 	.word	0x56028000

3400207c <LL_RCC_GetAHBPrescaler>:
{
3400207c:	b480      	push	{r7}
3400207e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34002080:	4b04      	ldr	r3, [pc, #16]	@ (34002094 <LL_RCC_GetAHBPrescaler+0x18>)
34002082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34002084:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
}
34002088:	4618      	mov	r0, r3
3400208a:	46bd      	mov	sp, r7
3400208c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002090:	4770      	bx	lr
34002092:	bf00      	nop
34002094:	56028000 	.word	0x56028000

34002098 <LL_RCC_GetAPB1Prescaler>:
{
34002098:	b480      	push	{r7}
3400209a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
3400209c:	4b04      	ldr	r3, [pc, #16]	@ (340020b0 <LL_RCC_GetAPB1Prescaler+0x18>)
3400209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340020a0:	f003 0307 	and.w	r3, r3, #7
}
340020a4:	4618      	mov	r0, r3
340020a6:	46bd      	mov	sp, r7
340020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
340020ac:	4770      	bx	lr
340020ae:	bf00      	nop
340020b0:	56028000 	.word	0x56028000

340020b4 <LL_RCC_GetAPB2Prescaler>:
{
340020b4:	b480      	push	{r7}
340020b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
340020b8:	4b04      	ldr	r3, [pc, #16]	@ (340020cc <LL_RCC_GetAPB2Prescaler+0x18>)
340020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340020bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
340020c0:	4618      	mov	r0, r3
340020c2:	46bd      	mov	sp, r7
340020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
340020c8:	4770      	bx	lr
340020ca:	bf00      	nop
340020cc:	56028000 	.word	0x56028000

340020d0 <LL_RCC_GetAPB4Prescaler>:
{
340020d0:	b480      	push	{r7}
340020d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
340020d4:	4b04      	ldr	r3, [pc, #16]	@ (340020e8 <LL_RCC_GetAPB4Prescaler+0x18>)
340020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340020d8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
}
340020dc:	4618      	mov	r0, r3
340020de:	46bd      	mov	sp, r7
340020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
340020e4:	4770      	bx	lr
340020e6:	bf00      	nop
340020e8:	56028000 	.word	0x56028000

340020ec <LL_RCC_GetAPB5Prescaler>:
{
340020ec:	b480      	push	{r7}
340020ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
340020f0:	4b04      	ldr	r3, [pc, #16]	@ (34002104 <LL_RCC_GetAPB5Prescaler+0x18>)
340020f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
340020f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
340020f8:	4618      	mov	r0, r3
340020fa:	46bd      	mov	sp, r7
340020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
34002100:	4770      	bx	lr
34002102:	bf00      	nop
34002104:	56028000 	.word	0x56028000

34002108 <LL_RCC_SetClockSource>:
{
34002108:	b480      	push	{r7}
3400210a:	b085      	sub	sp, #20
3400210c:	af00      	add	r7, sp, #0
3400210e:	6078      	str	r0, [r7, #4]
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34002110:	687b      	ldr	r3, [r7, #4]
34002112:	b2da      	uxtb	r2, r3
34002114:	4b10      	ldr	r3, [pc, #64]	@ (34002158 <LL_RCC_SetClockSource+0x50>)
34002116:	4413      	add	r3, r2
34002118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
3400211a:	68fb      	ldr	r3, [r7, #12]
3400211c:	681a      	ldr	r2, [r3, #0]
3400211e:	687b      	ldr	r3, [r7, #4]
34002120:	0e19      	lsrs	r1, r3, #24
34002122:	687b      	ldr	r3, [r7, #4]
34002124:	0a1b      	lsrs	r3, r3, #8
34002126:	f003 031f 	and.w	r3, r3, #31
3400212a:	fa01 f303 	lsl.w	r3, r1, r3
3400212e:	43db      	mvns	r3, r3
34002130:	401a      	ands	r2, r3
34002132:	687b      	ldr	r3, [r7, #4]
34002134:	0c1b      	lsrs	r3, r3, #16
34002136:	b2d9      	uxtb	r1, r3
34002138:	687b      	ldr	r3, [r7, #4]
3400213a:	0a1b      	lsrs	r3, r3, #8
3400213c:	f003 031f 	and.w	r3, r3, #31
34002140:	fa01 f303 	lsl.w	r3, r1, r3
34002144:	431a      	orrs	r2, r3
34002146:	68fb      	ldr	r3, [r7, #12]
34002148:	601a      	str	r2, [r3, #0]
}
3400214a:	bf00      	nop
3400214c:	3714      	adds	r7, #20
3400214e:	46bd      	mov	sp, r7
34002150:	f85d 7b04 	ldr.w	r7, [sp], #4
34002154:	4770      	bx	lr
34002156:	bf00      	nop
34002158:	56028144 	.word	0x56028144

3400215c <LL_RCC_GetADCPrescaler>:
{
3400215c:	b480      	push	{r7}
3400215e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
34002160:	4b04      	ldr	r3, [pc, #16]	@ (34002174 <LL_RCC_GetADCPrescaler+0x18>)
34002162:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34002166:	0a1b      	lsrs	r3, r3, #8
34002168:	b2db      	uxtb	r3, r3
}
3400216a:	4618      	mov	r0, r3
3400216c:	46bd      	mov	sp, r7
3400216e:	f85d 7b04 	ldr.w	r7, [sp], #4
34002172:	4770      	bx	lr
34002174:	56028000 	.word	0x56028000

34002178 <LL_RCC_SetADFClockSource>:
{
34002178:	b480      	push	{r7}
3400217a:	b083      	sub	sp, #12
3400217c:	af00      	add	r7, sp, #0
3400217e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34002180:	4b07      	ldr	r3, [pc, #28]	@ (340021a0 <LL_RCC_SetADFClockSource+0x28>)
34002182:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34002186:	f023 0207 	bic.w	r2, r3, #7
3400218a:	4905      	ldr	r1, [pc, #20]	@ (340021a0 <LL_RCC_SetADFClockSource+0x28>)
3400218c:	687b      	ldr	r3, [r7, #4]
3400218e:	4313      	orrs	r3, r2
34002190:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
34002194:	bf00      	nop
34002196:	370c      	adds	r7, #12
34002198:	46bd      	mov	sp, r7
3400219a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400219e:	4770      	bx	lr
340021a0:	56028000 	.word	0x56028000

340021a4 <LL_RCC_SetCLKPClockSource>:
{
340021a4:	b480      	push	{r7}
340021a6:	b083      	sub	sp, #12
340021a8:	af00      	add	r7, sp, #0
340021aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
340021ac:	4b07      	ldr	r3, [pc, #28]	@ (340021cc <LL_RCC_SetCLKPClockSource+0x28>)
340021ae:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340021b2:	f023 0207 	bic.w	r2, r3, #7
340021b6:	4905      	ldr	r1, [pc, #20]	@ (340021cc <LL_RCC_SetCLKPClockSource+0x28>)
340021b8:	687b      	ldr	r3, [r7, #4]
340021ba:	4313      	orrs	r3, r2
340021bc:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
340021c0:	bf00      	nop
340021c2:	370c      	adds	r7, #12
340021c4:	46bd      	mov	sp, r7
340021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
340021ca:	4770      	bx	lr
340021cc:	56028000 	.word	0x56028000

340021d0 <LL_RCC_SetDCMIPPClockSource>:
{
340021d0:	b480      	push	{r7}
340021d2:	b083      	sub	sp, #12
340021d4:	af00      	add	r7, sp, #0
340021d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
340021d8:	4b07      	ldr	r3, [pc, #28]	@ (340021f8 <LL_RCC_SetDCMIPPClockSource+0x28>)
340021da:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340021de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
340021e2:	4905      	ldr	r1, [pc, #20]	@ (340021f8 <LL_RCC_SetDCMIPPClockSource+0x28>)
340021e4:	687b      	ldr	r3, [r7, #4]
340021e6:	4313      	orrs	r3, r2
340021e8:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
}
340021ec:	bf00      	nop
340021ee:	370c      	adds	r7, #12
340021f0:	46bd      	mov	sp, r7
340021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
340021f6:	4770      	bx	lr
340021f8:	56028000 	.word	0x56028000

340021fc <LL_RCC_SetETHClockSource>:
{
340021fc:	b480      	push	{r7}
340021fe:	b083      	sub	sp, #12
34002200:	af00      	add	r7, sp, #0
34002202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
34002204:	4b07      	ldr	r3, [pc, #28]	@ (34002224 <LL_RCC_SetETHClockSource+0x28>)
34002206:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400220a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
3400220e:	4905      	ldr	r1, [pc, #20]	@ (34002224 <LL_RCC_SetETHClockSource+0x28>)
34002210:	687b      	ldr	r3, [r7, #4]
34002212:	4313      	orrs	r3, r2
34002214:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34002218:	bf00      	nop
3400221a:	370c      	adds	r7, #12
3400221c:	46bd      	mov	sp, r7
3400221e:	f85d 7b04 	ldr.w	r7, [sp], #4
34002222:	4770      	bx	lr
34002224:	56028000 	.word	0x56028000

34002228 <LL_RCC_SetETHPHYInterface>:
{
34002228:	b480      	push	{r7}
3400222a:	b083      	sub	sp, #12
3400222c:	af00      	add	r7, sp, #0
3400222e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
34002230:	4b07      	ldr	r3, [pc, #28]	@ (34002250 <LL_RCC_SetETHPHYInterface+0x28>)
34002232:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34002236:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
3400223a:	4905      	ldr	r1, [pc, #20]	@ (34002250 <LL_RCC_SetETHPHYInterface+0x28>)
3400223c:	687b      	ldr	r3, [r7, #4]
3400223e:	4313      	orrs	r3, r2
34002240:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
34002244:	bf00      	nop
34002246:	370c      	adds	r7, #12
34002248:	46bd      	mov	sp, r7
3400224a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400224e:	4770      	bx	lr
34002250:	56028000 	.word	0x56028000

34002254 <LL_RCC_GetETH1PTPDivider>:
{
34002254:	b480      	push	{r7}
34002256:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
34002258:	4b04      	ldr	r3, [pc, #16]	@ (3400226c <LL_RCC_GetETH1PTPDivider+0x18>)
3400225a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400225e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
34002262:	4618      	mov	r0, r3
34002264:	46bd      	mov	sp, r7
34002266:	f85d 7b04 	ldr.w	r7, [sp], #4
3400226a:	4770      	bx	lr
3400226c:	56028000 	.word	0x56028000

34002270 <LL_RCC_SetETHREFRXClockSource>:
{
34002270:	b480      	push	{r7}
34002272:	b083      	sub	sp, #12
34002274:	af00      	add	r7, sp, #0
34002276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
34002278:	4b07      	ldr	r3, [pc, #28]	@ (34002298 <LL_RCC_SetETHREFRXClockSource+0x28>)
3400227a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
3400227e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
34002282:	4905      	ldr	r1, [pc, #20]	@ (34002298 <LL_RCC_SetETHREFRXClockSource+0x28>)
34002284:	687b      	ldr	r3, [r7, #4]
34002286:	4313      	orrs	r3, r2
34002288:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
3400228c:	bf00      	nop
3400228e:	370c      	adds	r7, #12
34002290:	46bd      	mov	sp, r7
34002292:	f85d 7b04 	ldr.w	r7, [sp], #4
34002296:	4770      	bx	lr
34002298:	56028000 	.word	0x56028000

3400229c <LL_RCC_SetETHREFTXClockSource>:
{
3400229c:	b480      	push	{r7}
3400229e:	b083      	sub	sp, #12
340022a0:	af00      	add	r7, sp, #0
340022a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
340022a4:	4b07      	ldr	r3, [pc, #28]	@ (340022c4 <LL_RCC_SetETHREFTXClockSource+0x28>)
340022a6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340022aa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
340022ae:	4905      	ldr	r1, [pc, #20]	@ (340022c4 <LL_RCC_SetETHREFTXClockSource+0x28>)
340022b0:	687b      	ldr	r3, [r7, #4]
340022b2:	4313      	orrs	r3, r2
340022b4:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
}
340022b8:	bf00      	nop
340022ba:	370c      	adds	r7, #12
340022bc:	46bd      	mov	sp, r7
340022be:	f85d 7b04 	ldr.w	r7, [sp], #4
340022c2:	4770      	bx	lr
340022c4:	56028000 	.word	0x56028000

340022c8 <LL_RCC_SetFDCANClockSource>:
{
340022c8:	b480      	push	{r7}
340022ca:	b083      	sub	sp, #12
340022cc:	af00      	add	r7, sp, #0
340022ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
340022d0:	4b07      	ldr	r3, [pc, #28]	@ (340022f0 <LL_RCC_SetFDCANClockSource+0x28>)
340022d2:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
340022d6:	f023 0203 	bic.w	r2, r3, #3
340022da:	4905      	ldr	r1, [pc, #20]	@ (340022f0 <LL_RCC_SetFDCANClockSource+0x28>)
340022dc:	687b      	ldr	r3, [r7, #4]
340022de:	4313      	orrs	r3, r2
340022e0:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
340022e4:	bf00      	nop
340022e6:	370c      	adds	r7, #12
340022e8:	46bd      	mov	sp, r7
340022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340022ee:	4770      	bx	lr
340022f0:	56028000 	.word	0x56028000

340022f4 <LL_RCC_SetFMCClockSource>:
{
340022f4:	b480      	push	{r7}
340022f6:	b083      	sub	sp, #12
340022f8:	af00      	add	r7, sp, #0
340022fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
340022fc:	4b07      	ldr	r3, [pc, #28]	@ (3400231c <LL_RCC_SetFMCClockSource+0x28>)
340022fe:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34002302:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34002306:	4905      	ldr	r1, [pc, #20]	@ (3400231c <LL_RCC_SetFMCClockSource+0x28>)
34002308:	687b      	ldr	r3, [r7, #4]
3400230a:	4313      	orrs	r3, r2
3400230c:	f8c1 314c 	str.w	r3, [r1, #332]	@ 0x14c
}
34002310:	bf00      	nop
34002312:	370c      	adds	r7, #12
34002314:	46bd      	mov	sp, r7
34002316:	f85d 7b04 	ldr.w	r7, [sp], #4
3400231a:	4770      	bx	lr
3400231c:	56028000 	.word	0x56028000

34002320 <LL_RCC_SetI2CClockSource>:
{
34002320:	b580      	push	{r7, lr}
34002322:	b082      	sub	sp, #8
34002324:	af00      	add	r7, sp, #0
34002326:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34002328:	6878      	ldr	r0, [r7, #4]
3400232a:	f7ff feed 	bl	34002108 <LL_RCC_SetClockSource>
}
3400232e:	bf00      	nop
34002330:	3708      	adds	r7, #8
34002332:	46bd      	mov	sp, r7
34002334:	bd80      	pop	{r7, pc}

34002336 <LL_RCC_SetI3CClockSource>:
{
34002336:	b580      	push	{r7, lr}
34002338:	b082      	sub	sp, #8
3400233a:	af00      	add	r7, sp, #0
3400233c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400233e:	6878      	ldr	r0, [r7, #4]
34002340:	f7ff fee2 	bl	34002108 <LL_RCC_SetClockSource>
}
34002344:	bf00      	nop
34002346:	3708      	adds	r7, #8
34002348:	46bd      	mov	sp, r7
3400234a:	bd80      	pop	{r7, pc}

3400234c <LL_RCC_SetLPTIMClockSource>:
{
3400234c:	b580      	push	{r7, lr}
3400234e:	b082      	sub	sp, #8
34002350:	af00      	add	r7, sp, #0
34002352:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34002354:	6878      	ldr	r0, [r7, #4]
34002356:	f7ff fed7 	bl	34002108 <LL_RCC_SetClockSource>
}
3400235a:	bf00      	nop
3400235c:	3708      	adds	r7, #8
3400235e:	46bd      	mov	sp, r7
34002360:	bd80      	pop	{r7, pc}
	...

34002364 <LL_RCC_SetLPUARTClockSource>:
{
34002364:	b480      	push	{r7}
34002366:	b083      	sub	sp, #12
34002368:	af00      	add	r7, sp, #0
3400236a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
3400236c:	4b07      	ldr	r3, [pc, #28]	@ (3400238c <LL_RCC_SetLPUARTClockSource+0x28>)
3400236e:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34002372:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
34002376:	4905      	ldr	r1, [pc, #20]	@ (3400238c <LL_RCC_SetLPUARTClockSource+0x28>)
34002378:	687b      	ldr	r3, [r7, #4]
3400237a:	4313      	orrs	r3, r2
3400237c:	f8c1 3178 	str.w	r3, [r1, #376]	@ 0x178
}
34002380:	bf00      	nop
34002382:	370c      	adds	r7, #12
34002384:	46bd      	mov	sp, r7
34002386:	f85d 7b04 	ldr.w	r7, [sp], #4
3400238a:	4770      	bx	lr
3400238c:	56028000 	.word	0x56028000

34002390 <LL_RCC_SetLTDCClockSource>:
{
34002390:	b480      	push	{r7}
34002392:	b083      	sub	sp, #12
34002394:	af00      	add	r7, sp, #0
34002396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34002398:	4b07      	ldr	r3, [pc, #28]	@ (340023b8 <LL_RCC_SetLTDCClockSource+0x28>)
3400239a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400239e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
340023a2:	4905      	ldr	r1, [pc, #20]	@ (340023b8 <LL_RCC_SetLTDCClockSource+0x28>)
340023a4:	687b      	ldr	r3, [r7, #4]
340023a6:	4313      	orrs	r3, r2
340023a8:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
}
340023ac:	bf00      	nop
340023ae:	370c      	adds	r7, #12
340023b0:	46bd      	mov	sp, r7
340023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
340023b6:	4770      	bx	lr
340023b8:	56028000 	.word	0x56028000

340023bc <LL_RCC_SetMDFClockSource>:
{
340023bc:	b480      	push	{r7}
340023be:	b083      	sub	sp, #12
340023c0:	af00      	add	r7, sp, #0
340023c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
340023c4:	4b07      	ldr	r3, [pc, #28]	@ (340023e4 <LL_RCC_SetMDFClockSource+0x28>)
340023c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
340023ca:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
340023ce:	4905      	ldr	r1, [pc, #20]	@ (340023e4 <LL_RCC_SetMDFClockSource+0x28>)
340023d0:	687b      	ldr	r3, [r7, #4]
340023d2:	4313      	orrs	r3, r2
340023d4:	f8c1 3154 	str.w	r3, [r1, #340]	@ 0x154
}
340023d8:	bf00      	nop
340023da:	370c      	adds	r7, #12
340023dc:	46bd      	mov	sp, r7
340023de:	f85d 7b04 	ldr.w	r7, [sp], #4
340023e2:	4770      	bx	lr
340023e4:	56028000 	.word	0x56028000

340023e8 <LL_RCC_SetOTGPHYClockSource>:
{
340023e8:	b580      	push	{r7, lr}
340023ea:	b082      	sub	sp, #8
340023ec:	af00      	add	r7, sp, #0
340023ee:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340023f0:	6878      	ldr	r0, [r7, #4]
340023f2:	f7ff fe89 	bl	34002108 <LL_RCC_SetClockSource>
}
340023f6:	bf00      	nop
340023f8:	3708      	adds	r7, #8
340023fa:	46bd      	mov	sp, r7
340023fc:	bd80      	pop	{r7, pc}

340023fe <LL_RCC_SetOTGPHYCKREFClockSource>:
{
340023fe:	b580      	push	{r7, lr}
34002400:	b082      	sub	sp, #8
34002402:	af00      	add	r7, sp, #0
34002404:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34002406:	6878      	ldr	r0, [r7, #4]
34002408:	f7ff fe7e 	bl	34002108 <LL_RCC_SetClockSource>
}
3400240c:	bf00      	nop
3400240e:	3708      	adds	r7, #8
34002410:	46bd      	mov	sp, r7
34002412:	bd80      	pop	{r7, pc}

34002414 <LL_RCC_SetPSSIClockSource>:
{
34002414:	b480      	push	{r7}
34002416:	b083      	sub	sp, #12
34002418:	af00      	add	r7, sp, #0
3400241a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
3400241c:	4b07      	ldr	r3, [pc, #28]	@ (3400243c <LL_RCC_SetPSSIClockSource+0x28>)
3400241e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34002422:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
34002426:	4905      	ldr	r1, [pc, #20]	@ (3400243c <LL_RCC_SetPSSIClockSource+0x28>)
34002428:	687b      	ldr	r3, [r7, #4]
3400242a:	4313      	orrs	r3, r2
3400242c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34002430:	bf00      	nop
34002432:	370c      	adds	r7, #12
34002434:	46bd      	mov	sp, r7
34002436:	f85d 7b04 	ldr.w	r7, [sp], #4
3400243a:	4770      	bx	lr
3400243c:	56028000 	.word	0x56028000

34002440 <LL_RCC_SetSAIClockSource>:
{
34002440:	b580      	push	{r7, lr}
34002442:	b082      	sub	sp, #8
34002444:	af00      	add	r7, sp, #0
34002446:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
34002448:	6878      	ldr	r0, [r7, #4]
3400244a:	f7ff fe5d 	bl	34002108 <LL_RCC_SetClockSource>
}
3400244e:	bf00      	nop
34002450:	3708      	adds	r7, #8
34002452:	46bd      	mov	sp, r7
34002454:	bd80      	pop	{r7, pc}

34002456 <LL_RCC_SetSDMMCClockSource>:
{
34002456:	b580      	push	{r7, lr}
34002458:	b082      	sub	sp, #8
3400245a:	af00      	add	r7, sp, #0
3400245c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
3400245e:	6878      	ldr	r0, [r7, #4]
34002460:	f7ff fe52 	bl	34002108 <LL_RCC_SetClockSource>
}
34002464:	bf00      	nop
34002466:	3708      	adds	r7, #8
34002468:	46bd      	mov	sp, r7
3400246a:	bd80      	pop	{r7, pc}

3400246c <LL_RCC_SetSPDIFRXClockSource>:
{
3400246c:	b480      	push	{r7}
3400246e:	b083      	sub	sp, #12
34002470:	af00      	add	r7, sp, #0
34002472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
34002474:	4b07      	ldr	r3, [pc, #28]	@ (34002494 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34002476:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400247a:	f023 0207 	bic.w	r2, r3, #7
3400247e:	4905      	ldr	r1, [pc, #20]	@ (34002494 <LL_RCC_SetSPDIFRXClockSource+0x28>)
34002480:	687b      	ldr	r3, [r7, #4]
34002482:	4313      	orrs	r3, r2
34002484:	f8c1 3164 	str.w	r3, [r1, #356]	@ 0x164
}
34002488:	bf00      	nop
3400248a:	370c      	adds	r7, #12
3400248c:	46bd      	mov	sp, r7
3400248e:	f85d 7b04 	ldr.w	r7, [sp], #4
34002492:	4770      	bx	lr
34002494:	56028000 	.word	0x56028000

34002498 <LL_RCC_SetSPIClockSource>:
{
34002498:	b580      	push	{r7, lr}
3400249a:	b082      	sub	sp, #8
3400249c:	af00      	add	r7, sp, #0
3400249e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340024a0:	6878      	ldr	r0, [r7, #4]
340024a2:	f7ff fe31 	bl	34002108 <LL_RCC_SetClockSource>
}
340024a6:	bf00      	nop
340024a8:	3708      	adds	r7, #8
340024aa:	46bd      	mov	sp, r7
340024ac:	bd80      	pop	{r7, pc}

340024ae <LL_RCC_SetUSARTClockSource>:
{
340024ae:	b580      	push	{r7, lr}
340024b0:	b082      	sub	sp, #8
340024b2:	af00      	add	r7, sp, #0
340024b4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340024b6:	6878      	ldr	r0, [r7, #4]
340024b8:	f7ff fe26 	bl	34002108 <LL_RCC_SetClockSource>
}
340024bc:	bf00      	nop
340024be:	3708      	adds	r7, #8
340024c0:	46bd      	mov	sp, r7
340024c2:	bd80      	pop	{r7, pc}

340024c4 <LL_RCC_SetXSPIClockSource>:
{
340024c4:	b580      	push	{r7, lr}
340024c6:	b082      	sub	sp, #8
340024c8:	af00      	add	r7, sp, #0
340024ca:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
340024cc:	6878      	ldr	r0, [r7, #4]
340024ce:	f7ff fe1b 	bl	34002108 <LL_RCC_SetClockSource>
}
340024d2:	bf00      	nop
340024d4:	3708      	adds	r7, #8
340024d6:	46bd      	mov	sp, r7
340024d8:	bd80      	pop	{r7, pc}
	...

340024dc <LL_RCC_GetClockSource>:
{
340024dc:	b480      	push	{r7}
340024de:	b085      	sub	sp, #20
340024e0:	af00      	add	r7, sp, #0
340024e2:	6078      	str	r0, [r7, #4]
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
340024e4:	687b      	ldr	r3, [r7, #4]
340024e6:	b2da      	uxtb	r2, r3
340024e8:	4b0e      	ldr	r3, [pc, #56]	@ (34002524 <LL_RCC_GetClockSource+0x48>)
340024ea:	4413      	add	r3, r2
340024ec:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
340024ee:	68fb      	ldr	r3, [r7, #12]
340024f0:	681a      	ldr	r2, [r3, #0]
340024f2:	687b      	ldr	r3, [r7, #4]
340024f4:	0e19      	lsrs	r1, r3, #24
340024f6:	687b      	ldr	r3, [r7, #4]
340024f8:	0a1b      	lsrs	r3, r3, #8
340024fa:	f003 031f 	and.w	r3, r3, #31
340024fe:	fa01 f303 	lsl.w	r3, r1, r3
34002502:	401a      	ands	r2, r3
34002504:	687b      	ldr	r3, [r7, #4]
34002506:	0a1b      	lsrs	r3, r3, #8
34002508:	f003 031f 	and.w	r3, r3, #31
3400250c:	fa22 f303 	lsr.w	r3, r2, r3
34002510:	041a      	lsls	r2, r3, #16
34002512:	687b      	ldr	r3, [r7, #4]
34002514:	4313      	orrs	r3, r2
}
34002516:	4618      	mov	r0, r3
34002518:	3714      	adds	r7, #20
3400251a:	46bd      	mov	sp, r7
3400251c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002520:	4770      	bx	lr
34002522:	bf00      	nop
34002524:	56028144 	.word	0x56028144

34002528 <LL_RCC_GetADCClockSource>:
{
34002528:	b480      	push	{r7}
3400252a:	b083      	sub	sp, #12
3400252c:	af00      	add	r7, sp, #0
3400252e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
34002530:	4b05      	ldr	r3, [pc, #20]	@ (34002548 <LL_RCC_GetADCClockSource+0x20>)
34002532:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34002536:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
3400253a:	4618      	mov	r0, r3
3400253c:	370c      	adds	r7, #12
3400253e:	46bd      	mov	sp, r7
34002540:	f85d 7b04 	ldr.w	r7, [sp], #4
34002544:	4770      	bx	lr
34002546:	bf00      	nop
34002548:	56028000 	.word	0x56028000

3400254c <LL_RCC_GetADFClockSource>:
{
3400254c:	b480      	push	{r7}
3400254e:	b083      	sub	sp, #12
34002550:	af00      	add	r7, sp, #0
34002552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
34002554:	4b05      	ldr	r3, [pc, #20]	@ (3400256c <LL_RCC_GetADFClockSource+0x20>)
34002556:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
3400255a:	f003 0307 	and.w	r3, r3, #7
}
3400255e:	4618      	mov	r0, r3
34002560:	370c      	adds	r7, #12
34002562:	46bd      	mov	sp, r7
34002564:	f85d 7b04 	ldr.w	r7, [sp], #4
34002568:	4770      	bx	lr
3400256a:	bf00      	nop
3400256c:	56028000 	.word	0x56028000

34002570 <LL_RCC_GetCLKPClockSource>:
{
34002570:	b480      	push	{r7}
34002572:	b083      	sub	sp, #12
34002574:	af00      	add	r7, sp, #0
34002576:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34002578:	4b05      	ldr	r3, [pc, #20]	@ (34002590 <LL_RCC_GetCLKPClockSource+0x20>)
3400257a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400257e:	f003 0307 	and.w	r3, r3, #7
}
34002582:	4618      	mov	r0, r3
34002584:	370c      	adds	r7, #12
34002586:	46bd      	mov	sp, r7
34002588:	f85d 7b04 	ldr.w	r7, [sp], #4
3400258c:	4770      	bx	lr
3400258e:	bf00      	nop
34002590:	56028000 	.word	0x56028000

34002594 <LL_RCC_GetDCMIPPClockSource>:
{
34002594:	b480      	push	{r7}
34002596:	b083      	sub	sp, #12
34002598:	af00      	add	r7, sp, #0
3400259a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
3400259c:	4b05      	ldr	r3, [pc, #20]	@ (340025b4 <LL_RCC_GetDCMIPPClockSource+0x20>)
3400259e:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340025a2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
}
340025a6:	4618      	mov	r0, r3
340025a8:	370c      	adds	r7, #12
340025aa:	46bd      	mov	sp, r7
340025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
340025b0:	4770      	bx	lr
340025b2:	bf00      	nop
340025b4:	56028000 	.word	0x56028000

340025b8 <LL_RCC_GetETHClockSource>:
{
340025b8:	b480      	push	{r7}
340025ba:	b083      	sub	sp, #12
340025bc:	af00      	add	r7, sp, #0
340025be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
340025c0:	4b05      	ldr	r3, [pc, #20]	@ (340025d8 <LL_RCC_GetETHClockSource+0x20>)
340025c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340025c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
}
340025ca:	4618      	mov	r0, r3
340025cc:	370c      	adds	r7, #12
340025ce:	46bd      	mov	sp, r7
340025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
340025d4:	4770      	bx	lr
340025d6:	bf00      	nop
340025d8:	56028000 	.word	0x56028000

340025dc <LL_RCC_GetETHPTPClockSource>:
{
340025dc:	b480      	push	{r7}
340025de:	b083      	sub	sp, #12
340025e0:	af00      	add	r7, sp, #0
340025e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
340025e4:	4b05      	ldr	r3, [pc, #20]	@ (340025fc <LL_RCC_GetETHPTPClockSource+0x20>)
340025e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340025ea:	f003 0303 	and.w	r3, r3, #3
}
340025ee:	4618      	mov	r0, r3
340025f0:	370c      	adds	r7, #12
340025f2:	46bd      	mov	sp, r7
340025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
340025f8:	4770      	bx	lr
340025fa:	bf00      	nop
340025fc:	56028000 	.word	0x56028000

34002600 <LL_RCC_GetFDCANClockSource>:
{
34002600:	b480      	push	{r7}
34002602:	b083      	sub	sp, #12
34002604:	af00      	add	r7, sp, #0
34002606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34002608:	4b05      	ldr	r3, [pc, #20]	@ (34002620 <LL_RCC_GetFDCANClockSource+0x20>)
3400260a:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
3400260e:	f003 0303 	and.w	r3, r3, #3
}
34002612:	4618      	mov	r0, r3
34002614:	370c      	adds	r7, #12
34002616:	46bd      	mov	sp, r7
34002618:	f85d 7b04 	ldr.w	r7, [sp], #4
3400261c:	4770      	bx	lr
3400261e:	bf00      	nop
34002620:	56028000 	.word	0x56028000

34002624 <LL_RCC_GetFMCClockSource>:
{
34002624:	b480      	push	{r7}
34002626:	b083      	sub	sp, #12
34002628:	af00      	add	r7, sp, #0
3400262a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
3400262c:	4b05      	ldr	r3, [pc, #20]	@ (34002644 <LL_RCC_GetFMCClockSource+0x20>)
3400262e:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34002632:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
34002636:	4618      	mov	r0, r3
34002638:	370c      	adds	r7, #12
3400263a:	46bd      	mov	sp, r7
3400263c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002640:	4770      	bx	lr
34002642:	bf00      	nop
34002644:	56028000 	.word	0x56028000

34002648 <LL_RCC_GetI2CClockSource>:
{
34002648:	b580      	push	{r7, lr}
3400264a:	b082      	sub	sp, #8
3400264c:	af00      	add	r7, sp, #0
3400264e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34002650:	6878      	ldr	r0, [r7, #4]
34002652:	f7ff ff43 	bl	340024dc <LL_RCC_GetClockSource>
34002656:	4603      	mov	r3, r0
}
34002658:	4618      	mov	r0, r3
3400265a:	3708      	adds	r7, #8
3400265c:	46bd      	mov	sp, r7
3400265e:	bd80      	pop	{r7, pc}

34002660 <LL_RCC_GetI3CClockSource>:
{
34002660:	b580      	push	{r7, lr}
34002662:	b082      	sub	sp, #8
34002664:	af00      	add	r7, sp, #0
34002666:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34002668:	6878      	ldr	r0, [r7, #4]
3400266a:	f7ff ff37 	bl	340024dc <LL_RCC_GetClockSource>
3400266e:	4603      	mov	r3, r0
}
34002670:	4618      	mov	r0, r3
34002672:	3708      	adds	r7, #8
34002674:	46bd      	mov	sp, r7
34002676:	bd80      	pop	{r7, pc}

34002678 <LL_RCC_GetLPTIMClockSource>:
{
34002678:	b580      	push	{r7, lr}
3400267a:	b082      	sub	sp, #8
3400267c:	af00      	add	r7, sp, #0
3400267e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34002680:	6878      	ldr	r0, [r7, #4]
34002682:	f7ff ff2b 	bl	340024dc <LL_RCC_GetClockSource>
34002686:	4603      	mov	r3, r0
}
34002688:	4618      	mov	r0, r3
3400268a:	3708      	adds	r7, #8
3400268c:	46bd      	mov	sp, r7
3400268e:	bd80      	pop	{r7, pc}

34002690 <LL_RCC_GetLPUARTClockSource>:
{
34002690:	b480      	push	{r7}
34002692:	b083      	sub	sp, #12
34002694:	af00      	add	r7, sp, #0
34002696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34002698:	4b05      	ldr	r3, [pc, #20]	@ (340026b0 <LL_RCC_GetLPUARTClockSource+0x20>)
3400269a:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400269e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
340026a2:	4618      	mov	r0, r3
340026a4:	370c      	adds	r7, #12
340026a6:	46bd      	mov	sp, r7
340026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
340026ac:	4770      	bx	lr
340026ae:	bf00      	nop
340026b0:	56028000 	.word	0x56028000

340026b4 <LL_RCC_GetLTDCClockSource>:
{
340026b4:	b480      	push	{r7}
340026b6:	b083      	sub	sp, #12
340026b8:	af00      	add	r7, sp, #0
340026ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
340026bc:	4b05      	ldr	r3, [pc, #20]	@ (340026d4 <LL_RCC_GetLTDCClockSource+0x20>)
340026be:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
340026c2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
}
340026c6:	4618      	mov	r0, r3
340026c8:	370c      	adds	r7, #12
340026ca:	46bd      	mov	sp, r7
340026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
340026d0:	4770      	bx	lr
340026d2:	bf00      	nop
340026d4:	56028000 	.word	0x56028000

340026d8 <LL_RCC_GetMDFClockSource>:
{
340026d8:	b480      	push	{r7}
340026da:	b083      	sub	sp, #12
340026dc:	af00      	add	r7, sp, #0
340026de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
340026e0:	4b05      	ldr	r3, [pc, #20]	@ (340026f8 <LL_RCC_GetMDFClockSource+0x20>)
340026e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
340026e6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
}
340026ea:	4618      	mov	r0, r3
340026ec:	370c      	adds	r7, #12
340026ee:	46bd      	mov	sp, r7
340026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
340026f4:	4770      	bx	lr
340026f6:	bf00      	nop
340026f8:	56028000 	.word	0x56028000

340026fc <LL_RCC_GetPSSIClockSource>:
{
340026fc:	b480      	push	{r7}
340026fe:	b083      	sub	sp, #12
34002700:	af00      	add	r7, sp, #0
34002702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34002704:	4b05      	ldr	r3, [pc, #20]	@ (3400271c <LL_RCC_GetPSSIClockSource+0x20>)
34002706:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
3400270a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
}
3400270e:	4618      	mov	r0, r3
34002710:	370c      	adds	r7, #12
34002712:	46bd      	mov	sp, r7
34002714:	f85d 7b04 	ldr.w	r7, [sp], #4
34002718:	4770      	bx	lr
3400271a:	bf00      	nop
3400271c:	56028000 	.word	0x56028000

34002720 <LL_RCC_GetSAIClockSource>:
{
34002720:	b580      	push	{r7, lr}
34002722:	b082      	sub	sp, #8
34002724:	af00      	add	r7, sp, #0
34002726:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34002728:	6878      	ldr	r0, [r7, #4]
3400272a:	f7ff fed7 	bl	340024dc <LL_RCC_GetClockSource>
3400272e:	4603      	mov	r3, r0
}
34002730:	4618      	mov	r0, r3
34002732:	3708      	adds	r7, #8
34002734:	46bd      	mov	sp, r7
34002736:	bd80      	pop	{r7, pc}

34002738 <LL_RCC_GetSDMMCClockSource>:
{
34002738:	b580      	push	{r7, lr}
3400273a:	b082      	sub	sp, #8
3400273c:	af00      	add	r7, sp, #0
3400273e:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34002740:	6878      	ldr	r0, [r7, #4]
34002742:	f7ff fecb 	bl	340024dc <LL_RCC_GetClockSource>
34002746:	4603      	mov	r3, r0
}
34002748:	4618      	mov	r0, r3
3400274a:	3708      	adds	r7, #8
3400274c:	46bd      	mov	sp, r7
3400274e:	bd80      	pop	{r7, pc}

34002750 <LL_RCC_GetSPDIFRXClockSource>:
{
34002750:	b480      	push	{r7}
34002752:	b083      	sub	sp, #12
34002754:	af00      	add	r7, sp, #0
34002756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34002758:	4b05      	ldr	r3, [pc, #20]	@ (34002770 <LL_RCC_GetSPDIFRXClockSource+0x20>)
3400275a:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
3400275e:	f003 0307 	and.w	r3, r3, #7
}
34002762:	4618      	mov	r0, r3
34002764:	370c      	adds	r7, #12
34002766:	46bd      	mov	sp, r7
34002768:	f85d 7b04 	ldr.w	r7, [sp], #4
3400276c:	4770      	bx	lr
3400276e:	bf00      	nop
34002770:	56028000 	.word	0x56028000

34002774 <LL_RCC_GetSPIClockSource>:
{
34002774:	b580      	push	{r7, lr}
34002776:	b082      	sub	sp, #8
34002778:	af00      	add	r7, sp, #0
3400277a:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
3400277c:	6878      	ldr	r0, [r7, #4]
3400277e:	f7ff fead 	bl	340024dc <LL_RCC_GetClockSource>
34002782:	4603      	mov	r3, r0
}
34002784:	4618      	mov	r0, r3
34002786:	3708      	adds	r7, #8
34002788:	46bd      	mov	sp, r7
3400278a:	bd80      	pop	{r7, pc}

3400278c <LL_RCC_GetUSARTClockSource>:
{
3400278c:	b580      	push	{r7, lr}
3400278e:	b082      	sub	sp, #8
34002790:	af00      	add	r7, sp, #0
34002792:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
34002794:	6878      	ldr	r0, [r7, #4]
34002796:	f7ff fea1 	bl	340024dc <LL_RCC_GetClockSource>
3400279a:	4603      	mov	r3, r0
}
3400279c:	4618      	mov	r0, r3
3400279e:	3708      	adds	r7, #8
340027a0:	46bd      	mov	sp, r7
340027a2:	bd80      	pop	{r7, pc}

340027a4 <LL_RCC_GetUARTClockSource>:
{
340027a4:	b580      	push	{r7, lr}
340027a6:	b082      	sub	sp, #8
340027a8:	af00      	add	r7, sp, #0
340027aa:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340027ac:	6878      	ldr	r0, [r7, #4]
340027ae:	f7ff fe95 	bl	340024dc <LL_RCC_GetClockSource>
340027b2:	4603      	mov	r3, r0
}
340027b4:	4618      	mov	r0, r3
340027b6:	3708      	adds	r7, #8
340027b8:	46bd      	mov	sp, r7
340027ba:	bd80      	pop	{r7, pc}

340027bc <LL_RCC_GetUSBClockSource>:
{
340027bc:	b580      	push	{r7, lr}
340027be:	b082      	sub	sp, #8
340027c0:	af00      	add	r7, sp, #0
340027c2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340027c4:	6878      	ldr	r0, [r7, #4]
340027c6:	f7ff fe89 	bl	340024dc <LL_RCC_GetClockSource>
340027ca:	4603      	mov	r3, r0
}
340027cc:	4618      	mov	r0, r3
340027ce:	3708      	adds	r7, #8
340027d0:	46bd      	mov	sp, r7
340027d2:	bd80      	pop	{r7, pc}

340027d4 <LL_RCC_GetXSPIClockSource>:
{
340027d4:	b580      	push	{r7, lr}
340027d6:	b082      	sub	sp, #8
340027d8:	af00      	add	r7, sp, #0
340027da:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
340027dc:	6878      	ldr	r0, [r7, #4]
340027de:	f7ff fe7d 	bl	340024dc <LL_RCC_GetClockSource>
340027e2:	4603      	mov	r3, r0
}
340027e4:	4618      	mov	r0, r3
340027e6:	3708      	adds	r7, #8
340027e8:	46bd      	mov	sp, r7
340027ea:	bd80      	pop	{r7, pc}

340027ec <LL_RCC_SetRTCClockSource>:
{
340027ec:	b480      	push	{r7}
340027ee:	b083      	sub	sp, #12
340027f0:	af00      	add	r7, sp, #0
340027f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
340027f4:	4b07      	ldr	r3, [pc, #28]	@ (34002814 <LL_RCC_SetRTCClockSource+0x28>)
340027f6:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340027fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
340027fe:	4905      	ldr	r1, [pc, #20]	@ (34002814 <LL_RCC_SetRTCClockSource+0x28>)
34002800:	687b      	ldr	r3, [r7, #4]
34002802:	4313      	orrs	r3, r2
34002804:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34002808:	bf00      	nop
3400280a:	370c      	adds	r7, #12
3400280c:	46bd      	mov	sp, r7
3400280e:	f85d 7b04 	ldr.w	r7, [sp], #4
34002812:	4770      	bx	lr
34002814:	56028000 	.word	0x56028000

34002818 <LL_RCC_GetRTCClockSource>:
{
34002818:	b480      	push	{r7}
3400281a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3400281c:	4b04      	ldr	r3, [pc, #16]	@ (34002830 <LL_RCC_GetRTCClockSource+0x18>)
3400281e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34002822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
34002826:	4618      	mov	r0, r3
34002828:	46bd      	mov	sp, r7
3400282a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400282e:	4770      	bx	lr
34002830:	56028000 	.word	0x56028000

34002834 <LL_RCC_SetRTC_HSEPrescaler>:
{
34002834:	b480      	push	{r7}
34002836:	b083      	sub	sp, #12
34002838:	af00      	add	r7, sp, #0
3400283a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
3400283c:	4b07      	ldr	r3, [pc, #28]	@ (3400285c <LL_RCC_SetRTC_HSEPrescaler+0x28>)
3400283e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34002842:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
34002846:	4905      	ldr	r1, [pc, #20]	@ (3400285c <LL_RCC_SetRTC_HSEPrescaler+0x28>)
34002848:	687b      	ldr	r3, [r7, #4]
3400284a:	4313      	orrs	r3, r2
3400284c:	f8c1 315c 	str.w	r3, [r1, #348]	@ 0x15c
}
34002850:	bf00      	nop
34002852:	370c      	adds	r7, #12
34002854:	46bd      	mov	sp, r7
34002856:	f85d 7b04 	ldr.w	r7, [sp], #4
3400285a:	4770      	bx	lr
3400285c:	56028000 	.word	0x56028000

34002860 <LL_RCC_SetTIMPrescaler>:
{
34002860:	b480      	push	{r7}
34002862:	b083      	sub	sp, #12
34002864:	af00      	add	r7, sp, #0
34002866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34002868:	4b07      	ldr	r3, [pc, #28]	@ (34002888 <LL_RCC_SetTIMPrescaler+0x28>)
3400286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400286c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
34002870:	687b      	ldr	r3, [r7, #4]
34002872:	061b      	lsls	r3, r3, #24
34002874:	4904      	ldr	r1, [pc, #16]	@ (34002888 <LL_RCC_SetTIMPrescaler+0x28>)
34002876:	4313      	orrs	r3, r2
34002878:	624b      	str	r3, [r1, #36]	@ 0x24
}
3400287a:	bf00      	nop
3400287c:	370c      	adds	r7, #12
3400287e:	46bd      	mov	sp, r7
34002880:	f85d 7b04 	ldr.w	r7, [sp], #4
34002884:	4770      	bx	lr
34002886:	bf00      	nop
34002888:	56028000 	.word	0x56028000

3400288c <LL_RCC_GetTIMPrescaler>:
{
3400288c:	b480      	push	{r7}
3400288e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34002890:	4b04      	ldr	r3, [pc, #16]	@ (340028a4 <LL_RCC_GetTIMPrescaler+0x18>)
34002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34002894:	0e1b      	lsrs	r3, r3, #24
34002896:	f003 0303 	and.w	r3, r3, #3
}
3400289a:	4618      	mov	r0, r3
3400289c:	46bd      	mov	sp, r7
3400289e:	f85d 7b04 	ldr.w	r7, [sp], #4
340028a2:	4770      	bx	lr
340028a4:	56028000 	.word	0x56028000

340028a8 <LL_RCC_PLL1_GetSource>:
{
340028a8:	b480      	push	{r7}
340028aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
340028ac:	4b04      	ldr	r3, [pc, #16]	@ (340028c0 <LL_RCC_PLL1_GetSource+0x18>)
340028ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340028b2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
340028b6:	4618      	mov	r0, r3
340028b8:	46bd      	mov	sp, r7
340028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
340028be:	4770      	bx	lr
340028c0:	56028000 	.word	0x56028000

340028c4 <LL_RCC_PLL1_IsReady>:
{
340028c4:	b480      	push	{r7}
340028c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
340028c8:	4b07      	ldr	r3, [pc, #28]	@ (340028e8 <LL_RCC_PLL1_IsReady+0x24>)
340028ca:	685b      	ldr	r3, [r3, #4]
340028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340028d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340028d4:	d101      	bne.n	340028da <LL_RCC_PLL1_IsReady+0x16>
340028d6:	2301      	movs	r3, #1
340028d8:	e000      	b.n	340028dc <LL_RCC_PLL1_IsReady+0x18>
340028da:	2300      	movs	r3, #0
}
340028dc:	4618      	mov	r0, r3
340028de:	46bd      	mov	sp, r7
340028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
340028e4:	4770      	bx	lr
340028e6:	bf00      	nop
340028e8:	56028000 	.word	0x56028000

340028ec <LL_RCC_PLL1_IsEnabledBypass>:
{
340028ec:	b480      	push	{r7}
340028ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
340028f0:	4b07      	ldr	r3, [pc, #28]	@ (34002910 <LL_RCC_PLL1_IsEnabledBypass+0x24>)
340028f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
340028f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
340028fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
340028fe:	d101      	bne.n	34002904 <LL_RCC_PLL1_IsEnabledBypass+0x18>
34002900:	2301      	movs	r3, #1
34002902:	e000      	b.n	34002906 <LL_RCC_PLL1_IsEnabledBypass+0x1a>
34002904:	2300      	movs	r3, #0
}
34002906:	4618      	mov	r0, r3
34002908:	46bd      	mov	sp, r7
3400290a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400290e:	4770      	bx	lr
34002910:	56028000 	.word	0x56028000

34002914 <LL_RCC_PLL1_GetN>:
{
34002914:	b480      	push	{r7}
34002916:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34002918:	4b05      	ldr	r3, [pc, #20]	@ (34002930 <LL_RCC_PLL1_GetN+0x1c>)
3400291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400291e:	0a1b      	lsrs	r3, r3, #8
34002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34002924:	4618      	mov	r0, r3
34002926:	46bd      	mov	sp, r7
34002928:	f85d 7b04 	ldr.w	r7, [sp], #4
3400292c:	4770      	bx	lr
3400292e:	bf00      	nop
34002930:	56028000 	.word	0x56028000

34002934 <LL_RCC_PLL1_GetM>:
{
34002934:	b480      	push	{r7}
34002936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
34002938:	4b05      	ldr	r3, [pc, #20]	@ (34002950 <LL_RCC_PLL1_GetM+0x1c>)
3400293a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
3400293e:	0d1b      	lsrs	r3, r3, #20
34002940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34002944:	4618      	mov	r0, r3
34002946:	46bd      	mov	sp, r7
34002948:	f85d 7b04 	ldr.w	r7, [sp], #4
3400294c:	4770      	bx	lr
3400294e:	bf00      	nop
34002950:	56028000 	.word	0x56028000

34002954 <LL_RCC_PLL1_GetP1>:
{
34002954:	b480      	push	{r7}
34002956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34002958:	4b05      	ldr	r3, [pc, #20]	@ (34002970 <LL_RCC_PLL1_GetP1+0x1c>)
3400295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400295e:	0edb      	lsrs	r3, r3, #27
34002960:	f003 0307 	and.w	r3, r3, #7
}
34002964:	4618      	mov	r0, r3
34002966:	46bd      	mov	sp, r7
34002968:	f85d 7b04 	ldr.w	r7, [sp], #4
3400296c:	4770      	bx	lr
3400296e:	bf00      	nop
34002970:	56028000 	.word	0x56028000

34002974 <LL_RCC_PLL1_GetP2>:
{
34002974:	b480      	push	{r7}
34002976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34002978:	4b05      	ldr	r3, [pc, #20]	@ (34002990 <LL_RCC_PLL1_GetP2+0x1c>)
3400297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400297e:	0e1b      	lsrs	r3, r3, #24
34002980:	f003 0307 	and.w	r3, r3, #7
}
34002984:	4618      	mov	r0, r3
34002986:	46bd      	mov	sp, r7
34002988:	f85d 7b04 	ldr.w	r7, [sp], #4
3400298c:	4770      	bx	lr
3400298e:	bf00      	nop
34002990:	56028000 	.word	0x56028000

34002994 <LL_RCC_PLL1P_IsEnabled>:
{
34002994:	b480      	push	{r7}
34002996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34002998:	4b07      	ldr	r3, [pc, #28]	@ (340029b8 <LL_RCC_PLL1P_IsEnabled+0x24>)
3400299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
3400299e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
340029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
340029a6:	d101      	bne.n	340029ac <LL_RCC_PLL1P_IsEnabled+0x18>
340029a8:	2301      	movs	r3, #1
340029aa:	e000      	b.n	340029ae <LL_RCC_PLL1P_IsEnabled+0x1a>
340029ac:	2300      	movs	r3, #0
}
340029ae:	4618      	mov	r0, r3
340029b0:	46bd      	mov	sp, r7
340029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
340029b6:	4770      	bx	lr
340029b8:	56028000 	.word	0x56028000

340029bc <LL_RCC_PLL1_GetFRACN>:
{
340029bc:	b480      	push	{r7}
340029be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
340029c0:	4b04      	ldr	r3, [pc, #16]	@ (340029d4 <LL_RCC_PLL1_GetFRACN+0x18>)
340029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
340029c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
340029ca:	4618      	mov	r0, r3
340029cc:	46bd      	mov	sp, r7
340029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
340029d2:	4770      	bx	lr
340029d4:	56028000 	.word	0x56028000

340029d8 <LL_RCC_PLL2_GetSource>:
{
340029d8:	b480      	push	{r7}
340029da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
340029dc:	4b04      	ldr	r3, [pc, #16]	@ (340029f0 <LL_RCC_PLL2_GetSource+0x18>)
340029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
340029e2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
340029e6:	4618      	mov	r0, r3
340029e8:	46bd      	mov	sp, r7
340029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
340029ee:	4770      	bx	lr
340029f0:	56028000 	.word	0x56028000

340029f4 <LL_RCC_PLL2_IsReady>:
{
340029f4:	b480      	push	{r7}
340029f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
340029f8:	4b07      	ldr	r3, [pc, #28]	@ (34002a18 <LL_RCC_PLL2_IsReady+0x24>)
340029fa:	685b      	ldr	r3, [r3, #4]
340029fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34002a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34002a04:	d101      	bne.n	34002a0a <LL_RCC_PLL2_IsReady+0x16>
34002a06:	2301      	movs	r3, #1
34002a08:	e000      	b.n	34002a0c <LL_RCC_PLL2_IsReady+0x18>
34002a0a:	2300      	movs	r3, #0
}
34002a0c:	4618      	mov	r0, r3
34002a0e:	46bd      	mov	sp, r7
34002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
34002a14:	4770      	bx	lr
34002a16:	bf00      	nop
34002a18:	56028000 	.word	0x56028000

34002a1c <LL_RCC_PLL2_IsEnabledBypass>:
{
34002a1c:	b480      	push	{r7}
34002a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34002a20:	4b07      	ldr	r3, [pc, #28]	@ (34002a40 <LL_RCC_PLL2_IsEnabledBypass+0x24>)
34002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34002a26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34002a2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34002a2e:	d101      	bne.n	34002a34 <LL_RCC_PLL2_IsEnabledBypass+0x18>
34002a30:	2301      	movs	r3, #1
34002a32:	e000      	b.n	34002a36 <LL_RCC_PLL2_IsEnabledBypass+0x1a>
34002a34:	2300      	movs	r3, #0
}
34002a36:	4618      	mov	r0, r3
34002a38:	46bd      	mov	sp, r7
34002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
34002a3e:	4770      	bx	lr
34002a40:	56028000 	.word	0x56028000

34002a44 <LL_RCC_PLL2_GetN>:
{
34002a44:	b480      	push	{r7}
34002a46:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34002a48:	4b05      	ldr	r3, [pc, #20]	@ (34002a60 <LL_RCC_PLL2_GetN+0x1c>)
34002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34002a4e:	0a1b      	lsrs	r3, r3, #8
34002a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34002a54:	4618      	mov	r0, r3
34002a56:	46bd      	mov	sp, r7
34002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
34002a5c:	4770      	bx	lr
34002a5e:	bf00      	nop
34002a60:	56028000 	.word	0x56028000

34002a64 <LL_RCC_PLL2_GetM>:
{
34002a64:	b480      	push	{r7}
34002a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
34002a68:	4b05      	ldr	r3, [pc, #20]	@ (34002a80 <LL_RCC_PLL2_GetM+0x1c>)
34002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
34002a6e:	0d1b      	lsrs	r3, r3, #20
34002a70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34002a74:	4618      	mov	r0, r3
34002a76:	46bd      	mov	sp, r7
34002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
34002a7c:	4770      	bx	lr
34002a7e:	bf00      	nop
34002a80:	56028000 	.word	0x56028000

34002a84 <LL_RCC_PLL2_GetP1>:
{
34002a84:	b480      	push	{r7}
34002a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34002a88:	4b05      	ldr	r3, [pc, #20]	@ (34002aa0 <LL_RCC_PLL2_GetP1+0x1c>)
34002a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34002a8e:	0edb      	lsrs	r3, r3, #27
34002a90:	f003 0307 	and.w	r3, r3, #7
}
34002a94:	4618      	mov	r0, r3
34002a96:	46bd      	mov	sp, r7
34002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
34002a9c:	4770      	bx	lr
34002a9e:	bf00      	nop
34002aa0:	56028000 	.word	0x56028000

34002aa4 <LL_RCC_PLL2_GetP2>:
{
34002aa4:	b480      	push	{r7}
34002aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34002aa8:	4b05      	ldr	r3, [pc, #20]	@ (34002ac0 <LL_RCC_PLL2_GetP2+0x1c>)
34002aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34002aae:	0e1b      	lsrs	r3, r3, #24
34002ab0:	f003 0307 	and.w	r3, r3, #7
}
34002ab4:	4618      	mov	r0, r3
34002ab6:	46bd      	mov	sp, r7
34002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002abc:	4770      	bx	lr
34002abe:	bf00      	nop
34002ac0:	56028000 	.word	0x56028000

34002ac4 <LL_RCC_PLL2P_IsEnabled>:
{
34002ac4:	b480      	push	{r7}
34002ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
34002ac8:	4b07      	ldr	r3, [pc, #28]	@ (34002ae8 <LL_RCC_PLL2P_IsEnabled+0x24>)
34002aca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
34002ace:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34002ad6:	d101      	bne.n	34002adc <LL_RCC_PLL2P_IsEnabled+0x18>
34002ad8:	2301      	movs	r3, #1
34002ada:	e000      	b.n	34002ade <LL_RCC_PLL2P_IsEnabled+0x1a>
34002adc:	2300      	movs	r3, #0
}
34002ade:	4618      	mov	r0, r3
34002ae0:	46bd      	mov	sp, r7
34002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
34002ae6:	4770      	bx	lr
34002ae8:	56028000 	.word	0x56028000

34002aec <LL_RCC_PLL2_GetFRACN>:
{
34002aec:	b480      	push	{r7}
34002aee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
34002af0:	4b04      	ldr	r3, [pc, #16]	@ (34002b04 <LL_RCC_PLL2_GetFRACN+0x18>)
34002af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34002af6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34002afa:	4618      	mov	r0, r3
34002afc:	46bd      	mov	sp, r7
34002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b02:	4770      	bx	lr
34002b04:	56028000 	.word	0x56028000

34002b08 <LL_RCC_PLL3_GetSource>:
{
34002b08:	b480      	push	{r7}
34002b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34002b0c:	4b04      	ldr	r3, [pc, #16]	@ (34002b20 <LL_RCC_PLL3_GetSource+0x18>)
34002b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34002b12:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34002b16:	4618      	mov	r0, r3
34002b18:	46bd      	mov	sp, r7
34002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b1e:	4770      	bx	lr
34002b20:	56028000 	.word	0x56028000

34002b24 <LL_RCC_PLL3_IsReady>:
{
34002b24:	b480      	push	{r7}
34002b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
34002b28:	4b07      	ldr	r3, [pc, #28]	@ (34002b48 <LL_RCC_PLL3_IsReady+0x24>)
34002b2a:	685b      	ldr	r3, [r3, #4]
34002b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34002b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34002b34:	d101      	bne.n	34002b3a <LL_RCC_PLL3_IsReady+0x16>
34002b36:	2301      	movs	r3, #1
34002b38:	e000      	b.n	34002b3c <LL_RCC_PLL3_IsReady+0x18>
34002b3a:	2300      	movs	r3, #0
}
34002b3c:	4618      	mov	r0, r3
34002b3e:	46bd      	mov	sp, r7
34002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b44:	4770      	bx	lr
34002b46:	bf00      	nop
34002b48:	56028000 	.word	0x56028000

34002b4c <LL_RCC_PLL3_IsEnabledBypass>:
{
34002b4c:	b480      	push	{r7}
34002b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34002b50:	4b07      	ldr	r3, [pc, #28]	@ (34002b70 <LL_RCC_PLL3_IsEnabledBypass+0x24>)
34002b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34002b56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34002b5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34002b5e:	d101      	bne.n	34002b64 <LL_RCC_PLL3_IsEnabledBypass+0x18>
34002b60:	2301      	movs	r3, #1
34002b62:	e000      	b.n	34002b66 <LL_RCC_PLL3_IsEnabledBypass+0x1a>
34002b64:	2300      	movs	r3, #0
}
34002b66:	4618      	mov	r0, r3
34002b68:	46bd      	mov	sp, r7
34002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b6e:	4770      	bx	lr
34002b70:	56028000 	.word	0x56028000

34002b74 <LL_RCC_PLL3_GetN>:
{
34002b74:	b480      	push	{r7}
34002b76:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34002b78:	4b05      	ldr	r3, [pc, #20]	@ (34002b90 <LL_RCC_PLL3_GetN+0x1c>)
34002b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34002b7e:	0a1b      	lsrs	r3, r3, #8
34002b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34002b84:	4618      	mov	r0, r3
34002b86:	46bd      	mov	sp, r7
34002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
34002b8c:	4770      	bx	lr
34002b8e:	bf00      	nop
34002b90:	56028000 	.word	0x56028000

34002b94 <LL_RCC_PLL3_GetM>:
{
34002b94:	b480      	push	{r7}
34002b96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
34002b98:	4b05      	ldr	r3, [pc, #20]	@ (34002bb0 <LL_RCC_PLL3_GetM+0x1c>)
34002b9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
34002b9e:	0d1b      	lsrs	r3, r3, #20
34002ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34002ba4:	4618      	mov	r0, r3
34002ba6:	46bd      	mov	sp, r7
34002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002bac:	4770      	bx	lr
34002bae:	bf00      	nop
34002bb0:	56028000 	.word	0x56028000

34002bb4 <LL_RCC_PLL3_GetP1>:
{
34002bb4:	b480      	push	{r7}
34002bb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34002bb8:	4b05      	ldr	r3, [pc, #20]	@ (34002bd0 <LL_RCC_PLL3_GetP1+0x1c>)
34002bba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34002bbe:	0edb      	lsrs	r3, r3, #27
34002bc0:	f003 0307 	and.w	r3, r3, #7
}
34002bc4:	4618      	mov	r0, r3
34002bc6:	46bd      	mov	sp, r7
34002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002bcc:	4770      	bx	lr
34002bce:	bf00      	nop
34002bd0:	56028000 	.word	0x56028000

34002bd4 <LL_RCC_PLL3_GetP2>:
{
34002bd4:	b480      	push	{r7}
34002bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34002bd8:	4b05      	ldr	r3, [pc, #20]	@ (34002bf0 <LL_RCC_PLL3_GetP2+0x1c>)
34002bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34002bde:	0e1b      	lsrs	r3, r3, #24
34002be0:	f003 0307 	and.w	r3, r3, #7
}
34002be4:	4618      	mov	r0, r3
34002be6:	46bd      	mov	sp, r7
34002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002bec:	4770      	bx	lr
34002bee:	bf00      	nop
34002bf0:	56028000 	.word	0x56028000

34002bf4 <LL_RCC_PLL3P_IsEnabled>:
{
34002bf4:	b480      	push	{r7}
34002bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34002bf8:	4b07      	ldr	r3, [pc, #28]	@ (34002c18 <LL_RCC_PLL3P_IsEnabled+0x24>)
34002bfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34002bfe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34002c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34002c06:	d101      	bne.n	34002c0c <LL_RCC_PLL3P_IsEnabled+0x18>
34002c08:	2301      	movs	r3, #1
34002c0a:	e000      	b.n	34002c0e <LL_RCC_PLL3P_IsEnabled+0x1a>
34002c0c:	2300      	movs	r3, #0
}
34002c0e:	4618      	mov	r0, r3
34002c10:	46bd      	mov	sp, r7
34002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
34002c16:	4770      	bx	lr
34002c18:	56028000 	.word	0x56028000

34002c1c <LL_RCC_PLL3_GetFRACN>:
{
34002c1c:	b480      	push	{r7}
34002c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
34002c20:	4b04      	ldr	r3, [pc, #16]	@ (34002c34 <LL_RCC_PLL3_GetFRACN+0x18>)
34002c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34002c26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34002c2a:	4618      	mov	r0, r3
34002c2c:	46bd      	mov	sp, r7
34002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
34002c32:	4770      	bx	lr
34002c34:	56028000 	.word	0x56028000

34002c38 <LL_RCC_PLL4_GetSource>:
{
34002c38:	b480      	push	{r7}
34002c3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
34002c3c:	4b04      	ldr	r3, [pc, #16]	@ (34002c50 <LL_RCC_PLL4_GetSource+0x18>)
34002c3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34002c42:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
}
34002c46:	4618      	mov	r0, r3
34002c48:	46bd      	mov	sp, r7
34002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
34002c4e:	4770      	bx	lr
34002c50:	56028000 	.word	0x56028000

34002c54 <LL_RCC_PLL4_IsReady>:
{
34002c54:	b480      	push	{r7}
34002c56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34002c58:	4b07      	ldr	r3, [pc, #28]	@ (34002c78 <LL_RCC_PLL4_IsReady+0x24>)
34002c5a:	685b      	ldr	r3, [r3, #4]
34002c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34002c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34002c64:	d101      	bne.n	34002c6a <LL_RCC_PLL4_IsReady+0x16>
34002c66:	2301      	movs	r3, #1
34002c68:	e000      	b.n	34002c6c <LL_RCC_PLL4_IsReady+0x18>
34002c6a:	2300      	movs	r3, #0
}
34002c6c:	4618      	mov	r0, r3
34002c6e:	46bd      	mov	sp, r7
34002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
34002c74:	4770      	bx	lr
34002c76:	bf00      	nop
34002c78:	56028000 	.word	0x56028000

34002c7c <LL_RCC_PLL4_IsEnabledBypass>:
{
34002c7c:	b480      	push	{r7}
34002c7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34002c80:	4b07      	ldr	r3, [pc, #28]	@ (34002ca0 <LL_RCC_PLL4_IsEnabledBypass+0x24>)
34002c82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34002c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
34002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
34002c8e:	d101      	bne.n	34002c94 <LL_RCC_PLL4_IsEnabledBypass+0x18>
34002c90:	2301      	movs	r3, #1
34002c92:	e000      	b.n	34002c96 <LL_RCC_PLL4_IsEnabledBypass+0x1a>
34002c94:	2300      	movs	r3, #0
}
34002c96:	4618      	mov	r0, r3
34002c98:	46bd      	mov	sp, r7
34002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
34002c9e:	4770      	bx	lr
34002ca0:	56028000 	.word	0x56028000

34002ca4 <LL_RCC_PLL4_GetN>:
{
34002ca4:	b480      	push	{r7}
34002ca6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34002ca8:	4b05      	ldr	r3, [pc, #20]	@ (34002cc0 <LL_RCC_PLL4_GetN+0x1c>)
34002caa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34002cae:	0a1b      	lsrs	r3, r3, #8
34002cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
34002cb4:	4618      	mov	r0, r3
34002cb6:	46bd      	mov	sp, r7
34002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002cbc:	4770      	bx	lr
34002cbe:	bf00      	nop
34002cc0:	56028000 	.word	0x56028000

34002cc4 <LL_RCC_PLL4_GetM>:
{
34002cc4:	b480      	push	{r7}
34002cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
34002cc8:	4b05      	ldr	r3, [pc, #20]	@ (34002ce0 <LL_RCC_PLL4_GetM+0x1c>)
34002cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
34002cce:	0d1b      	lsrs	r3, r3, #20
34002cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
34002cd4:	4618      	mov	r0, r3
34002cd6:	46bd      	mov	sp, r7
34002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002cdc:	4770      	bx	lr
34002cde:	bf00      	nop
34002ce0:	56028000 	.word	0x56028000

34002ce4 <LL_RCC_PLL4_GetP1>:
{
34002ce4:	b480      	push	{r7}
34002ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34002ce8:	4b05      	ldr	r3, [pc, #20]	@ (34002d00 <LL_RCC_PLL4_GetP1+0x1c>)
34002cea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34002cee:	0edb      	lsrs	r3, r3, #27
34002cf0:	f003 0307 	and.w	r3, r3, #7
}
34002cf4:	4618      	mov	r0, r3
34002cf6:	46bd      	mov	sp, r7
34002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002cfc:	4770      	bx	lr
34002cfe:	bf00      	nop
34002d00:	56028000 	.word	0x56028000

34002d04 <LL_RCC_PLL4_GetP2>:
{
34002d04:	b480      	push	{r7}
34002d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34002d08:	4b05      	ldr	r3, [pc, #20]	@ (34002d20 <LL_RCC_PLL4_GetP2+0x1c>)
34002d0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34002d0e:	0e1b      	lsrs	r3, r3, #24
34002d10:	f003 0307 	and.w	r3, r3, #7
}
34002d14:	4618      	mov	r0, r3
34002d16:	46bd      	mov	sp, r7
34002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
34002d1c:	4770      	bx	lr
34002d1e:	bf00      	nop
34002d20:	56028000 	.word	0x56028000

34002d24 <LL_RCC_PLL4P_IsEnabled>:
{
34002d24:	b480      	push	{r7}
34002d26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
34002d28:	4b07      	ldr	r3, [pc, #28]	@ (34002d48 <LL_RCC_PLL4P_IsEnabled+0x24>)
34002d2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34002d2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
34002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
34002d36:	d101      	bne.n	34002d3c <LL_RCC_PLL4P_IsEnabled+0x18>
34002d38:	2301      	movs	r3, #1
34002d3a:	e000      	b.n	34002d3e <LL_RCC_PLL4P_IsEnabled+0x1a>
34002d3c:	2300      	movs	r3, #0
}
34002d3e:	4618      	mov	r0, r3
34002d40:	46bd      	mov	sp, r7
34002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
34002d46:	4770      	bx	lr
34002d48:	56028000 	.word	0x56028000

34002d4c <LL_RCC_PLL4_GetFRACN>:
{
34002d4c:	b480      	push	{r7}
34002d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
34002d50:	4b04      	ldr	r3, [pc, #16]	@ (34002d64 <LL_RCC_PLL4_GetFRACN+0x18>)
34002d52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34002d56:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
}
34002d5a:	4618      	mov	r0, r3
34002d5c:	46bd      	mov	sp, r7
34002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
34002d62:	4770      	bx	lr
34002d64:	56028000 	.word	0x56028000

34002d68 <LL_RCC_IC3_Enable>:
  * @brief  Enable IC3
  * @rmtoll DIVENSR       IC3ENS        LL_RCC_IC3_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC3_Enable(void)
{
34002d68:	b480      	push	{r7}
34002d6a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34002d6c:	4b04      	ldr	r3, [pc, #16]	@ (34002d80 <LL_RCC_IC3_Enable+0x18>)
34002d6e:	2204      	movs	r2, #4
34002d70:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34002d74:	bf00      	nop
34002d76:	46bd      	mov	sp, r7
34002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
34002d7c:	4770      	bx	lr
34002d7e:	bf00      	nop
34002d80:	56028000 	.word	0x56028000

34002d84 <LL_RCC_IC3_IsEnabled>:
  * @brief  Check if IC3 is enabled
  * @rmtoll DIVENR       IC3EN         LL_RCC_IC3_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC3_IsEnabled(void)
{
34002d84:	b480      	push	{r7}
34002d86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34002d88:	4b07      	ldr	r3, [pc, #28]	@ (34002da8 <LL_RCC_IC3_IsEnabled+0x24>)
34002d8a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34002d8e:	f003 0304 	and.w	r3, r3, #4
34002d92:	2b04      	cmp	r3, #4
34002d94:	d101      	bne.n	34002d9a <LL_RCC_IC3_IsEnabled+0x16>
34002d96:	2301      	movs	r3, #1
34002d98:	e000      	b.n	34002d9c <LL_RCC_IC3_IsEnabled+0x18>
34002d9a:	2300      	movs	r3, #0
}
34002d9c:	4618      	mov	r0, r3
34002d9e:	46bd      	mov	sp, r7
34002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
34002da4:	4770      	bx	lr
34002da6:	bf00      	nop
34002da8:	56028000 	.word	0x56028000

34002dac <LL_RCC_IC3_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC3_GetSource(void)
{
34002dac:	b480      	push	{r7}
34002dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34002db0:	4b04      	ldr	r3, [pc, #16]	@ (34002dc4 <LL_RCC_IC3_GetSource+0x18>)
34002db2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34002db6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34002dba:	4618      	mov	r0, r3
34002dbc:	46bd      	mov	sp, r7
34002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
34002dc2:	4770      	bx	lr
34002dc4:	56028000 	.word	0x56028000

34002dc8 <LL_RCC_IC3_GetDivider>:
  * @brief  Get IC3 divider
  * @rmtoll IC3CFGR      IC3INT        LL_RCC_IC3_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC3_GetDivider(void)
{
34002dc8:	b480      	push	{r7}
34002dca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34002dcc:	4b05      	ldr	r3, [pc, #20]	@ (34002de4 <LL_RCC_IC3_GetDivider+0x1c>)
34002dce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34002dd2:	0c1b      	lsrs	r3, r3, #16
34002dd4:	b2db      	uxtb	r3, r3
34002dd6:	3301      	adds	r3, #1
}
34002dd8:	4618      	mov	r0, r3
34002dda:	46bd      	mov	sp, r7
34002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
34002de0:	4770      	bx	lr
34002de2:	bf00      	nop
34002de4:	56028000 	.word	0x56028000

34002de8 <LL_RCC_IC4_Enable>:
  * @brief  Enable IC4
  * @rmtoll DIVENSR       IC4ENS        LL_RCC_IC4_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC4_Enable(void)
{
34002de8:	b480      	push	{r7}
34002dea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34002dec:	4b04      	ldr	r3, [pc, #16]	@ (34002e00 <LL_RCC_IC4_Enable+0x18>)
34002dee:	2208      	movs	r2, #8
34002df0:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34002df4:	bf00      	nop
34002df6:	46bd      	mov	sp, r7
34002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002dfc:	4770      	bx	lr
34002dfe:	bf00      	nop
34002e00:	56028000 	.word	0x56028000

34002e04 <LL_RCC_IC4_IsEnabled>:
  * @brief  Check if IC4 is enabled
  * @rmtoll DIVENR       IC4EN         LL_RCC_IC4_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC4_IsEnabled(void)
{
34002e04:	b480      	push	{r7}
34002e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34002e08:	4b07      	ldr	r3, [pc, #28]	@ (34002e28 <LL_RCC_IC4_IsEnabled+0x24>)
34002e0a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34002e0e:	f003 0308 	and.w	r3, r3, #8
34002e12:	2b08      	cmp	r3, #8
34002e14:	d101      	bne.n	34002e1a <LL_RCC_IC4_IsEnabled+0x16>
34002e16:	2301      	movs	r3, #1
34002e18:	e000      	b.n	34002e1c <LL_RCC_IC4_IsEnabled+0x18>
34002e1a:	2300      	movs	r3, #0
}
34002e1c:	4618      	mov	r0, r3
34002e1e:	46bd      	mov	sp, r7
34002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
34002e24:	4770      	bx	lr
34002e26:	bf00      	nop
34002e28:	56028000 	.word	0x56028000

34002e2c <LL_RCC_IC4_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC4_GetSource(void)
{
34002e2c:	b480      	push	{r7}
34002e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34002e30:	4b04      	ldr	r3, [pc, #16]	@ (34002e44 <LL_RCC_IC4_GetSource+0x18>)
34002e32:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34002e36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34002e3a:	4618      	mov	r0, r3
34002e3c:	46bd      	mov	sp, r7
34002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34002e42:	4770      	bx	lr
34002e44:	56028000 	.word	0x56028000

34002e48 <LL_RCC_IC4_GetDivider>:
  * @brief  Get IC4 divider
  * @rmtoll IC4CFGR      IC4INT        LL_RCC_IC4_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC4_GetDivider(void)
{
34002e48:	b480      	push	{r7}
34002e4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34002e4c:	4b05      	ldr	r3, [pc, #20]	@ (34002e64 <LL_RCC_IC4_GetDivider+0x1c>)
34002e4e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34002e52:	0c1b      	lsrs	r3, r3, #16
34002e54:	b2db      	uxtb	r3, r3
34002e56:	3301      	adds	r3, #1
}
34002e58:	4618      	mov	r0, r3
34002e5a:	46bd      	mov	sp, r7
34002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002e60:	4770      	bx	lr
34002e62:	bf00      	nop
34002e64:	56028000 	.word	0x56028000

34002e68 <LL_RCC_IC5_Enable>:
  * @brief  Enable IC5
  * @rmtoll DIVENSR       IC5ENS        LL_RCC_IC5_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC5_Enable(void)
{
34002e68:	b480      	push	{r7}
34002e6a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34002e6c:	4b04      	ldr	r3, [pc, #16]	@ (34002e80 <LL_RCC_IC5_Enable+0x18>)
34002e6e:	2210      	movs	r2, #16
34002e70:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34002e74:	bf00      	nop
34002e76:	46bd      	mov	sp, r7
34002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
34002e7c:	4770      	bx	lr
34002e7e:	bf00      	nop
34002e80:	56028000 	.word	0x56028000

34002e84 <LL_RCC_IC5_IsEnabled>:
  * @brief  Check if IC5 is enabled
  * @rmtoll DIVENR       IC5EN         LL_RCC_IC5_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC5_IsEnabled(void)
{
34002e84:	b480      	push	{r7}
34002e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34002e88:	4b07      	ldr	r3, [pc, #28]	@ (34002ea8 <LL_RCC_IC5_IsEnabled+0x24>)
34002e8a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34002e8e:	f003 0310 	and.w	r3, r3, #16
34002e92:	2b10      	cmp	r3, #16
34002e94:	d101      	bne.n	34002e9a <LL_RCC_IC5_IsEnabled+0x16>
34002e96:	2301      	movs	r3, #1
34002e98:	e000      	b.n	34002e9c <LL_RCC_IC5_IsEnabled+0x18>
34002e9a:	2300      	movs	r3, #0
}
34002e9c:	4618      	mov	r0, r3
34002e9e:	46bd      	mov	sp, r7
34002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
34002ea4:	4770      	bx	lr
34002ea6:	bf00      	nop
34002ea8:	56028000 	.word	0x56028000

34002eac <LL_RCC_IC5_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC5_GetSource(void)
{
34002eac:	b480      	push	{r7}
34002eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34002eb0:	4b04      	ldr	r3, [pc, #16]	@ (34002ec4 <LL_RCC_IC5_GetSource+0x18>)
34002eb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34002eb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34002eba:	4618      	mov	r0, r3
34002ebc:	46bd      	mov	sp, r7
34002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
34002ec2:	4770      	bx	lr
34002ec4:	56028000 	.word	0x56028000

34002ec8 <LL_RCC_IC5_GetDivider>:
  * @brief  Get IC5 divider
  * @rmtoll IC5CFGR      IC5INT        LL_RCC_IC5_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC5_GetDivider(void)
{
34002ec8:	b480      	push	{r7}
34002eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34002ecc:	4b05      	ldr	r3, [pc, #20]	@ (34002ee4 <LL_RCC_IC5_GetDivider+0x1c>)
34002ece:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34002ed2:	0c1b      	lsrs	r3, r3, #16
34002ed4:	b2db      	uxtb	r3, r3
34002ed6:	3301      	adds	r3, #1
}
34002ed8:	4618      	mov	r0, r3
34002eda:	46bd      	mov	sp, r7
34002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
34002ee0:	4770      	bx	lr
34002ee2:	bf00      	nop
34002ee4:	56028000 	.word	0x56028000

34002ee8 <LL_RCC_IC7_Enable>:
  * @brief  Enable IC7
  * @rmtoll DIVENSR       IC7ENS        LL_RCC_IC7_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC7_Enable(void)
{
34002ee8:	b480      	push	{r7}
34002eea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34002eec:	4b04      	ldr	r3, [pc, #16]	@ (34002f00 <LL_RCC_IC7_Enable+0x18>)
34002eee:	2240      	movs	r2, #64	@ 0x40
34002ef0:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34002ef4:	bf00      	nop
34002ef6:	46bd      	mov	sp, r7
34002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
34002efc:	4770      	bx	lr
34002efe:	bf00      	nop
34002f00:	56028000 	.word	0x56028000

34002f04 <LL_RCC_IC7_IsEnabled>:
  * @brief  Check if IC7 is enabled
  * @rmtoll DIVENR       IC7EN         LL_RCC_IC7_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC7_IsEnabled(void)
{
34002f04:	b480      	push	{r7}
34002f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34002f08:	4b07      	ldr	r3, [pc, #28]	@ (34002f28 <LL_RCC_IC7_IsEnabled+0x24>)
34002f0a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34002f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34002f12:	2b40      	cmp	r3, #64	@ 0x40
34002f14:	d101      	bne.n	34002f1a <LL_RCC_IC7_IsEnabled+0x16>
34002f16:	2301      	movs	r3, #1
34002f18:	e000      	b.n	34002f1c <LL_RCC_IC7_IsEnabled+0x18>
34002f1a:	2300      	movs	r3, #0
}
34002f1c:	4618      	mov	r0, r3
34002f1e:	46bd      	mov	sp, r7
34002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
34002f24:	4770      	bx	lr
34002f26:	bf00      	nop
34002f28:	56028000 	.word	0x56028000

34002f2c <LL_RCC_IC7_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC7_GetSource(void)
{
34002f2c:	b480      	push	{r7}
34002f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34002f30:	4b04      	ldr	r3, [pc, #16]	@ (34002f44 <LL_RCC_IC7_GetSource+0x18>)
34002f32:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34002f36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34002f3a:	4618      	mov	r0, r3
34002f3c:	46bd      	mov	sp, r7
34002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
34002f42:	4770      	bx	lr
34002f44:	56028000 	.word	0x56028000

34002f48 <LL_RCC_IC7_GetDivider>:
  * @brief  Get IC7 divider
  * @rmtoll IC7CFGR      IC7INT        LL_RCC_IC7_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC7_GetDivider(void)
{
34002f48:	b480      	push	{r7}
34002f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34002f4c:	4b05      	ldr	r3, [pc, #20]	@ (34002f64 <LL_RCC_IC7_GetDivider+0x1c>)
34002f4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34002f52:	0c1b      	lsrs	r3, r3, #16
34002f54:	b2db      	uxtb	r3, r3
34002f56:	3301      	adds	r3, #1
}
34002f58:	4618      	mov	r0, r3
34002f5a:	46bd      	mov	sp, r7
34002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
34002f60:	4770      	bx	lr
34002f62:	bf00      	nop
34002f64:	56028000 	.word	0x56028000

34002f68 <LL_RCC_IC8_Enable>:
  * @brief  Enable IC8
  * @rmtoll DIVENSR       IC8ENS        LL_RCC_IC8_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC8_Enable(void)
{
34002f68:	b480      	push	{r7}
34002f6a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34002f6c:	4b04      	ldr	r3, [pc, #16]	@ (34002f80 <LL_RCC_IC8_Enable+0x18>)
34002f6e:	2280      	movs	r2, #128	@ 0x80
34002f70:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34002f74:	bf00      	nop
34002f76:	46bd      	mov	sp, r7
34002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
34002f7c:	4770      	bx	lr
34002f7e:	bf00      	nop
34002f80:	56028000 	.word	0x56028000

34002f84 <LL_RCC_IC8_IsEnabled>:
  * @brief  Check if IC8 is enabled
  * @rmtoll DIVENR       IC8EN         LL_RCC_IC8_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC8_IsEnabled(void)
{
34002f84:	b480      	push	{r7}
34002f86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34002f88:	4b07      	ldr	r3, [pc, #28]	@ (34002fa8 <LL_RCC_IC8_IsEnabled+0x24>)
34002f8a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
34002f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34002f92:	2b80      	cmp	r3, #128	@ 0x80
34002f94:	d101      	bne.n	34002f9a <LL_RCC_IC8_IsEnabled+0x16>
34002f96:	2301      	movs	r3, #1
34002f98:	e000      	b.n	34002f9c <LL_RCC_IC8_IsEnabled+0x18>
34002f9a:	2300      	movs	r3, #0
}
34002f9c:	4618      	mov	r0, r3
34002f9e:	46bd      	mov	sp, r7
34002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
34002fa4:	4770      	bx	lr
34002fa6:	bf00      	nop
34002fa8:	56028000 	.word	0x56028000

34002fac <LL_RCC_IC8_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC8_GetSource(void)
{
34002fac:	b480      	push	{r7}
34002fae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34002fb0:	4b04      	ldr	r3, [pc, #16]	@ (34002fc4 <LL_RCC_IC8_GetSource+0x18>)
34002fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34002fb6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
34002fba:	4618      	mov	r0, r3
34002fbc:	46bd      	mov	sp, r7
34002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
34002fc2:	4770      	bx	lr
34002fc4:	56028000 	.word	0x56028000

34002fc8 <LL_RCC_IC8_GetDivider>:
  * @brief  Get IC8 divider
  * @rmtoll IC8CFGR      IC8INT        LL_RCC_IC8_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC8_GetDivider(void)
{
34002fc8:	b480      	push	{r7}
34002fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34002fcc:	4b05      	ldr	r3, [pc, #20]	@ (34002fe4 <LL_RCC_IC8_GetDivider+0x1c>)
34002fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34002fd2:	0c1b      	lsrs	r3, r3, #16
34002fd4:	b2db      	uxtb	r3, r3
34002fd6:	3301      	adds	r3, #1
}
34002fd8:	4618      	mov	r0, r3
34002fda:	46bd      	mov	sp, r7
34002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
34002fe0:	4770      	bx	lr
34002fe2:	bf00      	nop
34002fe4:	56028000 	.word	0x56028000

34002fe8 <LL_RCC_IC9_Enable>:
  * @brief  Enable IC9
  * @rmtoll DIVENSR       IC9ENS        LL_RCC_IC9_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC9_Enable(void)
{
34002fe8:	b480      	push	{r7}
34002fea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34002fec:	4b04      	ldr	r3, [pc, #16]	@ (34003000 <LL_RCC_IC9_Enable+0x18>)
34002fee:	f44f 7280 	mov.w	r2, #256	@ 0x100
34002ff2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34002ff6:	bf00      	nop
34002ff8:	46bd      	mov	sp, r7
34002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
34002ffe:	4770      	bx	lr
34003000:	56028000 	.word	0x56028000

34003004 <LL_RCC_IC9_IsEnabled>:
  * @brief  Check if IC9 is enabled
  * @rmtoll DIVENR       IC9EN         LL_RCC_IC9_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC9_IsEnabled(void)
{
34003004:	b480      	push	{r7}
34003006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34003008:	4b07      	ldr	r3, [pc, #28]	@ (34003028 <LL_RCC_IC9_IsEnabled+0x24>)
3400300a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400300e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
34003012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34003016:	d101      	bne.n	3400301c <LL_RCC_IC9_IsEnabled+0x18>
34003018:	2301      	movs	r3, #1
3400301a:	e000      	b.n	3400301e <LL_RCC_IC9_IsEnabled+0x1a>
3400301c:	2300      	movs	r3, #0
}
3400301e:	4618      	mov	r0, r3
34003020:	46bd      	mov	sp, r7
34003022:	f85d 7b04 	ldr.w	r7, [sp], #4
34003026:	4770      	bx	lr
34003028:	56028000 	.word	0x56028000

3400302c <LL_RCC_IC9_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC9_GetSource(void)
{
3400302c:	b480      	push	{r7}
3400302e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34003030:	4b04      	ldr	r3, [pc, #16]	@ (34003044 <LL_RCC_IC9_GetSource+0x18>)
34003032:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34003036:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400303a:	4618      	mov	r0, r3
3400303c:	46bd      	mov	sp, r7
3400303e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003042:	4770      	bx	lr
34003044:	56028000 	.word	0x56028000

34003048 <LL_RCC_IC9_GetDivider>:
  * @brief  Get IC9 divider
  * @rmtoll IC9CFGR      IC9INT        LL_RCC_IC9_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC9_GetDivider(void)
{
34003048:	b480      	push	{r7}
3400304a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
3400304c:	4b05      	ldr	r3, [pc, #20]	@ (34003064 <LL_RCC_IC9_GetDivider+0x1c>)
3400304e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34003052:	0c1b      	lsrs	r3, r3, #16
34003054:	b2db      	uxtb	r3, r3
34003056:	3301      	adds	r3, #1
}
34003058:	4618      	mov	r0, r3
3400305a:	46bd      	mov	sp, r7
3400305c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003060:	4770      	bx	lr
34003062:	bf00      	nop
34003064:	56028000 	.word	0x56028000

34003068 <LL_RCC_IC10_Enable>:
  * @brief  Enable IC10
  * @rmtoll DIVENSR       IC10ENS        LL_RCC_IC10_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC10_Enable(void)
{
34003068:	b480      	push	{r7}
3400306a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
3400306c:	4b04      	ldr	r3, [pc, #16]	@ (34003080 <LL_RCC_IC10_Enable+0x18>)
3400306e:	f44f 7200 	mov.w	r2, #512	@ 0x200
34003072:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34003076:	bf00      	nop
34003078:	46bd      	mov	sp, r7
3400307a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400307e:	4770      	bx	lr
34003080:	56028000 	.word	0x56028000

34003084 <LL_RCC_IC10_IsEnabled>:
  * @brief  Check if IC10 is enabled
  * @rmtoll DIVENR       IC10EN         LL_RCC_IC10_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC10_IsEnabled(void)
{
34003084:	b480      	push	{r7}
34003086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34003088:	4b07      	ldr	r3, [pc, #28]	@ (340030a8 <LL_RCC_IC10_IsEnabled+0x24>)
3400308a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400308e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34003092:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34003096:	d101      	bne.n	3400309c <LL_RCC_IC10_IsEnabled+0x18>
34003098:	2301      	movs	r3, #1
3400309a:	e000      	b.n	3400309e <LL_RCC_IC10_IsEnabled+0x1a>
3400309c:	2300      	movs	r3, #0
}
3400309e:	4618      	mov	r0, r3
340030a0:	46bd      	mov	sp, r7
340030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340030a6:	4770      	bx	lr
340030a8:	56028000 	.word	0x56028000

340030ac <LL_RCC_IC10_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC10_GetSource(void)
{
340030ac:	b480      	push	{r7}
340030ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
340030b0:	4b04      	ldr	r3, [pc, #16]	@ (340030c4 <LL_RCC_IC10_GetSource+0x18>)
340030b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
340030b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340030ba:	4618      	mov	r0, r3
340030bc:	46bd      	mov	sp, r7
340030be:	f85d 7b04 	ldr.w	r7, [sp], #4
340030c2:	4770      	bx	lr
340030c4:	56028000 	.word	0x56028000

340030c8 <LL_RCC_IC10_GetDivider>:
  * @brief  Get IC10 divider
  * @rmtoll IC10CFGR      IC10INT        LL_RCC_IC10_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC10_GetDivider(void)
{
340030c8:	b480      	push	{r7}
340030ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
340030cc:	4b05      	ldr	r3, [pc, #20]	@ (340030e4 <LL_RCC_IC10_GetDivider+0x1c>)
340030ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
340030d2:	0c1b      	lsrs	r3, r3, #16
340030d4:	b2db      	uxtb	r3, r3
340030d6:	3301      	adds	r3, #1
}
340030d8:	4618      	mov	r0, r3
340030da:	46bd      	mov	sp, r7
340030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
340030e0:	4770      	bx	lr
340030e2:	bf00      	nop
340030e4:	56028000 	.word	0x56028000

340030e8 <LL_RCC_IC12_Enable>:
  * @brief  Enable IC12
  * @rmtoll DIVENSR       IC12ENS        LL_RCC_IC12_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC12_Enable(void)
{
340030e8:	b480      	push	{r7}
340030ea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
340030ec:	4b04      	ldr	r3, [pc, #16]	@ (34003100 <LL_RCC_IC12_Enable+0x18>)
340030ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
340030f2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340030f6:	bf00      	nop
340030f8:	46bd      	mov	sp, r7
340030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340030fe:	4770      	bx	lr
34003100:	56028000 	.word	0x56028000

34003104 <LL_RCC_IC12_IsEnabled>:
  * @brief  Check if IC12 is enabled
  * @rmtoll DIVENR       IC12EN         LL_RCC_IC12_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_IsEnabled(void)
{
34003104:	b480      	push	{r7}
34003106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
34003108:	4b07      	ldr	r3, [pc, #28]	@ (34003128 <LL_RCC_IC12_IsEnabled+0x24>)
3400310a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400310e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34003112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
34003116:	d101      	bne.n	3400311c <LL_RCC_IC12_IsEnabled+0x18>
34003118:	2301      	movs	r3, #1
3400311a:	e000      	b.n	3400311e <LL_RCC_IC12_IsEnabled+0x1a>
3400311c:	2300      	movs	r3, #0
}
3400311e:	4618      	mov	r0, r3
34003120:	46bd      	mov	sp, r7
34003122:	f85d 7b04 	ldr.w	r7, [sp], #4
34003126:	4770      	bx	lr
34003128:	56028000 	.word	0x56028000

3400312c <LL_RCC_IC12_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetSource(void)
{
3400312c:	b480      	push	{r7}
3400312e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
34003130:	4b04      	ldr	r3, [pc, #16]	@ (34003144 <LL_RCC_IC12_GetSource+0x18>)
34003132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34003136:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400313a:	4618      	mov	r0, r3
3400313c:	46bd      	mov	sp, r7
3400313e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003142:	4770      	bx	lr
34003144:	56028000 	.word	0x56028000

34003148 <LL_RCC_IC12_GetDivider>:
  * @brief  Get IC12 divider
  * @rmtoll IC12CFGR      IC12INT        LL_RCC_IC12_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC12_GetDivider(void)
{
34003148:	b480      	push	{r7}
3400314a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
3400314c:	4b05      	ldr	r3, [pc, #20]	@ (34003164 <LL_RCC_IC12_GetDivider+0x1c>)
3400314e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34003152:	0c1b      	lsrs	r3, r3, #16
34003154:	b2db      	uxtb	r3, r3
34003156:	3301      	adds	r3, #1
}
34003158:	4618      	mov	r0, r3
3400315a:	46bd      	mov	sp, r7
3400315c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003160:	4770      	bx	lr
34003162:	bf00      	nop
34003164:	56028000 	.word	0x56028000

34003168 <LL_RCC_IC13_Enable>:
  * @brief  Enable IC13
  * @rmtoll DIVENSR       IC13ENS        LL_RCC_IC13_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC13_Enable(void)
{
34003168:	b480      	push	{r7}
3400316a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
3400316c:	4b04      	ldr	r3, [pc, #16]	@ (34003180 <LL_RCC_IC13_Enable+0x18>)
3400316e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
34003172:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34003176:	bf00      	nop
34003178:	46bd      	mov	sp, r7
3400317a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400317e:	4770      	bx	lr
34003180:	56028000 	.word	0x56028000

34003184 <LL_RCC_IC13_IsEnabled>:
  * @brief  Check if IC13 is enabled
  * @rmtoll DIVENR       IC13EN         LL_RCC_IC13_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_IsEnabled(void)
{
34003184:	b480      	push	{r7}
34003186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
34003188:	4b07      	ldr	r3, [pc, #28]	@ (340031a8 <LL_RCC_IC13_IsEnabled+0x24>)
3400318a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400318e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
34003192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34003196:	d101      	bne.n	3400319c <LL_RCC_IC13_IsEnabled+0x18>
34003198:	2301      	movs	r3, #1
3400319a:	e000      	b.n	3400319e <LL_RCC_IC13_IsEnabled+0x1a>
3400319c:	2300      	movs	r3, #0
}
3400319e:	4618      	mov	r0, r3
340031a0:	46bd      	mov	sp, r7
340031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340031a6:	4770      	bx	lr
340031a8:	56028000 	.word	0x56028000

340031ac <LL_RCC_IC13_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetSource(void)
{
340031ac:	b480      	push	{r7}
340031ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
340031b0:	4b04      	ldr	r3, [pc, #16]	@ (340031c4 <LL_RCC_IC13_GetSource+0x18>)
340031b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
340031b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340031ba:	4618      	mov	r0, r3
340031bc:	46bd      	mov	sp, r7
340031be:	f85d 7b04 	ldr.w	r7, [sp], #4
340031c2:	4770      	bx	lr
340031c4:	56028000 	.word	0x56028000

340031c8 <LL_RCC_IC13_GetDivider>:
  * @brief  Get IC13 divider
  * @rmtoll IC13CFGR      IC13INT        LL_RCC_IC13_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC13_GetDivider(void)
{
340031c8:	b480      	push	{r7}
340031ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
340031cc:	4b05      	ldr	r3, [pc, #20]	@ (340031e4 <LL_RCC_IC13_GetDivider+0x1c>)
340031ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
340031d2:	0c1b      	lsrs	r3, r3, #16
340031d4:	b2db      	uxtb	r3, r3
340031d6:	3301      	adds	r3, #1
}
340031d8:	4618      	mov	r0, r3
340031da:	46bd      	mov	sp, r7
340031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
340031e0:	4770      	bx	lr
340031e2:	bf00      	nop
340031e4:	56028000 	.word	0x56028000

340031e8 <LL_RCC_IC14_Enable>:
  * @brief  Enable IC14
  * @rmtoll DIVENSR       IC14ENS        LL_RCC_IC14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC14_Enable(void)
{
340031e8:	b480      	push	{r7}
340031ea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
340031ec:	4b04      	ldr	r3, [pc, #16]	@ (34003200 <LL_RCC_IC14_Enable+0x18>)
340031ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
340031f2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340031f6:	bf00      	nop
340031f8:	46bd      	mov	sp, r7
340031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340031fe:	4770      	bx	lr
34003200:	56028000 	.word	0x56028000

34003204 <LL_RCC_IC14_IsEnabled>:
  * @brief  Check if IC14 is enabled
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
34003204:	b480      	push	{r7}
34003206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34003208:	4b07      	ldr	r3, [pc, #28]	@ (34003228 <LL_RCC_IC14_IsEnabled+0x24>)
3400320a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400320e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34003212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34003216:	d101      	bne.n	3400321c <LL_RCC_IC14_IsEnabled+0x18>
34003218:	2301      	movs	r3, #1
3400321a:	e000      	b.n	3400321e <LL_RCC_IC14_IsEnabled+0x1a>
3400321c:	2300      	movs	r3, #0
}
3400321e:	4618      	mov	r0, r3
34003220:	46bd      	mov	sp, r7
34003222:	f85d 7b04 	ldr.w	r7, [sp], #4
34003226:	4770      	bx	lr
34003228:	56028000 	.word	0x56028000

3400322c <LL_RCC_IC14_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetSource(void)
{
3400322c:	b480      	push	{r7}
3400322e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34003230:	4b04      	ldr	r3, [pc, #16]	@ (34003244 <LL_RCC_IC14_GetSource+0x18>)
34003232:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34003236:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400323a:	4618      	mov	r0, r3
3400323c:	46bd      	mov	sp, r7
3400323e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003242:	4770      	bx	lr
34003244:	56028000 	.word	0x56028000

34003248 <LL_RCC_IC14_GetDivider>:
  * @brief  Get IC14 divider
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
34003248:	b480      	push	{r7}
3400324a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
3400324c:	4b05      	ldr	r3, [pc, #20]	@ (34003264 <LL_RCC_IC14_GetDivider+0x1c>)
3400324e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34003252:	0c1b      	lsrs	r3, r3, #16
34003254:	b2db      	uxtb	r3, r3
34003256:	3301      	adds	r3, #1
}
34003258:	4618      	mov	r0, r3
3400325a:	46bd      	mov	sp, r7
3400325c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003260:	4770      	bx	lr
34003262:	bf00      	nop
34003264:	56028000 	.word	0x56028000

34003268 <LL_RCC_IC15_Enable>:
  * @brief  Enable IC15
  * @rmtoll DIVENSR       IC15ENS        LL_RCC_IC15_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC15_Enable(void)
{
34003268:	b480      	push	{r7}
3400326a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3400326c:	4b04      	ldr	r3, [pc, #16]	@ (34003280 <LL_RCC_IC15_Enable+0x18>)
3400326e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
34003272:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34003276:	bf00      	nop
34003278:	46bd      	mov	sp, r7
3400327a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400327e:	4770      	bx	lr
34003280:	56028000 	.word	0x56028000

34003284 <LL_RCC_IC15_IsEnabled>:
  * @brief  Check if IC15 is enabled
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
34003284:	b480      	push	{r7}
34003286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34003288:	4b07      	ldr	r3, [pc, #28]	@ (340032a8 <LL_RCC_IC15_IsEnabled+0x24>)
3400328a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400328e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34003292:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34003296:	d101      	bne.n	3400329c <LL_RCC_IC15_IsEnabled+0x18>
34003298:	2301      	movs	r3, #1
3400329a:	e000      	b.n	3400329e <LL_RCC_IC15_IsEnabled+0x1a>
3400329c:	2300      	movs	r3, #0
}
3400329e:	4618      	mov	r0, r3
340032a0:	46bd      	mov	sp, r7
340032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340032a6:	4770      	bx	lr
340032a8:	56028000 	.word	0x56028000

340032ac <LL_RCC_IC15_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetSource(void)
{
340032ac:	b480      	push	{r7}
340032ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
340032b0:	4b04      	ldr	r3, [pc, #16]	@ (340032c4 <LL_RCC_IC15_GetSource+0x18>)
340032b2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340032b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340032ba:	4618      	mov	r0, r3
340032bc:	46bd      	mov	sp, r7
340032be:	f85d 7b04 	ldr.w	r7, [sp], #4
340032c2:	4770      	bx	lr
340032c4:	56028000 	.word	0x56028000

340032c8 <LL_RCC_IC15_GetDivider>:
  * @brief  Get IC15 divider
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
340032c8:	b480      	push	{r7}
340032ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
340032cc:	4b05      	ldr	r3, [pc, #20]	@ (340032e4 <LL_RCC_IC15_GetDivider+0x1c>)
340032ce:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340032d2:	0c1b      	lsrs	r3, r3, #16
340032d4:	b2db      	uxtb	r3, r3
340032d6:	3301      	adds	r3, #1
}
340032d8:	4618      	mov	r0, r3
340032da:	46bd      	mov	sp, r7
340032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
340032e0:	4770      	bx	lr
340032e2:	bf00      	nop
340032e4:	56028000 	.word	0x56028000

340032e8 <LL_RCC_IC16_Enable>:
  * @brief  Enable IC16
  * @rmtoll DIVENSR       IC16ENS        LL_RCC_IC16_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC16_Enable(void)
{
340032e8:	b480      	push	{r7}
340032ea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
340032ec:	4b04      	ldr	r3, [pc, #16]	@ (34003300 <LL_RCC_IC16_Enable+0x18>)
340032ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
340032f2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340032f6:	bf00      	nop
340032f8:	46bd      	mov	sp, r7
340032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340032fe:	4770      	bx	lr
34003300:	56028000 	.word	0x56028000

34003304 <LL_RCC_IC16_IsEnabled>:
  * @brief  Check if IC16 is enabled
  * @rmtoll DIVENR       IC16EN         LL_RCC_IC16_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_IsEnabled(void)
{
34003304:	b480      	push	{r7}
34003306:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34003308:	4b07      	ldr	r3, [pc, #28]	@ (34003328 <LL_RCC_IC16_IsEnabled+0x24>)
3400330a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400330e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34003312:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
34003316:	d101      	bne.n	3400331c <LL_RCC_IC16_IsEnabled+0x18>
34003318:	2301      	movs	r3, #1
3400331a:	e000      	b.n	3400331e <LL_RCC_IC16_IsEnabled+0x1a>
3400331c:	2300      	movs	r3, #0
}
3400331e:	4618      	mov	r0, r3
34003320:	46bd      	mov	sp, r7
34003322:	f85d 7b04 	ldr.w	r7, [sp], #4
34003326:	4770      	bx	lr
34003328:	56028000 	.word	0x56028000

3400332c <LL_RCC_IC16_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetSource(void)
{
3400332c:	b480      	push	{r7}
3400332e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34003330:	4b04      	ldr	r3, [pc, #16]	@ (34003344 <LL_RCC_IC16_GetSource+0x18>)
34003332:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34003336:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400333a:	4618      	mov	r0, r3
3400333c:	46bd      	mov	sp, r7
3400333e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003342:	4770      	bx	lr
34003344:	56028000 	.word	0x56028000

34003348 <LL_RCC_IC16_GetDivider>:
  * @brief  Get IC16 divider
  * @rmtoll IC16CFGR      IC16INT        LL_RCC_IC16_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC16_GetDivider(void)
{
34003348:	b480      	push	{r7}
3400334a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
3400334c:	4b05      	ldr	r3, [pc, #20]	@ (34003364 <LL_RCC_IC16_GetDivider+0x1c>)
3400334e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34003352:	0c1b      	lsrs	r3, r3, #16
34003354:	b2db      	uxtb	r3, r3
34003356:	3301      	adds	r3, #1
}
34003358:	4618      	mov	r0, r3
3400335a:	46bd      	mov	sp, r7
3400335c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003360:	4770      	bx	lr
34003362:	bf00      	nop
34003364:	56028000 	.word	0x56028000

34003368 <LL_RCC_IC17_Enable>:
  * @brief  Enable IC17
  * @rmtoll DIVENSR       IC17ENS        LL_RCC_IC17_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC17_Enable(void)
{
34003368:	b480      	push	{r7}
3400336a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
3400336c:	4b04      	ldr	r3, [pc, #16]	@ (34003380 <LL_RCC_IC17_Enable+0x18>)
3400336e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34003372:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34003376:	bf00      	nop
34003378:	46bd      	mov	sp, r7
3400337a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400337e:	4770      	bx	lr
34003380:	56028000 	.word	0x56028000

34003384 <LL_RCC_IC17_IsEnabled>:
  * @brief  Check if IC17 is enabled
  * @rmtoll DIVENR       IC17EN         LL_RCC_IC17_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_IsEnabled(void)
{
34003384:	b480      	push	{r7}
34003386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34003388:	4b07      	ldr	r3, [pc, #28]	@ (340033a8 <LL_RCC_IC17_IsEnabled+0x24>)
3400338a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400338e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
34003392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34003396:	d101      	bne.n	3400339c <LL_RCC_IC17_IsEnabled+0x18>
34003398:	2301      	movs	r3, #1
3400339a:	e000      	b.n	3400339e <LL_RCC_IC17_IsEnabled+0x1a>
3400339c:	2300      	movs	r3, #0
}
3400339e:	4618      	mov	r0, r3
340033a0:	46bd      	mov	sp, r7
340033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340033a6:	4770      	bx	lr
340033a8:	56028000 	.word	0x56028000

340033ac <LL_RCC_IC17_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetSource(void)
{
340033ac:	b480      	push	{r7}
340033ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
340033b0:	4b04      	ldr	r3, [pc, #16]	@ (340033c4 <LL_RCC_IC17_GetSource+0x18>)
340033b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
340033b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340033ba:	4618      	mov	r0, r3
340033bc:	46bd      	mov	sp, r7
340033be:	f85d 7b04 	ldr.w	r7, [sp], #4
340033c2:	4770      	bx	lr
340033c4:	56028000 	.word	0x56028000

340033c8 <LL_RCC_IC17_GetDivider>:
  * @brief  Get IC17 divider
  * @rmtoll IC17CFGR      IC17INT        LL_RCC_IC17_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC17_GetDivider(void)
{
340033c8:	b480      	push	{r7}
340033ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
340033cc:	4b05      	ldr	r3, [pc, #20]	@ (340033e4 <LL_RCC_IC17_GetDivider+0x1c>)
340033ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
340033d2:	0c1b      	lsrs	r3, r3, #16
340033d4:	b2db      	uxtb	r3, r3
340033d6:	3301      	adds	r3, #1
}
340033d8:	4618      	mov	r0, r3
340033da:	46bd      	mov	sp, r7
340033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
340033e0:	4770      	bx	lr
340033e2:	bf00      	nop
340033e4:	56028000 	.word	0x56028000

340033e8 <LL_RCC_IC18_Enable>:
  * @brief  Enable IC18
  * @rmtoll DIVENSR       IC18ENS        LL_RCC_IC18_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC18_Enable(void)
{
340033e8:	b480      	push	{r7}
340033ea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
340033ec:	4b04      	ldr	r3, [pc, #16]	@ (34003400 <LL_RCC_IC18_Enable+0x18>)
340033ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
340033f2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340033f6:	bf00      	nop
340033f8:	46bd      	mov	sp, r7
340033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340033fe:	4770      	bx	lr
34003400:	56028000 	.word	0x56028000

34003404 <LL_RCC_IC18_IsEnabled>:
  * @brief  Check if IC18 is enabled
  * @rmtoll DIVENR       IC18EN         LL_RCC_IC18_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_IsEnabled(void)
{
34003404:	b480      	push	{r7}
34003406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34003408:	4b07      	ldr	r3, [pc, #28]	@ (34003428 <LL_RCC_IC18_IsEnabled+0x24>)
3400340a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
34003412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
34003416:	d101      	bne.n	3400341c <LL_RCC_IC18_IsEnabled+0x18>
34003418:	2301      	movs	r3, #1
3400341a:	e000      	b.n	3400341e <LL_RCC_IC18_IsEnabled+0x1a>
3400341c:	2300      	movs	r3, #0
}
3400341e:	4618      	mov	r0, r3
34003420:	46bd      	mov	sp, r7
34003422:	f85d 7b04 	ldr.w	r7, [sp], #4
34003426:	4770      	bx	lr
34003428:	56028000 	.word	0x56028000

3400342c <LL_RCC_IC18_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetSource(void)
{
3400342c:	b480      	push	{r7}
3400342e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34003430:	4b04      	ldr	r3, [pc, #16]	@ (34003444 <LL_RCC_IC18_GetSource+0x18>)
34003432:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34003436:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400343a:	4618      	mov	r0, r3
3400343c:	46bd      	mov	sp, r7
3400343e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003442:	4770      	bx	lr
34003444:	56028000 	.word	0x56028000

34003448 <LL_RCC_IC18_GetDivider>:
  * @brief  Get IC18 divider
  * @rmtoll IC18CFGR      IC18INT        LL_RCC_IC18_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC18_GetDivider(void)
{
34003448:	b480      	push	{r7}
3400344a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
3400344c:	4b05      	ldr	r3, [pc, #20]	@ (34003464 <LL_RCC_IC18_GetDivider+0x1c>)
3400344e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34003452:	0c1b      	lsrs	r3, r3, #16
34003454:	b2db      	uxtb	r3, r3
34003456:	3301      	adds	r3, #1
}
34003458:	4618      	mov	r0, r3
3400345a:	46bd      	mov	sp, r7
3400345c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003460:	4770      	bx	lr
34003462:	bf00      	nop
34003464:	56028000 	.word	0x56028000

34003468 <LL_RCC_IC19_Enable>:
  * @brief  Enable IC19
  * @rmtoll DIVENSR       IC19ENS        LL_RCC_IC19_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC19_Enable(void)
{
34003468:	b480      	push	{r7}
3400346a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
3400346c:	4b04      	ldr	r3, [pc, #16]	@ (34003480 <LL_RCC_IC19_Enable+0x18>)
3400346e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
34003472:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
34003476:	bf00      	nop
34003478:	46bd      	mov	sp, r7
3400347a:	f85d 7b04 	ldr.w	r7, [sp], #4
3400347e:	4770      	bx	lr
34003480:	56028000 	.word	0x56028000

34003484 <LL_RCC_IC19_IsEnabled>:
  * @brief  Check if IC19 is enabled
  * @rmtoll DIVENR       IC19EN         LL_RCC_IC19_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_IsEnabled(void)
{
34003484:	b480      	push	{r7}
34003486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34003488:	4b07      	ldr	r3, [pc, #28]	@ (340034a8 <LL_RCC_IC19_IsEnabled+0x24>)
3400348a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400348e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34003492:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34003496:	d101      	bne.n	3400349c <LL_RCC_IC19_IsEnabled+0x18>
34003498:	2301      	movs	r3, #1
3400349a:	e000      	b.n	3400349e <LL_RCC_IC19_IsEnabled+0x1a>
3400349c:	2300      	movs	r3, #0
}
3400349e:	4618      	mov	r0, r3
340034a0:	46bd      	mov	sp, r7
340034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
340034a6:	4770      	bx	lr
340034a8:	56028000 	.word	0x56028000

340034ac <LL_RCC_IC19_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetSource(void)
{
340034ac:	b480      	push	{r7}
340034ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
340034b0:	4b04      	ldr	r3, [pc, #16]	@ (340034c4 <LL_RCC_IC19_GetSource+0x18>)
340034b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
340034b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
340034ba:	4618      	mov	r0, r3
340034bc:	46bd      	mov	sp, r7
340034be:	f85d 7b04 	ldr.w	r7, [sp], #4
340034c2:	4770      	bx	lr
340034c4:	56028000 	.word	0x56028000

340034c8 <LL_RCC_IC19_GetDivider>:
  * @brief  Get IC19 divider
  * @rmtoll IC19CFGR      IC19INT        LL_RCC_IC19_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC19_GetDivider(void)
{
340034c8:	b480      	push	{r7}
340034ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
340034cc:	4b05      	ldr	r3, [pc, #20]	@ (340034e4 <LL_RCC_IC19_GetDivider+0x1c>)
340034ce:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
340034d2:	0c1b      	lsrs	r3, r3, #16
340034d4:	b2db      	uxtb	r3, r3
340034d6:	3301      	adds	r3, #1
}
340034d8:	4618      	mov	r0, r3
340034da:	46bd      	mov	sp, r7
340034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
340034e0:	4770      	bx	lr
340034e2:	bf00      	nop
340034e4:	56028000 	.word	0x56028000

340034e8 <LL_RCC_IC20_Enable>:
  * @brief  Enable IC20
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
340034e8:	b480      	push	{r7}
340034ea:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
340034ec:	4b04      	ldr	r3, [pc, #16]	@ (34003500 <LL_RCC_IC20_Enable+0x18>)
340034ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
340034f2:	f8c3 2a40 	str.w	r2, [r3, #2624]	@ 0xa40
}
340034f6:	bf00      	nop
340034f8:	46bd      	mov	sp, r7
340034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
340034fe:	4770      	bx	lr
34003500:	56028000 	.word	0x56028000

34003504 <LL_RCC_IC20_IsEnabled>:
  * @brief  Check if IC20 is enabled
  * @rmtoll DIVENR       IC20EN         LL_RCC_IC20_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_IsEnabled(void)
{
34003504:	b480      	push	{r7}
34003506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34003508:	4b07      	ldr	r3, [pc, #28]	@ (34003528 <LL_RCC_IC20_IsEnabled+0x24>)
3400350a:	f8d3 3240 	ldr.w	r3, [r3, #576]	@ 0x240
3400350e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
34003512:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
34003516:	d101      	bne.n	3400351c <LL_RCC_IC20_IsEnabled+0x18>
34003518:	2301      	movs	r3, #1
3400351a:	e000      	b.n	3400351e <LL_RCC_IC20_IsEnabled+0x1a>
3400351c:	2300      	movs	r3, #0
}
3400351e:	4618      	mov	r0, r3
34003520:	46bd      	mov	sp, r7
34003522:	f85d 7b04 	ldr.w	r7, [sp], #4
34003526:	4770      	bx	lr
34003528:	56028000 	.word	0x56028000

3400352c <LL_RCC_IC20_GetSource>:
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL2
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetSource(void)
{
3400352c:	b480      	push	{r7}
3400352e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34003530:	4b04      	ldr	r3, [pc, #16]	@ (34003544 <LL_RCC_IC20_GetSource+0x18>)
34003532:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34003536:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
}
3400353a:	4618      	mov	r0, r3
3400353c:	46bd      	mov	sp, r7
3400353e:	f85d 7b04 	ldr.w	r7, [sp], #4
34003542:	4770      	bx	lr
34003544:	56028000 	.word	0x56028000

34003548 <LL_RCC_IC20_GetDivider>:
  * @brief  Get IC20 divider
  * @rmtoll IC20CFGR      IC20INT        LL_RCC_IC20_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC20_GetDivider(void)
{
34003548:	b480      	push	{r7}
3400354a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3400354c:	4b05      	ldr	r3, [pc, #20]	@ (34003564 <LL_RCC_IC20_GetDivider+0x1c>)
3400354e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34003552:	0c1b      	lsrs	r3, r3, #16
34003554:	b2db      	uxtb	r3, r3
34003556:	3301      	adds	r3, #1
}
34003558:	4618      	mov	r0, r3
3400355a:	46bd      	mov	sp, r7
3400355c:	f85d 7b04 	ldr.w	r7, [sp], #4
34003560:	4770      	bx	lr
34003562:	bf00      	nop
34003564:	56028000 	.word	0x56028000

34003568 <LL_RCC_CLKP_Enable>:
  * @brief  Enable CLKP
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
34003568:	b480      	push	{r7}
3400356a:	af00      	add	r7, sp, #0
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3400356c:	4b04      	ldr	r3, [pc, #16]	@ (34003580 <LL_RCC_CLKP_Enable+0x18>)
3400356e:	2240      	movs	r2, #64	@ 0x40
34003570:	f8c3 2a48 	str.w	r2, [r3, #2632]	@ 0xa48
}
34003574:	bf00      	nop
34003576:	46bd      	mov	sp, r7
34003578:	f85d 7b04 	ldr.w	r7, [sp], #4
3400357c:	4770      	bx	lr
3400357e:	bf00      	nop
34003580:	56028000 	.word	0x56028000

34003584 <LL_RCC_CLKP_IsEnabled>:
  * @brief  Check if CLKP is enabled
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
34003584:	b480      	push	{r7}
34003586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34003588:	4b07      	ldr	r3, [pc, #28]	@ (340035a8 <LL_RCC_CLKP_IsEnabled+0x24>)
3400358a:	f8d3 3248 	ldr.w	r3, [r3, #584]	@ 0x248
3400358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34003592:	2b40      	cmp	r3, #64	@ 0x40
34003594:	d101      	bne.n	3400359a <LL_RCC_CLKP_IsEnabled+0x16>
34003596:	2301      	movs	r3, #1
34003598:	e000      	b.n	3400359c <LL_RCC_CLKP_IsEnabled+0x18>
3400359a:	2300      	movs	r3, #0
}
3400359c:	4618      	mov	r0, r3
3400359e:	46bd      	mov	sp, r7
340035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
340035a4:	4770      	bx	lr
340035a6:	bf00      	nop
340035a8:	56028000 	.word	0x56028000

340035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         modification indeed impacts all peripherals using this ICx as clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
340035ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
340035b0:	b0f2      	sub	sp, #456	@ 0x1c8
340035b2:	af00      	add	r7, sp, #0
340035b4:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
340035b8:	2300      	movs	r3, #0
340035ba:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
340035be:	2300      	movs	r3, #0
340035c0:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
340035c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
340035cc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
340035d0:	2500      	movs	r5, #0
340035d2:	ea54 0305 	orrs.w	r3, r4, r5
340035d6:	d06c      	beq.n	340036b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = LL_RCC_GetRTCClockSource();
340035d8:	f7ff f91e 	bl	34002818 <LL_RCC_GetRTCClockSource>
340035dc:	f8c7 01c0 	str.w	r0, [r7, #448]	@ 0x1c0

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
340035e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
340035e4:	2b00      	cmp	r3, #0
340035e6:	d018      	beq.n	3400361a <HAL_RCCEx_PeriphCLKConfig+0x6e>
340035e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340035ec:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
340035f0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
340035f4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
340035f8:	4293      	cmp	r3, r2
340035fa:	d00e      	beq.n	3400361a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
340035fc:	4bc3      	ldr	r3, [pc, #780]	@ (3400390c <HAL_RCCEx_PeriphCLKConfig+0x360>)
340035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34003600:	4ac2      	ldr	r2, [pc, #776]	@ (3400390c <HAL_RCCEx_PeriphCLKConfig+0x360>)
34003602:	f043 0301 	orr.w	r3, r3, #1
34003606:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
34003608:	4bc0      	ldr	r3, [pc, #768]	@ (3400390c <HAL_RCCEx_PeriphCLKConfig+0x360>)
3400360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400360c:	f003 0301 	and.w	r3, r3, #1
34003610:	2b00      	cmp	r3, #0
34003612:	d102      	bne.n	3400361a <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        ret = HAL_ERROR;
34003614:	2301      	movs	r3, #1
34003616:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
        WRITE_REG(RCC->BDCR, tmpreg);
#endif /* #if 0  TO DO */
      }
    }

    if (ret == HAL_OK)
3400361a:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
3400361e:	2b00      	cmp	r3, #0
34003620:	d143      	bne.n	340036aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
34003622:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003626:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
3400362a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
3400362e:	d117      	bne.n	34003660 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
34003630:	f7fe f858 	bl	340016e4 <HAL_GetTick>
34003634:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() == 0U)
34003638:	e00d      	b.n	34003656 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3400363a:	f7fe f853 	bl	340016e4 <HAL_GetTick>
3400363e:	4602      	mov	r2, r0
34003640:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
34003644:	1ad2      	subs	r2, r2, r3
34003646:	f241 3388 	movw	r3, #5000	@ 0x1388
3400364a:	429a      	cmp	r2, r3
3400364c:	d903      	bls.n	34003656 <HAL_RCCEx_PeriphCLKConfig+0xaa>
          {
            ret = HAL_TIMEOUT;
3400364e:	2303      	movs	r3, #3
34003650:	f887 31c7 	strb.w	r3, [r7, #455]	@ 0x1c7
            break;
34003654:	e004      	b.n	34003660 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        while (LL_RCC_LSE_IsReady() == 0U)
34003656:	f7fe fcf1 	bl	3400203c <LL_RCC_LSE_IsReady>
3400365a:	4603      	mov	r3, r0
3400365c:	2b00      	cmp	r3, #0
3400365e:	d0ec      	beq.n	3400363a <HAL_RCCEx_PeriphCLKConfig+0x8e>
          }
        }
      }

      if (ret == HAL_OK)
34003660:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
34003664:	2b00      	cmp	r3, #0
34003666:	d11b      	bne.n	340036a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34003668:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400366c:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34003670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34003674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34003678:	d108      	bne.n	3400368c <HAL_RCCEx_PeriphCLKConfig+0xe0>
3400367a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400367e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34003682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
34003686:	4618      	mov	r0, r3
34003688:	f7ff f8d4 	bl	34002834 <LL_RCC_SetRTC_HSEPrescaler>
3400368c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003690:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
34003694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
34003698:	4618      	mov	r0, r3
3400369a:	f7ff f8a7 	bl	340027ec <LL_RCC_SetRTCClockSource>
3400369e:	e008      	b.n	340036b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
      else
      {
        /* set overall return value */
        status = ret;
340036a0:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
340036a4:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
340036a8:	e003      	b.n	340036b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
340036aa:	f897 31c7 	ldrb.w	r3, [r7, #455]	@ 0x1c7
340036ae:	f887 31c6 	strb.w	r3, [r7, #454]	@ 0x1c6
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
340036b2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
340036ba:	f002 0804 	and.w	r8, r2, #4
340036be:	f04f 0900 	mov.w	r9, #0
340036c2:	ea58 0309 	orrs.w	r3, r8, r9
340036c6:	f000 809b 	beq.w	34003800 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
340036ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340036ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
340036d2:	2b04      	cmp	r3, #4
340036d4:	d116      	bne.n	34003704 <HAL_RCCEx_PeriphCLKConfig+0x158>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
340036d6:	4b8e      	ldr	r3, [pc, #568]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
340036d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
340036dc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340036e0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340036e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340036e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
340036ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
340036f0:	3b01      	subs	r3, #1
340036f2:	041b      	lsls	r3, r3, #16
340036f4:	4313      	orrs	r3, r2
340036f6:	4a86      	ldr	r2, [pc, #536]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
340036f8:	430b      	orrs	r3, r1
340036fa:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
340036fe:	f7ff fbb3 	bl	34002e68 <LL_RCC_IC5_Enable>
34003702:	e076      	b.n	340037f2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC10)
34003704:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003708:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
3400370c:	2b05      	cmp	r3, #5
3400370e:	d116      	bne.n	3400373e <HAL_RCCEx_PeriphCLKConfig+0x192>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34003710:	4b7f      	ldr	r3, [pc, #508]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34003712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34003716:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400371a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400371e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003722:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34003724:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400372a:	3b01      	subs	r3, #1
3400372c:	041b      	lsls	r3, r3, #16
3400372e:	4313      	orrs	r3, r2
34003730:	4a77      	ldr	r2, [pc, #476]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34003732:	430b      	orrs	r3, r1
34003734:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34003738:	f7ff fc96 	bl	34003068 <LL_RCC_IC10_Enable>
3400373c:	e059      	b.n	340037f2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC15)
3400373e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003742:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34003746:	2b06      	cmp	r3, #6
34003748:	d116      	bne.n	34003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400374a:	4b71      	ldr	r3, [pc, #452]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3400374c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34003750:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003754:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003758:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400375c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400375e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003762:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34003764:	3b01      	subs	r3, #1
34003766:	041b      	lsls	r3, r3, #16
34003768:	4313      	orrs	r3, r2
3400376a:	4a69      	ldr	r2, [pc, #420]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
3400376c:	430b      	orrs	r3, r1
3400376e:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34003772:	f7ff fd79 	bl	34003268 <LL_RCC_IC15_Enable>
34003776:	e03c      	b.n	340037f2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC19)
34003778:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400377c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
34003780:	2b03      	cmp	r3, #3
34003782:	d118      	bne.n	340037b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34003784:	4b62      	ldr	r3, [pc, #392]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34003786:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
3400378a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400378e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003792:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003796:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
3400379a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400379e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
340037a2:	3b01      	subs	r3, #1
340037a4:	041b      	lsls	r3, r3, #16
340037a6:	4313      	orrs	r3, r2
340037a8:	4a59      	ldr	r2, [pc, #356]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
340037aa:	430b      	orrs	r3, r1
340037ac:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
340037b0:	f7ff fe5a 	bl	34003468 <LL_RCC_IC19_Enable>
340037b4:	e01d      	b.n	340037f2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    }
    else if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC20)
340037b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340037ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
340037be:	2b07      	cmp	r3, #7
340037c0:	d117      	bne.n	340037f2 <HAL_RCCEx_PeriphCLKConfig+0x246>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
340037c2:	4b53      	ldr	r3, [pc, #332]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
340037c4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
340037c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340037cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340037d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340037d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
340037d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340037dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
340037e0:	3b01      	subs	r3, #1
340037e2:	041b      	lsls	r3, r3, #16
340037e4:	4313      	orrs	r3, r2
340037e6:	4a4a      	ldr	r2, [pc, #296]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
340037e8:	430b      	orrs	r3, r1
340037ea:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
340037ee:	f7ff fe7b 	bl	340034e8 <LL_RCC_IC20_Enable>
    {
      /* No ICx selected as source */
    }

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
340037f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340037f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
340037fa:	4618      	mov	r0, r3
340037fc:	f7fe fcd2 	bl	340021a4 <LL_RCC_SetCLKPClockSource>
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
34003800:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003804:	e9d3 2300 	ldrd	r2, r3, [r3]
34003808:	f04f 0a00 	mov.w	sl, #0
3400380c:	f403 0b80 	and.w	fp, r3, #4194304	@ 0x400000
34003810:	ea5a 030b 	orrs.w	r3, sl, fp
34003814:	d04b      	beq.n	340038ae <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
34003816:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400381a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400381e:	4b3d      	ldr	r3, [pc, #244]	@ (34003914 <HAL_RCCEx_PeriphCLKConfig+0x368>)
34003820:	429a      	cmp	r2, r3
34003822:	d116      	bne.n	34003852 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34003824:	4b3a      	ldr	r3, [pc, #232]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34003826:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
3400382a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400382e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003832:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003836:	699a      	ldr	r2, [r3, #24]
34003838:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400383c:	69db      	ldr	r3, [r3, #28]
3400383e:	3b01      	subs	r3, #1
34003840:	041b      	lsls	r3, r3, #16
34003842:	4313      	orrs	r3, r2
34003844:	4a32      	ldr	r2, [pc, #200]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34003846:	430b      	orrs	r3, r1
34003848:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
3400384c:	f7ff fa8c 	bl	34002d68 <LL_RCC_IC3_Enable>
34003850:	e026      	b.n	340038a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
34003852:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003856:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
3400385a:	4b2f      	ldr	r3, [pc, #188]	@ (34003918 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
3400385c:	429a      	cmp	r2, r3
3400385e:	d116      	bne.n	3400388e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34003860:	4b2b      	ldr	r3, [pc, #172]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34003862:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34003866:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400386a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400386e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003872:	6a1a      	ldr	r2, [r3, #32]
34003874:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400387a:	3b01      	subs	r3, #1
3400387c:	041b      	lsls	r3, r3, #16
3400387e:	4313      	orrs	r3, r2
34003880:	4a23      	ldr	r2, [pc, #140]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34003882:	430b      	orrs	r3, r1
34003884:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34003888:	f7ff faae 	bl	34002de8 <LL_RCC_IC4_Enable>
3400388c:	e008      	b.n	340038a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    }
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3400388e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003892:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
34003896:	4b21      	ldr	r3, [pc, #132]	@ (3400391c <HAL_RCCEx_PeriphCLKConfig+0x370>)
34003898:	429a      	cmp	r2, r3
3400389a:	d101      	bne.n	340038a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      LL_RCC_CLKP_Enable();
3400389c:	f7ff fe64 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI1 clock source */
    __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
340038a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340038a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
340038a8:	4618      	mov	r0, r3
340038aa:	f7fe fe0b 	bl	340024c4 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
340038ae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340038b2:	e9d3 2300 	ldrd	r2, r3, [r3]
340038b6:	2100      	movs	r1, #0
340038b8:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
340038bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
340038c0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
340038c4:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
340038c8:	4603      	mov	r3, r0
340038ca:	460a      	mov	r2, r1
340038cc:	4313      	orrs	r3, r2
340038ce:	d057      	beq.n	34003980 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
340038d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340038d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
340038d8:	4b11      	ldr	r3, [pc, #68]	@ (34003920 <HAL_RCCEx_PeriphCLKConfig+0x374>)
340038da:	429a      	cmp	r2, r3
340038dc:	d122      	bne.n	34003924 <HAL_RCCEx_PeriphCLKConfig+0x378>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340038de:	4b0c      	ldr	r3, [pc, #48]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
340038e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
340038e4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340038e8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340038ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340038f0:	699a      	ldr	r2, [r3, #24]
340038f2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340038f6:	69db      	ldr	r3, [r3, #28]
340038f8:	3b01      	subs	r3, #1
340038fa:	041b      	lsls	r3, r3, #16
340038fc:	4313      	orrs	r3, r2
340038fe:	4a04      	ldr	r2, [pc, #16]	@ (34003910 <HAL_RCCEx_PeriphCLKConfig+0x364>)
34003900:	430b      	orrs	r3, r1
34003902:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34003906:	f7ff fa2f 	bl	34002d68 <LL_RCC_IC3_Enable>
3400390a:	e032      	b.n	34003972 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
3400390c:	56024800 	.word	0x56024800
34003910:	56028000 	.word	0x56028000
34003914:	03020014 	.word	0x03020014
34003918:	03030014 	.word	0x03030014
3400391c:	03010014 	.word	0x03010014
34003920:	03020414 	.word	0x03020414
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
34003924:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003928:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
3400392c:	4bc5      	ldr	r3, [pc, #788]	@ (34003c44 <HAL_RCCEx_PeriphCLKConfig+0x698>)
3400392e:	429a      	cmp	r2, r3
34003930:	d116      	bne.n	34003960 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34003932:	4bc5      	ldr	r3, [pc, #788]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003934:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34003938:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400393c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003940:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003944:	6a1a      	ldr	r2, [r3, #32]
34003946:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400394c:	3b01      	subs	r3, #1
3400394e:	041b      	lsls	r3, r3, #16
34003950:	4313      	orrs	r3, r2
34003952:	4abd      	ldr	r2, [pc, #756]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003954:	430b      	orrs	r3, r1
34003956:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
3400395a:	f7ff fa45 	bl	34002de8 <LL_RCC_IC4_Enable>
3400395e:	e008      	b.n	34003972 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    }
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
34003960:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003964:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34003968:	4bb8      	ldr	r3, [pc, #736]	@ (34003c4c <HAL_RCCEx_PeriphCLKConfig+0x6a0>)
3400396a:	429a      	cmp	r2, r3
3400396c:	d101      	bne.n	34003972 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    {
      LL_RCC_CLKP_Enable();
3400396e:	f7ff fdfb 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI2 clock source */
    __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
34003972:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3400397a:	4618      	mov	r0, r3
3400397c:	f7fe fda2 	bl	340024c4 <LL_RCC_SetXSPIClockSource>
  }

  /*-------------------------- XSPI3 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34003980:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003984:	e9d3 2300 	ldrd	r2, r3, [r3]
34003988:	2100      	movs	r1, #0
3400398a:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
3400398e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
34003992:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
34003996:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
3400399a:	4603      	mov	r3, r0
3400399c:	460a      	mov	r2, r1
3400399e:	4313      	orrs	r3, r2
340039a0:	d04b      	beq.n	34003a3a <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));

    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
340039a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340039a6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
340039aa:	4ba9      	ldr	r3, [pc, #676]	@ (34003c50 <HAL_RCCEx_PeriphCLKConfig+0x6a4>)
340039ac:	429a      	cmp	r2, r3
340039ae:	d116      	bne.n	340039de <HAL_RCCEx_PeriphCLKConfig+0x432>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
340039b0:	4ba5      	ldr	r3, [pc, #660]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
340039b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
340039b6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340039ba:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340039be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340039c2:	699a      	ldr	r2, [r3, #24]
340039c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340039c8:	69db      	ldr	r3, [r3, #28]
340039ca:	3b01      	subs	r3, #1
340039cc:	041b      	lsls	r3, r3, #16
340039ce:	4313      	orrs	r3, r2
340039d0:	4a9d      	ldr	r2, [pc, #628]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
340039d2:	430b      	orrs	r3, r1
340039d4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
340039d8:	f7ff f9c6 	bl	34002d68 <LL_RCC_IC3_Enable>
340039dc:	e026      	b.n	34003a2c <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
340039de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340039e2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
340039e6:	4b9b      	ldr	r3, [pc, #620]	@ (34003c54 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
340039e8:	429a      	cmp	r2, r3
340039ea:	d116      	bne.n	34003a1a <HAL_RCCEx_PeriphCLKConfig+0x46e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
340039ec:	4b96      	ldr	r3, [pc, #600]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
340039ee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
340039f2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340039f6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340039fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340039fe:	6a1a      	ldr	r2, [r3, #32]
34003a00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34003a06:	3b01      	subs	r3, #1
34003a08:	041b      	lsls	r3, r3, #16
34003a0a:	4313      	orrs	r3, r2
34003a0c:	4a8e      	ldr	r2, [pc, #568]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003a0e:	430b      	orrs	r3, r1
34003a10:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34003a14:	f7ff f9e8 	bl	34002de8 <LL_RCC_IC4_Enable>
34003a18:	e008      	b.n	34003a2c <HAL_RCCEx_PeriphCLKConfig+0x480>
    }
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
34003a1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003a1e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
34003a22:	4b8d      	ldr	r3, [pc, #564]	@ (34003c58 <HAL_RCCEx_PeriphCLKConfig+0x6ac>)
34003a24:	429a      	cmp	r2, r3
34003a26:	d101      	bne.n	34003a2c <HAL_RCCEx_PeriphCLKConfig+0x480>
    {
      LL_RCC_CLKP_Enable();
34003a28:	f7ff fd9e 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the XSPI3 clock source */
    __HAL_RCC_XSPI3_CONFIG(PeriphClkInit->Xspi3ClockSelection);
34003a2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003a30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
34003a34:	4618      	mov	r0, r3
34003a36:	f7fe fd45 	bl	340024c4 <LL_RCC_SetXSPIClockSource>
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
34003a3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
34003a42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
34003a46:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
34003a4a:	2300      	movs	r3, #0
34003a4c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
34003a50:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
34003a54:	4603      	mov	r3, r0
34003a56:	460a      	mov	r2, r1
34003a58:	4313      	orrs	r3, r2
34003a5a:	d048      	beq.n	34003aee <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
34003a5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003a60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34003a64:	2b20      	cmp	r3, #32
34003a66:	d116      	bne.n	34003a96 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));

      /* Set IC3 configuration */
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34003a68:	4b77      	ldr	r3, [pc, #476]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003a6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34003a6e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003a72:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003a76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003a7a:	699a      	ldr	r2, [r3, #24]
34003a7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003a80:	69db      	ldr	r3, [r3, #28]
34003a82:	3b01      	subs	r3, #1
34003a84:	041b      	lsls	r3, r3, #16
34003a86:	4313      	orrs	r3, r2
34003a88:	4a6f      	ldr	r2, [pc, #444]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003a8a:	430b      	orrs	r3, r1
34003a8c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
                 PeriphClkInit->ICSelection[RCC_IC3].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC3].ClockDivider - 1U) << RCC_IC3CFGR_IC3INT_Pos));

      LL_RCC_IC3_Enable();
34003a90:	f7ff f96a 	bl	34002d68 <LL_RCC_IC3_Enable>
34003a94:	e024      	b.n	34003ae0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
34003a96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003a9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34003a9e:	2b30      	cmp	r3, #48	@ 0x30
34003aa0:	d116      	bne.n	34003ad0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34003aa2:	4b69      	ldr	r3, [pc, #420]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003aa4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34003aa8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003aac:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003ab0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003ab4:	6a1a      	ldr	r2, [r3, #32]
34003ab6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34003abc:	3b01      	subs	r3, #1
34003abe:	041b      	lsls	r3, r3, #16
34003ac0:	4313      	orrs	r3, r2
34003ac2:	4a61      	ldr	r2, [pc, #388]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003ac4:	430b      	orrs	r3, r1
34003ac6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34003aca:	f7ff f98d 	bl	34002de8 <LL_RCC_IC4_Enable>
34003ace:	e007      	b.n	34003ae0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    }
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34003ad0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003ad4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34003ad8:	2b10      	cmp	r3, #16
34003ada:	d101      	bne.n	34003ae0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      LL_RCC_CLKP_Enable();
34003adc:	f7ff fd44 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FMC kernel clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
34003ae0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003ae4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
34003ae8:	4618      	mov	r0, r3
34003aea:	f7fe fc03 	bl	340022f4 <LL_RCC_SetFMCClockSource>
  }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
34003aee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
34003af6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
34003afa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
34003afe:	2300      	movs	r3, #0
34003b00:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
34003b04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
34003b08:	4603      	mov	r3, r0
34003b0a:	460a      	mov	r2, r1
34003b0c:	4313      	orrs	r3, r2
34003b0e:	d04b      	beq.n	34003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34003b10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003b14:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34003b18:	4b50      	ldr	r3, [pc, #320]	@ (34003c5c <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
34003b1a:	429a      	cmp	r2, r3
34003b1c:	d116      	bne.n	34003b4c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34003b1e:	4b4a      	ldr	r3, [pc, #296]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003b20:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34003b24:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003b28:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003b2c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003b30:	6a1a      	ldr	r2, [r3, #32]
34003b32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34003b38:	3b01      	subs	r3, #1
34003b3a:	041b      	lsls	r3, r3, #16
34003b3c:	4313      	orrs	r3, r2
34003b3e:	4a42      	ldr	r2, [pc, #264]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003b40:	430b      	orrs	r3, r1
34003b42:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34003b46:	f7ff f94f 	bl	34002de8 <LL_RCC_IC4_Enable>
34003b4a:	e026      	b.n	34003b9a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34003b4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003b50:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34003b54:	4b42      	ldr	r3, [pc, #264]	@ (34003c60 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
34003b56:	429a      	cmp	r2, r3
34003b58:	d116      	bne.n	34003b88 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34003b5a:	4b3b      	ldr	r3, [pc, #236]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003b5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34003b60:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003b64:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003b68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34003b6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34003b74:	3b01      	subs	r3, #1
34003b76:	041b      	lsls	r3, r3, #16
34003b78:	4313      	orrs	r3, r2
34003b7a:	4a33      	ldr	r2, [pc, #204]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003b7c:	430b      	orrs	r3, r1
34003b7e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34003b82:	f7ff f971 	bl	34002e68 <LL_RCC_IC5_Enable>
34003b86:	e008      	b.n	34003b9a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
34003b88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003b8c:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
34003b90:	4b34      	ldr	r3, [pc, #208]	@ (34003c64 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
34003b92:	429a      	cmp	r2, r3
34003b94:	d101      	bne.n	34003b9a <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    {
      LL_RCC_CLKP_Enable();
34003b96:	f7ff fce7 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC1 clock*/
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
34003b9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003b9e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
34003ba2:	4618      	mov	r0, r3
34003ba4:	f7fe fc57 	bl	34002456 <LL_RCC_SetSDMMCClockSource>
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
34003ba8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
34003bb0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
34003bb4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
34003bb8:	2300      	movs	r3, #0
34003bba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
34003bbe:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
34003bc2:	4603      	mov	r3, r0
34003bc4:	460a      	mov	r2, r1
34003bc6:	4313      	orrs	r3, r2
34003bc8:	d062      	beq.n	34003c90 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
34003bca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003bce:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34003bd2:	4b25      	ldr	r3, [pc, #148]	@ (34003c68 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
34003bd4:	429a      	cmp	r2, r3
34003bd6:	d116      	bne.n	34003c06 <HAL_RCCEx_PeriphCLKConfig+0x65a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));

      /* Set IC4 configuration */
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34003bd8:	4b1b      	ldr	r3, [pc, #108]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003bda:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34003bde:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003be2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003be6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003bea:	6a1a      	ldr	r2, [r3, #32]
34003bec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34003bf2:	3b01      	subs	r3, #1
34003bf4:	041b      	lsls	r3, r3, #16
34003bf6:	4313      	orrs	r3, r2
34003bf8:	4a13      	ldr	r2, [pc, #76]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003bfa:	430b      	orrs	r3, r1
34003bfc:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                 PeriphClkInit->ICSelection[RCC_IC4].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC4].ClockDivider - 1U) << RCC_IC4CFGR_IC4INT_Pos));

      LL_RCC_IC4_Enable();
34003c00:	f7ff f8f2 	bl	34002de8 <LL_RCC_IC4_Enable>
34003c04:	e03d      	b.n	34003c82 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
34003c06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003c0a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34003c0e:	4b17      	ldr	r3, [pc, #92]	@ (34003c6c <HAL_RCCEx_PeriphCLKConfig+0x6c0>)
34003c10:	429a      	cmp	r2, r3
34003c12:	d12d      	bne.n	34003c70 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));

      /* Set IC5 configuration */
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34003c14:	4b0c      	ldr	r3, [pc, #48]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003c16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34003c1a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003c1e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003c22:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003c26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
34003c28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
34003c2e:	3b01      	subs	r3, #1
34003c30:	041b      	lsls	r3, r3, #16
34003c32:	4313      	orrs	r3, r2
34003c34:	4a04      	ldr	r2, [pc, #16]	@ (34003c48 <HAL_RCCEx_PeriphCLKConfig+0x69c>)
34003c36:	430b      	orrs	r3, r1
34003c38:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
                 PeriphClkInit->ICSelection[RCC_IC5].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC5].ClockDivider - 1U) << RCC_IC5CFGR_IC5INT_Pos));

      LL_RCC_IC5_Enable();
34003c3c:	f7ff f914 	bl	34002e68 <LL_RCC_IC5_Enable>
34003c40:	e01f      	b.n	34003c82 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
34003c42:	bf00      	nop
34003c44:	03030414 	.word	0x03030414
34003c48:	56028000 	.word	0x56028000
34003c4c:	03010414 	.word	0x03010414
34003c50:	03020814 	.word	0x03020814
34003c54:	03030814 	.word	0x03030814
34003c58:	03010814 	.word	0x03010814
34003c5c:	0302001c 	.word	0x0302001c
34003c60:	0303001c 	.word	0x0303001c
34003c64:	0301001c 	.word	0x0301001c
34003c68:	0302041c 	.word	0x0302041c
34003c6c:	0303041c 	.word	0x0303041c
    }
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34003c70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003c74:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
34003c78:	4bb3      	ldr	r3, [pc, #716]	@ (34003f48 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
34003c7a:	429a      	cmp	r2, r3
34003c7c:	d101      	bne.n	34003c82 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      LL_RCC_CLKP_Enable();
34003c7e:	f7ff fc73 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SDMMC2 clock*/
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
34003c82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003c86:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
34003c8a:	4618      	mov	r0, r3
34003c8c:	f7fe fbe3 	bl	34002456 <LL_RCC_SetSDMMCClockSource>
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34003c90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003c94:	e9d3 2300 	ldrd	r2, r3, [r3]
34003c98:	f002 0301 	and.w	r3, r2, #1
34003c9c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
34003ca0:	2300      	movs	r3, #0
34003ca2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
34003ca6:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
34003caa:	4603      	mov	r3, r0
34003cac:	460a      	mov	r2, r1
34003cae:	4313      	orrs	r3, r2
34003cb0:	d057      	beq.n	34003d62 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
34003cb2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003cb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34003cba:	2b20      	cmp	r3, #32
34003cbc:	d116      	bne.n	34003cec <HAL_RCCEx_PeriphCLKConfig+0x740>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34003cbe:	4ba3      	ldr	r3, [pc, #652]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003cc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34003cc4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003cc8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003ccc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34003cd2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34003cd8:	3b01      	subs	r3, #1
34003cda:	041b      	lsls	r3, r3, #16
34003cdc:	4313      	orrs	r3, r2
34003cde:	4a9b      	ldr	r2, [pc, #620]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003ce0:	430b      	orrs	r3, r1
34003ce2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34003ce6:	f7ff f8ff 	bl	34002ee8 <LL_RCC_IC7_Enable>
34003cea:	e024      	b.n	34003d36 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34003cec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003cf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34003cf4:	2b30      	cmp	r3, #48	@ 0x30
34003cf6:	d116      	bne.n	34003d26 <HAL_RCCEx_PeriphCLKConfig+0x77a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34003cf8:	4b94      	ldr	r3, [pc, #592]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34003cfe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003d02:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003d06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003d0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34003d0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34003d12:	3b01      	subs	r3, #1
34003d14:	041b      	lsls	r3, r3, #16
34003d16:	4313      	orrs	r3, r2
34003d18:	4a8c      	ldr	r2, [pc, #560]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003d1a:	430b      	orrs	r3, r1
34003d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34003d20:	f7ff f922 	bl	34002f68 <LL_RCC_IC8_Enable>
34003d24:	e007      	b.n	34003d36 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    }
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34003d26:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003d2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34003d2e:	2b10      	cmp	r3, #16
34003d30:	d101      	bne.n	34003d36 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      LL_RCC_CLKP_Enable();
34003d32:	f7ff fc19 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ADC clock source and divider */
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34003d36:	4b85      	ldr	r3, [pc, #532]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003d38:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34003d3c:	f423 417f 	bic.w	r1, r3, #65280	@ 0xff00
34003d40:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
34003d44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003d48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
34003d4c:	3b01      	subs	r3, #1
34003d4e:	021a      	lsls	r2, r3, #8
34003d50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003d54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
34003d58:	4313      	orrs	r3, r2
34003d5a:	4a7c      	ldr	r2, [pc, #496]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003d5c:	430b      	orrs	r3, r1
34003d5e:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
               (((PeriphClkInit->AdcDivider - 1U) << RCC_CCIPR1_ADCPRE_Pos) | (PeriphClkInit->AdcClockSelection)));
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34003d62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
34003d6a:	f002 0302 	and.w	r3, r2, #2
34003d6e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
34003d72:	2300      	movs	r3, #0
34003d74:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
34003d78:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
34003d7c:	4603      	mov	r3, r0
34003d7e:	460a      	mov	r2, r1
34003d80:	4313      	orrs	r3, r2
34003d82:	d048      	beq.n	34003e16 <HAL_RCCEx_PeriphCLKConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34003d84:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003d88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34003d8c:	2b02      	cmp	r3, #2
34003d8e:	d116      	bne.n	34003dbe <HAL_RCCEx_PeriphCLKConfig+0x812>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34003d90:	4b6e      	ldr	r3, [pc, #440]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003d92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34003d96:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003d9a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003d9e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34003da4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34003daa:	3b01      	subs	r3, #1
34003dac:	041b      	lsls	r3, r3, #16
34003dae:	4313      	orrs	r3, r2
34003db0:	4a66      	ldr	r2, [pc, #408]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003db2:	430b      	orrs	r3, r1
34003db4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34003db8:	f7ff f896 	bl	34002ee8 <LL_RCC_IC7_Enable>
34003dbc:	e024      	b.n	34003e08 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34003dbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003dc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34003dc6:	2b03      	cmp	r3, #3
34003dc8:	d116      	bne.n	34003df8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34003dca:	4b60      	ldr	r3, [pc, #384]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34003dd0:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003dd4:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003dd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34003dde:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34003de4:	3b01      	subs	r3, #1
34003de6:	041b      	lsls	r3, r3, #16
34003de8:	4313      	orrs	r3, r2
34003dea:	4a58      	ldr	r2, [pc, #352]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003dec:	430b      	orrs	r3, r1
34003dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34003df2:	f7ff f8b9 	bl	34002f68 <LL_RCC_IC8_Enable>
34003df6:	e007      	b.n	34003e08 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    }
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
34003df8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003dfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34003e00:	2b01      	cmp	r3, #1
34003e02:	d101      	bne.n	34003e08 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      LL_RCC_CLKP_Enable();
34003e04:	f7ff fbb0 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of ADF1 clock*/
    __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
34003e08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003e0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
34003e10:	4618      	mov	r0, r3
34003e12:	f7fe f9b1 	bl	34002178 <LL_RCC_SetADFClockSource>
  }

  /*------------------------------------ CSI configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
34003e16:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
34003e1e:	f002 0308 	and.w	r3, r2, #8
34003e22:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
34003e26:	2300      	movs	r3, #0
34003e28:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
34003e2c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
34003e30:	4603      	mov	r3, r0
34003e32:	460a      	mov	r2, r1
34003e34:	4313      	orrs	r3, r2
34003e36:	d017      	beq.n	34003e68 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
    /* Check the parameters */
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));

    /* Set IC18 configuration */
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
34003e38:	4b44      	ldr	r3, [pc, #272]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003e3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34003e3e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003e42:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003e46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003e4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
34003e4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
34003e56:	3b01      	subs	r3, #1
34003e58:	041b      	lsls	r3, r3, #16
34003e5a:	4313      	orrs	r3, r2
34003e5c:	4a3b      	ldr	r2, [pc, #236]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003e5e:	430b      	orrs	r3, r1
34003e60:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
               PeriphClkInit->ICSelection[RCC_IC18].ClockSelection | \
               ((PeriphClkInit->ICSelection[RCC_IC18].ClockDivider - 1U) << RCC_IC18CFGR_IC18INT_Pos));

    LL_RCC_IC18_Enable();
34003e64:	f7ff fac0 	bl	340033e8 <LL_RCC_IC18_Enable>
  }

  /*---------------------- DCMIPP configuration ------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
34003e68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
34003e70:	f002 0310 	and.w	r3, r2, #16
34003e74:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
34003e78:	2300      	movs	r3, #0
34003e7a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
34003e7e:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
34003e82:	4603      	mov	r3, r0
34003e84:	460a      	mov	r2, r1
34003e86:	4313      	orrs	r3, r2
34003e88:	d02f      	beq.n	34003eea <HAL_RCCEx_PeriphCLKConfig+0x93e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));

    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34003e8a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003e8e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34003e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34003e96:	d118      	bne.n	34003eca <HAL_RCCEx_PeriphCLKConfig+0x91e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));

      /* Set IC17 configuration */
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
34003e98:	4b2c      	ldr	r3, [pc, #176]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003e9a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
34003e9e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003ea2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003ea6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003eaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
34003eae:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
34003eb6:	3b01      	subs	r3, #1
34003eb8:	041b      	lsls	r3, r3, #16
34003eba:	4313      	orrs	r3, r2
34003ebc:	4a23      	ldr	r2, [pc, #140]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003ebe:	430b      	orrs	r3, r1
34003ec0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
                 PeriphClkInit->ICSelection[RCC_IC17].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC17].ClockDivider - 1U) << RCC_IC17CFGR_IC17INT_Pos));

      LL_RCC_IC17_Enable();
34003ec4:	f7ff fa50 	bl	34003368 <LL_RCC_IC17_Enable>
34003ec8:	e008      	b.n	34003edc <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
34003eca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003ece:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
34003ed6:	d101      	bne.n	34003edc <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      LL_RCC_CLKP_Enable();
34003ed8:	f7ff fb46 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the CEC clock source */
    __HAL_RCC_DCMIPP_CONFIG(PeriphClkInit->DcmippClockSelection);
34003edc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003ee0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
34003ee4:	4618      	mov	r0, r3
34003ee6:	f7fe f973 	bl	340021d0 <LL_RCC_SetDCMIPPClockSource>
  }

  /*---------------------- ETH1 configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
34003eea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
34003ef2:	f002 0320 	and.w	r3, r2, #32
34003ef6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
34003efa:	2300      	movs	r3, #0
34003efc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
34003f00:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
34003f04:	4603      	mov	r3, r0
34003f06:	460a      	mov	r2, r1
34003f08:	4313      	orrs	r3, r2
34003f0a:	d031      	beq.n	34003f70 <HAL_RCCEx_PeriphCLKConfig+0x9c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));

    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
34003f0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003f10:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34003f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
34003f18:	d11a      	bne.n	34003f50 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));

      /* Set IC12 configuration */
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
34003f1a:	4b0c      	ldr	r3, [pc, #48]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
34003f20:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34003f24:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34003f28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003f2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
34003f2e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003f32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
34003f34:	3b01      	subs	r3, #1
34003f36:	041b      	lsls	r3, r3, #16
34003f38:	4313      	orrs	r3, r2
34003f3a:	4a04      	ldr	r2, [pc, #16]	@ (34003f4c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
34003f3c:	430b      	orrs	r3, r1
34003f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
                 PeriphClkInit->ICSelection[RCC_IC12].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC12].ClockDivider - 1U) << RCC_IC12CFGR_IC12INT_Pos));

      LL_RCC_IC12_Enable();
34003f42:	f7ff f8d1 	bl	340030e8 <LL_RCC_IC12_Enable>
34003f46:	e00c      	b.n	34003f62 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
34003f48:	0301041c 	.word	0x0301041c
34003f4c:	56028000 	.word	0x56028000
    }
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
34003f50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003f54:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34003f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34003f5c:	d101      	bne.n	34003f62 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      LL_RCC_CLKP_Enable();
34003f5e:	f7ff fb03 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 clock source */
    __HAL_RCC_ETH1_CONFIG(PeriphClkInit->Eth1ClockSelection);
34003f62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003f66:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
34003f6a:	4618      	mov	r0, r3
34003f6c:	f7fe f946 	bl	340021fc <LL_RCC_SetETHClockSource>
  }

  /*---------------------- ETH1PHY configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
34003f70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
34003f78:	f002 0340 	and.w	r3, r2, #64	@ 0x40
34003f7c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
34003f80:	2300      	movs	r3, #0
34003f82:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
34003f86:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
34003f8a:	4603      	mov	r3, r0
34003f8c:	460a      	mov	r2, r1
34003f8e:	4313      	orrs	r3, r2
34003f90:	d006      	beq.n	34003fa0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));

    /* Configure the source of ETH1 PHY interface */
    __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyInterfaceSelection);
34003f92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003f96:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
34003f9a:	4618      	mov	r0, r3
34003f9c:	f7fe f944 	bl	34002228 <LL_RCC_SetETHPHYInterface>
  }

  /*---------------------- ETH1 RX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34003fa0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
34003fa8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
34003fac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
34003fb0:	2300      	movs	r3, #0
34003fb2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
34003fb6:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
34003fba:	4603      	mov	r3, r0
34003fbc:	460a      	mov	r2, r1
34003fbe:	4313      	orrs	r3, r2
34003fc0:	d006      	beq.n	34003fd0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));

    /* Configure the ETH1 RX clock source */
    __HAL_RCC_ETH1RX_CONFIG(PeriphClkInit->Eth1RxClockSelection);
34003fc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003fc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
34003fca:	4618      	mov	r0, r3
34003fcc:	f7fe f950 	bl	34002270 <LL_RCC_SetETHREFRXClockSource>
  }

  /*---------------------- ETH1 TX configuration -----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
34003fd0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
34003fd8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
34003fdc:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
34003fe0:	2300      	movs	r3, #0
34003fe2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
34003fe6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
34003fea:	4603      	mov	r3, r0
34003fec:	460a      	mov	r2, r1
34003fee:	4313      	orrs	r3, r2
34003ff0:	d006      	beq.n	34004000 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));

    /* Configure the ETH1 TX clock source */
    __HAL_RCC_ETH1TX_CONFIG(PeriphClkInit->Eth1TxClockSelection);
34003ff2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34003ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
34003ffa:	4618      	mov	r0, r3
34003ffc:	f7fe f94e 	bl	3400229c <LL_RCC_SetETHREFTXClockSource>
  }

  /*---------------------- ETH1 PTP configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
34004000:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004004:	e9d3 2300 	ldrd	r2, r3, [r3]
34004008:	f402 7300 	and.w	r3, r2, #512	@ 0x200
3400400c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
34004010:	2300      	movs	r3, #0
34004012:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
34004016:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
3400401a:	4603      	mov	r3, r0
3400401c:	460a      	mov	r2, r1
3400401e:	4313      	orrs	r3, r2
34004020:	d038      	beq.n	34004094 <HAL_RCCEx_PeriphCLKConfig+0xae8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));

    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
34004022:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004026:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400402a:	2b02      	cmp	r3, #2
3400402c:	d116      	bne.n	3400405c <HAL_RCCEx_PeriphCLKConfig+0xab0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));

      /* Set IC13 configuration */
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
3400402e:	4bbc      	ldr	r3, [pc, #752]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34004030:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34004034:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004038:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400403c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004040:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
34004042:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004046:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
34004048:	3b01      	subs	r3, #1
3400404a:	041b      	lsls	r3, r3, #16
3400404c:	4313      	orrs	r3, r2
3400404e:	4ab4      	ldr	r2, [pc, #720]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34004050:	430b      	orrs	r3, r1
34004052:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
                 PeriphClkInit->ICSelection[RCC_IC13].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC13].ClockDivider - 1U) << RCC_IC13CFGR_IC13INT_Pos));

      LL_RCC_IC13_Enable();
34004056:	f7ff f887 	bl	34003168 <LL_RCC_IC13_Enable>
3400405a:	e007      	b.n	3400406c <HAL_RCCEx_PeriphCLKConfig+0xac0>
    }
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
3400405c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004060:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34004064:	2b01      	cmp	r3, #1
34004066:	d101      	bne.n	3400406c <HAL_RCCEx_PeriphCLKConfig+0xac0>
    {
      LL_RCC_CLKP_Enable();
34004068:	f7ff fa7e 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Configure the ETH1 PTP clock source and divider */
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
3400406c:	4bac      	ldr	r3, [pc, #688]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3400406e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
34004072:	f023 01f3 	bic.w	r1, r3, #243	@ 0xf3
34004076:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400407a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
3400407e:	3b01      	subs	r3, #1
34004080:	011a      	lsls	r2, r3, #4
34004082:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004086:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
3400408a:	4313      	orrs	r3, r2
3400408c:	4aa4      	ldr	r2, [pc, #656]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3400408e:	430b      	orrs	r3, r1
34004090:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
               (((PeriphClkInit->Eth1PtpDivider - 1U) << RCC_CCIPR2_ETH1PTPDIV_Pos) | PeriphClkInit->Eth1PtpClockSelection));
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34004094:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004098:	e9d3 2300 	ldrd	r2, r3, [r3]
3400409c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
340040a0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
340040a4:	2300      	movs	r3, #0
340040a6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
340040aa:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
340040ae:	4603      	mov	r3, r0
340040b0:	460a      	mov	r2, r1
340040b2:	4313      	orrs	r3, r2
340040b4:	d02d      	beq.n	34004112 <HAL_RCCEx_PeriphCLKConfig+0xb66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
340040b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340040ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340040be:	2b02      	cmp	r3, #2
340040c0:	d118      	bne.n	340040f4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));

      /* Set IC19 configuration */
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
340040c2:	4b97      	ldr	r3, [pc, #604]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
340040c4:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
340040c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340040cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340040d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340040d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
340040d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340040dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
340040e0:	3b01      	subs	r3, #1
340040e2:	041b      	lsls	r3, r3, #16
340040e4:	4313      	orrs	r3, r2
340040e6:	4a8e      	ldr	r2, [pc, #568]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
340040e8:	430b      	orrs	r3, r1
340040ea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
                 PeriphClkInit->ICSelection[RCC_IC19].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC19].ClockDivider - 1U) << RCC_IC19CFGR_IC19INT_Pos));

      LL_RCC_IC19_Enable();
340040ee:	f7ff f9bb 	bl	34003468 <LL_RCC_IC19_Enable>
340040f2:	e007      	b.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    }
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
340040f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340040f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340040fc:	2b01      	cmp	r3, #1
340040fe:	d101      	bne.n	34004104 <HAL_RCCEx_PeriphCLKConfig+0xb58>
    {
      LL_RCC_CLKP_Enable();
34004100:	f7ff fa32 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
34004104:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004108:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
3400410c:	4618      	mov	r0, r3
3400410e:	f7fe f8db 	bl	340022c8 <LL_RCC_SetFDCANClockSource>
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
34004112:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004116:	e9d3 2300 	ldrd	r2, r3, [r3]
3400411a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
3400411e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
34004122:	2300      	movs	r3, #0
34004124:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
34004128:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
3400412c:	4603      	mov	r3, r0
3400412e:	460a      	mov	r2, r1
34004130:	4313      	orrs	r3, r2
34004132:	d04b      	beq.n	340041cc <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
34004134:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004138:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
3400413c:	4b79      	ldr	r3, [pc, #484]	@ (34004324 <HAL_RCCEx_PeriphCLKConfig+0xd78>)
3400413e:	429a      	cmp	r2, r3
34004140:	d116      	bne.n	34004170 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34004142:	4b77      	ldr	r3, [pc, #476]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34004144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34004148:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400414c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004150:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004154:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34004156:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400415a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
3400415c:	3b01      	subs	r3, #1
3400415e:	041b      	lsls	r3, r3, #16
34004160:	4313      	orrs	r3, r2
34004162:	4a6f      	ldr	r2, [pc, #444]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34004164:	430b      	orrs	r3, r1
34004166:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
3400416a:	f7fe ff7d 	bl	34003068 <LL_RCC_IC10_Enable>
3400416e:	e026      	b.n	340041be <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34004170:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004174:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
34004178:	4b6b      	ldr	r3, [pc, #428]	@ (34004328 <HAL_RCCEx_PeriphCLKConfig+0xd7c>)
3400417a:	429a      	cmp	r2, r3
3400417c:	d116      	bne.n	340041ac <HAL_RCCEx_PeriphCLKConfig+0xc00>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400417e:	4b68      	ldr	r3, [pc, #416]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34004180:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34004184:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004188:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400418c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004190:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34004192:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34004198:	3b01      	subs	r3, #1
3400419a:	041b      	lsls	r3, r3, #16
3400419c:	4313      	orrs	r3, r2
3400419e:	4a60      	ldr	r2, [pc, #384]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
340041a0:	430b      	orrs	r3, r1
340041a2:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
340041a6:	f7ff f85f 	bl	34003268 <LL_RCC_IC15_Enable>
340041aa:	e008      	b.n	340041be <HAL_RCCEx_PeriphCLKConfig+0xc12>
    }
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
340041ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340041b0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
340041b4:	4b5d      	ldr	r3, [pc, #372]	@ (3400432c <HAL_RCCEx_PeriphCLKConfig+0xd80>)
340041b6:	429a      	cmp	r2, r3
340041b8:	d101      	bne.n	340041be <HAL_RCCEx_PeriphCLKConfig+0xc12>
    {
      LL_RCC_CLKP_Enable();
340041ba:	f7ff f9d5 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C1 clock*/
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
340041be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340041c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
340041c6:	4618      	mov	r0, r3
340041c8:	f7fe f8aa 	bl	34002320 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
340041cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340041d0:	e9d3 2300 	ldrd	r2, r3, [r3]
340041d4:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
340041d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
340041dc:	2300      	movs	r3, #0
340041de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
340041e2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
340041e6:	4603      	mov	r3, r0
340041e8:	460a      	mov	r2, r1
340041ea:	4313      	orrs	r3, r2
340041ec:	d04b      	beq.n	34004286 <HAL_RCCEx_PeriphCLKConfig+0xcda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
340041ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340041f2:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
340041f6:	4b4e      	ldr	r3, [pc, #312]	@ (34004330 <HAL_RCCEx_PeriphCLKConfig+0xd84>)
340041f8:	429a      	cmp	r2, r3
340041fa:	d116      	bne.n	3400422a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340041fc:	4b48      	ldr	r3, [pc, #288]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
340041fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34004202:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004206:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400420a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400420e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34004210:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34004216:	3b01      	subs	r3, #1
34004218:	041b      	lsls	r3, r3, #16
3400421a:	4313      	orrs	r3, r2
3400421c:	4a40      	ldr	r2, [pc, #256]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3400421e:	430b      	orrs	r3, r1
34004220:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34004224:	f7fe ff20 	bl	34003068 <LL_RCC_IC10_Enable>
34004228:	e026      	b.n	34004278 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
3400422a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400422e:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
34004232:	4b40      	ldr	r3, [pc, #256]	@ (34004334 <HAL_RCCEx_PeriphCLKConfig+0xd88>)
34004234:	429a      	cmp	r2, r3
34004236:	d116      	bne.n	34004266 <HAL_RCCEx_PeriphCLKConfig+0xcba>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004238:	4b39      	ldr	r3, [pc, #228]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3400423a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400423e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004242:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004246:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400424a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400424c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34004252:	3b01      	subs	r3, #1
34004254:	041b      	lsls	r3, r3, #16
34004256:	4313      	orrs	r3, r2
34004258:	4a31      	ldr	r2, [pc, #196]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
3400425a:	430b      	orrs	r3, r1
3400425c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34004260:	f7ff f802 	bl	34003268 <LL_RCC_IC15_Enable>
34004264:	e008      	b.n	34004278 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    }
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
34004266:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400426a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
3400426e:	4b32      	ldr	r3, [pc, #200]	@ (34004338 <HAL_RCCEx_PeriphCLKConfig+0xd8c>)
34004270:	429a      	cmp	r2, r3
34004272:	d101      	bne.n	34004278 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      LL_RCC_CLKP_Enable();
34004274:	f7ff f978 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C2 clock*/
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
34004278:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400427c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34004280:	4618      	mov	r0, r3
34004282:	f7fe f84d 	bl	34002320 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C3 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34004286:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400428a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400428e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
34004292:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
34004296:	2300      	movs	r3, #0
34004298:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
3400429c:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
340042a0:	4603      	mov	r3, r0
340042a2:	460a      	mov	r2, r1
340042a4:	4313      	orrs	r3, r2
340042a6:	d05d      	beq.n	34004364 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
340042a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340042ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
340042b0:	4b22      	ldr	r3, [pc, #136]	@ (3400433c <HAL_RCCEx_PeriphCLKConfig+0xd90>)
340042b2:	429a      	cmp	r2, r3
340042b4:	d116      	bne.n	340042e4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
340042b6:	4b1a      	ldr	r3, [pc, #104]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
340042b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
340042bc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340042c0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340042c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340042c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
340042ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340042ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
340042d0:	3b01      	subs	r3, #1
340042d2:	041b      	lsls	r3, r3, #16
340042d4:	4313      	orrs	r3, r2
340042d6:	4a12      	ldr	r2, [pc, #72]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
340042d8:	430b      	orrs	r3, r1
340042da:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
340042de:	f7fe fec3 	bl	34003068 <LL_RCC_IC10_Enable>
340042e2:	e038      	b.n	34004356 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
340042e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340042e8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
340042ec:	4b14      	ldr	r3, [pc, #80]	@ (34004340 <HAL_RCCEx_PeriphCLKConfig+0xd94>)
340042ee:	429a      	cmp	r2, r3
340042f0:	d128      	bne.n	34004344 <HAL_RCCEx_PeriphCLKConfig+0xd98>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340042f2:	4b0b      	ldr	r3, [pc, #44]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
340042f4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340042f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340042fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004300:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004304:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34004306:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400430a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400430c:	3b01      	subs	r3, #1
3400430e:	041b      	lsls	r3, r3, #16
34004310:	4313      	orrs	r3, r2
34004312:	4a03      	ldr	r2, [pc, #12]	@ (34004320 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
34004314:	430b      	orrs	r3, r1
34004316:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400431a:	f7fe ffa5 	bl	34003268 <LL_RCC_IC15_Enable>
3400431e:	e01a      	b.n	34004356 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
34004320:	56028000 	.word	0x56028000
34004324:	0702000c 	.word	0x0702000c
34004328:	0703000c 	.word	0x0703000c
3400432c:	0701000c 	.word	0x0701000c
34004330:	0702040c 	.word	0x0702040c
34004334:	0703040c 	.word	0x0703040c
34004338:	0701040c 	.word	0x0701040c
3400433c:	0702080c 	.word	0x0702080c
34004340:	0703080c 	.word	0x0703080c
    }
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34004344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004348:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
3400434c:	4bc8      	ldr	r3, [pc, #800]	@ (34004670 <HAL_RCCEx_PeriphCLKConfig+0x10c4>)
3400434e:	429a      	cmp	r2, r3
34004350:	d101      	bne.n	34004356 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      LL_RCC_CLKP_Enable();
34004352:	f7ff f909 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C3 clock*/
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
34004356:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400435a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
3400435e:	4618      	mov	r0, r3
34004360:	f7fd ffde 	bl	34002320 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34004364:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004368:	e9d3 2300 	ldrd	r2, r3, [r3]
3400436c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
34004370:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
34004374:	2300      	movs	r3, #0
34004376:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
3400437a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
3400437e:	4603      	mov	r3, r0
34004380:	460a      	mov	r2, r1
34004382:	4313      	orrs	r3, r2
34004384:	d04b      	beq.n	3400441e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34004386:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400438a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
3400438e:	4bb9      	ldr	r3, [pc, #740]	@ (34004674 <HAL_RCCEx_PeriphCLKConfig+0x10c8>)
34004390:	429a      	cmp	r2, r3
34004392:	d116      	bne.n	340043c2 <HAL_RCCEx_PeriphCLKConfig+0xe16>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34004394:	4bb8      	ldr	r3, [pc, #736]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34004396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400439a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400439e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340043a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340043a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
340043a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340043ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
340043ae:	3b01      	subs	r3, #1
340043b0:	041b      	lsls	r3, r3, #16
340043b2:	4313      	orrs	r3, r2
340043b4:	4ab0      	ldr	r2, [pc, #704]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
340043b6:	430b      	orrs	r3, r1
340043b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
340043bc:	f7fe fe54 	bl	34003068 <LL_RCC_IC10_Enable>
340043c0:	e026      	b.n	34004410 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
340043c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340043c6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
340043ca:	4bac      	ldr	r3, [pc, #688]	@ (3400467c <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
340043cc:	429a      	cmp	r2, r3
340043ce:	d116      	bne.n	340043fe <HAL_RCCEx_PeriphCLKConfig+0xe52>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340043d0:	4ba9      	ldr	r3, [pc, #676]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
340043d2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340043d6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340043da:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340043de:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340043e2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
340043e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340043e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340043ea:	3b01      	subs	r3, #1
340043ec:	041b      	lsls	r3, r3, #16
340043ee:	4313      	orrs	r3, r2
340043f0:	4aa1      	ldr	r2, [pc, #644]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
340043f2:	430b      	orrs	r3, r1
340043f4:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
340043f8:	f7fe ff36 	bl	34003268 <LL_RCC_IC15_Enable>
340043fc:	e008      	b.n	34004410 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    }
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
340043fe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004402:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
34004406:	4b9e      	ldr	r3, [pc, #632]	@ (34004680 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
34004408:	429a      	cmp	r2, r3
3400440a:	d101      	bne.n	34004410 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      LL_RCC_CLKP_Enable();
3400440c:	f7ff f8ac 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I2C4 clock*/
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
34004410:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
34004418:	4618      	mov	r0, r3
3400441a:	f7fd ff81 	bl	34002320 <LL_RCC_SetI2CClockSource>
  }

  /*------------------------------ I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
3400441e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004422:	e9d3 2300 	ldrd	r2, r3, [r3]
34004426:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
3400442a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
3400442e:	2300      	movs	r3, #0
34004430:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
34004434:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
34004438:	4603      	mov	r3, r0
3400443a:	460a      	mov	r2, r1
3400443c:	4313      	orrs	r3, r2
3400443e:	d04b      	beq.n	340044d8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));

    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34004440:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004444:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34004448:	4b8e      	ldr	r3, [pc, #568]	@ (34004684 <HAL_RCCEx_PeriphCLKConfig+0x10d8>)
3400444a:	429a      	cmp	r2, r3
3400444c:	d116      	bne.n	3400447c <HAL_RCCEx_PeriphCLKConfig+0xed0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
3400444e:	4b8a      	ldr	r3, [pc, #552]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34004450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
34004454:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004458:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400445c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
34004462:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34004468:	3b01      	subs	r3, #1
3400446a:	041b      	lsls	r3, r3, #16
3400446c:	4313      	orrs	r3, r2
3400446e:	4a82      	ldr	r2, [pc, #520]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34004470:	430b      	orrs	r3, r1
34004472:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34004476:	f7fe fdf7 	bl	34003068 <LL_RCC_IC10_Enable>
3400447a:	e026      	b.n	340044ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
3400447c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004480:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
34004484:	4b80      	ldr	r3, [pc, #512]	@ (34004688 <HAL_RCCEx_PeriphCLKConfig+0x10dc>)
34004486:	429a      	cmp	r2, r3
34004488:	d116      	bne.n	340044b8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3400448a:	4b7b      	ldr	r3, [pc, #492]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3400448c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34004490:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004494:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004498:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400449c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400449e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340044a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340044a4:	3b01      	subs	r3, #1
340044a6:	041b      	lsls	r3, r3, #16
340044a8:	4313      	orrs	r3, r2
340044aa:	4a73      	ldr	r2, [pc, #460]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
340044ac:	430b      	orrs	r3, r1
340044ae:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
340044b2:	f7fe fed9 	bl	34003268 <LL_RCC_IC15_Enable>
340044b6:	e008      	b.n	340044ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    }
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
340044b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340044bc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
340044c0:	4b72      	ldr	r3, [pc, #456]	@ (3400468c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
340044c2:	429a      	cmp	r2, r3
340044c4:	d101      	bne.n	340044ca <HAL_RCCEx_PeriphCLKConfig+0xf1e>
    {
      LL_RCC_CLKP_Enable();
340044c6:	f7ff f84f 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C1 clock*/
    __HAL_RCC_I3C1_CONFIG(PeriphClkInit->I3c1ClockSelection);
340044ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340044ce:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340044d2:	4618      	mov	r0, r3
340044d4:	f7fd ff2f 	bl	34002336 <LL_RCC_SetI3CClockSource>
  }

  /*------------------------------ I3C2 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
340044d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
340044e0:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
340044e4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
340044e8:	2300      	movs	r3, #0
340044ea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
340044ee:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
340044f2:	4603      	mov	r3, r0
340044f4:	460a      	mov	r2, r1
340044f6:	4313      	orrs	r3, r2
340044f8:	d04b      	beq.n	34004592 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));

    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
340044fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340044fe:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
34004502:	4b63      	ldr	r3, [pc, #396]	@ (34004690 <HAL_RCCEx_PeriphCLKConfig+0x10e4>)
34004504:	429a      	cmp	r2, r3
34004506:	d116      	bne.n	34004536 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));

      /* Set IC10 configuration */
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34004508:	4b5b      	ldr	r3, [pc, #364]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3400450a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
3400450e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004512:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004516:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400451a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
3400451c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
34004522:	3b01      	subs	r3, #1
34004524:	041b      	lsls	r3, r3, #16
34004526:	4313      	orrs	r3, r2
34004528:	4a53      	ldr	r2, [pc, #332]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
3400452a:	430b      	orrs	r3, r1
3400452c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
                 PeriphClkInit->ICSelection[RCC_IC10].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC10].ClockDivider - 1U) << RCC_IC10CFGR_IC10INT_Pos));

      LL_RCC_IC10_Enable();
34004530:	f7fe fd9a 	bl	34003068 <LL_RCC_IC10_Enable>
34004534:	e026      	b.n	34004584 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34004536:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400453a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400453e:	4b55      	ldr	r3, [pc, #340]	@ (34004694 <HAL_RCCEx_PeriphCLKConfig+0x10e8>)
34004540:	429a      	cmp	r2, r3
34004542:	d116      	bne.n	34004572 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004544:	4b4c      	ldr	r3, [pc, #304]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34004546:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400454a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400454e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004552:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004556:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34004558:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400455c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400455e:	3b01      	subs	r3, #1
34004560:	041b      	lsls	r3, r3, #16
34004562:	4313      	orrs	r3, r2
34004564:	4a44      	ldr	r2, [pc, #272]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34004566:	430b      	orrs	r3, r1
34004568:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400456c:	f7fe fe7c 	bl	34003268 <LL_RCC_IC15_Enable>
34004570:	e008      	b.n	34004584 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    }
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34004572:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004576:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
3400457a:	4b47      	ldr	r3, [pc, #284]	@ (34004698 <HAL_RCCEx_PeriphCLKConfig+0x10ec>)
3400457c:	429a      	cmp	r2, r3
3400457e:	d101      	bne.n	34004584 <HAL_RCCEx_PeriphCLKConfig+0xfd8>
    {
      LL_RCC_CLKP_Enable();
34004580:	f7fe fff2 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of I3C2 clock*/
    __HAL_RCC_I3C2_CONFIG(PeriphClkInit->I3c2ClockSelection);
34004584:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004588:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400458c:	4618      	mov	r0, r3
3400458e:	f7fd fed2 	bl	34002336 <LL_RCC_SetI3CClockSource>
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34004592:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004596:	e9d3 2300 	ldrd	r2, r3, [r3]
3400459a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
3400459e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
340045a2:	2300      	movs	r3, #0
340045a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
340045a8:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
340045ac:	4603      	mov	r3, r0
340045ae:	460a      	mov	r2, r1
340045b0:	4313      	orrs	r3, r2
340045b2:	d02d      	beq.n	34004610 <HAL_RCCEx_PeriphCLKConfig+0x1064>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
340045b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340045b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
340045bc:	4b37      	ldr	r3, [pc, #220]	@ (3400469c <HAL_RCCEx_PeriphCLKConfig+0x10f0>)
340045be:	429a      	cmp	r2, r3
340045c0:	d116      	bne.n	340045f0 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340045c2:	4b2d      	ldr	r3, [pc, #180]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
340045c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340045c8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340045cc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340045d0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340045d4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
340045d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340045da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
340045dc:	3b01      	subs	r3, #1
340045de:	041b      	lsls	r3, r3, #16
340045e0:	4313      	orrs	r3, r2
340045e2:	4a25      	ldr	r2, [pc, #148]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
340045e4:	430b      	orrs	r3, r1
340045e6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
340045ea:	f7fe fe3d 	bl	34003268 <LL_RCC_IC15_Enable>
340045ee:	e008      	b.n	34004602 <HAL_RCCEx_PeriphCLKConfig+0x1056>
    }
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
340045f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340045f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
340045f8:	4b29      	ldr	r3, [pc, #164]	@ (340046a0 <HAL_RCCEx_PeriphCLKConfig+0x10f4>)
340045fa:	429a      	cmp	r2, r3
340045fc:	d101      	bne.n	34004602 <HAL_RCCEx_PeriphCLKConfig+0x1056>
    {
      LL_RCC_CLKP_Enable();
340045fe:	f7fe ffb3 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
34004602:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004606:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
3400460a:	4618      	mov	r0, r3
3400460c:	f7fd fe9e 	bl	3400234c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM2 configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34004610:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004614:	e9d3 2300 	ldrd	r2, r3, [r3]
34004618:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
3400461c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
34004620:	2300      	movs	r3, #0
34004622:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
34004626:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
3400462a:	4603      	mov	r3, r0
3400462c:	460a      	mov	r2, r1
3400462e:	4313      	orrs	r3, r2
34004630:	d04a      	beq.n	340046c8 <HAL_RCCEx_PeriphCLKConfig+0x111c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34004632:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004636:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
3400463a:	4b1a      	ldr	r3, [pc, #104]	@ (340046a4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>)
3400463c:	429a      	cmp	r2, r3
3400463e:	d133      	bne.n	340046a8 <HAL_RCCEx_PeriphCLKConfig+0x10fc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004640:	4b0d      	ldr	r3, [pc, #52]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34004642:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34004646:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400464a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400464e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004652:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34004654:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400465a:	3b01      	subs	r3, #1
3400465c:	041b      	lsls	r3, r3, #16
3400465e:	4313      	orrs	r3, r2
34004660:	4a05      	ldr	r2, [pc, #20]	@ (34004678 <HAL_RCCEx_PeriphCLKConfig+0x10cc>)
34004662:	430b      	orrs	r3, r1
34004664:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34004668:	f7fe fdfe 	bl	34003268 <LL_RCC_IC15_Enable>
3400466c:	e025      	b.n	340046ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
3400466e:	bf00      	nop
34004670:	0701080c 	.word	0x0701080c
34004674:	07020c0c 	.word	0x07020c0c
34004678:	56028000 	.word	0x56028000
3400467c:	07030c0c 	.word	0x07030c0c
34004680:	07010c0c 	.word	0x07010c0c
34004684:	0702100c 	.word	0x0702100c
34004688:	0703100c 	.word	0x0703100c
3400468c:	0701100c 	.word	0x0701100c
34004690:	0702140c 	.word	0x0702140c
34004694:	0703140c 	.word	0x0703140c
34004698:	0701140c 	.word	0x0701140c
3400469c:	0702082c 	.word	0x0702082c
340046a0:	0701082c 	.word	0x0701082c
340046a4:	07020c2c 	.word	0x07020c2c
    }
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
340046a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340046ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
340046b0:	4bca      	ldr	r3, [pc, #808]	@ (340049dc <HAL_RCCEx_PeriphCLKConfig+0x1430>)
340046b2:	429a      	cmp	r2, r3
340046b4:	d101      	bne.n	340046ba <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      LL_RCC_CLKP_Enable();
340046b6:	f7fe ff57 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM2 clock*/
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
340046ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340046be:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
340046c2:	4618      	mov	r0, r3
340046c4:	f7fd fe42 	bl	3400234c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
340046c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
340046d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
340046d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
340046d8:	2300      	movs	r3, #0
340046da:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
340046de:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
340046e2:	4603      	mov	r3, r0
340046e4:	460a      	mov	r2, r1
340046e6:	4313      	orrs	r3, r2
340046e8:	d02d      	beq.n	34004746 <HAL_RCCEx_PeriphCLKConfig+0x119a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
340046ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340046ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
340046f2:	4bbb      	ldr	r3, [pc, #748]	@ (340049e0 <HAL_RCCEx_PeriphCLKConfig+0x1434>)
340046f4:	429a      	cmp	r2, r3
340046f6:	d116      	bne.n	34004726 <HAL_RCCEx_PeriphCLKConfig+0x117a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340046f8:	4bba      	ldr	r3, [pc, #744]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
340046fa:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340046fe:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004702:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004706:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400470a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400470c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34004712:	3b01      	subs	r3, #1
34004714:	041b      	lsls	r3, r3, #16
34004716:	4313      	orrs	r3, r2
34004718:	4ab2      	ldr	r2, [pc, #712]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3400471a:	430b      	orrs	r3, r1
3400471c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34004720:	f7fe fda2 	bl	34003268 <LL_RCC_IC15_Enable>
34004724:	e008      	b.n	34004738 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    }
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
34004726:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400472a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
3400472e:	4bae      	ldr	r3, [pc, #696]	@ (340049e8 <HAL_RCCEx_PeriphCLKConfig+0x143c>)
34004730:	429a      	cmp	r2, r3
34004732:	d101      	bne.n	34004738 <HAL_RCCEx_PeriphCLKConfig+0x118c>
    {
      LL_RCC_CLKP_Enable();
34004734:	f7fe ff18 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM3 clock */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
34004738:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400473c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
34004740:	4618      	mov	r0, r3
34004742:	f7fd fe03 	bl	3400234c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM4 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34004746:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400474a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400474e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
34004752:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
34004756:	2300      	movs	r3, #0
34004758:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
3400475c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
34004760:	4603      	mov	r3, r0
34004762:	460a      	mov	r2, r1
34004764:	4313      	orrs	r3, r2
34004766:	d02d      	beq.n	340047c4 <HAL_RCCEx_PeriphCLKConfig+0x1218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));

    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34004768:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400476c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
34004770:	4b9e      	ldr	r3, [pc, #632]	@ (340049ec <HAL_RCCEx_PeriphCLKConfig+0x1440>)
34004772:	429a      	cmp	r2, r3
34004774:	d116      	bne.n	340047a4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34004776:	4b9b      	ldr	r3, [pc, #620]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34004778:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3400477c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004780:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004784:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004788:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
3400478a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400478e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
34004790:	3b01      	subs	r3, #1
34004792:	041b      	lsls	r3, r3, #16
34004794:	4313      	orrs	r3, r2
34004796:	4a93      	ldr	r2, [pc, #588]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34004798:	430b      	orrs	r3, r1
3400479a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400479e:	f7fe fd63 	bl	34003268 <LL_RCC_IC15_Enable>
340047a2:	e008      	b.n	340047b6 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    }
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
340047a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340047a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
340047ac:	4b90      	ldr	r3, [pc, #576]	@ (340049f0 <HAL_RCCEx_PeriphCLKConfig+0x1444>)
340047ae:	429a      	cmp	r2, r3
340047b0:	d101      	bne.n	340047b6 <HAL_RCCEx_PeriphCLKConfig+0x120a>
    {
      LL_RCC_CLKP_Enable();
340047b2:	f7fe fed9 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM4 clock */
    __HAL_RCC_LPTIM4_CONFIG(PeriphClkInit->Lptim4ClockSelection);
340047b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340047ba:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
340047be:	4618      	mov	r0, r3
340047c0:	f7fd fdc4 	bl	3400234c <LL_RCC_SetLPTIMClockSource>
  }

  /*---------------------------- LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
340047c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
340047cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
340047d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
340047d4:	2300      	movs	r3, #0
340047d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
340047da:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
340047de:	4603      	mov	r3, r0
340047e0:	460a      	mov	r2, r1
340047e2:	4313      	orrs	r3, r2
340047e4:	d02d      	beq.n	34004842 <HAL_RCCEx_PeriphCLKConfig+0x1296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));

    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
340047e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340047ea:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
340047ee:	4b81      	ldr	r3, [pc, #516]	@ (340049f4 <HAL_RCCEx_PeriphCLKConfig+0x1448>)
340047f0:	429a      	cmp	r2, r3
340047f2:	d116      	bne.n	34004822 <HAL_RCCEx_PeriphCLKConfig+0x1276>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340047f4:	4b7b      	ldr	r3, [pc, #492]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
340047f6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340047fa:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340047fe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004802:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004806:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
34004808:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400480c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
3400480e:	3b01      	subs	r3, #1
34004810:	041b      	lsls	r3, r3, #16
34004812:	4313      	orrs	r3, r2
34004814:	4a73      	ldr	r2, [pc, #460]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34004816:	430b      	orrs	r3, r1
34004818:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
3400481c:	f7fe fd24 	bl	34003268 <LL_RCC_IC15_Enable>
34004820:	e008      	b.n	34004834 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    }
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
34004822:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004826:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
3400482a:	4b73      	ldr	r3, [pc, #460]	@ (340049f8 <HAL_RCCEx_PeriphCLKConfig+0x144c>)
3400482c:	429a      	cmp	r2, r3
3400482e:	d101      	bne.n	34004834 <HAL_RCCEx_PeriphCLKConfig+0x1288>
    {
      LL_RCC_CLKP_Enable();
34004830:	f7fe fe9a 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPTIM5 clock */
    __HAL_RCC_LPTIM5_CONFIG(PeriphClkInit->Lptim5ClockSelection);
34004834:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004838:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
3400483c:	4618      	mov	r0, r3
3400483e:	f7fd fd85 	bl	3400234c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34004842:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004846:	e9d3 2300 	ldrd	r2, r3, [r3]
3400484a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
3400484e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
34004852:	2300      	movs	r3, #0
34004854:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
34004858:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
3400485c:	4603      	mov	r3, r0
3400485e:	460a      	mov	r2, r1
34004860:	4313      	orrs	r3, r2
34004862:	d04b      	beq.n	340048fc <HAL_RCCEx_PeriphCLKConfig+0x1350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
34004864:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004868:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
3400486c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34004870:	d116      	bne.n	340048a0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34004872:	4b5c      	ldr	r3, [pc, #368]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34004874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34004878:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400487c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004880:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004884:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34004886:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400488a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400488c:	3b01      	subs	r3, #1
3400488e:	041b      	lsls	r3, r3, #16
34004890:	4313      	orrs	r3, r2
34004892:	4a54      	ldr	r2, [pc, #336]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34004894:	430b      	orrs	r3, r1
34004896:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400489a:	f7fe fba5 	bl	34002fe8 <LL_RCC_IC9_Enable>
3400489e:	e026      	b.n	340048ee <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
340048a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340048a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
340048a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
340048ac:	d116      	bne.n	340048dc <HAL_RCCEx_PeriphCLKConfig+0x1330>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340048ae:	4b4d      	ldr	r3, [pc, #308]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
340048b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340048b4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340048b8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340048bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340048c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
340048c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340048c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340048c8:	3b01      	subs	r3, #1
340048ca:	041b      	lsls	r3, r3, #16
340048cc:	4313      	orrs	r3, r2
340048ce:	4a45      	ldr	r2, [pc, #276]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
340048d0:	430b      	orrs	r3, r1
340048d2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
340048d6:	f7fe fc87 	bl	340031e8 <LL_RCC_IC14_Enable>
340048da:	e008      	b.n	340048ee <HAL_RCCEx_PeriphCLKConfig+0x1342>
    }
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
340048dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340048e0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
340048e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340048e8:	d101      	bne.n	340048ee <HAL_RCCEx_PeriphCLKConfig+0x1342>
    {
      LL_RCC_CLKP_Enable();
340048ea:	f7fe fe3d 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LPUART1 clock */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
340048ee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340048f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
340048f6:	4618      	mov	r0, r3
340048f8:	f7fd fd34 	bl	34002364 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
340048fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004900:	e9d3 2300 	ldrd	r2, r3, [r3]
34004904:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
34004908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
3400490c:	2300      	movs	r3, #0
3400490e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
34004912:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
34004916:	4603      	mov	r3, r0
34004918:	460a      	mov	r2, r1
3400491a:	4313      	orrs	r3, r2
3400491c:	d02f      	beq.n	3400497e <HAL_RCCEx_PeriphCLKConfig+0x13d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
3400491e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004922:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34004926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400492a:	d118      	bne.n	3400495e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));

      /* Set IC16 configuration */
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
3400492c:	4b2d      	ldr	r3, [pc, #180]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
3400492e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
34004932:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004936:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400493a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400493e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
34004942:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
3400494a:	3b01      	subs	r3, #1
3400494c:	041b      	lsls	r3, r3, #16
3400494e:	4313      	orrs	r3, r2
34004950:	4a24      	ldr	r2, [pc, #144]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
34004952:	430b      	orrs	r3, r1
34004954:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
                 PeriphClkInit->ICSelection[RCC_IC16].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC16].ClockDivider - 1U) << RCC_IC16CFGR_IC16INT_Pos));

      LL_RCC_IC16_Enable();
34004958:	f7fe fcc6 	bl	340032e8 <LL_RCC_IC16_Enable>
3400495c:	e008      	b.n	34004970 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    }
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
3400495e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004962:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34004966:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3400496a:	d101      	bne.n	34004970 <HAL_RCCEx_PeriphCLKConfig+0x13c4>
    {
      LL_RCC_CLKP_Enable();
3400496c:	f7fe fdfc 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of LTDC clock */
    __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
34004970:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004974:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
34004978:	4618      	mov	r0, r3
3400497a:	f7fd fd09 	bl	34002390 <LL_RCC_SetLTDCClockSource>
  }

  /*---------------------------- MDF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
3400497e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004982:	e9d3 2300 	ldrd	r2, r3, [r3]
34004986:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
3400498a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
3400498e:	2300      	movs	r3, #0
34004990:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
34004994:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
34004998:	4603      	mov	r3, r0
3400499a:	460a      	mov	r2, r1
3400499c:	4313      	orrs	r3, r2
3400499e:	d05b      	beq.n	34004a58 <HAL_RCCEx_PeriphCLKConfig+0x14ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));

    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
340049a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340049a4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
340049a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340049ac:	d126      	bne.n	340049fc <HAL_RCCEx_PeriphCLKConfig+0x1450>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
340049ae:	4b0d      	ldr	r3, [pc, #52]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
340049b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
340049b4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340049b8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340049bc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340049c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
340049c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
340049c8:	3b01      	subs	r3, #1
340049ca:	041b      	lsls	r3, r3, #16
340049cc:	4313      	orrs	r3, r2
340049ce:	4a05      	ldr	r2, [pc, #20]	@ (340049e4 <HAL_RCCEx_PeriphCLKConfig+0x1438>)
340049d0:	430b      	orrs	r3, r1
340049d2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
340049d6:	f7fe fa87 	bl	34002ee8 <LL_RCC_IC7_Enable>
340049da:	e036      	b.n	34004a4a <HAL_RCCEx_PeriphCLKConfig+0x149e>
340049dc:	07010c2c 	.word	0x07010c2c
340049e0:	0702102c 	.word	0x0702102c
340049e4:	56028000 	.word	0x56028000
340049e8:	0701102c 	.word	0x0701102c
340049ec:	0702142c 	.word	0x0702142c
340049f0:	0701142c 	.word	0x0701142c
340049f4:	0702182c 	.word	0x0702182c
340049f8:	0701182c 	.word	0x0701182c
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
340049fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004a00:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34004a04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34004a08:	d116      	bne.n	34004a38 <HAL_RCCEx_PeriphCLKConfig+0x148c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34004a0a:	4bb5      	ldr	r3, [pc, #724]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34004a10:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004a14:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004a18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004a1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34004a1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34004a24:	3b01      	subs	r3, #1
34004a26:	041b      	lsls	r3, r3, #16
34004a28:	4313      	orrs	r3, r2
34004a2a:	4aad      	ldr	r2, [pc, #692]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004a2c:	430b      	orrs	r3, r1
34004a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34004a32:	f7fe fa99 	bl	34002f68 <LL_RCC_IC8_Enable>
34004a36:	e008      	b.n	34004a4a <HAL_RCCEx_PeriphCLKConfig+0x149e>
    }
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
34004a38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004a3c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34004a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34004a44:	d101      	bne.n	34004a4a <HAL_RCCEx_PeriphCLKConfig+0x149e>
    {
      LL_RCC_CLKP_Enable();
34004a46:	f7fe fd8f 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of MDF1 clock*/
    __HAL_RCC_MDF1_CONFIG(PeriphClkInit->Mdf1ClockSelection);
34004a4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004a4e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
34004a52:	4618      	mov	r0, r3
34004a54:	f7fd fcb2 	bl	340023bc <LL_RCC_SetMDFClockSource>
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
34004a58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
34004a60:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
34004a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
34004a68:	2300      	movs	r3, #0
34004a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
34004a6e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
34004a72:	4603      	mov	r3, r0
34004a74:	460a      	mov	r2, r1
34004a76:	4313      	orrs	r3, r2
34004a78:	d02d      	beq.n	34004ad6 <HAL_RCCEx_PeriphCLKConfig+0x152a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
34004a7a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004a7e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34004a82:	2b20      	cmp	r3, #32
34004a84:	d118      	bne.n	34004ab8 <HAL_RCCEx_PeriphCLKConfig+0x150c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));

      /* Set IC20 configuration */
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34004a86:	4b96      	ldr	r3, [pc, #600]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004a88:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
34004a8c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004a90:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004a94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004a98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34004a9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
34004aa4:	3b01      	subs	r3, #1
34004aa6:	041b      	lsls	r3, r3, #16
34004aa8:	4313      	orrs	r3, r2
34004aaa:	4a8d      	ldr	r2, [pc, #564]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004aac:	430b      	orrs	r3, r1
34004aae:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
                 PeriphClkInit->ICSelection[RCC_IC20].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC20].ClockDivider - 1U) << RCC_IC20CFGR_IC20INT_Pos));

      LL_RCC_IC20_Enable();
34004ab2:	f7fe fd19 	bl	340034e8 <LL_RCC_IC20_Enable>
34004ab6:	e007      	b.n	34004ac8 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    }
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
34004ab8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004abc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34004ac0:	2b10      	cmp	r3, #16
34004ac2:	d101      	bne.n	34004ac8 <HAL_RCCEx_PeriphCLKConfig+0x151c>
    {
      LL_RCC_CLKP_Enable();
34004ac4:	f7fe fd50 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of PSSI clock*/
    __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
34004ac8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004acc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
34004ad0:	4618      	mov	r0, r3
34004ad2:	f7fd fc9f 	bl	34002414 <LL_RCC_SetPSSIClockSource>
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
34004ad6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004ada:	e9d3 2300 	ldrd	r2, r3, [r3]
34004ade:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
34004ae2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
34004ae6:	2300      	movs	r3, #0
34004ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
34004aec:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
34004af0:	4603      	mov	r3, r0
34004af2:	460a      	mov	r2, r1
34004af4:	4313      	orrs	r3, r2
34004af6:	d04b      	beq.n	34004b90 <HAL_RCCEx_PeriphCLKConfig+0x15e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34004af8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004afc:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34004b00:	4b78      	ldr	r3, [pc, #480]	@ (34004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1738>)
34004b02:	429a      	cmp	r2, r3
34004b04:	d116      	bne.n	34004b34 <HAL_RCCEx_PeriphCLKConfig+0x1588>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34004b06:	4b76      	ldr	r3, [pc, #472]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004b08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34004b0c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004b10:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004b14:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004b18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34004b1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34004b20:	3b01      	subs	r3, #1
34004b22:	041b      	lsls	r3, r3, #16
34004b24:	4313      	orrs	r3, r2
34004b26:	4a6e      	ldr	r2, [pc, #440]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004b28:	430b      	orrs	r3, r1
34004b2a:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34004b2e:	f7fe f9db 	bl	34002ee8 <LL_RCC_IC7_Enable>
34004b32:	e026      	b.n	34004b82 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34004b34:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004b38:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34004b3c:	4b6a      	ldr	r3, [pc, #424]	@ (34004ce8 <HAL_RCCEx_PeriphCLKConfig+0x173c>)
34004b3e:	429a      	cmp	r2, r3
34004b40:	d116      	bne.n	34004b70 <HAL_RCCEx_PeriphCLKConfig+0x15c4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34004b42:	4b67      	ldr	r3, [pc, #412]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34004b48:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004b4c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004b50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004b54:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34004b56:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34004b5c:	3b01      	subs	r3, #1
34004b5e:	041b      	lsls	r3, r3, #16
34004b60:	4313      	orrs	r3, r2
34004b62:	4a5f      	ldr	r2, [pc, #380]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004b64:	430b      	orrs	r3, r1
34004b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34004b6a:	f7fe f9fd 	bl	34002f68 <LL_RCC_IC8_Enable>
34004b6e:	e008      	b.n	34004b82 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    }
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34004b70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004b74:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
34004b78:	4b5c      	ldr	r3, [pc, #368]	@ (34004cec <HAL_RCCEx_PeriphCLKConfig+0x1740>)
34004b7a:	429a      	cmp	r2, r3
34004b7c:	d101      	bne.n	34004b82 <HAL_RCCEx_PeriphCLKConfig+0x15d6>
    {
      LL_RCC_CLKP_Enable();
34004b7e:	f7fe fcf3 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
34004b82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004b86:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
34004b8a:	4618      	mov	r0, r3
34004b8c:	f7fd fc58 	bl	34002440 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
34004b90:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
34004b98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
34004b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
34004ba0:	2300      	movs	r3, #0
34004ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
34004ba6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
34004baa:	4603      	mov	r3, r0
34004bac:	460a      	mov	r2, r1
34004bae:	4313      	orrs	r3, r2
34004bb0:	d04b      	beq.n	34004c4a <HAL_RCCEx_PeriphCLKConfig+0x169e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
34004bb2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004bb6:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34004bba:	4b4d      	ldr	r3, [pc, #308]	@ (34004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1744>)
34004bbc:	429a      	cmp	r2, r3
34004bbe:	d116      	bne.n	34004bee <HAL_RCCEx_PeriphCLKConfig+0x1642>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34004bc0:	4b47      	ldr	r3, [pc, #284]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004bc2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34004bc6:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004bca:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004bce:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34004bd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34004bda:	3b01      	subs	r3, #1
34004bdc:	041b      	lsls	r3, r3, #16
34004bde:	4313      	orrs	r3, r2
34004be0:	4a3f      	ldr	r2, [pc, #252]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004be2:	430b      	orrs	r3, r1
34004be4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34004be8:	f7fe f97e 	bl	34002ee8 <LL_RCC_IC7_Enable>
34004bec:	e026      	b.n	34004c3c <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34004bee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004bf2:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34004bf6:	4b3f      	ldr	r3, [pc, #252]	@ (34004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1748>)
34004bf8:	429a      	cmp	r2, r3
34004bfa:	d116      	bne.n	34004c2a <HAL_RCCEx_PeriphCLKConfig+0x167e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34004bfc:	4b38      	ldr	r3, [pc, #224]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34004c02:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004c06:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004c0a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34004c10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34004c16:	3b01      	subs	r3, #1
34004c18:	041b      	lsls	r3, r3, #16
34004c1a:	4313      	orrs	r3, r2
34004c1c:	4a30      	ldr	r2, [pc, #192]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004c1e:	430b      	orrs	r3, r1
34004c20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34004c24:	f7fe f9a0 	bl	34002f68 <LL_RCC_IC8_Enable>
34004c28:	e008      	b.n	34004c3c <HAL_RCCEx_PeriphCLKConfig+0x1690>
    }
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
34004c2a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004c2e:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
34004c32:	4b31      	ldr	r3, [pc, #196]	@ (34004cf8 <HAL_RCCEx_PeriphCLKConfig+0x174c>)
34004c34:	429a      	cmp	r2, r3
34004c36:	d101      	bne.n	34004c3c <HAL_RCCEx_PeriphCLKConfig+0x1690>
    {
      LL_RCC_CLKP_Enable();
34004c38:	f7fe fc96 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
34004c3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004c40:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
34004c44:	4618      	mov	r0, r3
34004c46:	f7fd fbfb 	bl	34002440 <LL_RCC_SetSAIClockSource>
  }

  /*---------------------------- SPDIFRX1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34004c4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
34004c52:	2100      	movs	r1, #0
34004c54:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
34004c58:	f003 0301 	and.w	r3, r3, #1
34004c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
34004c60:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
34004c64:	4603      	mov	r3, r0
34004c66:	460a      	mov	r2, r1
34004c68:	4313      	orrs	r3, r2
34004c6a:	d056      	beq.n	34004d1a <HAL_RCCEx_PeriphCLKConfig+0x176e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));

    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
34004c6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004c70:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34004c74:	2b02      	cmp	r3, #2
34004c76:	d116      	bne.n	34004ca6 <HAL_RCCEx_PeriphCLKConfig+0x16fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));

      /* Set IC7 configuration */
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34004c78:	4b19      	ldr	r3, [pc, #100]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004c7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
34004c7e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004c82:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004c86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004c8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
34004c8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
34004c92:	3b01      	subs	r3, #1
34004c94:	041b      	lsls	r3, r3, #16
34004c96:	4313      	orrs	r3, r2
34004c98:	4a11      	ldr	r2, [pc, #68]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004c9a:	430b      	orrs	r3, r1
34004c9c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
                 PeriphClkInit->ICSelection[RCC_IC7].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC7].ClockDivider - 1U) << RCC_IC7CFGR_IC7INT_Pos));

      LL_RCC_IC7_Enable();
34004ca0:	f7fe f922 	bl	34002ee8 <LL_RCC_IC7_Enable>
34004ca4:	e032      	b.n	34004d0c <HAL_RCCEx_PeriphCLKConfig+0x1760>
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
34004ca6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004caa:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34004cae:	2b03      	cmp	r3, #3
34004cb0:	d124      	bne.n	34004cfc <HAL_RCCEx_PeriphCLKConfig+0x1750>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34004cb2:	4b0b      	ldr	r3, [pc, #44]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34004cb8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004cbc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004cc0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34004cc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34004ccc:	3b01      	subs	r3, #1
34004cce:	041b      	lsls	r3, r3, #16
34004cd0:	4313      	orrs	r3, r2
34004cd2:	4a03      	ldr	r2, [pc, #12]	@ (34004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1734>)
34004cd4:	430b      	orrs	r3, r1
34004cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34004cda:	f7fe f945 	bl	34002f68 <LL_RCC_IC8_Enable>
34004cde:	e015      	b.n	34004d0c <HAL_RCCEx_PeriphCLKConfig+0x1760>
34004ce0:	56028000 	.word	0x56028000
34004ce4:	07021418 	.word	0x07021418
34004ce8:	07031418 	.word	0x07031418
34004cec:	07011418 	.word	0x07011418
34004cf0:	07021818 	.word	0x07021818
34004cf4:	07031818 	.word	0x07031818
34004cf8:	07011818 	.word	0x07011818
    }
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34004cfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d00:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34004d04:	2b01      	cmp	r3, #1
34004d06:	d101      	bne.n	34004d0c <HAL_RCCEx_PeriphCLKConfig+0x1760>
    {
      LL_RCC_CLKP_Enable();
34004d08:	f7fe fc2e 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPDIFRX1 clock */
    __HAL_RCC_SPDIFRX1_CONFIG(PeriphClkInit->Spdifrx1ClockSelection);
34004d0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d10:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
34004d14:	4618      	mov	r0, r3
34004d16:	f7fd fba9 	bl	3400246c <LL_RCC_SetSPDIFRXClockSource>
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
34004d1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
34004d22:	2100      	movs	r1, #0
34004d24:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
34004d28:	f003 0302 	and.w	r3, r3, #2
34004d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
34004d30:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
34004d34:	4603      	mov	r3, r0
34004d36:	460a      	mov	r2, r1
34004d38:	4313      	orrs	r3, r2
34004d3a:	d04b      	beq.n	34004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34004d3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d40:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34004d44:	4bc6      	ldr	r3, [pc, #792]	@ (34005060 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>)
34004d46:	429a      	cmp	r2, r3
34004d48:	d116      	bne.n	34004d78 <HAL_RCCEx_PeriphCLKConfig+0x17cc>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34004d4a:	4bc6      	ldr	r3, [pc, #792]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34004d50:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004d54:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004d58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34004d5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34004d64:	3b01      	subs	r3, #1
34004d66:	041b      	lsls	r3, r3, #16
34004d68:	4313      	orrs	r3, r2
34004d6a:	4abe      	ldr	r2, [pc, #760]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004d6c:	430b      	orrs	r3, r1
34004d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34004d72:	f7fe f8f9 	bl	34002f68 <LL_RCC_IC8_Enable>
34004d76:	e026      	b.n	34004dc6 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34004d78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d7c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34004d80:	4bb9      	ldr	r3, [pc, #740]	@ (34005068 <HAL_RCCEx_PeriphCLKConfig+0x1abc>)
34004d82:	429a      	cmp	r2, r3
34004d84:	d116      	bne.n	34004db4 <HAL_RCCEx_PeriphCLKConfig+0x1808>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34004d86:	4bb7      	ldr	r3, [pc, #732]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004d88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34004d8c:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004d90:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004d94:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34004d9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34004da0:	3b01      	subs	r3, #1
34004da2:	041b      	lsls	r3, r3, #16
34004da4:	4313      	orrs	r3, r2
34004da6:	4aaf      	ldr	r2, [pc, #700]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004da8:	430b      	orrs	r3, r1
34004daa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34004dae:	f7fe f91b 	bl	34002fe8 <LL_RCC_IC9_Enable>
34004db2:	e008      	b.n	34004dc6 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    }
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34004db4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004db8:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
34004dbc:	4bab      	ldr	r3, [pc, #684]	@ (3400506c <HAL_RCCEx_PeriphCLKConfig+0x1ac0>)
34004dbe:	429a      	cmp	r2, r3
34004dc0:	d101      	bne.n	34004dc6 <HAL_RCCEx_PeriphCLKConfig+0x181a>
    {
      LL_RCC_CLKP_Enable();
34004dc2:	f7fe fbd1 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
34004dc6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004dca:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
34004dce:	4618      	mov	r0, r3
34004dd0:	f7fd fb62 	bl	34002498 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI2 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34004dd4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
34004ddc:	2100      	movs	r1, #0
34004dde:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
34004de2:	f003 0304 	and.w	r3, r3, #4
34004de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
34004dea:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
34004dee:	4603      	mov	r3, r0
34004df0:	460a      	mov	r2, r1
34004df2:	4313      	orrs	r3, r2
34004df4:	d04b      	beq.n	34004e8e <HAL_RCCEx_PeriphCLKConfig+0x18e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));

    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34004df6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004dfa:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34004dfe:	4b9c      	ldr	r3, [pc, #624]	@ (34005070 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>)
34004e00:	429a      	cmp	r2, r3
34004e02:	d116      	bne.n	34004e32 <HAL_RCCEx_PeriphCLKConfig+0x1886>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34004e04:	4b97      	ldr	r3, [pc, #604]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34004e0a:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004e0e:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004e12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004e16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34004e18:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34004e1e:	3b01      	subs	r3, #1
34004e20:	041b      	lsls	r3, r3, #16
34004e22:	4313      	orrs	r3, r2
34004e24:	4a8f      	ldr	r2, [pc, #572]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004e26:	430b      	orrs	r3, r1
34004e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34004e2c:	f7fe f89c 	bl	34002f68 <LL_RCC_IC8_Enable>
34004e30:	e026      	b.n	34004e80 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34004e32:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004e36:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34004e3a:	4b8e      	ldr	r3, [pc, #568]	@ (34005074 <HAL_RCCEx_PeriphCLKConfig+0x1ac8>)
34004e3c:	429a      	cmp	r2, r3
34004e3e:	d116      	bne.n	34004e6e <HAL_RCCEx_PeriphCLKConfig+0x18c2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34004e40:	4b88      	ldr	r3, [pc, #544]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004e42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34004e46:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004e4a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004e4e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004e52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34004e54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34004e5a:	3b01      	subs	r3, #1
34004e5c:	041b      	lsls	r3, r3, #16
34004e5e:	4313      	orrs	r3, r2
34004e60:	4a80      	ldr	r2, [pc, #512]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004e62:	430b      	orrs	r3, r1
34004e64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34004e68:	f7fe f8be 	bl	34002fe8 <LL_RCC_IC9_Enable>
34004e6c:	e008      	b.n	34004e80 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    }
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
34004e6e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004e72:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
34004e76:	4b80      	ldr	r3, [pc, #512]	@ (34005078 <HAL_RCCEx_PeriphCLKConfig+0x1acc>)
34004e78:	429a      	cmp	r2, r3
34004e7a:	d101      	bne.n	34004e80 <HAL_RCCEx_PeriphCLKConfig+0x18d4>
    {
      LL_RCC_CLKP_Enable();
34004e7c:	f7fe fb74 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI2_CONFIG(PeriphClkInit->Spi2ClockSelection);
34004e80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004e84:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
34004e88:	4618      	mov	r0, r3
34004e8a:	f7fd fb05 	bl	34002498 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
34004e8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
34004e96:	2100      	movs	r1, #0
34004e98:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
34004e9c:	f003 0308 	and.w	r3, r3, #8
34004ea0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
34004ea4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
34004ea8:	4603      	mov	r3, r0
34004eaa:	460a      	mov	r2, r1
34004eac:	4313      	orrs	r3, r2
34004eae:	d04b      	beq.n	34004f48 <HAL_RCCEx_PeriphCLKConfig+0x199c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));

    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
34004eb0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004eb4:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34004eb8:	4b70      	ldr	r3, [pc, #448]	@ (3400507c <HAL_RCCEx_PeriphCLKConfig+0x1ad0>)
34004eba:	429a      	cmp	r2, r3
34004ebc:	d116      	bne.n	34004eec <HAL_RCCEx_PeriphCLKConfig+0x1940>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34004ebe:	4b69      	ldr	r3, [pc, #420]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34004ec4:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004ec8:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004ecc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004ed0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34004ed2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34004ed8:	3b01      	subs	r3, #1
34004eda:	041b      	lsls	r3, r3, #16
34004edc:	4313      	orrs	r3, r2
34004ede:	4a61      	ldr	r2, [pc, #388]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004ee0:	430b      	orrs	r3, r1
34004ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34004ee6:	f7fe f83f 	bl	34002f68 <LL_RCC_IC8_Enable>
34004eea:	e026      	b.n	34004f3a <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
34004eec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004ef0:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34004ef4:	4b62      	ldr	r3, [pc, #392]	@ (34005080 <HAL_RCCEx_PeriphCLKConfig+0x1ad4>)
34004ef6:	429a      	cmp	r2, r3
34004ef8:	d116      	bne.n	34004f28 <HAL_RCCEx_PeriphCLKConfig+0x197c>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34004efa:	4b5a      	ldr	r3, [pc, #360]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004efc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34004f00:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004f04:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004f08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004f0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34004f0e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34004f14:	3b01      	subs	r3, #1
34004f16:	041b      	lsls	r3, r3, #16
34004f18:	4313      	orrs	r3, r2
34004f1a:	4a52      	ldr	r2, [pc, #328]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004f1c:	430b      	orrs	r3, r1
34004f1e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34004f22:	f7fe f861 	bl	34002fe8 <LL_RCC_IC9_Enable>
34004f26:	e008      	b.n	34004f3a <HAL_RCCEx_PeriphCLKConfig+0x198e>
    }
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34004f28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004f2c:	f8d3 213c 	ldr.w	r2, [r3, #316]	@ 0x13c
34004f30:	4b54      	ldr	r3, [pc, #336]	@ (34005084 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>)
34004f32:	429a      	cmp	r2, r3
34004f34:	d101      	bne.n	34004f3a <HAL_RCCEx_PeriphCLKConfig+0x198e>
    {
      LL_RCC_CLKP_Enable();
34004f36:	f7fe fb17 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI3 clock*/
    __HAL_RCC_SPI3_CONFIG(PeriphClkInit->Spi3ClockSelection);
34004f3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004f3e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
34004f42:	4618      	mov	r0, r3
34004f44:	f7fd faa8 	bl	34002498 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI4 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
34004f48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
34004f50:	2100      	movs	r1, #0
34004f52:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
34004f56:	f003 0310 	and.w	r3, r3, #16
34004f5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
34004f5e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
34004f62:	4603      	mov	r3, r0
34004f64:	460a      	mov	r2, r1
34004f66:	4313      	orrs	r3, r2
34004f68:	d04b      	beq.n	34005002 <HAL_RCCEx_PeriphCLKConfig+0x1a56>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));

    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
34004f6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004f6e:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34004f72:	4b45      	ldr	r3, [pc, #276]	@ (34005088 <HAL_RCCEx_PeriphCLKConfig+0x1adc>)
34004f74:	429a      	cmp	r2, r3
34004f76:	d116      	bne.n	34004fa6 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34004f78:	4b3a      	ldr	r3, [pc, #232]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004f7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34004f7e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004f82:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004f86:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004f8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34004f8c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34004f92:	3b01      	subs	r3, #1
34004f94:	041b      	lsls	r3, r3, #16
34004f96:	4313      	orrs	r3, r2
34004f98:	4a32      	ldr	r2, [pc, #200]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004f9a:	430b      	orrs	r3, r1
34004f9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34004fa0:	f7fe f822 	bl	34002fe8 <LL_RCC_IC9_Enable>
34004fa4:	e026      	b.n	34004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34004fa6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004faa:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34004fae:	4b37      	ldr	r3, [pc, #220]	@ (3400508c <HAL_RCCEx_PeriphCLKConfig+0x1ae0>)
34004fb0:	429a      	cmp	r2, r3
34004fb2:	d116      	bne.n	34004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1a36>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34004fb4:	4b2b      	ldr	r3, [pc, #172]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004fb6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34004fba:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34004fbe:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34004fc2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004fc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34004fc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004fcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34004fce:	3b01      	subs	r3, #1
34004fd0:	041b      	lsls	r3, r3, #16
34004fd2:	4313      	orrs	r3, r2
34004fd4:	4a23      	ldr	r2, [pc, #140]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34004fd6:	430b      	orrs	r3, r1
34004fd8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34004fdc:	f7fe f904 	bl	340031e8 <LL_RCC_IC14_Enable>
34004fe0:	e008      	b.n	34004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    }
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34004fe2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004fe6:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
34004fea:	4b29      	ldr	r3, [pc, #164]	@ (34005090 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>)
34004fec:	429a      	cmp	r2, r3
34004fee:	d101      	bne.n	34004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
    {
      LL_RCC_CLKP_Enable();
34004ff0:	f7fe faba 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI4 clock */
    __HAL_RCC_SPI4_CONFIG(PeriphClkInit->Spi4ClockSelection);
34004ff4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34004ff8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
34004ffc:	4618      	mov	r0, r3
34004ffe:	f7fd fa4b 	bl	34002498 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34005002:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005006:	e9d3 2300 	ldrd	r2, r3, [r3]
3400500a:	2100      	movs	r1, #0
3400500c:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
34005010:	f003 0320 	and.w	r3, r3, #32
34005014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
34005018:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
3400501c:	4603      	mov	r3, r0
3400501e:	460a      	mov	r2, r1
34005020:	4313      	orrs	r3, r2
34005022:	d067      	beq.n	340050f4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));

    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34005024:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005028:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
3400502c:	4b19      	ldr	r3, [pc, #100]	@ (34005094 <HAL_RCCEx_PeriphCLKConfig+0x1ae8>)
3400502e:	429a      	cmp	r2, r3
34005030:	d132      	bne.n	34005098 <HAL_RCCEx_PeriphCLKConfig+0x1aec>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005032:	4b0c      	ldr	r3, [pc, #48]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34005034:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34005038:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400503c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34005040:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005044:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34005046:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400504a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400504c:	3b01      	subs	r3, #1
3400504e:	041b      	lsls	r3, r3, #16
34005050:	4313      	orrs	r3, r2
34005052:	4a04      	ldr	r2, [pc, #16]	@ (34005064 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>)
34005054:	430b      	orrs	r3, r1
34005056:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400505a:	f7fd ffc5 	bl	34002fe8 <LL_RCC_IC9_Enable>
3400505e:	e042      	b.n	340050e6 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
34005060:	07020420 	.word	0x07020420
34005064:	56028000 	.word	0x56028000
34005068:	07030420 	.word	0x07030420
3400506c:	07010420 	.word	0x07010420
34005070:	07020820 	.word	0x07020820
34005074:	07030820 	.word	0x07030820
34005078:	07010820 	.word	0x07010820
3400507c:	07020c20 	.word	0x07020c20
34005080:	07030c20 	.word	0x07030c20
34005084:	07010c20 	.word	0x07010c20
34005088:	07021020 	.word	0x07021020
3400508c:	07031020 	.word	0x07031020
34005090:	07011020 	.word	0x07011020
34005094:	07021420 	.word	0x07021420
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34005098:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400509c:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
340050a0:	4bc2      	ldr	r3, [pc, #776]	@ (340053ac <HAL_RCCEx_PeriphCLKConfig+0x1e00>)
340050a2:	429a      	cmp	r2, r3
340050a4:	d116      	bne.n	340050d4 <HAL_RCCEx_PeriphCLKConfig+0x1b28>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340050a6:	4bc2      	ldr	r3, [pc, #776]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
340050a8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340050ac:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340050b0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340050b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340050b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
340050ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340050be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340050c0:	3b01      	subs	r3, #1
340050c2:	041b      	lsls	r3, r3, #16
340050c4:	4313      	orrs	r3, r2
340050c6:	4aba      	ldr	r2, [pc, #744]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
340050c8:	430b      	orrs	r3, r1
340050ca:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
340050ce:	f7fe f88b 	bl	340031e8 <LL_RCC_IC14_Enable>
340050d2:	e008      	b.n	340050e6 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    }
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
340050d4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340050d8:	f8d3 2144 	ldr.w	r2, [r3, #324]	@ 0x144
340050dc:	4bb5      	ldr	r3, [pc, #724]	@ (340053b4 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
340050de:	429a      	cmp	r2, r3
340050e0:	d101      	bne.n	340050e6 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
    {
      LL_RCC_CLKP_Enable();
340050e2:	f7fe fa41 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI5 clock */
    __HAL_RCC_SPI5_CONFIG(PeriphClkInit->Spi5ClockSelection);
340050e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340050ea:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
340050ee:	4618      	mov	r0, r3
340050f0:	f7fd f9d2 	bl	34002498 <LL_RCC_SetSPIClockSource>
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
340050f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
340050fc:	2100      	movs	r1, #0
340050fe:	67b9      	str	r1, [r7, #120]	@ 0x78
34005100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
34005104:	67fb      	str	r3, [r7, #124]	@ 0x7c
34005106:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
3400510a:	4603      	mov	r3, r0
3400510c:	460a      	mov	r2, r1
3400510e:	4313      	orrs	r3, r2
34005110:	d04b      	beq.n	340051aa <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34005112:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005116:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
3400511a:	4ba7      	ldr	r3, [pc, #668]	@ (340053b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
3400511c:	429a      	cmp	r2, r3
3400511e:	d116      	bne.n	3400514e <HAL_RCCEx_PeriphCLKConfig+0x1ba2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));

      /* Set IC8 configuration */
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34005120:	4ba3      	ldr	r3, [pc, #652]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34005122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34005126:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400512a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400512e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
34005134:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400513a:	3b01      	subs	r3, #1
3400513c:	041b      	lsls	r3, r3, #16
3400513e:	4313      	orrs	r3, r2
34005140:	4a9b      	ldr	r2, [pc, #620]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34005142:	430b      	orrs	r3, r1
34005144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                 PeriphClkInit->ICSelection[RCC_IC8].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC8].ClockDivider - 1U) << RCC_IC8CFGR_IC8INT_Pos));

      LL_RCC_IC8_Enable();
34005148:	f7fd ff0e 	bl	34002f68 <LL_RCC_IC8_Enable>
3400514c:	e026      	b.n	3400519c <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
3400514e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005152:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34005156:	4b99      	ldr	r3, [pc, #612]	@ (340053bc <HAL_RCCEx_PeriphCLKConfig+0x1e10>)
34005158:	429a      	cmp	r2, r3
3400515a:	d116      	bne.n	3400518a <HAL_RCCEx_PeriphCLKConfig+0x1bde>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400515c:	4b94      	ldr	r3, [pc, #592]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3400515e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34005162:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34005166:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400516a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400516e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34005170:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34005176:	3b01      	subs	r3, #1
34005178:	041b      	lsls	r3, r3, #16
3400517a:	4313      	orrs	r3, r2
3400517c:	4a8c      	ldr	r2, [pc, #560]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3400517e:	430b      	orrs	r3, r1
34005180:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34005184:	f7fd ff30 	bl	34002fe8 <LL_RCC_IC9_Enable>
34005188:	e008      	b.n	3400519c <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    }
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
3400518a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400518e:	f8d3 2148 	ldr.w	r2, [r3, #328]	@ 0x148
34005192:	4b8b      	ldr	r3, [pc, #556]	@ (340053c0 <HAL_RCCEx_PeriphCLKConfig+0x1e14>)
34005194:	429a      	cmp	r2, r3
34005196:	d101      	bne.n	3400519c <HAL_RCCEx_PeriphCLKConfig+0x1bf0>
    {
      LL_RCC_CLKP_Enable();
34005198:	f7fe f9e6 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
3400519c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340051a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
340051a4:	4618      	mov	r0, r3
340051a6:	f7fd f977 	bl	34002498 <LL_RCC_SetSPIClockSource>
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
340051aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
340051b2:	2100      	movs	r1, #0
340051b4:	6739      	str	r1, [r7, #112]	@ 0x70
340051b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
340051ba:	677b      	str	r3, [r7, #116]	@ 0x74
340051bc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
340051c0:	4603      	mov	r3, r0
340051c2:	460a      	mov	r2, r1
340051c4:	4313      	orrs	r3, r2
340051c6:	d04b      	beq.n	34005260 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
340051c8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340051cc:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
340051d0:	4b7c      	ldr	r3, [pc, #496]	@ (340053c4 <HAL_RCCEx_PeriphCLKConfig+0x1e18>)
340051d2:	429a      	cmp	r2, r3
340051d4:	d116      	bne.n	34005204 <HAL_RCCEx_PeriphCLKConfig+0x1c58>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340051d6:	4b76      	ldr	r3, [pc, #472]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
340051d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340051dc:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340051e0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340051e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340051e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340051ea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340051ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340051f0:	3b01      	subs	r3, #1
340051f2:	041b      	lsls	r3, r3, #16
340051f4:	4313      	orrs	r3, r2
340051f6:	4a6e      	ldr	r2, [pc, #440]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
340051f8:	430b      	orrs	r3, r1
340051fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340051fe:	f7fd fef3 	bl	34002fe8 <LL_RCC_IC9_Enable>
34005202:	e026      	b.n	34005252 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34005204:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005208:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
3400520c:	4b6e      	ldr	r3, [pc, #440]	@ (340053c8 <HAL_RCCEx_PeriphCLKConfig+0x1e1c>)
3400520e:	429a      	cmp	r2, r3
34005210:	d116      	bne.n	34005240 <HAL_RCCEx_PeriphCLKConfig+0x1c94>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34005212:	4b67      	ldr	r3, [pc, #412]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34005214:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34005218:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400521c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34005220:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005224:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34005226:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400522a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400522c:	3b01      	subs	r3, #1
3400522e:	041b      	lsls	r3, r3, #16
34005230:	4313      	orrs	r3, r2
34005232:	4a5f      	ldr	r2, [pc, #380]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34005234:	430b      	orrs	r3, r1
34005236:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400523a:	f7fd ffd5 	bl	340031e8 <LL_RCC_IC14_Enable>
3400523e:	e008      	b.n	34005252 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    }
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34005240:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005244:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
34005248:	4b60      	ldr	r3, [pc, #384]	@ (340053cc <HAL_RCCEx_PeriphCLKConfig+0x1e20>)
3400524a:	429a      	cmp	r2, r3
3400524c:	d101      	bne.n	34005252 <HAL_RCCEx_PeriphCLKConfig+0x1ca6>
    {
      LL_RCC_CLKP_Enable();
3400524e:	f7fe f98b 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART1 clock */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
34005252:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005256:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
3400525a:	4618      	mov	r0, r3
3400525c:	f7fd f927 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
34005260:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005264:	e9d3 2300 	ldrd	r2, r3, [r3]
34005268:	2100      	movs	r1, #0
3400526a:	66b9      	str	r1, [r7, #104]	@ 0x68
3400526c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
34005270:	66fb      	str	r3, [r7, #108]	@ 0x6c
34005272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
34005276:	4603      	mov	r3, r0
34005278:	460a      	mov	r2, r1
3400527a:	4313      	orrs	r3, r2
3400527c:	d04b      	beq.n	34005316 <HAL_RCCEx_PeriphCLKConfig+0x1d6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
3400527e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005282:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
34005286:	4b52      	ldr	r3, [pc, #328]	@ (340053d0 <HAL_RCCEx_PeriphCLKConfig+0x1e24>)
34005288:	429a      	cmp	r2, r3
3400528a:	d116      	bne.n	340052ba <HAL_RCCEx_PeriphCLKConfig+0x1d0e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400528c:	4b48      	ldr	r3, [pc, #288]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
3400528e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34005292:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34005296:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400529a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400529e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340052a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340052a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340052a6:	3b01      	subs	r3, #1
340052a8:	041b      	lsls	r3, r3, #16
340052aa:	4313      	orrs	r3, r2
340052ac:	4a40      	ldr	r2, [pc, #256]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
340052ae:	430b      	orrs	r3, r1
340052b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340052b4:	f7fd fe98 	bl	34002fe8 <LL_RCC_IC9_Enable>
340052b8:	e026      	b.n	34005308 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
340052ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340052be:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
340052c2:	4b44      	ldr	r3, [pc, #272]	@ (340053d4 <HAL_RCCEx_PeriphCLKConfig+0x1e28>)
340052c4:	429a      	cmp	r2, r3
340052c6:	d116      	bne.n	340052f6 <HAL_RCCEx_PeriphCLKConfig+0x1d4a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340052c8:	4b39      	ldr	r3, [pc, #228]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
340052ca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340052ce:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340052d2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340052d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340052da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
340052dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340052e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340052e2:	3b01      	subs	r3, #1
340052e4:	041b      	lsls	r3, r3, #16
340052e6:	4313      	orrs	r3, r2
340052e8:	4a31      	ldr	r2, [pc, #196]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
340052ea:	430b      	orrs	r3, r1
340052ec:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
340052f0:	f7fd ff7a 	bl	340031e8 <LL_RCC_IC14_Enable>
340052f4:	e008      	b.n	34005308 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    }
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
340052f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340052fa:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
340052fe:	4b36      	ldr	r3, [pc, #216]	@ (340053d8 <HAL_RCCEx_PeriphCLKConfig+0x1e2c>)
34005300:	429a      	cmp	r2, r3
34005302:	d101      	bne.n	34005308 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
    {
      LL_RCC_CLKP_Enable();
34005304:	f7fe f930 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART2 clock */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
34005308:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400530c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
34005310:	4618      	mov	r0, r3
34005312:	f7fd f8cc 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART3 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
34005316:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400531a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400531e:	2100      	movs	r1, #0
34005320:	6639      	str	r1, [r7, #96]	@ 0x60
34005322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
34005326:	667b      	str	r3, [r7, #100]	@ 0x64
34005328:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
3400532c:	4603      	mov	r3, r0
3400532e:	460a      	mov	r2, r1
34005330:	4313      	orrs	r3, r2
34005332:	d067      	beq.n	34005404 <HAL_RCCEx_PeriphCLKConfig+0x1e58>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
34005334:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005338:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
3400533c:	4b27      	ldr	r3, [pc, #156]	@ (340053dc <HAL_RCCEx_PeriphCLKConfig+0x1e30>)
3400533e:	429a      	cmp	r2, r3
34005340:	d116      	bne.n	34005370 <HAL_RCCEx_PeriphCLKConfig+0x1dc4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005342:	4b1b      	ldr	r3, [pc, #108]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34005344:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34005348:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400534c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34005350:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005354:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34005356:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400535a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400535c:	3b01      	subs	r3, #1
3400535e:	041b      	lsls	r3, r3, #16
34005360:	4313      	orrs	r3, r2
34005362:	4a13      	ldr	r2, [pc, #76]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34005364:	430b      	orrs	r3, r1
34005366:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400536a:	f7fd fe3d 	bl	34002fe8 <LL_RCC_IC9_Enable>
3400536e:	e042      	b.n	340053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34005370:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005374:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
34005378:	4b19      	ldr	r3, [pc, #100]	@ (340053e0 <HAL_RCCEx_PeriphCLKConfig+0x1e34>)
3400537a:	429a      	cmp	r2, r3
3400537c:	d132      	bne.n	340053e4 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400537e:	4b0c      	ldr	r3, [pc, #48]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
34005380:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34005384:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34005388:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400538c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005390:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34005392:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005398:	3b01      	subs	r3, #1
3400539a:	041b      	lsls	r3, r3, #16
3400539c:	4313      	orrs	r3, r2
3400539e:	4a04      	ldr	r2, [pc, #16]	@ (340053b0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>)
340053a0:	430b      	orrs	r3, r1
340053a2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
340053a6:	f7fd ff1f 	bl	340031e8 <LL_RCC_IC14_Enable>
340053aa:	e024      	b.n	340053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
340053ac:	07031420 	.word	0x07031420
340053b0:	56028000 	.word	0x56028000
340053b4:	07011420 	.word	0x07011420
340053b8:	07021820 	.word	0x07021820
340053bc:	07031820 	.word	0x07031820
340053c0:	07011820 	.word	0x07011820
340053c4:	07020030 	.word	0x07020030
340053c8:	07030030 	.word	0x07030030
340053cc:	07010030 	.word	0x07010030
340053d0:	07020430 	.word	0x07020430
340053d4:	07030430 	.word	0x07030430
340053d8:	07010430 	.word	0x07010430
340053dc:	07020830 	.word	0x07020830
340053e0:	07030830 	.word	0x07030830
    }
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
340053e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340053e8:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
340053ec:	4bb3      	ldr	r3, [pc, #716]	@ (340056bc <HAL_RCCEx_PeriphCLKConfig+0x2110>)
340053ee:	429a      	cmp	r2, r3
340053f0:	d101      	bne.n	340053f6 <HAL_RCCEx_PeriphCLKConfig+0x1e4a>
    {
      LL_RCC_CLKP_Enable();
340053f2:	f7fe f8b9 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART3 clock */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
340053f6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340053fa:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
340053fe:	4618      	mov	r0, r3
34005400:	f7fd f855 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART4 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34005404:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005408:	e9d3 2300 	ldrd	r2, r3, [r3]
3400540c:	2100      	movs	r1, #0
3400540e:	65b9      	str	r1, [r7, #88]	@ 0x58
34005410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
34005414:	65fb      	str	r3, [r7, #92]	@ 0x5c
34005416:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
3400541a:	4603      	mov	r3, r0
3400541c:	460a      	mov	r2, r1
3400541e:	4313      	orrs	r3, r2
34005420:	d04b      	beq.n	340054ba <HAL_RCCEx_PeriphCLKConfig+0x1f0e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34005422:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005426:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
3400542a:	4ba5      	ldr	r3, [pc, #660]	@ (340056c0 <HAL_RCCEx_PeriphCLKConfig+0x2114>)
3400542c:	429a      	cmp	r2, r3
3400542e:	d116      	bne.n	3400545e <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005430:	4ba4      	ldr	r3, [pc, #656]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34005432:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34005436:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400543a:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400543e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005442:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34005444:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400544a:	3b01      	subs	r3, #1
3400544c:	041b      	lsls	r3, r3, #16
3400544e:	4313      	orrs	r3, r2
34005450:	4a9c      	ldr	r2, [pc, #624]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34005452:	430b      	orrs	r3, r1
34005454:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34005458:	f7fd fdc6 	bl	34002fe8 <LL_RCC_IC9_Enable>
3400545c:	e026      	b.n	340054ac <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
3400545e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005462:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34005466:	4b98      	ldr	r3, [pc, #608]	@ (340056c8 <HAL_RCCEx_PeriphCLKConfig+0x211c>)
34005468:	429a      	cmp	r2, r3
3400546a:	d116      	bne.n	3400549a <HAL_RCCEx_PeriphCLKConfig+0x1eee>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400546c:	4b95      	ldr	r3, [pc, #596]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3400546e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34005472:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34005476:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400547a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400547e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34005480:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005486:	3b01      	subs	r3, #1
34005488:	041b      	lsls	r3, r3, #16
3400548a:	4313      	orrs	r3, r2
3400548c:	4a8d      	ldr	r2, [pc, #564]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3400548e:	430b      	orrs	r3, r1
34005490:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34005494:	f7fd fea8 	bl	340031e8 <LL_RCC_IC14_Enable>
34005498:	e008      	b.n	340054ac <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    }
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
3400549a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400549e:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
340054a2:	4b8a      	ldr	r3, [pc, #552]	@ (340056cc <HAL_RCCEx_PeriphCLKConfig+0x2120>)
340054a4:	429a      	cmp	r2, r3
340054a6:	d101      	bne.n	340054ac <HAL_RCCEx_PeriphCLKConfig+0x1f00>
    {
      LL_RCC_CLKP_Enable();
340054a8:	f7fe f85e 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART4 clock */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
340054ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340054b0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340054b4:	4618      	mov	r0, r3
340054b6:	f7fc fffa 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART5 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
340054ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340054be:	e9d3 2300 	ldrd	r2, r3, [r3]
340054c2:	2100      	movs	r1, #0
340054c4:	6539      	str	r1, [r7, #80]	@ 0x50
340054c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
340054ca:	657b      	str	r3, [r7, #84]	@ 0x54
340054cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
340054d0:	4603      	mov	r3, r0
340054d2:	460a      	mov	r2, r1
340054d4:	4313      	orrs	r3, r2
340054d6:	d04b      	beq.n	34005570 <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
340054d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340054dc:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
340054e0:	4b7b      	ldr	r3, [pc, #492]	@ (340056d0 <HAL_RCCEx_PeriphCLKConfig+0x2124>)
340054e2:	429a      	cmp	r2, r3
340054e4:	d116      	bne.n	34005514 <HAL_RCCEx_PeriphCLKConfig+0x1f68>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340054e6:	4b77      	ldr	r3, [pc, #476]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
340054e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340054ec:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340054f0:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340054f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340054f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340054fa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340054fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34005500:	3b01      	subs	r3, #1
34005502:	041b      	lsls	r3, r3, #16
34005504:	4313      	orrs	r3, r2
34005506:	4a6f      	ldr	r2, [pc, #444]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34005508:	430b      	orrs	r3, r1
3400550a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400550e:	f7fd fd6b 	bl	34002fe8 <LL_RCC_IC9_Enable>
34005512:	e026      	b.n	34005562 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34005514:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005518:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
3400551c:	4b6d      	ldr	r3, [pc, #436]	@ (340056d4 <HAL_RCCEx_PeriphCLKConfig+0x2128>)
3400551e:	429a      	cmp	r2, r3
34005520:	d116      	bne.n	34005550 <HAL_RCCEx_PeriphCLKConfig+0x1fa4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34005522:	4b68      	ldr	r3, [pc, #416]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34005524:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34005528:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400552c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34005530:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005534:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34005536:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400553a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
3400553c:	3b01      	subs	r3, #1
3400553e:	041b      	lsls	r3, r3, #16
34005540:	4313      	orrs	r3, r2
34005542:	4a60      	ldr	r2, [pc, #384]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34005544:	430b      	orrs	r3, r1
34005546:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400554a:	f7fd fe4d 	bl	340031e8 <LL_RCC_IC14_Enable>
3400554e:	e008      	b.n	34005562 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    }
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34005550:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005554:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
34005558:	4b5f      	ldr	r3, [pc, #380]	@ (340056d8 <HAL_RCCEx_PeriphCLKConfig+0x212c>)
3400555a:	429a      	cmp	r2, r3
3400555c:	d101      	bne.n	34005562 <HAL_RCCEx_PeriphCLKConfig+0x1fb6>
    {
      LL_RCC_CLKP_Enable();
3400555e:	f7fe f803 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART5 clock */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
34005562:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005566:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
3400556a:	4618      	mov	r0, r3
3400556c:	f7fc ff9f 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34005570:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005574:	e9d3 2300 	ldrd	r2, r3, [r3]
34005578:	2100      	movs	r1, #0
3400557a:	64b9      	str	r1, [r7, #72]	@ 0x48
3400557c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
34005580:	64fb      	str	r3, [r7, #76]	@ 0x4c
34005582:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
34005586:	4603      	mov	r3, r0
34005588:	460a      	mov	r2, r1
3400558a:	4313      	orrs	r3, r2
3400558c:	d04b      	beq.n	34005626 <HAL_RCCEx_PeriphCLKConfig+0x207a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
3400558e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005592:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
34005596:	4b51      	ldr	r3, [pc, #324]	@ (340056dc <HAL_RCCEx_PeriphCLKConfig+0x2130>)
34005598:	429a      	cmp	r2, r3
3400559a:	d116      	bne.n	340055ca <HAL_RCCEx_PeriphCLKConfig+0x201e>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400559c:	4b49      	ldr	r3, [pc, #292]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
3400559e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340055a2:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340055a6:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340055aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340055ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
340055b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340055b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
340055b6:	3b01      	subs	r3, #1
340055b8:	041b      	lsls	r3, r3, #16
340055ba:	4313      	orrs	r3, r2
340055bc:	4a41      	ldr	r2, [pc, #260]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
340055be:	430b      	orrs	r3, r1
340055c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340055c4:	f7fd fd10 	bl	34002fe8 <LL_RCC_IC9_Enable>
340055c8:	e026      	b.n	34005618 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
340055ca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340055ce:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
340055d2:	4b43      	ldr	r3, [pc, #268]	@ (340056e0 <HAL_RCCEx_PeriphCLKConfig+0x2134>)
340055d4:	429a      	cmp	r2, r3
340055d6:	d116      	bne.n	34005606 <HAL_RCCEx_PeriphCLKConfig+0x205a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340055d8:	4b3a      	ldr	r3, [pc, #232]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
340055da:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340055de:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340055e2:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
340055e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340055ea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
340055ec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340055f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340055f2:	3b01      	subs	r3, #1
340055f4:	041b      	lsls	r3, r3, #16
340055f6:	4313      	orrs	r3, r2
340055f8:	4a32      	ldr	r2, [pc, #200]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
340055fa:	430b      	orrs	r3, r1
340055fc:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34005600:	f7fd fdf2 	bl	340031e8 <LL_RCC_IC14_Enable>
34005604:	e008      	b.n	34005618 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    }
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34005606:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400560a:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
3400560e:	4b35      	ldr	r3, [pc, #212]	@ (340056e4 <HAL_RCCEx_PeriphCLKConfig+0x2138>)
34005610:	429a      	cmp	r2, r3
34005612:	d101      	bne.n	34005618 <HAL_RCCEx_PeriphCLKConfig+0x206c>
    {
      LL_RCC_CLKP_Enable();
34005614:	f7fd ffa8 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART6 clock */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
34005618:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400561c:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
34005620:	4618      	mov	r0, r3
34005622:	f7fc ff44 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART7 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34005626:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400562a:	e9d3 2300 	ldrd	r2, r3, [r3]
3400562e:	2100      	movs	r1, #0
34005630:	6439      	str	r1, [r7, #64]	@ 0x40
34005632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
34005636:	647b      	str	r3, [r7, #68]	@ 0x44
34005638:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
3400563c:	4603      	mov	r3, r0
3400563e:	460a      	mov	r2, r1
34005640:	4313      	orrs	r3, r2
34005642:	d065      	beq.n	34005710 <HAL_RCCEx_PeriphCLKConfig+0x2164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34005644:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005648:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
3400564c:	4b26      	ldr	r3, [pc, #152]	@ (340056e8 <HAL_RCCEx_PeriphCLKConfig+0x213c>)
3400564e:	429a      	cmp	r2, r3
34005650:	d116      	bne.n	34005680 <HAL_RCCEx_PeriphCLKConfig+0x20d4>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34005652:	4b1c      	ldr	r3, [pc, #112]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34005654:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34005658:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
3400565c:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34005660:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005664:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34005666:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400566a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400566c:	3b01      	subs	r3, #1
3400566e:	041b      	lsls	r3, r3, #16
34005670:	4313      	orrs	r3, r2
34005672:	4a14      	ldr	r2, [pc, #80]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34005674:	430b      	orrs	r3, r1
34005676:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400567a:	f7fd fcb5 	bl	34002fe8 <LL_RCC_IC9_Enable>
3400567e:	e040      	b.n	34005702 <HAL_RCCEx_PeriphCLKConfig+0x2156>
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34005680:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005684:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
34005688:	4b18      	ldr	r3, [pc, #96]	@ (340056ec <HAL_RCCEx_PeriphCLKConfig+0x2140>)
3400568a:	429a      	cmp	r2, r3
3400568c:	d130      	bne.n	340056f0 <HAL_RCCEx_PeriphCLKConfig+0x2144>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400568e:	4b0d      	ldr	r3, [pc, #52]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
34005690:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34005694:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34005698:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400569c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340056a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
340056a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340056a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
340056a8:	3b01      	subs	r3, #1
340056aa:	041b      	lsls	r3, r3, #16
340056ac:	4313      	orrs	r3, r2
340056ae:	4a05      	ldr	r2, [pc, #20]	@ (340056c4 <HAL_RCCEx_PeriphCLKConfig+0x2118>)
340056b0:	430b      	orrs	r3, r1
340056b2:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
340056b6:	f7fd fd97 	bl	340031e8 <LL_RCC_IC14_Enable>
340056ba:	e022      	b.n	34005702 <HAL_RCCEx_PeriphCLKConfig+0x2156>
340056bc:	07010830 	.word	0x07010830
340056c0:	07020c30 	.word	0x07020c30
340056c4:	56028000 	.word	0x56028000
340056c8:	07030c30 	.word	0x07030c30
340056cc:	07010c30 	.word	0x07010c30
340056d0:	07021030 	.word	0x07021030
340056d4:	07031030 	.word	0x07031030
340056d8:	07011030 	.word	0x07011030
340056dc:	07021430 	.word	0x07021430
340056e0:	07031430 	.word	0x07031430
340056e4:	07011430 	.word	0x07011430
340056e8:	07021830 	.word	0x07021830
340056ec:	07031830 	.word	0x07031830
    }
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
340056f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340056f4:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
340056f8:	4bc8      	ldr	r3, [pc, #800]	@ (34005a1c <HAL_RCCEx_PeriphCLKConfig+0x2470>)
340056fa:	429a      	cmp	r2, r3
340056fc:	d101      	bne.n	34005702 <HAL_RCCEx_PeriphCLKConfig+0x2156>
    {
      LL_RCC_CLKP_Enable();
340056fe:	f7fd ff33 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART7 clock */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
34005702:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005706:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
3400570a:	4618      	mov	r0, r3
3400570c:	f7fc fecf 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART8 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34005710:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005714:	e9d3 2300 	ldrd	r2, r3, [r3]
34005718:	2100      	movs	r1, #0
3400571a:	63b9      	str	r1, [r7, #56]	@ 0x38
3400571c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
34005720:	63fb      	str	r3, [r7, #60]	@ 0x3c
34005722:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
34005726:	4603      	mov	r3, r0
34005728:	460a      	mov	r2, r1
3400572a:	4313      	orrs	r3, r2
3400572c:	d04b      	beq.n	340057c6 <HAL_RCCEx_PeriphCLKConfig+0x221a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
3400572e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005732:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34005736:	4bba      	ldr	r3, [pc, #744]	@ (34005a20 <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34005738:	429a      	cmp	r2, r3
3400573a:	d116      	bne.n	3400576a <HAL_RCCEx_PeriphCLKConfig+0x21be>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3400573c:	4bb9      	ldr	r3, [pc, #740]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3400573e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34005742:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34005746:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400574a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400574e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34005750:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
34005756:	3b01      	subs	r3, #1
34005758:	041b      	lsls	r3, r3, #16
3400575a:	4313      	orrs	r3, r2
3400575c:	4ab1      	ldr	r2, [pc, #708]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3400575e:	430b      	orrs	r3, r1
34005760:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
34005764:	f7fd fc40 	bl	34002fe8 <LL_RCC_IC9_Enable>
34005768:	e026      	b.n	340057b8 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
3400576a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400576e:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
34005772:	4bad      	ldr	r3, [pc, #692]	@ (34005a28 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
34005774:	429a      	cmp	r2, r3
34005776:	d116      	bne.n	340057a6 <HAL_RCCEx_PeriphCLKConfig+0x21fa>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34005778:	4baa      	ldr	r3, [pc, #680]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3400577a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3400577e:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34005782:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34005786:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400578a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
3400578c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005792:	3b01      	subs	r3, #1
34005794:	041b      	lsls	r3, r3, #16
34005796:	4313      	orrs	r3, r2
34005798:	4aa2      	ldr	r2, [pc, #648]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3400579a:	430b      	orrs	r3, r1
3400579c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
340057a0:	f7fd fd22 	bl	340031e8 <LL_RCC_IC14_Enable>
340057a4:	e008      	b.n	340057b8 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    }
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
340057a6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340057aa:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
340057ae:	4b9f      	ldr	r3, [pc, #636]	@ (34005a2c <HAL_RCCEx_PeriphCLKConfig+0x2480>)
340057b0:	429a      	cmp	r2, r3
340057b2:	d101      	bne.n	340057b8 <HAL_RCCEx_PeriphCLKConfig+0x220c>
    {
      LL_RCC_CLKP_Enable();
340057b4:	f7fd fed8 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART8 clock */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
340057b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340057bc:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
340057c0:	4618      	mov	r0, r3
340057c2:	f7fc fe74 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- UART9 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
340057c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340057ca:	e9d3 2300 	ldrd	r2, r3, [r3]
340057ce:	2100      	movs	r1, #0
340057d0:	6339      	str	r1, [r7, #48]	@ 0x30
340057d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
340057d6:	637b      	str	r3, [r7, #52]	@ 0x34
340057d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
340057dc:	4603      	mov	r3, r0
340057de:	460a      	mov	r2, r1
340057e0:	4313      	orrs	r3, r2
340057e2:	d04b      	beq.n	3400587c <HAL_RCCEx_PeriphCLKConfig+0x22d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));

    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
340057e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340057e8:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
340057ec:	4a90      	ldr	r2, [pc, #576]	@ (34005a30 <HAL_RCCEx_PeriphCLKConfig+0x2484>)
340057ee:	4293      	cmp	r3, r2
340057f0:	d116      	bne.n	34005820 <HAL_RCCEx_PeriphCLKConfig+0x2274>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340057f2:	4b8c      	ldr	r3, [pc, #560]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340057f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340057f8:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
340057fc:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
34005800:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005804:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
34005806:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400580a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
3400580c:	3b01      	subs	r3, #1
3400580e:	041b      	lsls	r3, r3, #16
34005810:	4313      	orrs	r3, r2
34005812:	4a84      	ldr	r2, [pc, #528]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34005814:	430b      	orrs	r3, r1
34005816:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
3400581a:	f7fd fbe5 	bl	34002fe8 <LL_RCC_IC9_Enable>
3400581e:	e026      	b.n	3400586e <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34005820:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005824:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34005828:	4a82      	ldr	r2, [pc, #520]	@ (34005a34 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
3400582a:	4293      	cmp	r3, r2
3400582c:	d116      	bne.n	3400585c <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3400582e:	4b7d      	ldr	r3, [pc, #500]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34005830:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34005834:	f023 5143 	bic.w	r1, r3, #817889280	@ 0x30c00000
34005838:	f421 117c 	bic.w	r1, r1, #4128768	@ 0x3f0000
3400583c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005840:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
34005842:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005846:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
34005848:	3b01      	subs	r3, #1
3400584a:	041b      	lsls	r3, r3, #16
3400584c:	4313      	orrs	r3, r2
3400584e:	4a75      	ldr	r2, [pc, #468]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34005850:	430b      	orrs	r3, r1
34005852:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
34005856:	f7fd fcc7 	bl	340031e8 <LL_RCC_IC14_Enable>
3400585a:	e008      	b.n	3400586e <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    }
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
3400585c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005860:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34005864:	4a74      	ldr	r2, [pc, #464]	@ (34005a38 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34005866:	4293      	cmp	r3, r2
34005868:	d101      	bne.n	3400586e <HAL_RCCEx_PeriphCLKConfig+0x22c2>
    {
      LL_RCC_CLKP_Enable();
3400586a:	f7fd fe7d 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of UART9 clock */
    __HAL_RCC_UART9_CONFIG(PeriphClkInit->Uart9ClockSelection);
3400586e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005872:	f8d3 3170 	ldr.w	r3, [r3, #368]	@ 0x170
34005876:	4618      	mov	r0, r3
34005878:	f7fc fe19 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------------- USART10 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
3400587c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005880:	e9d3 2300 	ldrd	r2, r3, [r3]
34005884:	2100      	movs	r1, #0
34005886:	62b9      	str	r1, [r7, #40]	@ 0x28
34005888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
3400588c:	62fb      	str	r3, [r7, #44]	@ 0x2c
3400588e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
34005892:	4603      	mov	r3, r0
34005894:	460a      	mov	r2, r1
34005896:	4313      	orrs	r3, r2
34005898:	d04b      	beq.n	34005932 <HAL_RCCEx_PeriphCLKConfig+0x2386>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));

    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
3400589a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400589e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
340058a2:	4a66      	ldr	r2, [pc, #408]	@ (34005a3c <HAL_RCCEx_PeriphCLKConfig+0x2490>)
340058a4:	4293      	cmp	r3, r2
340058a6:	d116      	bne.n	340058d6 <HAL_RCCEx_PeriphCLKConfig+0x232a>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));

      /* Set IC9 configuration */
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
340058a8:	4b5e      	ldr	r3, [pc, #376]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340058aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
340058ae:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340058b2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340058b6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
340058ba:	6c91      	ldr	r1, [r2, #72]	@ 0x48
340058bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
340058c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
340058c2:	3a01      	subs	r2, #1
340058c4:	0412      	lsls	r2, r2, #16
340058c6:	430a      	orrs	r2, r1
340058c8:	4956      	ldr	r1, [pc, #344]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340058ca:	4313      	orrs	r3, r2
340058cc:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                 PeriphClkInit->ICSelection[RCC_IC9].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC9].ClockDivider - 1U) << RCC_IC9CFGR_IC9INT_Pos));

      LL_RCC_IC9_Enable();
340058d0:	f7fd fb8a 	bl	34002fe8 <LL_RCC_IC9_Enable>
340058d4:	e026      	b.n	34005924 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
340058d6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340058da:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
340058de:	4a58      	ldr	r2, [pc, #352]	@ (34005a40 <HAL_RCCEx_PeriphCLKConfig+0x2494>)
340058e0:	4293      	cmp	r3, r2
340058e2:	d116      	bne.n	34005912 <HAL_RCCEx_PeriphCLKConfig+0x2366>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));

      /* Set IC14 configuration */
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
340058e4:	4b4f      	ldr	r3, [pc, #316]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340058e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
340058ea:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340058ee:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340058f2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
340058f6:	6f11      	ldr	r1, [r2, #112]	@ 0x70
340058f8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
340058fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
340058fe:	3a01      	subs	r2, #1
34005900:	0412      	lsls	r2, r2, #16
34005902:	430a      	orrs	r2, r1
34005904:	4947      	ldr	r1, [pc, #284]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34005906:	4313      	orrs	r3, r2
34005908:	f8c1 30f8 	str.w	r3, [r1, #248]	@ 0xf8
                 PeriphClkInit->ICSelection[RCC_IC14].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC14].ClockDivider - 1U) << RCC_IC14CFGR_IC14INT_Pos));

      LL_RCC_IC14_Enable();
3400590c:	f7fd fc6c 	bl	340031e8 <LL_RCC_IC14_Enable>
34005910:	e008      	b.n	34005924 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    }
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34005912:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005916:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400591a:	4a4a      	ldr	r2, [pc, #296]	@ (34005a44 <HAL_RCCEx_PeriphCLKConfig+0x2498>)
3400591c:	4293      	cmp	r3, r2
3400591e:	d101      	bne.n	34005924 <HAL_RCCEx_PeriphCLKConfig+0x2378>
    {
      LL_RCC_CLKP_Enable();
34005920:	f7fd fe22 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USART10 clock */
    __HAL_RCC_USART10_CONFIG(PeriphClkInit->Usart10ClockSelection);
34005924:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005928:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
3400592c:	4618      	mov	r0, r3
3400592e:	f7fc fdbe 	bl	340024ae <LL_RCC_SetUSARTClockSource>
  }

  /*------------------------------ USBPHY1 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34005932:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005936:	e9d3 2300 	ldrd	r2, r3, [r3]
3400593a:	2100      	movs	r1, #0
3400593c:	6239      	str	r1, [r7, #32]
3400593e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
34005942:	627b      	str	r3, [r7, #36]	@ 0x24
34005944:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
34005948:	4603      	mov	r3, r0
3400594a:	460a      	mov	r2, r1
3400594c:	4313      	orrs	r3, r2
3400594e:	d014      	beq.n	3400597a <HAL_RCCEx_PeriphCLKConfig+0x23ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));

    /* Set the source of USBPHY1 clock*/
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34005950:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005954:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
34005958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
3400595c:	4618      	mov	r0, r3
3400595e:	f7fc fd4e 	bl	340023fe <LL_RCC_SetOTGPHYCKREFClockSource>
34005962:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005966:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
3400596a:	0fdb      	lsrs	r3, r3, #31
3400596c:	2b01      	cmp	r3, #1
3400596e:	d102      	bne.n	34005976 <HAL_RCCEx_PeriphCLKConfig+0x23ca>
34005970:	f7fc faf0 	bl	34001f54 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34005974:	e001      	b.n	3400597a <HAL_RCCEx_PeriphCLKConfig+0x23ce>
34005976:	f7fc fadd 	bl	34001f34 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBPHY2 Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
3400597a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400597e:	e9d3 2300 	ldrd	r2, r3, [r3]
34005982:	2100      	movs	r1, #0
34005984:	61b9      	str	r1, [r7, #24]
34005986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
3400598a:	61fb      	str	r3, [r7, #28]
3400598c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
34005990:	4603      	mov	r3, r0
34005992:	460a      	mov	r2, r1
34005994:	4313      	orrs	r3, r2
34005996:	d014      	beq.n	340059c2 <HAL_RCCEx_PeriphCLKConfig+0x2416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));

    /* Set the source of USBPHY2 clock*/
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34005998:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
3400599c:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
340059a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
340059a4:	4618      	mov	r0, r3
340059a6:	f7fc fd2a 	bl	340023fe <LL_RCC_SetOTGPHYCKREFClockSource>
340059aa:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340059ae:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
340059b2:	0fdb      	lsrs	r3, r3, #31
340059b4:	2b01      	cmp	r3, #1
340059b6:	d102      	bne.n	340059be <HAL_RCCEx_PeriphCLKConfig+0x2412>
340059b8:	f7fc facc 	bl	34001f54 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
340059bc:	e001      	b.n	340059c2 <HAL_RCCEx_PeriphCLKConfig+0x2416>
340059be:	f7fc fab9 	bl	34001f34 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS1 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
340059c2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340059c6:	e9d3 2300 	ldrd	r2, r3, [r3]
340059ca:	2100      	movs	r1, #0
340059cc:	6139      	str	r1, [r7, #16]
340059ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
340059d2:	617b      	str	r3, [r7, #20]
340059d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
340059d8:	4603      	mov	r3, r0
340059da:	460a      	mov	r2, r1
340059dc:	4313      	orrs	r3, r2
340059de:	d053      	beq.n	34005a88 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));

    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
340059e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
340059e4:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
340059e8:	4a17      	ldr	r2, [pc, #92]	@ (34005a48 <HAL_RCCEx_PeriphCLKConfig+0x249c>)
340059ea:	4293      	cmp	r3, r2
340059ec:	d12e      	bne.n	34005a4c <HAL_RCCEx_PeriphCLKConfig+0x24a0>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
340059ee:	4b0d      	ldr	r3, [pc, #52]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
340059f0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
340059f4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
340059f8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
340059fc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34005a00:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34005a02:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34005a06:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34005a08:	3a01      	subs	r2, #1
34005a0a:	0412      	lsls	r2, r2, #16
34005a0c:	430a      	orrs	r2, r1
34005a0e:	4905      	ldr	r1, [pc, #20]	@ (34005a24 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
34005a10:	4313      	orrs	r3, r2
34005a12:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34005a16:	f7fd fc27 	bl	34003268 <LL_RCC_IC15_Enable>
34005a1a:	e020      	b.n	34005a5e <HAL_RCCEx_PeriphCLKConfig+0x24b2>
34005a1c:	07011830 	.word	0x07011830
34005a20:	07021c30 	.word	0x07021c30
34005a24:	56028000 	.word	0x56028000
34005a28:	07031c30 	.word	0x07031c30
34005a2c:	07011c30 	.word	0x07011c30
34005a30:	07020034 	.word	0x07020034
34005a34:	07030034 	.word	0x07030034
34005a38:	07010034 	.word	0x07010034
34005a3c:	07020434 	.word	0x07020434
34005a40:	07030434 	.word	0x07030434
34005a44:	07010434 	.word	0x07010434
34005a48:	03020c14 	.word	0x03020c14
    }
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34005a4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005a50:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34005a54:	4a43      	ldr	r2, [pc, #268]	@ (34005b64 <HAL_RCCEx_PeriphCLKConfig+0x25b8>)
34005a56:	4293      	cmp	r3, r2
34005a58:	d101      	bne.n	34005a5e <HAL_RCCEx_PeriphCLKConfig+0x24b2>
    {
      LL_RCC_CLKP_Enable();
34005a5a:	f7fd fd85 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS1 clock */
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34005a5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005a62:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34005a66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34005a6a:	4618      	mov	r0, r3
34005a6c:	f7fc fcbc 	bl	340023e8 <LL_RCC_SetOTGPHYClockSource>
34005a70:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005a74:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
34005a78:	0fdb      	lsrs	r3, r3, #31
34005a7a:	2b01      	cmp	r3, #1
34005a7c:	d102      	bne.n	34005a84 <HAL_RCCEx_PeriphCLKConfig+0x24d8>
34005a7e:	f7fc fa69 	bl	34001f54 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34005a82:	e001      	b.n	34005a88 <HAL_RCCEx_PeriphCLKConfig+0x24dc>
34005a84:	f7fc fa56 	bl	34001f34 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------ USBOTGHS2 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34005a88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
34005a90:	2100      	movs	r1, #0
34005a92:	60b9      	str	r1, [r7, #8]
34005a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
34005a98:	60fb      	str	r3, [r7, #12]
34005a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
34005a9e:	4603      	mov	r3, r0
34005aa0:	460a      	mov	r2, r1
34005aa2:	4313      	orrs	r3, r2
34005aa4:	d03b      	beq.n	34005b1e <HAL_RCCEx_PeriphCLKConfig+0x2572>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));

    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34005aa6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005aaa:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34005aae:	4a2e      	ldr	r2, [pc, #184]	@ (34005b68 <HAL_RCCEx_PeriphCLKConfig+0x25bc>)
34005ab0:	4293      	cmp	r3, r2
34005ab2:	d116      	bne.n	34005ae2 <HAL_RCCEx_PeriphCLKConfig+0x2536>
      /* Check the parameters */
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));

      /* Set IC15 configuration */
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34005ab4:	4b2d      	ldr	r3, [pc, #180]	@ (34005b6c <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
34005ab6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34005aba:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34005abe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34005ac2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34005ac6:	6f91      	ldr	r1, [r2, #120]	@ 0x78
34005ac8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
34005acc:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
34005ace:	3a01      	subs	r2, #1
34005ad0:	0412      	lsls	r2, r2, #16
34005ad2:	430a      	orrs	r2, r1
34005ad4:	4925      	ldr	r1, [pc, #148]	@ (34005b6c <HAL_RCCEx_PeriphCLKConfig+0x25c0>)
34005ad6:	4313      	orrs	r3, r2
34005ad8:	f8c1 30fc 	str.w	r3, [r1, #252]	@ 0xfc
                 PeriphClkInit->ICSelection[RCC_IC15].ClockSelection | \
                 ((PeriphClkInit->ICSelection[RCC_IC15].ClockDivider - 1U) << RCC_IC15CFGR_IC15INT_Pos));

      LL_RCC_IC15_Enable();
34005adc:	f7fd fbc4 	bl	34003268 <LL_RCC_IC15_Enable>
34005ae0:	e008      	b.n	34005af4 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    }
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34005ae2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005ae6:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34005aea:	4a21      	ldr	r2, [pc, #132]	@ (34005b70 <HAL_RCCEx_PeriphCLKConfig+0x25c4>)
34005aec:	4293      	cmp	r3, r2
34005aee:	d101      	bne.n	34005af4 <HAL_RCCEx_PeriphCLKConfig+0x2548>
    {
      LL_RCC_CLKP_Enable();
34005af0:	f7fd fd3a 	bl	34003568 <LL_RCC_CLKP_Enable>
    {
      /* No specific enable to do on other sources */
    }

    /* Set the source of USBOTGHS2 clock */
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34005af4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005af8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34005afc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
34005b00:	4618      	mov	r0, r3
34005b02:	f7fc fc71 	bl	340023e8 <LL_RCC_SetOTGPHYClockSource>
34005b06:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005b0a:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
34005b0e:	0fdb      	lsrs	r3, r3, #31
34005b10:	2b01      	cmp	r3, #1
34005b12:	d102      	bne.n	34005b1a <HAL_RCCEx_PeriphCLKConfig+0x256e>
34005b14:	f7fc fa1e 	bl	34001f54 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
34005b18:	e001      	b.n	34005b1e <HAL_RCCEx_PeriphCLKConfig+0x2572>
34005b1a:	f7fc fa0b 	bl	34001f34 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34005b1e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
34005b26:	2100      	movs	r1, #0
34005b28:	6039      	str	r1, [r7, #0]
34005b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
34005b2e:	607b      	str	r3, [r7, #4]
34005b30:	e9d7 0100 	ldrd	r0, r1, [r7]
34005b34:	4603      	mov	r3, r0
34005b36:	460a      	mov	r2, r1
34005b38:	4313      	orrs	r3, r2
34005b3a:	d006      	beq.n	34005b4a <HAL_RCCEx_PeriphCLKConfig+0x259e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
34005b3c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
34005b40:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
34005b44:	4618      	mov	r0, r3
34005b46:	f7fc fe8b 	bl	34002860 <LL_RCC_SetTIMPrescaler>
  }

  if (status == HAL_OK)
34005b4a:	f897 31c6 	ldrb.w	r3, [r7, #454]	@ 0x1c6
34005b4e:	2b00      	cmp	r3, #0
34005b50:	d101      	bne.n	34005b56 <HAL_RCCEx_PeriphCLKConfig+0x25aa>
  {
    return HAL_OK;
34005b52:	2300      	movs	r3, #0
34005b54:	e000      	b.n	34005b58 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
  }
  return HAL_ERROR;
34005b56:	2301      	movs	r3, #1
}
34005b58:	4618      	mov	r0, r3
34005b5a:	f507 77e4 	add.w	r7, r7, #456	@ 0x1c8
34005b5e:	46bd      	mov	sp, r7
34005b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
34005b64:	03010c14 	.word	0x03010c14
34005b68:	03021414 	.word	0x03021414
34005b6c:	56028000 	.word	0x56028000
34005b70:	03011414 	.word	0x03011414

34005b74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_XSPI2    : XSPI2 peripheral clock
  *            @arg RCC_PERIPHCLK_XSPI3    : XSPI3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
34005b74:	b590      	push	{r4, r7, lr}
34005b76:	b085      	sub	sp, #20
34005b78:	af00      	add	r7, sp, #0
34005b7a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t frequency = 0;   /* Set to 0 for returned value if no source clock */
34005b7e:	2100      	movs	r1, #0
34005b80:	60f9      	str	r1, [r7, #12]

  switch (PeriphClk)
34005b82:	e9d7 0100 	ldrd	r0, r1, [r7]
34005b86:	f101 447f 	add.w	r4, r1, #4278190080	@ 0xff000000
34005b8a:	ea50 0104 	orrs.w	r1, r0, r4
34005b8e:	f000 8436 	beq.w	340063fe <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
34005b92:	e9d7 0100 	ldrd	r0, r1, [r7]
34005b96:	2801      	cmp	r0, #1
34005b98:	f171 7180 	sbcs.w	r1, r1, #16777216	@ 0x1000000
34005b9c:	f080 8434 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005ba0:	e9d7 0100 	ldrd	r0, r1, [r7]
34005ba4:	f5a1 0400 	sub.w	r4, r1, #8388608	@ 0x800000
34005ba8:	ea50 0104 	orrs.w	r1, r0, r4
34005bac:	f000 8422 	beq.w	340063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x880>
34005bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
34005bb4:	2801      	cmp	r0, #1
34005bb6:	f571 0100 	sbcs.w	r1, r1, #8388608	@ 0x800000
34005bba:	f080 8425 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
34005bc2:	f5a1 0480 	sub.w	r4, r1, #4194304	@ 0x400000
34005bc6:	ea50 0104 	orrs.w	r1, r0, r4
34005bca:	f000 840e 	beq.w	340063ea <HAL_RCCEx_GetPeriphCLKFreq+0x876>
34005bce:	e9d7 0100 	ldrd	r0, r1, [r7]
34005bd2:	2801      	cmp	r0, #1
34005bd4:	f571 0180 	sbcs.w	r1, r1, #4194304	@ 0x400000
34005bd8:	f080 8416 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005bdc:	e9d7 0100 	ldrd	r0, r1, [r7]
34005be0:	f5a1 1400 	sub.w	r4, r1, #2097152	@ 0x200000
34005be4:	ea50 0104 	orrs.w	r1, r0, r4
34005be8:	f000 83fa 	beq.w	340063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>
34005bec:	e9d7 0100 	ldrd	r0, r1, [r7]
34005bf0:	2801      	cmp	r0, #1
34005bf2:	f571 1100 	sbcs.w	r1, r1, #2097152	@ 0x200000
34005bf6:	f080 8407 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
34005bfe:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
34005c02:	ea50 0104 	orrs.w	r1, r0, r4
34005c06:	f000 83e6 	beq.w	340063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
34005c0a:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c0e:	2801      	cmp	r0, #1
34005c10:	f571 1180 	sbcs.w	r1, r1, #1048576	@ 0x100000
34005c14:	f080 83f8 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005c18:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c1c:	f5a1 2400 	sub.w	r4, r1, #524288	@ 0x80000
34005c20:	ea50 0104 	orrs.w	r1, r0, r4
34005c24:	f000 83d2 	beq.w	340063cc <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34005c28:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c2c:	2801      	cmp	r0, #1
34005c2e:	f571 2100 	sbcs.w	r1, r1, #524288	@ 0x80000
34005c32:	f080 83e9 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005c36:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c3a:	f5a1 2480 	sub.w	r4, r1, #262144	@ 0x40000
34005c3e:	ea50 0104 	orrs.w	r1, r0, r4
34005c42:	f000 83be 	beq.w	340063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
34005c46:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c4a:	2801      	cmp	r0, #1
34005c4c:	f571 2180 	sbcs.w	r1, r1, #262144	@ 0x40000
34005c50:	f080 83da 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005c54:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c58:	f5a1 3400 	sub.w	r4, r1, #131072	@ 0x20000
34005c5c:	ea50 0104 	orrs.w	r1, r0, r4
34005c60:	f000 83aa 	beq.w	340063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
34005c64:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c68:	2801      	cmp	r0, #1
34005c6a:	f571 3100 	sbcs.w	r1, r1, #131072	@ 0x20000
34005c6e:	f080 83cb 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005c72:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c76:	f5a1 3480 	sub.w	r4, r1, #65536	@ 0x10000
34005c7a:	ea50 0104 	orrs.w	r1, r0, r4
34005c7e:	f000 8396 	beq.w	340063ae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
34005c82:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c86:	2801      	cmp	r0, #1
34005c88:	f571 3180 	sbcs.w	r1, r1, #65536	@ 0x10000
34005c8c:	f080 83bc 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005c90:	e9d7 0100 	ldrd	r0, r1, [r7]
34005c94:	f5a1 4400 	sub.w	r4, r1, #32768	@ 0x8000
34005c98:	ea50 0104 	orrs.w	r1, r0, r4
34005c9c:	f000 8382 	beq.w	340063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
34005ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
34005ca4:	2801      	cmp	r0, #1
34005ca6:	f571 4100 	sbcs.w	r1, r1, #32768	@ 0x8000
34005caa:	f080 83ad 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005cae:	e9d7 0100 	ldrd	r0, r1, [r7]
34005cb2:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
34005cb6:	ea50 0104 	orrs.w	r1, r0, r4
34005cba:	f000 836e 	beq.w	3400639a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
34005cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
34005cc2:	2801      	cmp	r0, #1
34005cc4:	f571 4180 	sbcs.w	r1, r1, #16384	@ 0x4000
34005cc8:	f080 839e 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
34005cd0:	f5a1 5400 	sub.w	r4, r1, #8192	@ 0x2000
34005cd4:	ea50 0104 	orrs.w	r1, r0, r4
34005cd8:	f000 835a 	beq.w	34006390 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>
34005cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
34005ce0:	2801      	cmp	r0, #1
34005ce2:	f571 5100 	sbcs.w	r1, r1, #8192	@ 0x2000
34005ce6:	f080 838f 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005cea:	e9d7 0100 	ldrd	r0, r1, [r7]
34005cee:	f5a1 5480 	sub.w	r4, r1, #4096	@ 0x1000
34005cf2:	ea50 0104 	orrs.w	r1, r0, r4
34005cf6:	f000 8346 	beq.w	34006386 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
34005cfa:	e9d7 0100 	ldrd	r0, r1, [r7]
34005cfe:	2801      	cmp	r0, #1
34005d00:	f571 5180 	sbcs.w	r1, r1, #4096	@ 0x1000
34005d04:	f080 8380 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005d08:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d0c:	f5a1 6400 	sub.w	r4, r1, #2048	@ 0x800
34005d10:	ea50 0104 	orrs.w	r1, r0, r4
34005d14:	f000 8332 	beq.w	3400637c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
34005d18:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d1c:	2801      	cmp	r0, #1
34005d1e:	f571 6100 	sbcs.w	r1, r1, #2048	@ 0x800
34005d22:	f080 8371 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005d26:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d2a:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
34005d2e:	ea50 0104 	orrs.w	r1, r0, r4
34005d32:	f000 831e 	beq.w	34006372 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
34005d36:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d3a:	2801      	cmp	r0, #1
34005d3c:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
34005d40:	f080 8362 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005d44:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d48:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
34005d4c:	ea50 0104 	orrs.w	r1, r0, r4
34005d50:	f000 830a 	beq.w	34006368 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
34005d54:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d58:	2801      	cmp	r0, #1
34005d5a:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
34005d5e:	f080 8353 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005d62:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d66:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
34005d6a:	ea50 0104 	orrs.w	r1, r0, r4
34005d6e:	f000 82f6 	beq.w	3400635e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
34005d72:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d76:	2801      	cmp	r0, #1
34005d78:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
34005d7c:	f080 8344 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005d80:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d84:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
34005d88:	ea50 0104 	orrs.w	r1, r0, r4
34005d8c:	f000 82e2 	beq.w	34006354 <HAL_RCCEx_GetPeriphCLKFreq+0x7e0>
34005d90:	e9d7 0100 	ldrd	r0, r1, [r7]
34005d94:	2801      	cmp	r0, #1
34005d96:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
34005d9a:	f080 8335 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
34005da2:	f1a1 0420 	sub.w	r4, r1, #32
34005da6:	ea50 0104 	orrs.w	r1, r0, r4
34005daa:	f000 82ce 	beq.w	3400634a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
34005dae:	e9d7 0100 	ldrd	r0, r1, [r7]
34005db2:	2801      	cmp	r0, #1
34005db4:	f171 0120 	sbcs.w	r1, r1, #32
34005db8:	f080 8326 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
34005dc0:	f1a1 0410 	sub.w	r4, r1, #16
34005dc4:	ea50 0104 	orrs.w	r1, r0, r4
34005dc8:	f000 82ba 	beq.w	34006340 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
34005dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
34005dd0:	2801      	cmp	r0, #1
34005dd2:	f171 0110 	sbcs.w	r1, r1, #16
34005dd6:	f080 8317 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005dda:	e9d7 0100 	ldrd	r0, r1, [r7]
34005dde:	f1a1 0408 	sub.w	r4, r1, #8
34005de2:	ea50 0104 	orrs.w	r1, r0, r4
34005de6:	f000 82a6 	beq.w	34006336 <HAL_RCCEx_GetPeriphCLKFreq+0x7c2>
34005dea:	e9d7 0100 	ldrd	r0, r1, [r7]
34005dee:	2801      	cmp	r0, #1
34005df0:	f171 0108 	sbcs.w	r1, r1, #8
34005df4:	f080 8308 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005df8:	e9d7 0100 	ldrd	r0, r1, [r7]
34005dfc:	1f0c      	subs	r4, r1, #4
34005dfe:	ea50 0104 	orrs.w	r1, r0, r4
34005e02:	f000 8293 	beq.w	3400632c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
34005e06:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e0a:	2801      	cmp	r0, #1
34005e0c:	f171 0104 	sbcs.w	r1, r1, #4
34005e10:	f080 82fa 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005e14:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e18:	1e8c      	subs	r4, r1, #2
34005e1a:	ea50 0104 	orrs.w	r1, r0, r4
34005e1e:	f000 8280 	beq.w	34006322 <HAL_RCCEx_GetPeriphCLKFreq+0x7ae>
34005e22:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e26:	2801      	cmp	r0, #1
34005e28:	f171 0102 	sbcs.w	r1, r1, #2
34005e2c:	f080 82ec 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005e30:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e34:	1e4c      	subs	r4, r1, #1
34005e36:	ea50 0104 	orrs.w	r1, r0, r4
34005e3a:	f000 826d 	beq.w	34006318 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
34005e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e42:	2801      	cmp	r0, #1
34005e44:	f171 0101 	sbcs.w	r1, r1, #1
34005e48:	f080 82de 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e50:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
34005e54:	4321      	orrs	r1, r4
34005e56:	f000 825a 	beq.w	3400630e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
34005e5a:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e5e:	4cda      	ldr	r4, [pc, #872]	@ (340061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>)
34005e60:	42a0      	cmp	r0, r4
34005e62:	f171 0100 	sbcs.w	r1, r1, #0
34005e66:	f080 82cf 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005e6a:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e6e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
34005e72:	4321      	orrs	r1, r4
34005e74:	f000 8246 	beq.w	34006304 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
34005e78:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e7c:	4cd3      	ldr	r4, [pc, #844]	@ (340061cc <HAL_RCCEx_GetPeriphCLKFreq+0x658>)
34005e7e:	42a0      	cmp	r0, r4
34005e80:	f171 0100 	sbcs.w	r1, r1, #0
34005e84:	f080 82c0 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005e88:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e8c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
34005e90:	4321      	orrs	r1, r4
34005e92:	f000 8232 	beq.w	340062fa <HAL_RCCEx_GetPeriphCLKFreq+0x786>
34005e96:	e9d7 0100 	ldrd	r0, r1, [r7]
34005e9a:	4ccd      	ldr	r4, [pc, #820]	@ (340061d0 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>)
34005e9c:	42a0      	cmp	r0, r4
34005e9e:	f171 0100 	sbcs.w	r1, r1, #0
34005ea2:	f080 82b1 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005ea6:	e9d7 0100 	ldrd	r0, r1, [r7]
34005eaa:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
34005eae:	4321      	orrs	r1, r4
34005eb0:	f000 821e 	beq.w	340062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
34005eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
34005eb8:	4cc6      	ldr	r4, [pc, #792]	@ (340061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>)
34005eba:	42a0      	cmp	r0, r4
34005ebc:	f171 0100 	sbcs.w	r1, r1, #0
34005ec0:	f080 82a2 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005ec4:	e9d7 0100 	ldrd	r0, r1, [r7]
34005ec8:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
34005ecc:	4321      	orrs	r1, r4
34005ece:	f000 820b 	beq.w	340062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
34005ed2:	e9d7 0100 	ldrd	r0, r1, [r7]
34005ed6:	4cc0      	ldr	r4, [pc, #768]	@ (340061d8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>)
34005ed8:	42a0      	cmp	r0, r4
34005eda:	f171 0100 	sbcs.w	r1, r1, #0
34005ede:	f080 8293 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
34005ee6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
34005eea:	4321      	orrs	r1, r4
34005eec:	f000 81f7 	beq.w	340062de <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
34005ef0:	e9d7 0100 	ldrd	r0, r1, [r7]
34005ef4:	4cb9      	ldr	r4, [pc, #740]	@ (340061dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>)
34005ef6:	42a0      	cmp	r0, r4
34005ef8:	f171 0100 	sbcs.w	r1, r1, #0
34005efc:	f080 8284 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005f00:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f04:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
34005f08:	4321      	orrs	r1, r4
34005f0a:	f000 81e2 	beq.w	340062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
34005f0e:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f12:	4cb3      	ldr	r4, [pc, #716]	@ (340061e0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
34005f14:	42a0      	cmp	r0, r4
34005f16:	f171 0100 	sbcs.w	r1, r1, #0
34005f1a:	f080 8275 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f22:	f100 447f 	add.w	r4, r0, #4278190080	@ 0xff000000
34005f26:	4321      	orrs	r1, r4
34005f28:	f000 81cd 	beq.w	340062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
34005f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f30:	4cac      	ldr	r4, [pc, #688]	@ (340061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
34005f32:	42a0      	cmp	r0, r4
34005f34:	f171 0100 	sbcs.w	r1, r1, #0
34005f38:	f080 8266 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f40:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
34005f44:	4321      	orrs	r1, r4
34005f46:	f000 81b8 	beq.w	340062ba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
34005f4a:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f4e:	4ca6      	ldr	r4, [pc, #664]	@ (340061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
34005f50:	42a0      	cmp	r0, r4
34005f52:	f171 0100 	sbcs.w	r1, r1, #0
34005f56:	f080 8257 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005f5a:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f5e:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
34005f62:	4321      	orrs	r1, r4
34005f64:	f000 81a4 	beq.w	340062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
34005f68:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f6c:	4c9f      	ldr	r4, [pc, #636]	@ (340061ec <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
34005f6e:	42a0      	cmp	r0, r4
34005f70:	f171 0100 	sbcs.w	r1, r1, #0
34005f74:	f080 8248 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005f78:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f7c:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
34005f80:	4321      	orrs	r1, r4
34005f82:	f000 8190 	beq.w	340062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
34005f86:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f8a:	4c99      	ldr	r4, [pc, #612]	@ (340061f0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>)
34005f8c:	42a0      	cmp	r0, r4
34005f8e:	f171 0100 	sbcs.w	r1, r1, #0
34005f92:	f080 8239 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005f96:	e9d7 0100 	ldrd	r0, r1, [r7]
34005f9a:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
34005f9e:	4321      	orrs	r1, r4
34005fa0:	f000 817c 	beq.w	3400629c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
34005fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
34005fa8:	4c92      	ldr	r4, [pc, #584]	@ (340061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>)
34005faa:	42a0      	cmp	r0, r4
34005fac:	f171 0100 	sbcs.w	r1, r1, #0
34005fb0:	f080 822a 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
34005fb8:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
34005fbc:	4321      	orrs	r1, r4
34005fbe:	f000 8168 	beq.w	34006292 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
34005fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
34005fc6:	4c8c      	ldr	r4, [pc, #560]	@ (340061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>)
34005fc8:	42a0      	cmp	r0, r4
34005fca:	f171 0100 	sbcs.w	r1, r1, #0
34005fce:	f080 821b 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005fd2:	e9d7 0100 	ldrd	r0, r1, [r7]
34005fd6:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
34005fda:	4321      	orrs	r1, r4
34005fdc:	f000 8154 	beq.w	34006288 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
34005fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
34005fe4:	4c85      	ldr	r4, [pc, #532]	@ (340061fc <HAL_RCCEx_GetPeriphCLKFreq+0x688>)
34005fe6:	42a0      	cmp	r0, r4
34005fe8:	f171 0100 	sbcs.w	r1, r1, #0
34005fec:	f080 820c 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34005ff0:	e9d7 0100 	ldrd	r0, r1, [r7]
34005ff4:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
34005ff8:	4321      	orrs	r1, r4
34005ffa:	f000 8140 	beq.w	3400627e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
34005ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
34006002:	4c7f      	ldr	r4, [pc, #508]	@ (34006200 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
34006004:	42a0      	cmp	r0, r4
34006006:	f171 0100 	sbcs.w	r1, r1, #0
3400600a:	f080 81fd 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400600e:	e9d7 0100 	ldrd	r0, r1, [r7]
34006012:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
34006016:	4321      	orrs	r1, r4
34006018:	f000 812c 	beq.w	34006274 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
3400601c:	e9d7 0100 	ldrd	r0, r1, [r7]
34006020:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
34006024:	f171 0100 	sbcs.w	r1, r1, #0
34006028:	f080 81ee 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400602c:	e9d7 0100 	ldrd	r0, r1, [r7]
34006030:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
34006034:	4321      	orrs	r1, r4
34006036:	f000 8118 	beq.w	3400626a <HAL_RCCEx_GetPeriphCLKFreq+0x6f6>
3400603a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400603e:	f248 0401 	movw	r4, #32769	@ 0x8001
34006042:	42a0      	cmp	r0, r4
34006044:	f171 0100 	sbcs.w	r1, r1, #0
34006048:	f080 81de 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400604c:	e9d7 0100 	ldrd	r0, r1, [r7]
34006050:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
34006054:	4321      	orrs	r1, r4
34006056:	f000 8103 	beq.w	34006260 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
3400605a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400605e:	f244 0401 	movw	r4, #16385	@ 0x4001
34006062:	42a0      	cmp	r0, r4
34006064:	f171 0100 	sbcs.w	r1, r1, #0
34006068:	f080 81ce 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400606c:	e9d7 0100 	ldrd	r0, r1, [r7]
34006070:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
34006074:	4321      	orrs	r1, r4
34006076:	f000 80ee 	beq.w	34006256 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
3400607a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400607e:	f242 0401 	movw	r4, #8193	@ 0x2001
34006082:	42a0      	cmp	r0, r4
34006084:	f171 0100 	sbcs.w	r1, r1, #0
34006088:	f080 81be 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400608c:	e9d7 0100 	ldrd	r0, r1, [r7]
34006090:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
34006094:	4321      	orrs	r1, r4
34006096:	f000 80d9 	beq.w	3400624c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
3400609a:	e9d7 0100 	ldrd	r0, r1, [r7]
3400609e:	f241 0401 	movw	r4, #4097	@ 0x1001
340060a2:	42a0      	cmp	r0, r4
340060a4:	f171 0100 	sbcs.w	r1, r1, #0
340060a8:	f080 81ae 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340060ac:	e9d7 0100 	ldrd	r0, r1, [r7]
340060b0:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
340060b4:	4321      	orrs	r1, r4
340060b6:	f000 80c4 	beq.w	34006242 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
340060ba:	e9d7 0100 	ldrd	r0, r1, [r7]
340060be:	f640 0401 	movw	r4, #2049	@ 0x801
340060c2:	42a0      	cmp	r0, r4
340060c4:	f171 0100 	sbcs.w	r1, r1, #0
340060c8:	f080 819e 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340060cc:	e9d7 0100 	ldrd	r0, r1, [r7]
340060d0:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
340060d4:	4321      	orrs	r1, r4
340060d6:	f000 80af 	beq.w	34006238 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
340060da:	e9d7 0100 	ldrd	r0, r1, [r7]
340060de:	f240 4401 	movw	r4, #1025	@ 0x401
340060e2:	42a0      	cmp	r0, r4
340060e4:	f171 0100 	sbcs.w	r1, r1, #0
340060e8:	f080 818e 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
340060ec:	e9d7 0100 	ldrd	r0, r1, [r7]
340060f0:	2821      	cmp	r0, #33	@ 0x21
340060f2:	f171 0100 	sbcs.w	r1, r1, #0
340060f6:	d255      	bcs.n	340061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
340060f8:	e9d7 0100 	ldrd	r0, r1, [r7]
340060fc:	4301      	orrs	r1, r0
340060fe:	f000 8183 	beq.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34006102:	e9d7 0100 	ldrd	r0, r1, [r7]
34006106:	1e42      	subs	r2, r0, #1
34006108:	f141 33ff 	adc.w	r3, r1, #4294967295
3400610c:	2a20      	cmp	r2, #32
3400610e:	f173 0100 	sbcs.w	r1, r3, #0
34006112:	f080 8179 	bcs.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
34006116:	2a1f      	cmp	r2, #31
34006118:	f200 8176 	bhi.w	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
3400611c:	a101      	add	r1, pc, #4	@ (adr r1, 34006124 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
3400611e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
34006122:	bf00      	nop
34006124:	340061b3 	.word	0x340061b3
34006128:	340061bd 	.word	0x340061bd
3400612c:	34006409 	.word	0x34006409
34006130:	3400620d 	.word	0x3400620d
34006134:	34006409 	.word	0x34006409
34006138:	34006409 	.word	0x34006409
3400613c:	34006409 	.word	0x34006409
34006140:	34006205 	.word	0x34006205
34006144:	34006409 	.word	0x34006409
34006148:	34006409 	.word	0x34006409
3400614c:	34006409 	.word	0x34006409
34006150:	34006409 	.word	0x34006409
34006154:	34006409 	.word	0x34006409
34006158:	34006409 	.word	0x34006409
3400615c:	34006409 	.word	0x34006409
34006160:	34006217 	.word	0x34006217
34006164:	34006409 	.word	0x34006409
34006168:	34006409 	.word	0x34006409
3400616c:	34006409 	.word	0x34006409
34006170:	34006409 	.word	0x34006409
34006174:	34006409 	.word	0x34006409
34006178:	34006409 	.word	0x34006409
3400617c:	34006409 	.word	0x34006409
34006180:	34006409 	.word	0x34006409
34006184:	34006409 	.word	0x34006409
34006188:	34006409 	.word	0x34006409
3400618c:	34006409 	.word	0x34006409
34006190:	34006409 	.word	0x34006409
34006194:	34006409 	.word	0x34006409
34006198:	34006409 	.word	0x34006409
3400619c:	34006409 	.word	0x34006409
340061a0:	34006223 	.word	0x34006223
340061a4:	e9d7 2300 	ldrd	r2, r3, [r7]
340061a8:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
340061ac:	430b      	orrs	r3, r1
340061ae:	d03e      	beq.n	3400622e <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
      break;

    default:
      /* Unexpected case, frequency is by default set to 0 */
      break;
340061b0:	e12a      	b.n	34006408 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
      frequency = RCCEx_GetADCCLKFreq(LL_RCC_ADC_CLKSOURCE);
340061b2:	2070      	movs	r0, #112	@ 0x70
340061b4:	f000 fb90 	bl	340068d8 <RCCEx_GetADCCLKFreq>
340061b8:	60f8      	str	r0, [r7, #12]
      break;
340061ba:	e126      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetADFCLKFreq(LL_RCC_ADF1_CLKSOURCE);
340061bc:	2007      	movs	r0, #7
340061be:	f000 fc8d 	bl	34006adc <RCCEx_GetADFCLKFreq>
340061c2:	60f8      	str	r0, [r7, #12]
      break;
340061c4:	e121      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
340061c6:	bf00      	nop
340061c8:	80000001 	.word	0x80000001
340061cc:	40000001 	.word	0x40000001
340061d0:	20000001 	.word	0x20000001
340061d4:	10000001 	.word	0x10000001
340061d8:	08000001 	.word	0x08000001
340061dc:	04000001 	.word	0x04000001
340061e0:	02000001 	.word	0x02000001
340061e4:	01000001 	.word	0x01000001
340061e8:	00800001 	.word	0x00800001
340061ec:	00400001 	.word	0x00400001
340061f0:	00200001 	.word	0x00200001
340061f4:	00100001 	.word	0x00100001
340061f8:	00080001 	.word	0x00080001
340061fc:	00040001 	.word	0x00040001
34006200:	00020001 	.word	0x00020001
      frequency = RCCEx_GetCSICLKFreq();
34006204:	f000 ff0c 	bl	34007020 <RCCEx_GetCSICLKFreq>
34006208:	60f8      	str	r0, [r7, #12]
      break;
3400620a:	e0fe      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400620c:	2007      	movs	r0, #7
3400620e:	f000 fd51 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34006212:	60f8      	str	r0, [r7, #12]
      break;
34006214:	e0f9      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetDCMIPPCLKFreq(LL_RCC_DCMIPP_CLKSOURCE);
34006216:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
3400621a:	f000 ff4d 	bl	340070b8 <RCCEx_GetDCMIPPCLKFreq>
3400621e:	60f8      	str	r0, [r7, #12]
      break;
34006220:	e0f3      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1CLKFreq(LL_RCC_ETH1_CLKSOURCE);
34006222:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
34006226:	f000 ffd1 	bl	340071cc <RCCEx_GetETH1CLKFreq>
3400622a:	60f8      	str	r0, [r7, #12]
      break;
3400622c:	e0ed      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetETH1PTPCLKFreq(LL_RCC_ETH1PTP_CLKSOURCE);
3400622e:	2003      	movs	r0, #3
34006230:	f001 f84c 	bl	340072cc <RCCEx_GetETH1PTPCLKFreq>
34006234:	60f8      	str	r0, [r7, #12]
      break;
34006236:	e0e8      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFDCANCLKFreq(LL_RCC_FDCAN_CLKSOURCE);
34006238:	2003      	movs	r0, #3
3400623a:	f001 f8cb 	bl	340073d4 <RCCEx_GetFDCANCLKFreq>
3400623e:	60f8      	str	r0, [r7, #12]
      break;
34006240:	e0e3      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetFMCCLKFreq(LL_RCC_FMC_CLKSOURCE);
34006242:	2030      	movs	r0, #48	@ 0x30
34006244:	f001 f946 	bl	340074d4 <RCCEx_GetFMCCLKFreq>
34006248:	60f8      	str	r0, [r7, #12]
      break;
3400624a:	e0de      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
3400624c:	4871      	ldr	r0, [pc, #452]	@ (34006414 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>)
3400624e:	f001 f9f9 	bl	34007644 <RCCEx_GetI2CCLKFreq>
34006252:	60f8      	str	r0, [r7, #12]
      break;
34006254:	e0d9      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34006256:	4870      	ldr	r0, [pc, #448]	@ (34006418 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>)
34006258:	f001 f9f4 	bl	34007644 <RCCEx_GetI2CCLKFreq>
3400625c:	60f8      	str	r0, [r7, #12]
      break;
3400625e:	e0d4      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34006260:	486e      	ldr	r0, [pc, #440]	@ (3400641c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
34006262:	f001 f9ef 	bl	34007644 <RCCEx_GetI2CCLKFreq>
34006266:	60f8      	str	r0, [r7, #12]
      break;
34006268:	e0cf      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
3400626a:	486d      	ldr	r0, [pc, #436]	@ (34006420 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
3400626c:	f001 f9ea 	bl	34007644 <RCCEx_GetI2CCLKFreq>
34006270:	60f8      	str	r0, [r7, #12]
      break;
34006272:	e0ca      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34006274:	486b      	ldr	r0, [pc, #428]	@ (34006424 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
34006276:	f001 fb8d 	bl	34007994 <RCCEx_GetI3CCLKFreq>
3400627a:	60f8      	str	r0, [r7, #12]
      break;
3400627c:	e0c5      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3400627e:	486a      	ldr	r0, [pc, #424]	@ (34006428 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>)
34006280:	f001 fb88 	bl	34007994 <RCCEx_GetI3CCLKFreq>
34006284:	60f8      	str	r0, [r7, #12]
      break;
34006286:	e0c0      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34006288:	4868      	ldr	r0, [pc, #416]	@ (3400642c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>)
3400628a:	f001 fcb7 	bl	34007bfc <RCCEx_GetLPTIMCLKFreq>
3400628e:	60f8      	str	r0, [r7, #12]
      break;
34006290:	e0bb      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34006292:	4867      	ldr	r0, [pc, #412]	@ (34006430 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>)
34006294:	f001 fcb2 	bl	34007bfc <RCCEx_GetLPTIMCLKFreq>
34006298:	60f8      	str	r0, [r7, #12]
      break;
3400629a:	e0b6      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
3400629c:	4865      	ldr	r0, [pc, #404]	@ (34006434 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>)
3400629e:	f001 fcad 	bl	34007bfc <RCCEx_GetLPTIMCLKFreq>
340062a2:	60f8      	str	r0, [r7, #12]
      break;
340062a4:	e0b1      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
340062a6:	4864      	ldr	r0, [pc, #400]	@ (34006438 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>)
340062a8:	f001 fca8 	bl	34007bfc <RCCEx_GetLPTIMCLKFreq>
340062ac:	60f8      	str	r0, [r7, #12]
      break;
340062ae:	e0ac      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
340062b0:	4862      	ldr	r0, [pc, #392]	@ (3400643c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>)
340062b2:	f001 fca3 	bl	34007bfc <RCCEx_GetLPTIMCLKFreq>
340062b6:	60f8      	str	r0, [r7, #12]
      break;
340062b8:	e0a7      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLPUARTCLKFreq(LL_RCC_LPUART1_CLKSOURCE);
340062ba:	f44f 60e0 	mov.w	r0, #1792	@ 0x700
340062be:	f001 fe47 	bl	34007f50 <RCCEx_GetLPUARTCLKFreq>
340062c2:	60f8      	str	r0, [r7, #12]
      break;
340062c4:	e0a1      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetLTDCCLKFreq(LL_RCC_LTDC_CLKSOURCE);
340062c6:	f04f 7040 	mov.w	r0, #50331648	@ 0x3000000
340062ca:	f001 ff43 	bl	34008154 <RCCEx_GetLTDCCLKFreq>
340062ce:	60f8      	str	r0, [r7, #12]
      break;
340062d0:	e09b      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetMDFCLKFreq(LL_RCC_MDF1_CLKSOURCE);
340062d2:	f44f 20e0 	mov.w	r0, #458752	@ 0x70000
340062d6:	f001 ffc7 	bl	34008268 <RCCEx_GetMDFCLKFreq>
340062da:	60f8      	str	r0, [r7, #12]
      break;
340062dc:	e095      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetPSSICLKFreq(LL_RCC_PSSI_CLKSOURCE);
340062de:	2030      	movs	r0, #48	@ 0x30
340062e0:	f002 f8cc 	bl	3400847c <RCCEx_GetPSSICLKFreq>
340062e4:	60f8      	str	r0, [r7, #12]
      break;
340062e6:	e090      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetRTCCLKFreq();
340062e8:	f002 f94a 	bl	34008580 <RCCEx_GetRTCCLKFreq>
340062ec:	60f8      	str	r0, [r7, #12]
      break;
340062ee:	e08c      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
340062f0:	4853      	ldr	r0, [pc, #332]	@ (34006440 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>)
340062f2:	f002 f997 	bl	34008624 <RCCEx_GetSAICLKFreq>
340062f6:	60f8      	str	r0, [r7, #12]
      break;
340062f8:	e087      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
340062fa:	4852      	ldr	r0, [pc, #328]	@ (34006444 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
340062fc:	f002 f992 	bl	34008624 <RCCEx_GetSAICLKFreq>
34006300:	60f8      	str	r0, [r7, #12]
      break;
34006302:	e082      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34006304:	4850      	ldr	r0, [pc, #320]	@ (34006448 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
34006306:	f002 faf3 	bl	340088f0 <RCCEx_GetSDMMCCLKFreq>
3400630a:	60f8      	str	r0, [r7, #12]
      break;
3400630c:	e07d      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
3400630e:	484f      	ldr	r0, [pc, #316]	@ (3400644c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>)
34006310:	f002 faee 	bl	340088f0 <RCCEx_GetSDMMCCLKFreq>
34006314:	60f8      	str	r0, [r7, #12]
      break;
34006316:	e078      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34006318:	2007      	movs	r0, #7
3400631a:	f002 fbd3 	bl	34008ac4 <RCCEx_GetSPDIFRXCLKFreq>
3400631e:	60f8      	str	r0, [r7, #12]
      break;
34006320:	e073      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34006322:	484b      	ldr	r0, [pc, #300]	@ (34006450 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>)
34006324:	f002 fcb2 	bl	34008c8c <RCCEx_GetSPICLKFreq>
34006328:	60f8      	str	r0, [r7, #12]
      break;
3400632a:	e06e      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
3400632c:	4849      	ldr	r0, [pc, #292]	@ (34006454 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>)
3400632e:	f002 fcad 	bl	34008c8c <RCCEx_GetSPICLKFreq>
34006332:	60f8      	str	r0, [r7, #12]
      break;
34006334:	e069      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
34006336:	4848      	ldr	r0, [pc, #288]	@ (34006458 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>)
34006338:	f002 fca8 	bl	34008c8c <RCCEx_GetSPICLKFreq>
3400633c:	60f8      	str	r0, [r7, #12]
      break;
3400633e:	e064      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34006340:	4846      	ldr	r0, [pc, #280]	@ (3400645c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>)
34006342:	f002 fca3 	bl	34008c8c <RCCEx_GetSPICLKFreq>
34006346:	60f8      	str	r0, [r7, #12]
      break;
34006348:	e05f      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
3400634a:	4845      	ldr	r0, [pc, #276]	@ (34006460 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>)
3400634c:	f002 fc9e 	bl	34008c8c <RCCEx_GetSPICLKFreq>
34006350:	60f8      	str	r0, [r7, #12]
      break;
34006352:	e05a      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34006354:	4843      	ldr	r0, [pc, #268]	@ (34006464 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>)
34006356:	f002 fc99 	bl	34008c8c <RCCEx_GetSPICLKFreq>
3400635a:	60f8      	str	r0, [r7, #12]
      break;
3400635c:	e055      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
3400635e:	4842      	ldr	r0, [pc, #264]	@ (34006468 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>)
34006360:	f003 f990 	bl	34009684 <RCCEx_GetUSARTCLKFreq>
34006364:	60f8      	str	r0, [r7, #12]
      break;
34006366:	e050      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34006368:	4840      	ldr	r0, [pc, #256]	@ (3400646c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>)
3400636a:	f003 f98b 	bl	34009684 <RCCEx_GetUSARTCLKFreq>
3400636e:	60f8      	str	r0, [r7, #12]
      break;
34006370:	e04b      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34006372:	483f      	ldr	r0, [pc, #252]	@ (34006470 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>)
34006374:	f003 f986 	bl	34009684 <RCCEx_GetUSARTCLKFreq>
34006378:	60f8      	str	r0, [r7, #12]
      break;
3400637a:	e046      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
3400637c:	483d      	ldr	r0, [pc, #244]	@ (34006474 <HAL_RCCEx_GetPeriphCLKFreq+0x900>)
3400637e:	f002 ff57 	bl	34009230 <RCCEx_GetUARTCLKFreq>
34006382:	60f8      	str	r0, [r7, #12]
      break;
34006384:	e041      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34006386:	483c      	ldr	r0, [pc, #240]	@ (34006478 <HAL_RCCEx_GetPeriphCLKFreq+0x904>)
34006388:	f002 ff52 	bl	34009230 <RCCEx_GetUARTCLKFreq>
3400638c:	60f8      	str	r0, [r7, #12]
      break;
3400638e:	e03c      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
34006390:	483a      	ldr	r0, [pc, #232]	@ (3400647c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34006392:	f003 f977 	bl	34009684 <RCCEx_GetUSARTCLKFreq>
34006396:	60f8      	str	r0, [r7, #12]
      break;
34006398:	e037      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
3400639a:	4839      	ldr	r0, [pc, #228]	@ (34006480 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
3400639c:	f002 ff48 	bl	34009230 <RCCEx_GetUARTCLKFreq>
340063a0:	60f8      	str	r0, [r7, #12]
      break;
340063a2:	e032      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
340063a4:	4837      	ldr	r0, [pc, #220]	@ (34006484 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
340063a6:	f002 ff43 	bl	34009230 <RCCEx_GetUARTCLKFreq>
340063aa:	60f8      	str	r0, [r7, #12]
      break;
340063ac:	e02d      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
340063ae:	4836      	ldr	r0, [pc, #216]	@ (34006488 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
340063b0:	f002 ff3e 	bl	34009230 <RCCEx_GetUARTCLKFreq>
340063b4:	60f8      	str	r0, [r7, #12]
      break;
340063b6:	e028      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
340063b8:	4834      	ldr	r0, [pc, #208]	@ (3400648c <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
340063ba:	f003 f963 	bl	34009684 <RCCEx_GetUSARTCLKFreq>
340063be:	60f8      	str	r0, [r7, #12]
      break;
340063c0:	e023      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
340063c2:	4833      	ldr	r0, [pc, #204]	@ (34006490 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
340063c4:	f003 fc3e 	bl	34009c44 <RCCEx_GetOTGPHYCKREFCLKFreq>
340063c8:	60f8      	str	r0, [r7, #12]
      break;
340063ca:	e01e      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
340063cc:	4831      	ldr	r0, [pc, #196]	@ (34006494 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
340063ce:	f003 fb83 	bl	34009ad8 <RCCEx_GetOTGPHYCLKFreq>
340063d2:	60f8      	str	r0, [r7, #12]
      break;
340063d4:	e019      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
340063d6:	4830      	ldr	r0, [pc, #192]	@ (34006498 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
340063d8:	f003 fc34 	bl	34009c44 <RCCEx_GetOTGPHYCKREFCLKFreq>
340063dc:	60f8      	str	r0, [r7, #12]
      break;
340063de:	e014      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
340063e0:	482e      	ldr	r0, [pc, #184]	@ (3400649c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
340063e2:	f003 fb79 	bl	34009ad8 <RCCEx_GetOTGPHYCLKFreq>
340063e6:	60f8      	str	r0, [r7, #12]
      break;
340063e8:	e00f      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
340063ea:	482d      	ldr	r0, [pc, #180]	@ (340064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
340063ec:	f003 fc7a 	bl	34009ce4 <RCCEx_GetXSPICLKFreq>
340063f0:	60f8      	str	r0, [r7, #12]
      break;
340063f2:	e00a      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
340063f4:	482b      	ldr	r0, [pc, #172]	@ (340064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
340063f6:	f003 fc75 	bl	34009ce4 <RCCEx_GetXSPICLKFreq>
340063fa:	60f8      	str	r0, [r7, #12]
      break;
340063fc:	e005      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
340063fe:	482a      	ldr	r0, [pc, #168]	@ (340064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34006400:	f003 fc70 	bl	34009ce4 <RCCEx_GetXSPICLKFreq>
34006404:	60f8      	str	r0, [r7, #12]
      break;
34006406:	e000      	b.n	3400640a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
      break;
34006408:	bf00      	nop
  }

  return frequency;
3400640a:	68fb      	ldr	r3, [r7, #12]
}
3400640c:	4618      	mov	r0, r3
3400640e:	3714      	adds	r7, #20
34006410:	46bd      	mov	sp, r7
34006412:	bd90      	pop	{r4, r7, pc}
34006414:	0700000c 	.word	0x0700000c
34006418:	0700040c 	.word	0x0700040c
3400641c:	0700080c 	.word	0x0700080c
34006420:	07000c0c 	.word	0x07000c0c
34006424:	0700100c 	.word	0x0700100c
34006428:	0700140c 	.word	0x0700140c
3400642c:	0700082c 	.word	0x0700082c
34006430:	07000c2c 	.word	0x07000c2c
34006434:	0700102c 	.word	0x0700102c
34006438:	0700142c 	.word	0x0700142c
3400643c:	0700182c 	.word	0x0700182c
34006440:	07001418 	.word	0x07001418
34006444:	07001818 	.word	0x07001818
34006448:	0300001c 	.word	0x0300001c
3400644c:	0300041c 	.word	0x0300041c
34006450:	07000420 	.word	0x07000420
34006454:	07000820 	.word	0x07000820
34006458:	07000c20 	.word	0x07000c20
3400645c:	07001020 	.word	0x07001020
34006460:	07001420 	.word	0x07001420
34006464:	07001820 	.word	0x07001820
34006468:	07000030 	.word	0x07000030
3400646c:	07000430 	.word	0x07000430
34006470:	07000830 	.word	0x07000830
34006474:	07000c30 	.word	0x07000c30
34006478:	07001030 	.word	0x07001030
3400647c:	07001430 	.word	0x07001430
34006480:	07001830 	.word	0x07001830
34006484:	07001c30 	.word	0x07001c30
34006488:	07000034 	.word	0x07000034
3400648c:	07000434 	.word	0x07000434
34006490:	01001014 	.word	0x01001014
34006494:	03000c14 	.word	0x03000c14
34006498:	01001814 	.word	0x01001814
3400649c:	03001414 	.word	0x03001414
340064a0:	03000014 	.word	0x03000014
340064a4:	03000414 	.word	0x03000414
340064a8:	03000814 	.word	0x03000814

340064ac <HAL_RCCEx_GetPLL1CLKFreq>:
  * @brief  Return PLL1 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL1 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL1CLKFreq(void)
{
340064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
340064ae:	b087      	sub	sp, #28
340064b0:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340064b2:	2300      	movs	r3, #0
340064b4:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL1_IsReady() != 0U)
340064b6:	f7fc fa05 	bl	340028c4 <LL_RCC_PLL1_IsReady>
340064ba:	4603      	mov	r3, r0
340064bc:	2b00      	cmp	r3, #0
340064be:	d02a      	beq.n	34006516 <HAL_RCCEx_GetPLL1CLKFreq+0x6a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
340064c0:	f7fc fa68 	bl	34002994 <LL_RCC_PLL1P_IsEnabled>
340064c4:	4603      	mov	r3, r0
340064c6:	2b00      	cmp	r3, #0
340064c8:	d031      	beq.n	3400652e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
340064ca:	f7fc f9ed 	bl	340028a8 <LL_RCC_PLL1_GetSource>
340064ce:	4603      	mov	r3, r0
340064d0:	4618      	mov	r0, r3
340064d2:	f000 f957 	bl	34006784 <RCCEx_GetPLLSourceFreq>
340064d6:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340064d8:	68bb      	ldr	r3, [r7, #8]
340064da:	2b00      	cmp	r3, #0
340064dc:	d027      	beq.n	3400652e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL1_GetM();
340064de:	f7fc fa29 	bl	34002934 <LL_RCC_PLL1_GetM>
340064e2:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
340064e4:	687b      	ldr	r3, [r7, #4]
340064e6:	2b00      	cmp	r3, #0
340064e8:	d021      	beq.n	3400652e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
340064ea:	f7fc fa13 	bl	34002914 <LL_RCC_PLL1_GetN>
340064ee:	4605      	mov	r5, r0
340064f0:	f7fc fa64 	bl	340029bc <LL_RCC_PLL1_GetFRACN>
340064f4:	4606      	mov	r6, r0
340064f6:	f7fc fa2d 	bl	34002954 <LL_RCC_PLL1_GetP1>
340064fa:	4604      	mov	r4, r0
340064fc:	f7fc fa3a 	bl	34002974 <LL_RCC_PLL1_GetP2>
34006500:	4603      	mov	r3, r0
34006502:	9301      	str	r3, [sp, #4]
34006504:	9400      	str	r4, [sp, #0]
34006506:	4633      	mov	r3, r6
34006508:	462a      	mov	r2, r5
3400650a:	6879      	ldr	r1, [r7, #4]
3400650c:	68b8      	ldr	r0, [r7, #8]
3400650e:	f000 f997 	bl	34006840 <RCCEx_CalcPLLFreq>
34006512:	60f8      	str	r0, [r7, #12]
34006514:	e00b      	b.n	3400652e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
                                            LL_RCC_PLL1_GetP1(), LL_RCC_PLL1_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL1_IsEnabledBypass() != 0U)
34006516:	f7fc f9e9 	bl	340028ec <LL_RCC_PLL1_IsEnabledBypass>
3400651a:	4603      	mov	r3, r0
3400651c:	2b00      	cmp	r3, #0
3400651e:	d006      	beq.n	3400652e <HAL_RCCEx_GetPLL1CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34006520:	f7fc f9c2 	bl	340028a8 <LL_RCC_PLL1_GetSource>
34006524:	4603      	mov	r3, r0
34006526:	4618      	mov	r0, r3
34006528:	f000 f92c 	bl	34006784 <RCCEx_GetPLLSourceFreq>
3400652c:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
3400652e:	68fb      	ldr	r3, [r7, #12]
}
34006530:	4618      	mov	r0, r3
34006532:	3714      	adds	r7, #20
34006534:	46bd      	mov	sp, r7
34006536:	bdf0      	pop	{r4, r5, r6, r7, pc}

34006538 <HAL_RCCEx_GetPLL2CLKFreq>:
  * @brief  Return PLL2 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL2 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL2CLKFreq(void)
{
34006538:	b5f0      	push	{r4, r5, r6, r7, lr}
3400653a:	b087      	sub	sp, #28
3400653c:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3400653e:	2300      	movs	r3, #0
34006540:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL2_IsReady() != 0U)
34006542:	f7fc fa57 	bl	340029f4 <LL_RCC_PLL2_IsReady>
34006546:	4603      	mov	r3, r0
34006548:	2b00      	cmp	r3, #0
3400654a:	d02a      	beq.n	340065a2 <HAL_RCCEx_GetPLL2CLKFreq+0x6a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
3400654c:	f7fc faba 	bl	34002ac4 <LL_RCC_PLL2P_IsEnabled>
34006550:	4603      	mov	r3, r0
34006552:	2b00      	cmp	r3, #0
34006554:	d031      	beq.n	340065ba <HAL_RCCEx_GetPLL2CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
34006556:	f7fc fa3f 	bl	340029d8 <LL_RCC_PLL2_GetSource>
3400655a:	4603      	mov	r3, r0
3400655c:	4618      	mov	r0, r3
3400655e:	f000 f911 	bl	34006784 <RCCEx_GetPLLSourceFreq>
34006562:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34006564:	68bb      	ldr	r3, [r7, #8]
34006566:	2b00      	cmp	r3, #0
34006568:	d027      	beq.n	340065ba <HAL_RCCEx_GetPLL2CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL2_GetM();
3400656a:	f7fc fa7b 	bl	34002a64 <LL_RCC_PLL2_GetM>
3400656e:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34006570:	687b      	ldr	r3, [r7, #4]
34006572:	2b00      	cmp	r3, #0
34006574:	d021      	beq.n	340065ba <HAL_RCCEx_GetPLL2CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34006576:	f7fc fa65 	bl	34002a44 <LL_RCC_PLL2_GetN>
3400657a:	4605      	mov	r5, r0
3400657c:	f7fc fab6 	bl	34002aec <LL_RCC_PLL2_GetFRACN>
34006580:	4606      	mov	r6, r0
34006582:	f7fc fa7f 	bl	34002a84 <LL_RCC_PLL2_GetP1>
34006586:	4604      	mov	r4, r0
34006588:	f7fc fa8c 	bl	34002aa4 <LL_RCC_PLL2_GetP2>
3400658c:	4603      	mov	r3, r0
3400658e:	9301      	str	r3, [sp, #4]
34006590:	9400      	str	r4, [sp, #0]
34006592:	4633      	mov	r3, r6
34006594:	462a      	mov	r2, r5
34006596:	6879      	ldr	r1, [r7, #4]
34006598:	68b8      	ldr	r0, [r7, #8]
3400659a:	f000 f951 	bl	34006840 <RCCEx_CalcPLLFreq>
3400659e:	60f8      	str	r0, [r7, #12]
340065a0:	e00b      	b.n	340065ba <HAL_RCCEx_GetPLL2CLKFreq+0x82>
                                            LL_RCC_PLL2_GetP1(), LL_RCC_PLL2_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL2_IsEnabledBypass() != 0U)
340065a2:	f7fc fa3b 	bl	34002a1c <LL_RCC_PLL2_IsEnabledBypass>
340065a6:	4603      	mov	r3, r0
340065a8:	2b00      	cmp	r3, #0
340065aa:	d006      	beq.n	340065ba <HAL_RCCEx_GetPLL2CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
340065ac:	f7fc fa14 	bl	340029d8 <LL_RCC_PLL2_GetSource>
340065b0:	4603      	mov	r3, r0
340065b2:	4618      	mov	r0, r3
340065b4:	f000 f8e6 	bl	34006784 <RCCEx_GetPLLSourceFreq>
340065b8:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
340065ba:	68fb      	ldr	r3, [r7, #12]
}
340065bc:	4618      	mov	r0, r3
340065be:	3714      	adds	r7, #20
340065c0:	46bd      	mov	sp, r7
340065c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

340065c4 <HAL_RCCEx_GetPLL3CLKFreq>:
  * @brief  Return PLL3 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL3 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL3CLKFreq(void)
{
340065c4:	b5f0      	push	{r4, r5, r6, r7, lr}
340065c6:	b087      	sub	sp, #28
340065c8:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
340065ca:	2300      	movs	r3, #0
340065cc:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL3_IsReady() != 0U)
340065ce:	f7fc faa9 	bl	34002b24 <LL_RCC_PLL3_IsReady>
340065d2:	4603      	mov	r3, r0
340065d4:	2b00      	cmp	r3, #0
340065d6:	d02a      	beq.n	3400662e <HAL_RCCEx_GetPLL3CLKFreq+0x6a>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
340065d8:	f7fc fb0c 	bl	34002bf4 <LL_RCC_PLL3P_IsEnabled>
340065dc:	4603      	mov	r3, r0
340065de:	2b00      	cmp	r3, #0
340065e0:	d031      	beq.n	34006646 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
340065e2:	f7fc fa91 	bl	34002b08 <LL_RCC_PLL3_GetSource>
340065e6:	4603      	mov	r3, r0
340065e8:	4618      	mov	r0, r3
340065ea:	f000 f8cb 	bl	34006784 <RCCEx_GetPLLSourceFreq>
340065ee:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
340065f0:	68bb      	ldr	r3, [r7, #8]
340065f2:	2b00      	cmp	r3, #0
340065f4:	d027      	beq.n	34006646 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL3_GetM();
340065f6:	f7fc facd 	bl	34002b94 <LL_RCC_PLL3_GetM>
340065fa:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
340065fc:	687b      	ldr	r3, [r7, #4]
340065fe:	2b00      	cmp	r3, #0
34006600:	d021      	beq.n	34006646 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
34006602:	f7fc fab7 	bl	34002b74 <LL_RCC_PLL3_GetN>
34006606:	4605      	mov	r5, r0
34006608:	f7fc fb08 	bl	34002c1c <LL_RCC_PLL3_GetFRACN>
3400660c:	4606      	mov	r6, r0
3400660e:	f7fc fad1 	bl	34002bb4 <LL_RCC_PLL3_GetP1>
34006612:	4604      	mov	r4, r0
34006614:	f7fc fade 	bl	34002bd4 <LL_RCC_PLL3_GetP2>
34006618:	4603      	mov	r3, r0
3400661a:	9301      	str	r3, [sp, #4]
3400661c:	9400      	str	r4, [sp, #0]
3400661e:	4633      	mov	r3, r6
34006620:	462a      	mov	r2, r5
34006622:	6879      	ldr	r1, [r7, #4]
34006624:	68b8      	ldr	r0, [r7, #8]
34006626:	f000 f90b 	bl	34006840 <RCCEx_CalcPLLFreq>
3400662a:	60f8      	str	r0, [r7, #12]
3400662c:	e00b      	b.n	34006646 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
                                            LL_RCC_PLL3_GetP1(), LL_RCC_PLL3_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL3_IsEnabledBypass() != 0U)
3400662e:	f7fc fa8d 	bl	34002b4c <LL_RCC_PLL3_IsEnabledBypass>
34006632:	4603      	mov	r3, r0
34006634:	2b00      	cmp	r3, #0
34006636:	d006      	beq.n	34006646 <HAL_RCCEx_GetPLL3CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34006638:	f7fc fa66 	bl	34002b08 <LL_RCC_PLL3_GetSource>
3400663c:	4603      	mov	r3, r0
3400663e:	4618      	mov	r0, r3
34006640:	f000 f8a0 	bl	34006784 <RCCEx_GetPLLSourceFreq>
34006644:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
34006646:	68fb      	ldr	r3, [r7, #12]
}
34006648:	4618      	mov	r0, r3
3400664a:	3714      	adds	r7, #20
3400664c:	46bd      	mov	sp, r7
3400664e:	bdf0      	pop	{r4, r5, r6, r7, pc}

34006650 <HAL_RCCEx_GetPLL4CLKFreq>:
  * @brief  Return PLL4 clock frequency
  * @note   RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval PLL4 output clock frequency
  */
uint32_t HAL_RCCEx_GetPLL4CLKFreq(void)
{
34006650:	b5f0      	push	{r4, r5, r6, r7, lr}
34006652:	b087      	sub	sp, #28
34006654:	af02      	add	r7, sp, #8
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
34006656:	2300      	movs	r3, #0
34006658:	60fb      	str	r3, [r7, #12]
  uint32_t divm;

  /* PLL_VCO = (HSE_VALUE, MSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP1 / PLLP2
  */
  if (LL_RCC_PLL4_IsReady() != 0U)
3400665a:	f7fc fafb 	bl	34002c54 <LL_RCC_PLL4_IsReady>
3400665e:	4603      	mov	r3, r0
34006660:	2b00      	cmp	r3, #0
34006662:	d02a      	beq.n	340066ba <HAL_RCCEx_GetPLL4CLKFreq+0x6a>
  {
    if (LL_RCC_PLL4P_IsEnabled() != 0U)
34006664:	f7fc fb5e 	bl	34002d24 <LL_RCC_PLL4P_IsEnabled>
34006668:	4603      	mov	r3, r0
3400666a:	2b00      	cmp	r3, #0
3400666c:	d031      	beq.n	340066d2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
    {
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
3400666e:	f7fc fae3 	bl	34002c38 <LL_RCC_PLL4_GetSource>
34006672:	4603      	mov	r3, r0
34006674:	4618      	mov	r0, r3
34006676:	f000 f885 	bl	34006784 <RCCEx_GetPLLSourceFreq>
3400667a:	60b8      	str	r0, [r7, #8]

      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
3400667c:	68bb      	ldr	r3, [r7, #8]
3400667e:	2b00      	cmp	r3, #0
34006680:	d027      	beq.n	340066d2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
#if defined(USE_FPGA)
        /**** FPGA PLL input forced to 32MHz *****/
        pllinputfreq = RCC_PLL_SOURCE_FREQ;
        /*****************************************/
#endif /* USE_FPGA */
        divm = LL_RCC_PLL4_GetM();
34006682:	f7fc fb1f 	bl	34002cc4 <LL_RCC_PLL4_GetM>
34006686:	6078      	str	r0, [r7, #4]

        if (divm != 0U)
34006688:	687b      	ldr	r3, [r7, #4]
3400668a:	2b00      	cmp	r3, #0
3400668c:	d021      	beq.n	340066d2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
        {
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
3400668e:	f7fc fb09 	bl	34002ca4 <LL_RCC_PLL4_GetN>
34006692:	4605      	mov	r5, r0
34006694:	f7fc fb5a 	bl	34002d4c <LL_RCC_PLL4_GetFRACN>
34006698:	4606      	mov	r6, r0
3400669a:	f7fc fb23 	bl	34002ce4 <LL_RCC_PLL4_GetP1>
3400669e:	4604      	mov	r4, r0
340066a0:	f7fc fb30 	bl	34002d04 <LL_RCC_PLL4_GetP2>
340066a4:	4603      	mov	r3, r0
340066a6:	9301      	str	r3, [sp, #4]
340066a8:	9400      	str	r4, [sp, #0]
340066aa:	4633      	mov	r3, r6
340066ac:	462a      	mov	r2, r5
340066ae:	6879      	ldr	r1, [r7, #4]
340066b0:	68b8      	ldr	r0, [r7, #8]
340066b2:	f000 f8c5 	bl	34006840 <RCCEx_CalcPLLFreq>
340066b6:	60f8      	str	r0, [r7, #12]
340066b8:	e00b      	b.n	340066d2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
                                            LL_RCC_PLL4_GetP1(), LL_RCC_PLL4_GetP2());
        }
      }
    }
  }
  else if (LL_RCC_PLL4_IsEnabledBypass() != 0U)
340066ba:	f7fc fadf 	bl	34002c7c <LL_RCC_PLL4_IsEnabledBypass>
340066be:	4603      	mov	r3, r0
340066c0:	2b00      	cmp	r3, #0
340066c2:	d006      	beq.n	340066d2 <HAL_RCCEx_GetPLL4CLKFreq+0x82>
  {
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
340066c4:	f7fc fab8 	bl	34002c38 <LL_RCC_PLL4_GetSource>
340066c8:	4603      	mov	r3, r0
340066ca:	4618      	mov	r0, r3
340066cc:	f000 f85a 	bl	34006784 <RCCEx_GetPLLSourceFreq>
340066d0:	60f8      	str	r0, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  return plloutputfreq;
340066d2:	68fb      	ldr	r3, [r7, #12]
}
340066d4:	4618      	mov	r0, r3
340066d6:	3714      	adds	r7, #20
340066d8:	46bd      	mov	sp, r7
340066da:	bdf0      	pop	{r4, r5, r6, r7, pc}

340066dc <RCCEx_GetHCLKFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
340066dc:	b580      	push	{r7, lr}
340066de:	b082      	sub	sp, #8
340066e0:	af00      	add	r7, sp, #0
340066e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
340066e4:	f7fb fcca 	bl	3400207c <LL_RCC_GetAHBPrescaler>
340066e8:	4603      	mov	r3, r0
340066ea:	0d1b      	lsrs	r3, r3, #20
340066ec:	f003 0307 	and.w	r3, r3, #7
340066f0:	687a      	ldr	r2, [r7, #4]
340066f2:	fa22 f303 	lsr.w	r3, r2, r3
}
340066f6:	4618      	mov	r0, r3
340066f8:	3708      	adds	r7, #8
340066fa:	46bd      	mov	sp, r7
340066fc:	bd80      	pop	{r7, pc}

340066fe <RCCEx_GetPCLK1Freq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK1Freq(uint32_t HCLK_Frequency)
{
340066fe:	b580      	push	{r7, lr}
34006700:	b082      	sub	sp, #8
34006702:	af00      	add	r7, sp, #0
34006704:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
34006706:	f7fb fcc7 	bl	34002098 <LL_RCC_GetAPB1Prescaler>
3400670a:	4603      	mov	r3, r0
3400670c:	f003 0307 	and.w	r3, r3, #7
34006710:	687a      	ldr	r2, [r7, #4]
34006712:	fa22 f303 	lsr.w	r3, r2, r3
}
34006716:	4618      	mov	r0, r3
34006718:	3708      	adds	r7, #8
3400671a:	46bd      	mov	sp, r7
3400671c:	bd80      	pop	{r7, pc}

3400671e <RCCEx_GetPCLK2Freq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK2Freq(uint32_t HCLK_Frequency)
{
3400671e:	b580      	push	{r7, lr}
34006720:	b082      	sub	sp, #8
34006722:	af00      	add	r7, sp, #0
34006724:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34006726:	f7fb fcc5 	bl	340020b4 <LL_RCC_GetAPB2Prescaler>
3400672a:	4603      	mov	r3, r0
3400672c:	091b      	lsrs	r3, r3, #4
3400672e:	f003 0307 	and.w	r3, r3, #7
34006732:	687a      	ldr	r2, [r7, #4]
34006734:	fa22 f303 	lsr.w	r3, r2, r3
}
34006738:	4618      	mov	r0, r3
3400673a:	3708      	adds	r7, #8
3400673c:	46bd      	mov	sp, r7
3400673e:	bd80      	pop	{r7, pc}

34006740 <RCCEx_GetPCLK4Freq>:
  * @brief  Return PCLK4 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK4 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK4Freq(uint32_t HCLK_Frequency)
{
34006740:	b580      	push	{r7, lr}
34006742:	b082      	sub	sp, #8
34006744:	af00      	add	r7, sp, #0
34006746:	6078      	str	r0, [r7, #4]
  /* PCLK4 clock frequency */
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34006748:	f7fb fcc2 	bl	340020d0 <LL_RCC_GetAPB4Prescaler>
3400674c:	4603      	mov	r3, r0
3400674e:	0b1b      	lsrs	r3, r3, #12
34006750:	f003 0307 	and.w	r3, r3, #7
34006754:	687a      	ldr	r2, [r7, #4]
34006756:	fa22 f303 	lsr.w	r3, r2, r3
}
3400675a:	4618      	mov	r0, r3
3400675c:	3708      	adds	r7, #8
3400675e:	46bd      	mov	sp, r7
34006760:	bd80      	pop	{r7, pc}

34006762 <RCCEx_GetPCLK5Freq>:
  * @brief  Return PCLK5 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK5 clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPCLK5Freq(uint32_t HCLK_Frequency)
{
34006762:	b580      	push	{r7, lr}
34006764:	b082      	sub	sp, #8
34006766:	af00      	add	r7, sp, #0
34006768:	6078      	str	r0, [r7, #4]
  /* PCLK5 clock frequency */
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
3400676a:	f7fb fcbf 	bl	340020ec <LL_RCC_GetAPB5Prescaler>
3400676e:	4603      	mov	r3, r0
34006770:	0c1b      	lsrs	r3, r3, #16
34006772:	f003 0307 	and.w	r3, r3, #7
34006776:	687a      	ldr	r2, [r7, #4]
34006778:	fa22 f303 	lsr.w	r3, r2, r3
}
3400677c:	4618      	mov	r0, r3
3400677e:	3708      	adds	r7, #8
34006780:	46bd      	mov	sp, r7
34006782:	bd80      	pop	{r7, pc}

34006784 <RCCEx_GetPLLSourceFreq>:
  * @brief  Return PLL source clock frequency
  * @param  PLLsource PLL source clock
  * @retval PLL source clock frequency (in Hz)
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
34006784:	b580      	push	{r7, lr}
34006786:	b084      	sub	sp, #16
34006788:	af00      	add	r7, sp, #0
3400678a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
3400678c:	2300      	movs	r3, #0
3400678e:	60fb      	str	r3, [r7, #12]

  switch (PLLsource)
34006790:	687b      	ldr	r3, [r7, #4]
34006792:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006796:	d039      	beq.n	3400680c <RCCEx_GetPLLSourceFreq+0x88>
34006798:	687b      	ldr	r3, [r7, #4]
3400679a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400679e:	d838      	bhi.n	34006812 <RCCEx_GetPLLSourceFreq+0x8e>
340067a0:	687b      	ldr	r3, [r7, #4]
340067a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340067a6:	d029      	beq.n	340067fc <RCCEx_GetPLLSourceFreq+0x78>
340067a8:	687b      	ldr	r3, [r7, #4]
340067aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340067ae:	d830      	bhi.n	34006812 <RCCEx_GetPLLSourceFreq+0x8e>
340067b0:	687b      	ldr	r3, [r7, #4]
340067b2:	2b00      	cmp	r3, #0
340067b4:	d004      	beq.n	340067c0 <RCCEx_GetPLLSourceFreq+0x3c>
340067b6:	687b      	ldr	r3, [r7, #4]
340067b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340067bc:	d00e      	beq.n	340067dc <RCCEx_GetPLLSourceFreq+0x58>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
      break;

    default:
      /* unexpected case */
      break;
340067be:	e028      	b.n	34006812 <RCCEx_GetPLLSourceFreq+0x8e>
      if (LL_RCC_HSI_IsReady() != 0U)
340067c0:	f7fb fbfc 	bl	34001fbc <LL_RCC_HSI_IsReady>
340067c4:	4603      	mov	r3, r0
340067c6:	2b00      	cmp	r3, #0
340067c8:	d025      	beq.n	34006816 <RCCEx_GetPLLSourceFreq+0x92>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340067ca:	f7fb fc09 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
340067ce:	4603      	mov	r3, r0
340067d0:	09db      	lsrs	r3, r3, #7
340067d2:	4a16      	ldr	r2, [pc, #88]	@ (3400682c <RCCEx_GetPLLSourceFreq+0xa8>)
340067d4:	fa22 f303 	lsr.w	r3, r2, r3
340067d8:	60fb      	str	r3, [r7, #12]
      break;
340067da:	e01c      	b.n	34006816 <RCCEx_GetPLLSourceFreq+0x92>
      if (LL_RCC_MSI_IsReady() != 0U)
340067dc:	f7fb fc0e 	bl	34001ffc <LL_RCC_MSI_IsReady>
340067e0:	4603      	mov	r3, r0
340067e2:	2b00      	cmp	r3, #0
340067e4:	d019      	beq.n	3400681a <RCCEx_GetPLLSourceFreq+0x96>
        if (LL_RCC_MSI_GetFrequency() == LL_RCC_MSI_FREQ_4MHZ)
340067e6:	f7fb fc1b 	bl	34002020 <LL_RCC_MSI_GetFrequency>
340067ea:	4603      	mov	r3, r0
340067ec:	2b00      	cmp	r3, #0
340067ee:	d102      	bne.n	340067f6 <RCCEx_GetPLLSourceFreq+0x72>
          pllinputfreq = MSI_VALUE;
340067f0:	4b0f      	ldr	r3, [pc, #60]	@ (34006830 <RCCEx_GetPLLSourceFreq+0xac>)
340067f2:	60fb      	str	r3, [r7, #12]
      break;
340067f4:	e011      	b.n	3400681a <RCCEx_GetPLLSourceFreq+0x96>
          pllinputfreq = 16000000UL;
340067f6:	4b0f      	ldr	r3, [pc, #60]	@ (34006834 <RCCEx_GetPLLSourceFreq+0xb0>)
340067f8:	60fb      	str	r3, [r7, #12]
      break;
340067fa:	e00e      	b.n	3400681a <RCCEx_GetPLLSourceFreq+0x96>
      if (LL_RCC_HSE_IsReady() != 0U)
340067fc:	f7fb fbcc 	bl	34001f98 <LL_RCC_HSE_IsReady>
34006800:	4603      	mov	r3, r0
34006802:	2b00      	cmp	r3, #0
34006804:	d00b      	beq.n	3400681e <RCCEx_GetPLLSourceFreq+0x9a>
        pllinputfreq = HSE_VALUE;
34006806:	4b0c      	ldr	r3, [pc, #48]	@ (34006838 <RCCEx_GetPLLSourceFreq+0xb4>)
34006808:	60fb      	str	r3, [r7, #12]
      break;
3400680a:	e008      	b.n	3400681e <RCCEx_GetPLLSourceFreq+0x9a>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
3400680c:	4b0b      	ldr	r3, [pc, #44]	@ (3400683c <RCCEx_GetPLLSourceFreq+0xb8>)
3400680e:	60fb      	str	r3, [r7, #12]
      break;
34006810:	e006      	b.n	34006820 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34006812:	bf00      	nop
34006814:	e004      	b.n	34006820 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
34006816:	bf00      	nop
34006818:	e002      	b.n	34006820 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3400681a:	bf00      	nop
3400681c:	e000      	b.n	34006820 <RCCEx_GetPLLSourceFreq+0x9c>
      break;
3400681e:	bf00      	nop
  }

  return pllinputfreq;
34006820:	68fb      	ldr	r3, [r7, #12]
}
34006822:	4618      	mov	r0, r3
34006824:	3710      	adds	r7, #16
34006826:	46bd      	mov	sp, r7
34006828:	bd80      	pop	{r7, pc}
3400682a:	bf00      	nop
3400682c:	03d09000 	.word	0x03d09000
34006830:	003d0900 	.word	0x003d0900
34006834:	00f42400 	.word	0x00f42400
34006838:	02dc6c00 	.word	0x02dc6c00
3400683c:	00bb8000 	.word	0x00bb8000

34006840 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34006840:	b480      	push	{r7}
34006842:	b087      	sub	sp, #28
34006844:	af00      	add	r7, sp, #0
34006846:	60f8      	str	r0, [r7, #12]
34006848:	60b9      	str	r1, [r7, #8]
3400684a:	607a      	str	r2, [r7, #4]
3400684c:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3400684e:	68fb      	ldr	r3, [r7, #12]
34006850:	ee07 3a90 	vmov	s15, r3
34006854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34006858:	687b      	ldr	r3, [r7, #4]
3400685a:	ee07 3a90 	vmov	s15, r3
3400685e:	eef8 6a67 	vcvt.f32.u32	s13, s15
34006862:	683b      	ldr	r3, [r7, #0]
34006864:	ee07 3a90 	vmov	s15, r3
34006868:	eeb8 6a67 	vcvt.f32.u32	s12, s15
3400686c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 340068d4 <RCCEx_CalcPLLFreq+0x94>
34006870:	eec6 7a25 	vdiv.f32	s15, s12, s11
34006874:	ee76 7aa7 	vadd.f32	s15, s13, s15
34006878:	ee67 6a27 	vmul.f32	s13, s14, s15
3400687c:	68bb      	ldr	r3, [r7, #8]
3400687e:	ee07 3a90 	vmov	s15, r3
34006882:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34006886:	eec6 7a87 	vdiv.f32	s15, s13, s14
3400688a:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)P1;
3400688e:	6a3b      	ldr	r3, [r7, #32]
34006890:	ee07 3a90 	vmov	s15, r3
34006894:	eeb8 7a67 	vcvt.f32.u32	s14, s15
34006898:	edd7 6a05 	vldr	s13, [r7, #20]
3400689c:	eec6 7a87 	vdiv.f32	s15, s13, s14
340068a0:	edc7 7a05 	vstr	s15, [r7, #20]
  freq = freq / (float_t)P2;
340068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
340068a6:	ee07 3a90 	vmov	s15, r3
340068aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
340068ae:	edd7 6a05 	vldr	s13, [r7, #20]
340068b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
340068b6:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
340068ba:	edd7 7a05 	vldr	s15, [r7, #20]
340068be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
340068c2:	ee17 3a90 	vmov	r3, s15
}
340068c6:	4618      	mov	r0, r3
340068c8:	371c      	adds	r7, #28
340068ca:	46bd      	mov	sp, r7
340068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
340068d0:	4770      	bx	lr
340068d2:	bf00      	nop
340068d4:	4b800000 	.word	0x4b800000

340068d8 <RCCEx_GetADCCLKFreq>:
  *         @arg @ref RCCEx_ADC_Clock_Source
  * @retval ADC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADCCLKFreq(uint32_t ADCxSource)
{
340068d8:	b590      	push	{r4, r7, lr}
340068da:	b085      	sub	sp, #20
340068dc:	af00      	add	r7, sp, #0
340068de:	6078      	str	r0, [r7, #4]
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
340068e0:	2300      	movs	r3, #0
340068e2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADCClockSource(ADCxSource))
340068e4:	6878      	ldr	r0, [r7, #4]
340068e6:	f7fb fe1f 	bl	34002528 <LL_RCC_GetADCClockSource>
340068ea:	4603      	mov	r3, r0
340068ec:	2b70      	cmp	r3, #112	@ 0x70
340068ee:	f000 80d1 	beq.w	34006a94 <RCCEx_GetADCCLKFreq+0x1bc>
340068f2:	2b70      	cmp	r3, #112	@ 0x70
340068f4:	f200 80d8 	bhi.w	34006aa8 <RCCEx_GetADCCLKFreq+0x1d0>
340068f8:	2b60      	cmp	r3, #96	@ 0x60
340068fa:	f000 80c8 	beq.w	34006a8e <RCCEx_GetADCCLKFreq+0x1b6>
340068fe:	2b60      	cmp	r3, #96	@ 0x60
34006900:	f200 80d2 	bhi.w	34006aa8 <RCCEx_GetADCCLKFreq+0x1d0>
34006904:	2b50      	cmp	r3, #80	@ 0x50
34006906:	f000 80ac 	beq.w	34006a62 <RCCEx_GetADCCLKFreq+0x18a>
3400690a:	2b50      	cmp	r3, #80	@ 0x50
3400690c:	f200 80cc 	bhi.w	34006aa8 <RCCEx_GetADCCLKFreq+0x1d0>
34006910:	2b40      	cmp	r3, #64	@ 0x40
34006912:	f000 80b4 	beq.w	34006a7e <RCCEx_GetADCCLKFreq+0x1a6>
34006916:	2b40      	cmp	r3, #64	@ 0x40
34006918:	f200 80c6 	bhi.w	34006aa8 <RCCEx_GetADCCLKFreq+0x1d0>
3400691c:	2b30      	cmp	r3, #48	@ 0x30
3400691e:	d05d      	beq.n	340069dc <RCCEx_GetADCCLKFreq+0x104>
34006920:	2b30      	cmp	r3, #48	@ 0x30
34006922:	f200 80c1 	bhi.w	34006aa8 <RCCEx_GetADCCLKFreq+0x1d0>
34006926:	2b20      	cmp	r3, #32
34006928:	d014      	beq.n	34006954 <RCCEx_GetADCCLKFreq+0x7c>
3400692a:	2b20      	cmp	r3, #32
3400692c:	f200 80bc 	bhi.w	34006aa8 <RCCEx_GetADCCLKFreq+0x1d0>
34006930:	2b00      	cmp	r3, #0
34006932:	d002      	beq.n	3400693a <RCCEx_GetADCCLKFreq+0x62>
34006934:	2b10      	cmp	r3, #16
34006936:	d008      	beq.n	3400694a <RCCEx_GetADCCLKFreq+0x72>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34006938:	e0b6      	b.n	34006aa8 <RCCEx_GetADCCLKFreq+0x1d0>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3400693a:	f7fb fa7d 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
3400693e:	4603      	mov	r3, r0
34006940:	4618      	mov	r0, r3
34006942:	f7ff fecb 	bl	340066dc <RCCEx_GetHCLKFreq>
34006946:	60f8      	str	r0, [r7, #12]
      break;
34006948:	e0b7      	b.n	34006aba <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400694a:	2007      	movs	r0, #7
3400694c:	f000 f9b2 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34006950:	60f8      	str	r0, [r7, #12]
      break;
34006952:	e0b2      	b.n	34006aba <RCCEx_GetADCCLKFreq+0x1e2>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34006954:	f7fc fad6 	bl	34002f04 <LL_RCC_IC7_IsEnabled>
34006958:	4603      	mov	r3, r0
3400695a:	2b00      	cmp	r3, #0
3400695c:	f000 80a6 	beq.w	34006aac <RCCEx_GetADCCLKFreq+0x1d4>
        ic_divider = LL_RCC_IC7_GetDivider();
34006960:	f7fc faf2 	bl	34002f48 <LL_RCC_IC7_GetDivider>
34006964:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34006966:	f7fc fae1 	bl	34002f2c <LL_RCC_IC7_GetSource>
3400696a:	4603      	mov	r3, r0
3400696c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006970:	d029      	beq.n	340069c6 <RCCEx_GetADCCLKFreq+0xee>
34006972:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006976:	d82f      	bhi.n	340069d8 <RCCEx_GetADCCLKFreq+0x100>
34006978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400697c:	d01a      	beq.n	340069b4 <RCCEx_GetADCCLKFreq+0xdc>
3400697e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006982:	d829      	bhi.n	340069d8 <RCCEx_GetADCCLKFreq+0x100>
34006984:	2b00      	cmp	r3, #0
34006986:	d003      	beq.n	34006990 <RCCEx_GetADCCLKFreq+0xb8>
34006988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400698c:	d009      	beq.n	340069a2 <RCCEx_GetADCCLKFreq+0xca>
            break;
3400698e:	e023      	b.n	340069d8 <RCCEx_GetADCCLKFreq+0x100>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006990:	f7ff fd8c 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006994:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34006996:	68fa      	ldr	r2, [r7, #12]
34006998:	68bb      	ldr	r3, [r7, #8]
3400699a:	fbb2 f3f3 	udiv	r3, r2, r3
3400699e:	60fb      	str	r3, [r7, #12]
            break;
340069a0:	e01b      	b.n	340069da <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340069a2:	f7ff fdc9 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340069a6:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340069a8:	68fa      	ldr	r2, [r7, #12]
340069aa:	68bb      	ldr	r3, [r7, #8]
340069ac:	fbb2 f3f3 	udiv	r3, r2, r3
340069b0:	60fb      	str	r3, [r7, #12]
            break;
340069b2:	e012      	b.n	340069da <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340069b4:	f7ff fe06 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
340069b8:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340069ba:	68fa      	ldr	r2, [r7, #12]
340069bc:	68bb      	ldr	r3, [r7, #8]
340069be:	fbb2 f3f3 	udiv	r3, r2, r3
340069c2:	60fb      	str	r3, [r7, #12]
            break;
340069c4:	e009      	b.n	340069da <RCCEx_GetADCCLKFreq+0x102>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340069c6:	f7ff fe43 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
340069ca:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
340069cc:	68fa      	ldr	r2, [r7, #12]
340069ce:	68bb      	ldr	r3, [r7, #8]
340069d0:	fbb2 f3f3 	udiv	r3, r2, r3
340069d4:	60fb      	str	r3, [r7, #12]
            break;
340069d6:	e000      	b.n	340069da <RCCEx_GetADCCLKFreq+0x102>
            break;
340069d8:	bf00      	nop
      break;
340069da:	e067      	b.n	34006aac <RCCEx_GetADCCLKFreq+0x1d4>
      if (LL_RCC_IC8_IsEnabled() != 0U)
340069dc:	f7fc fad2 	bl	34002f84 <LL_RCC_IC8_IsEnabled>
340069e0:	4603      	mov	r3, r0
340069e2:	2b00      	cmp	r3, #0
340069e4:	d064      	beq.n	34006ab0 <RCCEx_GetADCCLKFreq+0x1d8>
        ic_divider = LL_RCC_IC8_GetDivider();
340069e6:	f7fc faef 	bl	34002fc8 <LL_RCC_IC8_GetDivider>
340069ea:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340069ec:	f7fc fade 	bl	34002fac <LL_RCC_IC8_GetSource>
340069f0:	4603      	mov	r3, r0
340069f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340069f6:	d029      	beq.n	34006a4c <RCCEx_GetADCCLKFreq+0x174>
340069f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340069fc:	d82f      	bhi.n	34006a5e <RCCEx_GetADCCLKFreq+0x186>
340069fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006a02:	d01a      	beq.n	34006a3a <RCCEx_GetADCCLKFreq+0x162>
34006a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006a08:	d829      	bhi.n	34006a5e <RCCEx_GetADCCLKFreq+0x186>
34006a0a:	2b00      	cmp	r3, #0
34006a0c:	d003      	beq.n	34006a16 <RCCEx_GetADCCLKFreq+0x13e>
34006a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006a12:	d009      	beq.n	34006a28 <RCCEx_GetADCCLKFreq+0x150>
            break;
34006a14:	e023      	b.n	34006a5e <RCCEx_GetADCCLKFreq+0x186>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006a16:	f7ff fd49 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006a1a:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34006a1c:	68fa      	ldr	r2, [r7, #12]
34006a1e:	68bb      	ldr	r3, [r7, #8]
34006a20:	fbb2 f3f3 	udiv	r3, r2, r3
34006a24:	60fb      	str	r3, [r7, #12]
            break;
34006a26:	e01b      	b.n	34006a60 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34006a28:	f7ff fd86 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34006a2c:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34006a2e:	68fa      	ldr	r2, [r7, #12]
34006a30:	68bb      	ldr	r3, [r7, #8]
34006a32:	fbb2 f3f3 	udiv	r3, r2, r3
34006a36:	60fb      	str	r3, [r7, #12]
            break;
34006a38:	e012      	b.n	34006a60 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34006a3a:	f7ff fdc3 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34006a3e:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34006a40:	68fa      	ldr	r2, [r7, #12]
34006a42:	68bb      	ldr	r3, [r7, #8]
34006a44:	fbb2 f3f3 	udiv	r3, r2, r3
34006a48:	60fb      	str	r3, [r7, #12]
            break;
34006a4a:	e009      	b.n	34006a60 <RCCEx_GetADCCLKFreq+0x188>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34006a4c:	f7ff fe00 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34006a50:	60f8      	str	r0, [r7, #12]
            adc_frequency = adc_frequency / ic_divider;
34006a52:	68fa      	ldr	r2, [r7, #12]
34006a54:	68bb      	ldr	r3, [r7, #8]
34006a56:	fbb2 f3f3 	udiv	r3, r2, r3
34006a5a:	60fb      	str	r3, [r7, #12]
            break;
34006a5c:	e000      	b.n	34006a60 <RCCEx_GetADCCLKFreq+0x188>
            break;
34006a5e:	bf00      	nop
      break;
34006a60:	e026      	b.n	34006ab0 <RCCEx_GetADCCLKFreq+0x1d8>
      if (LL_RCC_HSI_IsReady() != 0U)
34006a62:	f7fb faab 	bl	34001fbc <LL_RCC_HSI_IsReady>
34006a66:	4603      	mov	r3, r0
34006a68:	2b00      	cmp	r3, #0
34006a6a:	d023      	beq.n	34006ab4 <RCCEx_GetADCCLKFreq+0x1dc>
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34006a6c:	f7fb fab8 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34006a70:	4603      	mov	r3, r0
34006a72:	09db      	lsrs	r3, r3, #7
34006a74:	4a16      	ldr	r2, [pc, #88]	@ (34006ad0 <RCCEx_GetADCCLKFreq+0x1f8>)
34006a76:	fa22 f303 	lsr.w	r3, r2, r3
34006a7a:	60fb      	str	r3, [r7, #12]
      break;
34006a7c:	e01a      	b.n	34006ab4 <RCCEx_GetADCCLKFreq+0x1dc>
      if (LL_RCC_MSI_IsReady() != 0U)
34006a7e:	f7fb fabd 	bl	34001ffc <LL_RCC_MSI_IsReady>
34006a82:	4603      	mov	r3, r0
34006a84:	2b00      	cmp	r3, #0
34006a86:	d017      	beq.n	34006ab8 <RCCEx_GetADCCLKFreq+0x1e0>
        adc_frequency = MSI_VALUE;
34006a88:	4b12      	ldr	r3, [pc, #72]	@ (34006ad4 <RCCEx_GetADCCLKFreq+0x1fc>)
34006a8a:	60fb      	str	r3, [r7, #12]
      break;
34006a8c:	e014      	b.n	34006ab8 <RCCEx_GetADCCLKFreq+0x1e0>
      adc_frequency = EXTERNAL_CLOCK_VALUE;
34006a8e:	4b12      	ldr	r3, [pc, #72]	@ (34006ad8 <RCCEx_GetADCCLKFreq+0x200>)
34006a90:	60fb      	str	r3, [r7, #12]
      break;
34006a92:	e012      	b.n	34006aba <RCCEx_GetADCCLKFreq+0x1e2>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34006a94:	f7fb f9d0 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34006a98:	4604      	mov	r4, r0
34006a9a:	f7fb fef7 	bl	3400288c <LL_RCC_GetTIMPrescaler>
34006a9e:	4603      	mov	r3, r0
34006aa0:	fa24 f303 	lsr.w	r3, r4, r3
34006aa4:	60fb      	str	r3, [r7, #12]
      break;
34006aa6:	e008      	b.n	34006aba <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34006aa8:	bf00      	nop
34006aaa:	e006      	b.n	34006aba <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34006aac:	bf00      	nop
34006aae:	e004      	b.n	34006aba <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34006ab0:	bf00      	nop
34006ab2:	e002      	b.n	34006aba <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34006ab4:	bf00      	nop
34006ab6:	e000      	b.n	34006aba <RCCEx_GetADCCLKFreq+0x1e2>
      break;
34006ab8:	bf00      	nop
  }

  return (adc_frequency / __HAL_RCC_GET_ADC_DIVIDER());
34006aba:	f7fb fb4f 	bl	3400215c <LL_RCC_GetADCPrescaler>
34006abe:	4603      	mov	r3, r0
34006ac0:	3301      	adds	r3, #1
34006ac2:	68fa      	ldr	r2, [r7, #12]
34006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
}
34006ac8:	4618      	mov	r0, r3
34006aca:	3714      	adds	r7, #20
34006acc:	46bd      	mov	sp, r7
34006ace:	bd90      	pop	{r4, r7, pc}
34006ad0:	03d09000 	.word	0x03d09000
34006ad4:	003d0900 	.word	0x003d0900
34006ad8:	00bb8000 	.word	0x00bb8000

34006adc <RCCEx_GetADFCLKFreq>:
  *         @arg @ref RCCEx_ADF1_Clock_Source
  * @retval ADF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetADFCLKFreq(uint32_t ADFxSource)
{
34006adc:	b590      	push	{r4, r7, lr}
34006ade:	b085      	sub	sp, #20
34006ae0:	af00      	add	r7, sp, #0
34006ae2:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34006ae4:	2300      	movs	r3, #0
34006ae6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetADFClockSource(ADFxSource))
34006ae8:	6878      	ldr	r0, [r7, #4]
34006aea:	f7fb fd2f 	bl	3400254c <LL_RCC_GetADFClockSource>
34006aee:	4603      	mov	r3, r0
34006af0:	2b07      	cmp	r3, #7
34006af2:	f200 80ca 	bhi.w	34006c8a <RCCEx_GetADFCLKFreq+0x1ae>
34006af6:	a201      	add	r2, pc, #4	@ (adr r2, 34006afc <RCCEx_GetADFCLKFreq+0x20>)
34006af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34006afc:	34006b1d 	.word	0x34006b1d
34006b00:	34006b2d 	.word	0x34006b2d
34006b04:	34006b37 	.word	0x34006b37
34006b08:	34006bbf 	.word	0x34006bbf
34006b0c:	34006c61 	.word	0x34006c61
34006b10:	34006c45 	.word	0x34006c45
34006b14:	34006c71 	.word	0x34006c71
34006b18:	34006c77 	.word	0x34006c77
  {
    case LL_RCC_ADF1_CLKSOURCE_HCLK:
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34006b1c:	f7fb f98c 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34006b20:	4603      	mov	r3, r0
34006b22:	4618      	mov	r0, r3
34006b24:	f7ff fdda 	bl	340066dc <RCCEx_GetHCLKFreq>
34006b28:	60f8      	str	r0, [r7, #12]
      break;
34006b2a:	e0b7      	b.n	34006c9c <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_CLKP:
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34006b2c:	2007      	movs	r0, #7
34006b2e:	f000 f8c1 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34006b32:	60f8      	str	r0, [r7, #12]
      break;
34006b34:	e0b2      	b.n	34006c9c <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34006b36:	f7fc f9e5 	bl	34002f04 <LL_RCC_IC7_IsEnabled>
34006b3a:	4603      	mov	r3, r0
34006b3c:	2b00      	cmp	r3, #0
34006b3e:	f000 80a6 	beq.w	34006c8e <RCCEx_GetADFCLKFreq+0x1b2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34006b42:	f7fc fa01 	bl	34002f48 <LL_RCC_IC7_GetDivider>
34006b46:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34006b48:	f7fc f9f0 	bl	34002f2c <LL_RCC_IC7_GetSource>
34006b4c:	4603      	mov	r3, r0
34006b4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006b52:	d029      	beq.n	34006ba8 <RCCEx_GetADFCLKFreq+0xcc>
34006b54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006b58:	d82f      	bhi.n	34006bba <RCCEx_GetADFCLKFreq+0xde>
34006b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006b5e:	d01a      	beq.n	34006b96 <RCCEx_GetADFCLKFreq+0xba>
34006b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006b64:	d829      	bhi.n	34006bba <RCCEx_GetADFCLKFreq+0xde>
34006b66:	2b00      	cmp	r3, #0
34006b68:	d003      	beq.n	34006b72 <RCCEx_GetADFCLKFreq+0x96>
34006b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006b6e:	d009      	beq.n	34006b84 <RCCEx_GetADFCLKFreq+0xa8>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34006b70:	e023      	b.n	34006bba <RCCEx_GetADFCLKFreq+0xde>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006b72:	f7ff fc9b 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006b76:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34006b78:	68fa      	ldr	r2, [r7, #12]
34006b7a:	68bb      	ldr	r3, [r7, #8]
34006b7c:	fbb2 f3f3 	udiv	r3, r2, r3
34006b80:	60fb      	str	r3, [r7, #12]
            break;
34006b82:	e01b      	b.n	34006bbc <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34006b84:	f7ff fcd8 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34006b88:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34006b8a:	68fa      	ldr	r2, [r7, #12]
34006b8c:	68bb      	ldr	r3, [r7, #8]
34006b8e:	fbb2 f3f3 	udiv	r3, r2, r3
34006b92:	60fb      	str	r3, [r7, #12]
            break;
34006b94:	e012      	b.n	34006bbc <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34006b96:	f7ff fd15 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34006b9a:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34006b9c:	68fa      	ldr	r2, [r7, #12]
34006b9e:	68bb      	ldr	r3, [r7, #8]
34006ba0:	fbb2 f3f3 	udiv	r3, r2, r3
34006ba4:	60fb      	str	r3, [r7, #12]
            break;
34006ba6:	e009      	b.n	34006bbc <RCCEx_GetADFCLKFreq+0xe0>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34006ba8:	f7ff fd52 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34006bac:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34006bae:	68fa      	ldr	r2, [r7, #12]
34006bb0:	68bb      	ldr	r3, [r7, #8]
34006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
34006bb6:	60fb      	str	r3, [r7, #12]
            break;
34006bb8:	e000      	b.n	34006bbc <RCCEx_GetADFCLKFreq+0xe0>
            break;
34006bba:	bf00      	nop
        }
      }
      break;
34006bbc:	e067      	b.n	34006c8e <RCCEx_GetADFCLKFreq+0x1b2>

    case LL_RCC_ADF1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34006bbe:	f7fc f9e1 	bl	34002f84 <LL_RCC_IC8_IsEnabled>
34006bc2:	4603      	mov	r3, r0
34006bc4:	2b00      	cmp	r3, #0
34006bc6:	d064      	beq.n	34006c92 <RCCEx_GetADFCLKFreq+0x1b6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34006bc8:	f7fc f9fe 	bl	34002fc8 <LL_RCC_IC8_GetDivider>
34006bcc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34006bce:	f7fc f9ed 	bl	34002fac <LL_RCC_IC8_GetSource>
34006bd2:	4603      	mov	r3, r0
34006bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006bd8:	d029      	beq.n	34006c2e <RCCEx_GetADFCLKFreq+0x152>
34006bda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006bde:	d82f      	bhi.n	34006c40 <RCCEx_GetADFCLKFreq+0x164>
34006be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006be4:	d01a      	beq.n	34006c1c <RCCEx_GetADFCLKFreq+0x140>
34006be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006bea:	d829      	bhi.n	34006c40 <RCCEx_GetADFCLKFreq+0x164>
34006bec:	2b00      	cmp	r3, #0
34006bee:	d003      	beq.n	34006bf8 <RCCEx_GetADFCLKFreq+0x11c>
34006bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006bf4:	d009      	beq.n	34006c0a <RCCEx_GetADFCLKFreq+0x12e>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            adf_frequency = adf_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34006bf6:	e023      	b.n	34006c40 <RCCEx_GetADFCLKFreq+0x164>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006bf8:	f7ff fc58 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006bfc:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34006bfe:	68fa      	ldr	r2, [r7, #12]
34006c00:	68bb      	ldr	r3, [r7, #8]
34006c02:	fbb2 f3f3 	udiv	r3, r2, r3
34006c06:	60fb      	str	r3, [r7, #12]
            break;
34006c08:	e01b      	b.n	34006c42 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34006c0a:	f7ff fc95 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34006c0e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34006c10:	68fa      	ldr	r2, [r7, #12]
34006c12:	68bb      	ldr	r3, [r7, #8]
34006c14:	fbb2 f3f3 	udiv	r3, r2, r3
34006c18:	60fb      	str	r3, [r7, #12]
            break;
34006c1a:	e012      	b.n	34006c42 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34006c1c:	f7ff fcd2 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34006c20:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34006c22:	68fa      	ldr	r2, [r7, #12]
34006c24:	68bb      	ldr	r3, [r7, #8]
34006c26:	fbb2 f3f3 	udiv	r3, r2, r3
34006c2a:	60fb      	str	r3, [r7, #12]
            break;
34006c2c:	e009      	b.n	34006c42 <RCCEx_GetADFCLKFreq+0x166>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34006c2e:	f7ff fd0f 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34006c32:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34006c34:	68fa      	ldr	r2, [r7, #12]
34006c36:	68bb      	ldr	r3, [r7, #8]
34006c38:	fbb2 f3f3 	udiv	r3, r2, r3
34006c3c:	60fb      	str	r3, [r7, #12]
            break;
34006c3e:	e000      	b.n	34006c42 <RCCEx_GetADFCLKFreq+0x166>
            break;
34006c40:	bf00      	nop
        }
      }
      break;
34006c42:	e026      	b.n	34006c92 <RCCEx_GetADFCLKFreq+0x1b6>

    case LL_RCC_ADF1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34006c44:	f7fb f9ba 	bl	34001fbc <LL_RCC_HSI_IsReady>
34006c48:	4603      	mov	r3, r0
34006c4a:	2b00      	cmp	r3, #0
34006c4c:	d023      	beq.n	34006c96 <RCCEx_GetADFCLKFreq+0x1ba>
      {
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34006c4e:	f7fb f9c7 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34006c52:	4603      	mov	r3, r0
34006c54:	09db      	lsrs	r3, r3, #7
34006c56:	4a14      	ldr	r2, [pc, #80]	@ (34006ca8 <RCCEx_GetADFCLKFreq+0x1cc>)
34006c58:	fa22 f303 	lsr.w	r3, r2, r3
34006c5c:	60fb      	str	r3, [r7, #12]
      }
      break;
34006c5e:	e01a      	b.n	34006c96 <RCCEx_GetADFCLKFreq+0x1ba>

    case LL_RCC_ADF1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34006c60:	f7fb f9cc 	bl	34001ffc <LL_RCC_MSI_IsReady>
34006c64:	4603      	mov	r3, r0
34006c66:	2b00      	cmp	r3, #0
34006c68:	d017      	beq.n	34006c9a <RCCEx_GetADFCLKFreq+0x1be>
      {
        adf_frequency = MSI_VALUE;
34006c6a:	4b10      	ldr	r3, [pc, #64]	@ (34006cac <RCCEx_GetADFCLKFreq+0x1d0>)
34006c6c:	60fb      	str	r3, [r7, #12]
      }
      break;
34006c6e:	e014      	b.n	34006c9a <RCCEx_GetADFCLKFreq+0x1be>

    case LL_RCC_ADF1_CLKSOURCE_I2S_CKIN:
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34006c70:	4b0f      	ldr	r3, [pc, #60]	@ (34006cb0 <RCCEx_GetADFCLKFreq+0x1d4>)
34006c72:	60fb      	str	r3, [r7, #12]
      break;
34006c74:	e012      	b.n	34006c9c <RCCEx_GetADFCLKFreq+0x1c0>

    case LL_RCC_ADF1_CLKSOURCE_TIMG:
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34006c76:	f7fb f8df 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34006c7a:	4604      	mov	r4, r0
34006c7c:	f7fb fe06 	bl	3400288c <LL_RCC_GetTIMPrescaler>
34006c80:	4603      	mov	r3, r0
34006c82:	fa24 f303 	lsr.w	r3, r4, r3
34006c86:	60fb      	str	r3, [r7, #12]
      break;
34006c88:	e008      	b.n	34006c9c <RCCEx_GetADFCLKFreq+0x1c0>

    default:
      /* Unexpected case */
      break;
34006c8a:	bf00      	nop
34006c8c:	e006      	b.n	34006c9c <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34006c8e:	bf00      	nop
34006c90:	e004      	b.n	34006c9c <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34006c92:	bf00      	nop
34006c94:	e002      	b.n	34006c9c <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34006c96:	bf00      	nop
34006c98:	e000      	b.n	34006c9c <RCCEx_GetADFCLKFreq+0x1c0>
      break;
34006c9a:	bf00      	nop
  }

  return adf_frequency;
34006c9c:	68fb      	ldr	r3, [r7, #12]
}
34006c9e:	4618      	mov	r0, r3
34006ca0:	3714      	adds	r7, #20
34006ca2:	46bd      	mov	sp, r7
34006ca4:	bd90      	pop	{r4, r7, pc}
34006ca6:	bf00      	nop
34006ca8:	03d09000 	.word	0x03d09000
34006cac:	003d0900 	.word	0x003d0900
34006cb0:	00bb8000 	.word	0x00bb8000

34006cb4 <RCCEx_GetCLKPCLKFreq>:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
{
34006cb4:	b580      	push	{r7, lr}
34006cb6:	b084      	sub	sp, #16
34006cb8:	af00      	add	r7, sp, #0
34006cba:	6078      	str	r0, [r7, #4]
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34006cbc:	2300      	movs	r3, #0
34006cbe:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
34006cc0:	f7fc fc60 	bl	34003584 <LL_RCC_CLKP_IsEnabled>
34006cc4:	4603      	mov	r3, r0
34006cc6:	2b01      	cmp	r3, #1
34006cc8:	f040 81a5 	bne.w	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
34006ccc:	6878      	ldr	r0, [r7, #4]
34006cce:	f7fb fc4f 	bl	34002570 <LL_RCC_GetCLKPClockSource>
34006cd2:	4603      	mov	r3, r0
34006cd4:	2b07      	cmp	r3, #7
34006cd6:	f200 818d 	bhi.w	34006ff4 <RCCEx_GetCLKPCLKFreq+0x340>
34006cda:	a201      	add	r2, pc, #4	@ (adr r2, 34006ce0 <RCCEx_GetCLKPCLKFreq+0x2c>)
34006cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34006ce0:	34006d01 	.word	0x34006d01
34006ce4:	34006d1f 	.word	0x34006d1f
34006ce8:	34006d31 	.word	0x34006d31
34006cec:	34006edb 	.word	0x34006edb
34006cf0:	34006d43 	.word	0x34006d43
34006cf4:	34006dcb 	.word	0x34006dcb
34006cf8:	34006e53 	.word	0x34006e53
34006cfc:	34006f63 	.word	0x34006f63
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
34006d00:	f7fb f95c 	bl	34001fbc <LL_RCC_HSI_IsReady>
34006d04:	4603      	mov	r3, r0
34006d06:	2b00      	cmp	r3, #0
34006d08:	f000 8176 	beq.w	34006ff8 <RCCEx_GetCLKPCLKFreq+0x344>
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34006d0c:	f7fb f968 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34006d10:	4603      	mov	r3, r0
34006d12:	09db      	lsrs	r3, r3, #7
34006d14:	4aa1      	ldr	r2, [pc, #644]	@ (34006f9c <RCCEx_GetCLKPCLKFreq+0x2e8>)
34006d16:	fa22 f303 	lsr.w	r3, r2, r3
34006d1a:	60fb      	str	r3, [r7, #12]
        }
        break;
34006d1c:	e16c      	b.n	34006ff8 <RCCEx_GetCLKPCLKFreq+0x344>

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34006d1e:	f7fb f96d 	bl	34001ffc <LL_RCC_MSI_IsReady>
34006d22:	4603      	mov	r3, r0
34006d24:	2b00      	cmp	r3, #0
34006d26:	f000 8169 	beq.w	34006ffc <RCCEx_GetCLKPCLKFreq+0x348>
        {
          clkp_frequency = MSI_VALUE;
34006d2a:	4b9d      	ldr	r3, [pc, #628]	@ (34006fa0 <RCCEx_GetCLKPCLKFreq+0x2ec>)
34006d2c:	60fb      	str	r3, [r7, #12]
        }
        break;
34006d2e:	e165      	b.n	34006ffc <RCCEx_GetCLKPCLKFreq+0x348>

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34006d30:	f7fb f932 	bl	34001f98 <LL_RCC_HSE_IsReady>
34006d34:	4603      	mov	r3, r0
34006d36:	2b00      	cmp	r3, #0
34006d38:	f000 8162 	beq.w	34007000 <RCCEx_GetCLKPCLKFreq+0x34c>
        {
          clkp_frequency = HSE_VALUE;
34006d3c:	4b99      	ldr	r3, [pc, #612]	@ (34006fa4 <RCCEx_GetCLKPCLKFreq+0x2f0>)
34006d3e:	60fb      	str	r3, [r7, #12]
        }
        break;
34006d40:	e15e      	b.n	34007000 <RCCEx_GetCLKPCLKFreq+0x34c>

      case LL_RCC_CLKP_CLKSOURCE_IC5:
        if (LL_RCC_IC5_IsEnabled() != 0U)
34006d42:	f7fc f89f 	bl	34002e84 <LL_RCC_IC5_IsEnabled>
34006d46:	4603      	mov	r3, r0
34006d48:	2b00      	cmp	r3, #0
34006d4a:	f000 815b 	beq.w	34007004 <RCCEx_GetCLKPCLKFreq+0x350>
        {
          ic_divider = LL_RCC_IC5_GetDivider();
34006d4e:	f7fc f8bb 	bl	34002ec8 <LL_RCC_IC5_GetDivider>
34006d52:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC5_GetSource())
34006d54:	f7fc f8aa 	bl	34002eac <LL_RCC_IC5_GetSource>
34006d58:	4603      	mov	r3, r0
34006d5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006d5e:	d029      	beq.n	34006db4 <RCCEx_GetCLKPCLKFreq+0x100>
34006d60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006d64:	d82f      	bhi.n	34006dc6 <RCCEx_GetCLKPCLKFreq+0x112>
34006d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006d6a:	d01a      	beq.n	34006da2 <RCCEx_GetCLKPCLKFreq+0xee>
34006d6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006d70:	d829      	bhi.n	34006dc6 <RCCEx_GetCLKPCLKFreq+0x112>
34006d72:	2b00      	cmp	r3, #0
34006d74:	d003      	beq.n	34006d7e <RCCEx_GetCLKPCLKFreq+0xca>
34006d76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006d7a:	d009      	beq.n	34006d90 <RCCEx_GetCLKPCLKFreq+0xdc>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34006d7c:	e023      	b.n	34006dc6 <RCCEx_GetCLKPCLKFreq+0x112>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006d7e:	f7ff fb95 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006d82:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006d84:	68fa      	ldr	r2, [r7, #12]
34006d86:	68bb      	ldr	r3, [r7, #8]
34006d88:	fbb2 f3f3 	udiv	r3, r2, r3
34006d8c:	60fb      	str	r3, [r7, #12]
              break;
34006d8e:	e01b      	b.n	34006dc8 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34006d90:	f7ff fbd2 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34006d94:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006d96:	68fa      	ldr	r2, [r7, #12]
34006d98:	68bb      	ldr	r3, [r7, #8]
34006d9a:	fbb2 f3f3 	udiv	r3, r2, r3
34006d9e:	60fb      	str	r3, [r7, #12]
              break;
34006da0:	e012      	b.n	34006dc8 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34006da2:	f7ff fc0f 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34006da6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006da8:	68fa      	ldr	r2, [r7, #12]
34006daa:	68bb      	ldr	r3, [r7, #8]
34006dac:	fbb2 f3f3 	udiv	r3, r2, r3
34006db0:	60fb      	str	r3, [r7, #12]
              break;
34006db2:	e009      	b.n	34006dc8 <RCCEx_GetCLKPCLKFreq+0x114>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34006db4:	f7ff fc4c 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34006db8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006dba:	68fa      	ldr	r2, [r7, #12]
34006dbc:	68bb      	ldr	r3, [r7, #8]
34006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
34006dc2:	60fb      	str	r3, [r7, #12]
              break;
34006dc4:	e000      	b.n	34006dc8 <RCCEx_GetCLKPCLKFreq+0x114>
              break;
34006dc6:	bf00      	nop
          }
        }
        break;
34006dc8:	e11c      	b.n	34007004 <RCCEx_GetCLKPCLKFreq+0x350>

      case LL_RCC_CLKP_CLKSOURCE_IC10:
        if (LL_RCC_IC10_IsEnabled() != 0U)
34006dca:	f7fc f95b 	bl	34003084 <LL_RCC_IC10_IsEnabled>
34006dce:	4603      	mov	r3, r0
34006dd0:	2b00      	cmp	r3, #0
34006dd2:	f000 8119 	beq.w	34007008 <RCCEx_GetCLKPCLKFreq+0x354>
        {
          ic_divider = LL_RCC_IC10_GetDivider();
34006dd6:	f7fc f977 	bl	340030c8 <LL_RCC_IC10_GetDivider>
34006dda:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC10_GetSource())
34006ddc:	f7fc f966 	bl	340030ac <LL_RCC_IC10_GetSource>
34006de0:	4603      	mov	r3, r0
34006de2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006de6:	d029      	beq.n	34006e3c <RCCEx_GetCLKPCLKFreq+0x188>
34006de8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006dec:	d82f      	bhi.n	34006e4e <RCCEx_GetCLKPCLKFreq+0x19a>
34006dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006df2:	d01a      	beq.n	34006e2a <RCCEx_GetCLKPCLKFreq+0x176>
34006df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006df8:	d829      	bhi.n	34006e4e <RCCEx_GetCLKPCLKFreq+0x19a>
34006dfa:	2b00      	cmp	r3, #0
34006dfc:	d003      	beq.n	34006e06 <RCCEx_GetCLKPCLKFreq+0x152>
34006dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006e02:	d009      	beq.n	34006e18 <RCCEx_GetCLKPCLKFreq+0x164>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34006e04:	e023      	b.n	34006e4e <RCCEx_GetCLKPCLKFreq+0x19a>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006e06:	f7ff fb51 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006e0a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006e0c:	68fa      	ldr	r2, [r7, #12]
34006e0e:	68bb      	ldr	r3, [r7, #8]
34006e10:	fbb2 f3f3 	udiv	r3, r2, r3
34006e14:	60fb      	str	r3, [r7, #12]
              break;
34006e16:	e01b      	b.n	34006e50 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34006e18:	f7ff fb8e 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34006e1c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006e1e:	68fa      	ldr	r2, [r7, #12]
34006e20:	68bb      	ldr	r3, [r7, #8]
34006e22:	fbb2 f3f3 	udiv	r3, r2, r3
34006e26:	60fb      	str	r3, [r7, #12]
              break;
34006e28:	e012      	b.n	34006e50 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34006e2a:	f7ff fbcb 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34006e2e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006e30:	68fa      	ldr	r2, [r7, #12]
34006e32:	68bb      	ldr	r3, [r7, #8]
34006e34:	fbb2 f3f3 	udiv	r3, r2, r3
34006e38:	60fb      	str	r3, [r7, #12]
              break;
34006e3a:	e009      	b.n	34006e50 <RCCEx_GetCLKPCLKFreq+0x19c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34006e3c:	f7ff fc08 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34006e40:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006e42:	68fa      	ldr	r2, [r7, #12]
34006e44:	68bb      	ldr	r3, [r7, #8]
34006e46:	fbb2 f3f3 	udiv	r3, r2, r3
34006e4a:	60fb      	str	r3, [r7, #12]
              break;
34006e4c:	e000      	b.n	34006e50 <RCCEx_GetCLKPCLKFreq+0x19c>
              break;
34006e4e:	bf00      	nop
          }
        }
        break;
34006e50:	e0da      	b.n	34007008 <RCCEx_GetCLKPCLKFreq+0x354>

      case LL_RCC_CLKP_CLKSOURCE_IC15:
        if (LL_RCC_IC15_IsEnabled() != 0U)
34006e52:	f7fc fa17 	bl	34003284 <LL_RCC_IC15_IsEnabled>
34006e56:	4603      	mov	r3, r0
34006e58:	2b00      	cmp	r3, #0
34006e5a:	f000 80d7 	beq.w	3400700c <RCCEx_GetCLKPCLKFreq+0x358>
        {
          ic_divider = LL_RCC_IC15_GetDivider();
34006e5e:	f7fc fa33 	bl	340032c8 <LL_RCC_IC15_GetDivider>
34006e62:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC15_GetSource())
34006e64:	f7fc fa22 	bl	340032ac <LL_RCC_IC15_GetSource>
34006e68:	4603      	mov	r3, r0
34006e6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006e6e:	d029      	beq.n	34006ec4 <RCCEx_GetCLKPCLKFreq+0x210>
34006e70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006e74:	d82f      	bhi.n	34006ed6 <RCCEx_GetCLKPCLKFreq+0x222>
34006e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006e7a:	d01a      	beq.n	34006eb2 <RCCEx_GetCLKPCLKFreq+0x1fe>
34006e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006e80:	d829      	bhi.n	34006ed6 <RCCEx_GetCLKPCLKFreq+0x222>
34006e82:	2b00      	cmp	r3, #0
34006e84:	d003      	beq.n	34006e8e <RCCEx_GetCLKPCLKFreq+0x1da>
34006e86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006e8a:	d009      	beq.n	34006ea0 <RCCEx_GetCLKPCLKFreq+0x1ec>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34006e8c:	e023      	b.n	34006ed6 <RCCEx_GetCLKPCLKFreq+0x222>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006e8e:	f7ff fb0d 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006e92:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006e94:	68fa      	ldr	r2, [r7, #12]
34006e96:	68bb      	ldr	r3, [r7, #8]
34006e98:	fbb2 f3f3 	udiv	r3, r2, r3
34006e9c:	60fb      	str	r3, [r7, #12]
              break;
34006e9e:	e01b      	b.n	34006ed8 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34006ea0:	f7ff fb4a 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34006ea4:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006ea6:	68fa      	ldr	r2, [r7, #12]
34006ea8:	68bb      	ldr	r3, [r7, #8]
34006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
34006eae:	60fb      	str	r3, [r7, #12]
              break;
34006eb0:	e012      	b.n	34006ed8 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34006eb2:	f7ff fb87 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34006eb6:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006eb8:	68fa      	ldr	r2, [r7, #12]
34006eba:	68bb      	ldr	r3, [r7, #8]
34006ebc:	fbb2 f3f3 	udiv	r3, r2, r3
34006ec0:	60fb      	str	r3, [r7, #12]
              break;
34006ec2:	e009      	b.n	34006ed8 <RCCEx_GetCLKPCLKFreq+0x224>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34006ec4:	f7ff fbc4 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34006ec8:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006eca:	68fa      	ldr	r2, [r7, #12]
34006ecc:	68bb      	ldr	r3, [r7, #8]
34006ece:	fbb2 f3f3 	udiv	r3, r2, r3
34006ed2:	60fb      	str	r3, [r7, #12]
              break;
34006ed4:	e000      	b.n	34006ed8 <RCCEx_GetCLKPCLKFreq+0x224>
              break;
34006ed6:	bf00      	nop
          }
        }
        break;
34006ed8:	e098      	b.n	3400700c <RCCEx_GetCLKPCLKFreq+0x358>

      case LL_RCC_CLKP_CLKSOURCE_IC19:
        if (LL_RCC_IC19_IsEnabled() != 0U)
34006eda:	f7fc fad3 	bl	34003484 <LL_RCC_IC19_IsEnabled>
34006ede:	4603      	mov	r3, r0
34006ee0:	2b00      	cmp	r3, #0
34006ee2:	f000 8095 	beq.w	34007010 <RCCEx_GetCLKPCLKFreq+0x35c>
        {
          ic_divider = LL_RCC_IC19_GetDivider();
34006ee6:	f7fc faef 	bl	340034c8 <LL_RCC_IC19_GetDivider>
34006eea:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC19_GetSource())
34006eec:	f7fc fade 	bl	340034ac <LL_RCC_IC19_GetSource>
34006ef0:	4603      	mov	r3, r0
34006ef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006ef6:	d029      	beq.n	34006f4c <RCCEx_GetCLKPCLKFreq+0x298>
34006ef8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006efc:	d82f      	bhi.n	34006f5e <RCCEx_GetCLKPCLKFreq+0x2aa>
34006efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006f02:	d01a      	beq.n	34006f3a <RCCEx_GetCLKPCLKFreq+0x286>
34006f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006f08:	d829      	bhi.n	34006f5e <RCCEx_GetCLKPCLKFreq+0x2aa>
34006f0a:	2b00      	cmp	r3, #0
34006f0c:	d003      	beq.n	34006f16 <RCCEx_GetCLKPCLKFreq+0x262>
34006f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006f12:	d009      	beq.n	34006f28 <RCCEx_GetCLKPCLKFreq+0x274>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34006f14:	e023      	b.n	34006f5e <RCCEx_GetCLKPCLKFreq+0x2aa>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006f16:	f7ff fac9 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006f1a:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006f1c:	68fa      	ldr	r2, [r7, #12]
34006f1e:	68bb      	ldr	r3, [r7, #8]
34006f20:	fbb2 f3f3 	udiv	r3, r2, r3
34006f24:	60fb      	str	r3, [r7, #12]
              break;
34006f26:	e01b      	b.n	34006f60 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34006f28:	f7ff fb06 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34006f2c:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006f2e:	68fa      	ldr	r2, [r7, #12]
34006f30:	68bb      	ldr	r3, [r7, #8]
34006f32:	fbb2 f3f3 	udiv	r3, r2, r3
34006f36:	60fb      	str	r3, [r7, #12]
              break;
34006f38:	e012      	b.n	34006f60 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34006f3a:	f7ff fb43 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34006f3e:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006f40:	68fa      	ldr	r2, [r7, #12]
34006f42:	68bb      	ldr	r3, [r7, #8]
34006f44:	fbb2 f3f3 	udiv	r3, r2, r3
34006f48:	60fb      	str	r3, [r7, #12]
              break;
34006f4a:	e009      	b.n	34006f60 <RCCEx_GetCLKPCLKFreq+0x2ac>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34006f4c:	f7ff fb80 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34006f50:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006f52:	68fa      	ldr	r2, [r7, #12]
34006f54:	68bb      	ldr	r3, [r7, #8]
34006f56:	fbb2 f3f3 	udiv	r3, r2, r3
34006f5a:	60fb      	str	r3, [r7, #12]
              break;
34006f5c:	e000      	b.n	34006f60 <RCCEx_GetCLKPCLKFreq+0x2ac>
              break;
34006f5e:	bf00      	nop
          }
        }
        break;
34006f60:	e056      	b.n	34007010 <RCCEx_GetCLKPCLKFreq+0x35c>

      case LL_RCC_CLKP_CLKSOURCE_IC20:
        if (LL_RCC_IC20_IsEnabled() != 0U)
34006f62:	f7fc facf 	bl	34003504 <LL_RCC_IC20_IsEnabled>
34006f66:	4603      	mov	r3, r0
34006f68:	2b00      	cmp	r3, #0
34006f6a:	d053      	beq.n	34007014 <RCCEx_GetCLKPCLKFreq+0x360>
        {
          ic_divider = LL_RCC_IC20_GetDivider();
34006f6c:	f7fc faec 	bl	34003548 <LL_RCC_IC20_GetDivider>
34006f70:	60b8      	str	r0, [r7, #8]
          switch (LL_RCC_IC20_GetSource())
34006f72:	f7fc fadb 	bl	3400352c <LL_RCC_IC20_GetSource>
34006f76:	4603      	mov	r3, r0
34006f78:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006f7c:	d02f      	beq.n	34006fde <RCCEx_GetCLKPCLKFreq+0x32a>
34006f7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34006f82:	d835      	bhi.n	34006ff0 <RCCEx_GetCLKPCLKFreq+0x33c>
34006f84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006f88:	d020      	beq.n	34006fcc <RCCEx_GetCLKPCLKFreq+0x318>
34006f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34006f8e:	d82f      	bhi.n	34006ff0 <RCCEx_GetCLKPCLKFreq+0x33c>
34006f90:	2b00      	cmp	r3, #0
34006f92:	d009      	beq.n	34006fa8 <RCCEx_GetCLKPCLKFreq+0x2f4>
34006f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34006f98:	d00f      	beq.n	34006fba <RCCEx_GetCLKPCLKFreq+0x306>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
              clkp_frequency = clkp_frequency / ic_divider;
              break;
            default:
              /* Unexpected case */
              break;
34006f9a:	e029      	b.n	34006ff0 <RCCEx_GetCLKPCLKFreq+0x33c>
34006f9c:	03d09000 	.word	0x03d09000
34006fa0:	003d0900 	.word	0x003d0900
34006fa4:	02dc6c00 	.word	0x02dc6c00
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34006fa8:	f7ff fa80 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34006fac:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006fae:	68fa      	ldr	r2, [r7, #12]
34006fb0:	68bb      	ldr	r3, [r7, #8]
34006fb2:	fbb2 f3f3 	udiv	r3, r2, r3
34006fb6:	60fb      	str	r3, [r7, #12]
              break;
34006fb8:	e01b      	b.n	34006ff2 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34006fba:	f7ff fabd 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34006fbe:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006fc0:	68fa      	ldr	r2, [r7, #12]
34006fc2:	68bb      	ldr	r3, [r7, #8]
34006fc4:	fbb2 f3f3 	udiv	r3, r2, r3
34006fc8:	60fb      	str	r3, [r7, #12]
              break;
34006fca:	e012      	b.n	34006ff2 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34006fcc:	f7ff fafa 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34006fd0:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006fd2:	68fa      	ldr	r2, [r7, #12]
34006fd4:	68bb      	ldr	r3, [r7, #8]
34006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
34006fda:	60fb      	str	r3, [r7, #12]
              break;
34006fdc:	e009      	b.n	34006ff2 <RCCEx_GetCLKPCLKFreq+0x33e>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34006fde:	f7ff fb37 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34006fe2:	60f8      	str	r0, [r7, #12]
              clkp_frequency = clkp_frequency / ic_divider;
34006fe4:	68fa      	ldr	r2, [r7, #12]
34006fe6:	68bb      	ldr	r3, [r7, #8]
34006fe8:	fbb2 f3f3 	udiv	r3, r2, r3
34006fec:	60fb      	str	r3, [r7, #12]
              break;
34006fee:	e000      	b.n	34006ff2 <RCCEx_GetCLKPCLKFreq+0x33e>
              break;
34006ff0:	bf00      	nop
          }
        }
        break;
34006ff2:	e00f      	b.n	34007014 <RCCEx_GetCLKPCLKFreq+0x360>

      default:
        /* Unexpected case */
        break;
34006ff4:	bf00      	nop
34006ff6:	e00e      	b.n	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34006ff8:	bf00      	nop
34006ffa:	e00c      	b.n	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34006ffc:	bf00      	nop
34006ffe:	e00a      	b.n	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34007000:	bf00      	nop
34007002:	e008      	b.n	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34007004:	bf00      	nop
34007006:	e006      	b.n	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34007008:	bf00      	nop
3400700a:	e004      	b.n	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
3400700c:	bf00      	nop
3400700e:	e002      	b.n	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34007010:	bf00      	nop
34007012:	e000      	b.n	34007016 <RCCEx_GetCLKPCLKFreq+0x362>
        break;
34007014:	bf00      	nop
    }
  }

  return clkp_frequency;
34007016:	68fb      	ldr	r3, [r7, #12]
}
34007018:	4618      	mov	r0, r3
3400701a:	3710      	adds	r7, #16
3400701c:	46bd      	mov	sp, r7
3400701e:	bd80      	pop	{r7, pc}

34007020 <RCCEx_GetCSICLKFreq>:
  * @brief  Return CSI clock frequency
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCSICLKFreq(void)
{
34007020:	b580      	push	{r7, lr}
34007022:	b082      	sub	sp, #8
34007024:	af00      	add	r7, sp, #0
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
34007026:	2300      	movs	r3, #0
34007028:	607b      	str	r3, [r7, #4]

  if (LL_RCC_IC18_IsEnabled() != 0U)
3400702a:	f7fc f9eb 	bl	34003404 <LL_RCC_IC18_IsEnabled>
3400702e:	4603      	mov	r3, r0
34007030:	2b00      	cmp	r3, #0
34007032:	d03c      	beq.n	340070ae <RCCEx_GetCSICLKFreq+0x8e>
  {
    uint32_t ic_divider = LL_RCC_IC18_GetDivider();
34007034:	f7fc fa08 	bl	34003448 <LL_RCC_IC18_GetDivider>
34007038:	6038      	str	r0, [r7, #0]
    switch (LL_RCC_IC18_GetSource())
3400703a:	f7fc f9f7 	bl	3400342c <LL_RCC_IC18_GetSource>
3400703e:	4603      	mov	r3, r0
34007040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007044:	d029      	beq.n	3400709a <RCCEx_GetCSICLKFreq+0x7a>
34007046:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400704a:	d82f      	bhi.n	340070ac <RCCEx_GetCSICLKFreq+0x8c>
3400704c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007050:	d01a      	beq.n	34007088 <RCCEx_GetCSICLKFreq+0x68>
34007052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007056:	d829      	bhi.n	340070ac <RCCEx_GetCSICLKFreq+0x8c>
34007058:	2b00      	cmp	r3, #0
3400705a:	d003      	beq.n	34007064 <RCCEx_GetCSICLKFreq+0x44>
3400705c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007060:	d009      	beq.n	34007076 <RCCEx_GetCSICLKFreq+0x56>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
        clkp_frequency = clkp_frequency / ic_divider;
        break;
      default:
        /* Unexpected case */
        break;
34007062:	e023      	b.n	340070ac <RCCEx_GetCSICLKFreq+0x8c>
        clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007064:	f7ff fa22 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007068:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3400706a:	687a      	ldr	r2, [r7, #4]
3400706c:	683b      	ldr	r3, [r7, #0]
3400706e:	fbb2 f3f3 	udiv	r3, r2, r3
34007072:	607b      	str	r3, [r7, #4]
        break;
34007074:	e01b      	b.n	340070ae <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007076:	f7ff fa5f 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
3400707a:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3400707c:	687a      	ldr	r2, [r7, #4]
3400707e:	683b      	ldr	r3, [r7, #0]
34007080:	fbb2 f3f3 	udiv	r3, r2, r3
34007084:	607b      	str	r3, [r7, #4]
        break;
34007086:	e012      	b.n	340070ae <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007088:	f7ff fa9c 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
3400708c:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
3400708e:	687a      	ldr	r2, [r7, #4]
34007090:	683b      	ldr	r3, [r7, #0]
34007092:	fbb2 f3f3 	udiv	r3, r2, r3
34007096:	607b      	str	r3, [r7, #4]
        break;
34007098:	e009      	b.n	340070ae <RCCEx_GetCSICLKFreq+0x8e>
        clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400709a:	f7ff fad9 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
3400709e:	6078      	str	r0, [r7, #4]
        clkp_frequency = clkp_frequency / ic_divider;
340070a0:	687a      	ldr	r2, [r7, #4]
340070a2:	683b      	ldr	r3, [r7, #0]
340070a4:	fbb2 f3f3 	udiv	r3, r2, r3
340070a8:	607b      	str	r3, [r7, #4]
        break;
340070aa:	e000      	b.n	340070ae <RCCEx_GetCSICLKFreq+0x8e>
        break;
340070ac:	bf00      	nop
    }
  }

  return clkp_frequency;
340070ae:	687b      	ldr	r3, [r7, #4]
}
340070b0:	4618      	mov	r0, r3
340070b2:	3708      	adds	r7, #8
340070b4:	46bd      	mov	sp, r7
340070b6:	bd80      	pop	{r7, pc}

340070b8 <RCCEx_GetDCMIPPCLKFreq>:
  *         @arg @ref RCCEx_DCMIPP_Clock_Source
  * @retval DCMIPP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetDCMIPPCLKFreq(uint32_t DCMIPPxSource)
{
340070b8:	b580      	push	{r7, lr}
340070ba:	b084      	sub	sp, #16
340070bc:	af00      	add	r7, sp, #0
340070be:	6078      	str	r0, [r7, #4]
  uint32_t dcmipp_frequency = RCC_PERIPH_FREQUENCY_NO;
340070c0:	2300      	movs	r3, #0
340070c2:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
340070c4:	6878      	ldr	r0, [r7, #4]
340070c6:	f7fb fa65 	bl	34002594 <LL_RCC_GetDCMIPPClockSource>
340070ca:	4603      	mov	r3, r0
340070cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340070d0:	d062      	beq.n	34007198 <RCCEx_GetDCMIPPCLKFreq+0xe0>
340070d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
340070d6:	d86d      	bhi.n	340071b4 <RCCEx_GetDCMIPPCLKFreq+0xfc>
340070d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340070dc:	d019      	beq.n	34007112 <RCCEx_GetDCMIPPCLKFreq+0x5a>
340070de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
340070e2:	d867      	bhi.n	340071b4 <RCCEx_GetDCMIPPCLKFreq+0xfc>
340070e4:	2b00      	cmp	r3, #0
340070e6:	d003      	beq.n	340070f0 <RCCEx_GetDCMIPPCLKFreq+0x38>
340070e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
340070ec:	d00c      	beq.n	34007108 <RCCEx_GetDCMIPPCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
340070ee:	e061      	b.n	340071b4 <RCCEx_GetDCMIPPCLKFreq+0xfc>
      dcmipp_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340070f0:	f7fa fea2 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
340070f4:	4603      	mov	r3, r0
340070f6:	4618      	mov	r0, r3
340070f8:	f7ff faf0 	bl	340066dc <RCCEx_GetHCLKFreq>
340070fc:	4603      	mov	r3, r0
340070fe:	4618      	mov	r0, r3
34007100:	f7ff fb2f 	bl	34006762 <RCCEx_GetPCLK5Freq>
34007104:	60f8      	str	r0, [r7, #12]
      break;
34007106:	e05a      	b.n	340071be <RCCEx_GetDCMIPPCLKFreq+0x106>
      dcmipp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007108:	2007      	movs	r0, #7
3400710a:	f7ff fdd3 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
3400710e:	60f8      	str	r0, [r7, #12]
      break;
34007110:	e055      	b.n	340071be <RCCEx_GetDCMIPPCLKFreq+0x106>
      if (LL_RCC_IC17_IsEnabled() != 0U)
34007112:	f7fc f937 	bl	34003384 <LL_RCC_IC17_IsEnabled>
34007116:	4603      	mov	r3, r0
34007118:	2b00      	cmp	r3, #0
3400711a:	d04d      	beq.n	340071b8 <RCCEx_GetDCMIPPCLKFreq+0x100>
        ic_divider = LL_RCC_IC17_GetDivider();
3400711c:	f7fc f954 	bl	340033c8 <LL_RCC_IC17_GetDivider>
34007120:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC17_GetSource())
34007122:	f7fc f943 	bl	340033ac <LL_RCC_IC17_GetSource>
34007126:	4603      	mov	r3, r0
34007128:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400712c:	d029      	beq.n	34007182 <RCCEx_GetDCMIPPCLKFreq+0xca>
3400712e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007132:	d82f      	bhi.n	34007194 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34007134:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007138:	d01a      	beq.n	34007170 <RCCEx_GetDCMIPPCLKFreq+0xb8>
3400713a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400713e:	d829      	bhi.n	34007194 <RCCEx_GetDCMIPPCLKFreq+0xdc>
34007140:	2b00      	cmp	r3, #0
34007142:	d003      	beq.n	3400714c <RCCEx_GetDCMIPPCLKFreq+0x94>
34007144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007148:	d009      	beq.n	3400715e <RCCEx_GetDCMIPPCLKFreq+0xa6>
            break;
3400714a:	e023      	b.n	34007194 <RCCEx_GetDCMIPPCLKFreq+0xdc>
            dcmipp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400714c:	f7ff f9ae 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007150:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34007152:	68fa      	ldr	r2, [r7, #12]
34007154:	68bb      	ldr	r3, [r7, #8]
34007156:	fbb2 f3f3 	udiv	r3, r2, r3
3400715a:	60fb      	str	r3, [r7, #12]
            break;
3400715c:	e01b      	b.n	34007196 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400715e:	f7ff f9eb 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34007162:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34007164:	68fa      	ldr	r2, [r7, #12]
34007166:	68bb      	ldr	r3, [r7, #8]
34007168:	fbb2 f3f3 	udiv	r3, r2, r3
3400716c:	60fb      	str	r3, [r7, #12]
            break;
3400716e:	e012      	b.n	34007196 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007170:	f7ff fa28 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007174:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34007176:	68fa      	ldr	r2, [r7, #12]
34007178:	68bb      	ldr	r3, [r7, #8]
3400717a:	fbb2 f3f3 	udiv	r3, r2, r3
3400717e:	60fb      	str	r3, [r7, #12]
            break;
34007180:	e009      	b.n	34007196 <RCCEx_GetDCMIPPCLKFreq+0xde>
            dcmipp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007182:	f7ff fa65 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34007186:	60f8      	str	r0, [r7, #12]
            dcmipp_frequency = dcmipp_frequency / ic_divider;
34007188:	68fa      	ldr	r2, [r7, #12]
3400718a:	68bb      	ldr	r3, [r7, #8]
3400718c:	fbb2 f3f3 	udiv	r3, r2, r3
34007190:	60fb      	str	r3, [r7, #12]
            break;
34007192:	e000      	b.n	34007196 <RCCEx_GetDCMIPPCLKFreq+0xde>
            break;
34007194:	bf00      	nop
      break;
34007196:	e00f      	b.n	340071b8 <RCCEx_GetDCMIPPCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34007198:	f7fa ff10 	bl	34001fbc <LL_RCC_HSI_IsReady>
3400719c:	4603      	mov	r3, r0
3400719e:	2b00      	cmp	r3, #0
340071a0:	d00c      	beq.n	340071bc <RCCEx_GetDCMIPPCLKFreq+0x104>
        dcmipp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340071a2:	f7fa ff1d 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
340071a6:	4603      	mov	r3, r0
340071a8:	09db      	lsrs	r3, r3, #7
340071aa:	4a07      	ldr	r2, [pc, #28]	@ (340071c8 <RCCEx_GetDCMIPPCLKFreq+0x110>)
340071ac:	fa22 f303 	lsr.w	r3, r2, r3
340071b0:	60fb      	str	r3, [r7, #12]
      break;
340071b2:	e003      	b.n	340071bc <RCCEx_GetDCMIPPCLKFreq+0x104>
      break;
340071b4:	bf00      	nop
340071b6:	e002      	b.n	340071be <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340071b8:	bf00      	nop
340071ba:	e000      	b.n	340071be <RCCEx_GetDCMIPPCLKFreq+0x106>
      break;
340071bc:	bf00      	nop
  }

  return dcmipp_frequency;
340071be:	68fb      	ldr	r3, [r7, #12]
}
340071c0:	4618      	mov	r0, r3
340071c2:	3710      	adds	r7, #16
340071c4:	46bd      	mov	sp, r7
340071c6:	bd80      	pop	{r7, pc}
340071c8:	03d09000 	.word	0x03d09000

340071cc <RCCEx_GetETH1CLKFreq>:
  *         @arg @ref RCCEx_ETH1_Clock_Source
  * @retval ETH1 clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1CLKFreq(uint32_t ETH1xSource)
{
340071cc:	b580      	push	{r7, lr}
340071ce:	b084      	sub	sp, #16
340071d0:	af00      	add	r7, sp, #0
340071d2:	6078      	str	r0, [r7, #4]
  uint32_t eth1_frequency = RCC_PERIPH_FREQUENCY_NO;
340071d4:	2300      	movs	r3, #0
340071d6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHClockSource(ETH1xSource))
340071d8:	6878      	ldr	r0, [r7, #4]
340071da:	f7fb f9ed 	bl	340025b8 <LL_RCC_GetETHClockSource>
340071de:	4603      	mov	r3, r0
340071e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340071e4:	d05e      	beq.n	340072a4 <RCCEx_GetETH1CLKFreq+0xd8>
340071e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
340071ea:	d863      	bhi.n	340072b4 <RCCEx_GetETH1CLKFreq+0xe8>
340071ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340071f0:	d015      	beq.n	3400721e <RCCEx_GetETH1CLKFreq+0x52>
340071f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
340071f6:	d85d      	bhi.n	340072b4 <RCCEx_GetETH1CLKFreq+0xe8>
340071f8:	2b00      	cmp	r3, #0
340071fa:	d003      	beq.n	34007204 <RCCEx_GetETH1CLKFreq+0x38>
340071fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34007200:	d008      	beq.n	34007214 <RCCEx_GetETH1CLKFreq+0x48>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007202:	e057      	b.n	340072b4 <RCCEx_GetETH1CLKFreq+0xe8>
      eth1_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34007204:	f7fa fe18 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34007208:	4603      	mov	r3, r0
3400720a:	4618      	mov	r0, r3
3400720c:	f7ff fa66 	bl	340066dc <RCCEx_GetHCLKFreq>
34007210:	60f8      	str	r0, [r7, #12]
      break;
34007212:	e054      	b.n	340072be <RCCEx_GetETH1CLKFreq+0xf2>
      eth1_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007214:	2007      	movs	r0, #7
34007216:	f7ff fd4d 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
3400721a:	60f8      	str	r0, [r7, #12]
      break;
3400721c:	e04f      	b.n	340072be <RCCEx_GetETH1CLKFreq+0xf2>
      if (LL_RCC_IC12_IsEnabled() != 0U)
3400721e:	f7fb ff71 	bl	34003104 <LL_RCC_IC12_IsEnabled>
34007222:	4603      	mov	r3, r0
34007224:	2b00      	cmp	r3, #0
34007226:	d047      	beq.n	340072b8 <RCCEx_GetETH1CLKFreq+0xec>
        ic_divider = LL_RCC_IC12_GetDivider();
34007228:	f7fb ff8e 	bl	34003148 <LL_RCC_IC12_GetDivider>
3400722c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC12_GetSource())
3400722e:	f7fb ff7d 	bl	3400312c <LL_RCC_IC12_GetSource>
34007232:	4603      	mov	r3, r0
34007234:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007238:	d029      	beq.n	3400728e <RCCEx_GetETH1CLKFreq+0xc2>
3400723a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400723e:	d82f      	bhi.n	340072a0 <RCCEx_GetETH1CLKFreq+0xd4>
34007240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007244:	d01a      	beq.n	3400727c <RCCEx_GetETH1CLKFreq+0xb0>
34007246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400724a:	d829      	bhi.n	340072a0 <RCCEx_GetETH1CLKFreq+0xd4>
3400724c:	2b00      	cmp	r3, #0
3400724e:	d003      	beq.n	34007258 <RCCEx_GetETH1CLKFreq+0x8c>
34007250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007254:	d009      	beq.n	3400726a <RCCEx_GetETH1CLKFreq+0x9e>
            break;
34007256:	e023      	b.n	340072a0 <RCCEx_GetETH1CLKFreq+0xd4>
            eth1_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007258:	f7ff f928 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
3400725c:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
3400725e:	68fa      	ldr	r2, [r7, #12]
34007260:	68bb      	ldr	r3, [r7, #8]
34007262:	fbb2 f3f3 	udiv	r3, r2, r3
34007266:	60fb      	str	r3, [r7, #12]
            break;
34007268:	e01b      	b.n	340072a2 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400726a:	f7ff f965 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
3400726e:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34007270:	68fa      	ldr	r2, [r7, #12]
34007272:	68bb      	ldr	r3, [r7, #8]
34007274:	fbb2 f3f3 	udiv	r3, r2, r3
34007278:	60fb      	str	r3, [r7, #12]
            break;
3400727a:	e012      	b.n	340072a2 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400727c:	f7ff f9a2 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007280:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34007282:	68fa      	ldr	r2, [r7, #12]
34007284:	68bb      	ldr	r3, [r7, #8]
34007286:	fbb2 f3f3 	udiv	r3, r2, r3
3400728a:	60fb      	str	r3, [r7, #12]
            break;
3400728c:	e009      	b.n	340072a2 <RCCEx_GetETH1CLKFreq+0xd6>
            eth1_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400728e:	f7ff f9df 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34007292:	60f8      	str	r0, [r7, #12]
            eth1_frequency = eth1_frequency / ic_divider;
34007294:	68fa      	ldr	r2, [r7, #12]
34007296:	68bb      	ldr	r3, [r7, #8]
34007298:	fbb2 f3f3 	udiv	r3, r2, r3
3400729c:	60fb      	str	r3, [r7, #12]
            break;
3400729e:	e000      	b.n	340072a2 <RCCEx_GetETH1CLKFreq+0xd6>
            break;
340072a0:	bf00      	nop
      break;
340072a2:	e009      	b.n	340072b8 <RCCEx_GetETH1CLKFreq+0xec>
      if (LL_RCC_HSE_IsReady() != 0U)
340072a4:	f7fa fe78 	bl	34001f98 <LL_RCC_HSE_IsReady>
340072a8:	4603      	mov	r3, r0
340072aa:	2b00      	cmp	r3, #0
340072ac:	d006      	beq.n	340072bc <RCCEx_GetETH1CLKFreq+0xf0>
        eth1_frequency = HSE_VALUE;
340072ae:	4b06      	ldr	r3, [pc, #24]	@ (340072c8 <RCCEx_GetETH1CLKFreq+0xfc>)
340072b0:	60fb      	str	r3, [r7, #12]
      break;
340072b2:	e003      	b.n	340072bc <RCCEx_GetETH1CLKFreq+0xf0>
      break;
340072b4:	bf00      	nop
340072b6:	e002      	b.n	340072be <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340072b8:	bf00      	nop
340072ba:	e000      	b.n	340072be <RCCEx_GetETH1CLKFreq+0xf2>
      break;
340072bc:	bf00      	nop
  }

  return eth1_frequency;
340072be:	68fb      	ldr	r3, [r7, #12]
}
340072c0:	4618      	mov	r0, r3
340072c2:	3710      	adds	r7, #16
340072c4:	46bd      	mov	sp, r7
340072c6:	bd80      	pop	{r7, pc}
340072c8:	02dc6c00 	.word	0x02dc6c00

340072cc <RCCEx_GetETH1PTPCLKFreq>:
  *         @arg @ref RCCEx_ETH1_PTP_Clock_Source
  * @retval ETH1PTP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetETH1PTPCLKFreq(uint32_t ETH1PTPxSource)
{
340072cc:	b580      	push	{r7, lr}
340072ce:	b084      	sub	sp, #16
340072d0:	af00      	add	r7, sp, #0
340072d2:	6078      	str	r0, [r7, #4]
  uint32_t eth1ptp_frequency = RCC_PERIPH_FREQUENCY_NO;
340072d4:	2300      	movs	r3, #0
340072d6:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
340072d8:	6878      	ldr	r0, [r7, #4]
340072da:	f7fb f97f 	bl	340025dc <LL_RCC_GetETHPTPClockSource>
340072de:	4603      	mov	r3, r0
340072e0:	2b03      	cmp	r3, #3
340072e2:	d863      	bhi.n	340073ac <RCCEx_GetETH1PTPCLKFreq+0xe0>
340072e4:	a201      	add	r2, pc, #4	@ (adr r2, 340072ec <RCCEx_GetETH1PTPCLKFreq+0x20>)
340072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340072ea:	bf00      	nop
340072ec:	340072fd 	.word	0x340072fd
340072f0:	3400730d 	.word	0x3400730d
340072f4:	34007317 	.word	0x34007317
340072f8:	3400739d 	.word	0x3400739d
  {
    case LL_RCC_ETH1PTP_CLKSOURCE_HCLK:
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340072fc:	f7fa fd9c 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34007300:	4603      	mov	r3, r0
34007302:	4618      	mov	r0, r3
34007304:	f7ff f9ea 	bl	340066dc <RCCEx_GetHCLKFreq>
34007308:	60f8      	str	r0, [r7, #12]
      break;
3400730a:	e054      	b.n	340073b6 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_CLKP:
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400730c:	2007      	movs	r0, #7
3400730e:	f7ff fcd1 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34007312:	60f8      	str	r0, [r7, #12]
      break;
34007314:	e04f      	b.n	340073b6 <RCCEx_GetETH1PTPCLKFreq+0xea>

    case LL_RCC_ETH1PTP_CLKSOURCE_IC13:
      if (LL_RCC_IC13_IsEnabled() != 0U)
34007316:	f7fb ff35 	bl	34003184 <LL_RCC_IC13_IsEnabled>
3400731a:	4603      	mov	r3, r0
3400731c:	2b00      	cmp	r3, #0
3400731e:	d047      	beq.n	340073b0 <RCCEx_GetETH1PTPCLKFreq+0xe4>
      {
        ic_divider = LL_RCC_IC13_GetDivider();
34007320:	f7fb ff52 	bl	340031c8 <LL_RCC_IC13_GetDivider>
34007324:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC13_GetSource())
34007326:	f7fb ff41 	bl	340031ac <LL_RCC_IC13_GetSource>
3400732a:	4603      	mov	r3, r0
3400732c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007330:	d029      	beq.n	34007386 <RCCEx_GetETH1PTPCLKFreq+0xba>
34007332:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007336:	d82f      	bhi.n	34007398 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34007338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400733c:	d01a      	beq.n	34007374 <RCCEx_GetETH1PTPCLKFreq+0xa8>
3400733e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007342:	d829      	bhi.n	34007398 <RCCEx_GetETH1PTPCLKFreq+0xcc>
34007344:	2b00      	cmp	r3, #0
34007346:	d003      	beq.n	34007350 <RCCEx_GetETH1PTPCLKFreq+0x84>
34007348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400734c:	d009      	beq.n	34007362 <RCCEx_GetETH1PTPCLKFreq+0x96>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3400734e:	e023      	b.n	34007398 <RCCEx_GetETH1PTPCLKFreq+0xcc>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007350:	f7ff f8ac 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007354:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34007356:	68fa      	ldr	r2, [r7, #12]
34007358:	68bb      	ldr	r3, [r7, #8]
3400735a:	fbb2 f3f3 	udiv	r3, r2, r3
3400735e:	60fb      	str	r3, [r7, #12]
            break;
34007360:	e01b      	b.n	3400739a <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007362:	f7ff f8e9 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34007366:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34007368:	68fa      	ldr	r2, [r7, #12]
3400736a:	68bb      	ldr	r3, [r7, #8]
3400736c:	fbb2 f3f3 	udiv	r3, r2, r3
34007370:	60fb      	str	r3, [r7, #12]
            break;
34007372:	e012      	b.n	3400739a <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007374:	f7ff f926 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007378:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3400737a:	68fa      	ldr	r2, [r7, #12]
3400737c:	68bb      	ldr	r3, [r7, #8]
3400737e:	fbb2 f3f3 	udiv	r3, r2, r3
34007382:	60fb      	str	r3, [r7, #12]
            break;
34007384:	e009      	b.n	3400739a <RCCEx_GetETH1PTPCLKFreq+0xce>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007386:	f7ff f963 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
3400738a:	60f8      	str	r0, [r7, #12]
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
3400738c:	68fa      	ldr	r2, [r7, #12]
3400738e:	68bb      	ldr	r3, [r7, #8]
34007390:	fbb2 f3f3 	udiv	r3, r2, r3
34007394:	60fb      	str	r3, [r7, #12]
            break;
34007396:	e000      	b.n	3400739a <RCCEx_GetETH1PTPCLKFreq+0xce>
            break;
34007398:	bf00      	nop
        }
      }
      break;
3400739a:	e009      	b.n	340073b0 <RCCEx_GetETH1PTPCLKFreq+0xe4>

    case LL_RCC_ETH1PTP_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
3400739c:	f7fa fdfc 	bl	34001f98 <LL_RCC_HSE_IsReady>
340073a0:	4603      	mov	r3, r0
340073a2:	2b00      	cmp	r3, #0
340073a4:	d006      	beq.n	340073b4 <RCCEx_GetETH1PTPCLKFreq+0xe8>
      {
        eth1ptp_frequency = HSE_VALUE;
340073a6:	4b0a      	ldr	r3, [pc, #40]	@ (340073d0 <RCCEx_GetETH1PTPCLKFreq+0x104>)
340073a8:	60fb      	str	r3, [r7, #12]
      }
      break;
340073aa:	e003      	b.n	340073b4 <RCCEx_GetETH1PTPCLKFreq+0xe8>

    default:
      /* Unexpected case */
      break;
340073ac:	bf00      	nop
340073ae:	e002      	b.n	340073b6 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
340073b0:	bf00      	nop
340073b2:	e000      	b.n	340073b6 <RCCEx_GetETH1PTPCLKFreq+0xea>
      break;
340073b4:	bf00      	nop
  }

  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
340073b6:	f7fa ff4d 	bl	34002254 <LL_RCC_GetETH1PTPDivider>
340073ba:	4603      	mov	r3, r0
340073bc:	091b      	lsrs	r3, r3, #4
340073be:	3301      	adds	r3, #1
340073c0:	68fa      	ldr	r2, [r7, #12]
340073c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
340073c6:	4618      	mov	r0, r3
340073c8:	3710      	adds	r7, #16
340073ca:	46bd      	mov	sp, r7
340073cc:	bd80      	pop	{r7, pc}
340073ce:	bf00      	nop
340073d0:	02dc6c00 	.word	0x02dc6c00

340073d4 <RCCEx_GetFDCANCLKFreq>:
  *         @arg @ref RCCEx_FDCAN_Clock_Source
  * @retval FDCAN clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFDCANCLKFreq(uint32_t FDCANxSource)
{
340073d4:	b580      	push	{r7, lr}
340073d6:	b084      	sub	sp, #16
340073d8:	af00      	add	r7, sp, #0
340073da:	6078      	str	r0, [r7, #4]
  uint32_t fdcan_frequency = RCC_PERIPH_FREQUENCY_NO;
340073dc:	2300      	movs	r3, #0
340073de:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
340073e0:	6878      	ldr	r0, [r7, #4]
340073e2:	f7fb f90d 	bl	34002600 <LL_RCC_GetFDCANClockSource>
340073e6:	4603      	mov	r3, r0
340073e8:	2b03      	cmp	r3, #3
340073ea:	d867      	bhi.n	340074bc <RCCEx_GetFDCANCLKFreq+0xe8>
340073ec:	a201      	add	r2, pc, #4	@ (adr r2, 340073f4 <RCCEx_GetFDCANCLKFreq+0x20>)
340073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
340073f2:	bf00      	nop
340073f4:	34007405 	.word	0x34007405
340073f8:	3400741d 	.word	0x3400741d
340073fc:	34007427 	.word	0x34007427
34007400:	340074ad 	.word	0x340074ad
  {
    case LL_RCC_FDCAN_CLKSOURCE_PCLK1:
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007404:	f7fa fd18 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34007408:	4603      	mov	r3, r0
3400740a:	4618      	mov	r0, r3
3400740c:	f7ff f966 	bl	340066dc <RCCEx_GetHCLKFreq>
34007410:	4603      	mov	r3, r0
34007412:	4618      	mov	r0, r3
34007414:	f7ff f973 	bl	340066fe <RCCEx_GetPCLK1Freq>
34007418:	60f8      	str	r0, [r7, #12]
      break;
3400741a:	e054      	b.n	340074c6 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_CLKP:
      fdcan_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3400741c:	2007      	movs	r0, #7
3400741e:	f7ff fc49 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34007422:	60f8      	str	r0, [r7, #12]
      break;
34007424:	e04f      	b.n	340074c6 <RCCEx_GetFDCANCLKFreq+0xf2>

    case LL_RCC_FDCAN_CLKSOURCE_IC19:
      if (LL_RCC_IC19_IsEnabled() != 0U)
34007426:	f7fc f82d 	bl	34003484 <LL_RCC_IC19_IsEnabled>
3400742a:	4603      	mov	r3, r0
3400742c:	2b00      	cmp	r3, #0
3400742e:	d047      	beq.n	340074c0 <RCCEx_GetFDCANCLKFreq+0xec>
      {
        ic_divider = LL_RCC_IC19_GetDivider();
34007430:	f7fc f84a 	bl	340034c8 <LL_RCC_IC19_GetDivider>
34007434:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC19_GetSource())
34007436:	f7fc f839 	bl	340034ac <LL_RCC_IC19_GetSource>
3400743a:	4603      	mov	r3, r0
3400743c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007440:	d029      	beq.n	34007496 <RCCEx_GetFDCANCLKFreq+0xc2>
34007442:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007446:	d82f      	bhi.n	340074a8 <RCCEx_GetFDCANCLKFreq+0xd4>
34007448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400744c:	d01a      	beq.n	34007484 <RCCEx_GetFDCANCLKFreq+0xb0>
3400744e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007452:	d829      	bhi.n	340074a8 <RCCEx_GetFDCANCLKFreq+0xd4>
34007454:	2b00      	cmp	r3, #0
34007456:	d003      	beq.n	34007460 <RCCEx_GetFDCANCLKFreq+0x8c>
34007458:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400745c:	d009      	beq.n	34007472 <RCCEx_GetFDCANCLKFreq+0x9e>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            fdcan_frequency = fdcan_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3400745e:	e023      	b.n	340074a8 <RCCEx_GetFDCANCLKFreq+0xd4>
            fdcan_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007460:	f7ff f824 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007464:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34007466:	68fa      	ldr	r2, [r7, #12]
34007468:	68bb      	ldr	r3, [r7, #8]
3400746a:	fbb2 f3f3 	udiv	r3, r2, r3
3400746e:	60fb      	str	r3, [r7, #12]
            break;
34007470:	e01b      	b.n	340074aa <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007472:	f7ff f861 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34007476:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
34007478:	68fa      	ldr	r2, [r7, #12]
3400747a:	68bb      	ldr	r3, [r7, #8]
3400747c:	fbb2 f3f3 	udiv	r3, r2, r3
34007480:	60fb      	str	r3, [r7, #12]
            break;
34007482:	e012      	b.n	340074aa <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007484:	f7ff f89e 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007488:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3400748a:	68fa      	ldr	r2, [r7, #12]
3400748c:	68bb      	ldr	r3, [r7, #8]
3400748e:	fbb2 f3f3 	udiv	r3, r2, r3
34007492:	60fb      	str	r3, [r7, #12]
            break;
34007494:	e009      	b.n	340074aa <RCCEx_GetFDCANCLKFreq+0xd6>
            fdcan_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007496:	f7ff f8db 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
3400749a:	60f8      	str	r0, [r7, #12]
            fdcan_frequency = fdcan_frequency / ic_divider;
3400749c:	68fa      	ldr	r2, [r7, #12]
3400749e:	68bb      	ldr	r3, [r7, #8]
340074a0:	fbb2 f3f3 	udiv	r3, r2, r3
340074a4:	60fb      	str	r3, [r7, #12]
            break;
340074a6:	e000      	b.n	340074aa <RCCEx_GetFDCANCLKFreq+0xd6>
            break;
340074a8:	bf00      	nop
        }
      }
      break;
340074aa:	e009      	b.n	340074c0 <RCCEx_GetFDCANCLKFreq+0xec>

    case LL_RCC_FDCAN_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
340074ac:	f7fa fd74 	bl	34001f98 <LL_RCC_HSE_IsReady>
340074b0:	4603      	mov	r3, r0
340074b2:	2b00      	cmp	r3, #0
340074b4:	d006      	beq.n	340074c4 <RCCEx_GetFDCANCLKFreq+0xf0>
      {
        fdcan_frequency = HSE_VALUE;
340074b6:	4b06      	ldr	r3, [pc, #24]	@ (340074d0 <RCCEx_GetFDCANCLKFreq+0xfc>)
340074b8:	60fb      	str	r3, [r7, #12]
      }
      break;
340074ba:	e003      	b.n	340074c4 <RCCEx_GetFDCANCLKFreq+0xf0>

    default:
      /* Unexpected case */
      break;
340074bc:	bf00      	nop
340074be:	e002      	b.n	340074c6 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
340074c0:	bf00      	nop
340074c2:	e000      	b.n	340074c6 <RCCEx_GetFDCANCLKFreq+0xf2>
      break;
340074c4:	bf00      	nop
  }

  return fdcan_frequency;
340074c6:	68fb      	ldr	r3, [r7, #12]
}
340074c8:	4618      	mov	r0, r3
340074ca:	3710      	adds	r7, #16
340074cc:	46bd      	mov	sp, r7
340074ce:	bd80      	pop	{r7, pc}
340074d0:	02dc6c00 	.word	0x02dc6c00

340074d4 <RCCEx_GetFMCCLKFreq>:
  *         @arg @ref RCCEx_FMC_Clock_Source
  * @retval FMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetFMCCLKFreq(uint32_t FMCxSource)
{
340074d4:	b580      	push	{r7, lr}
340074d6:	b084      	sub	sp, #16
340074d8:	af00      	add	r7, sp, #0
340074da:	6078      	str	r0, [r7, #4]
  uint32_t fmc_frequency = RCC_PERIPH_FREQUENCY_NO;
340074dc:	2300      	movs	r3, #0
340074de:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetFMCClockSource(FMCxSource))
340074e0:	6878      	ldr	r0, [r7, #4]
340074e2:	f7fb f89f 	bl	34002624 <LL_RCC_GetFMCClockSource>
340074e6:	4603      	mov	r3, r0
340074e8:	2b30      	cmp	r3, #48	@ 0x30
340074ea:	d05d      	beq.n	340075a8 <RCCEx_GetFMCCLKFreq+0xd4>
340074ec:	2b30      	cmp	r3, #48	@ 0x30
340074ee:	f200 809e 	bhi.w	3400762e <RCCEx_GetFMCCLKFreq+0x15a>
340074f2:	2b20      	cmp	r3, #32
340074f4:	d014      	beq.n	34007520 <RCCEx_GetFMCCLKFreq+0x4c>
340074f6:	2b20      	cmp	r3, #32
340074f8:	f200 8099 	bhi.w	3400762e <RCCEx_GetFMCCLKFreq+0x15a>
340074fc:	2b00      	cmp	r3, #0
340074fe:	d002      	beq.n	34007506 <RCCEx_GetFMCCLKFreq+0x32>
34007500:	2b10      	cmp	r3, #16
34007502:	d008      	beq.n	34007516 <RCCEx_GetFMCCLKFreq+0x42>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007504:	e093      	b.n	3400762e <RCCEx_GetFMCCLKFreq+0x15a>
      fmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34007506:	f7fa fc97 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
3400750a:	4603      	mov	r3, r0
3400750c:	4618      	mov	r0, r3
3400750e:	f7ff f8e5 	bl	340066dc <RCCEx_GetHCLKFreq>
34007512:	60f8      	str	r0, [r7, #12]
      break;
34007514:	e090      	b.n	34007638 <RCCEx_GetFMCCLKFreq+0x164>
      fmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007516:	2007      	movs	r0, #7
34007518:	f7ff fbcc 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
3400751c:	60f8      	str	r0, [r7, #12]
      break;
3400751e:	e08b      	b.n	34007638 <RCCEx_GetFMCCLKFreq+0x164>
      if (LL_RCC_IC3_IsEnabled() != 0U)
34007520:	f7fb fc30 	bl	34002d84 <LL_RCC_IC3_IsEnabled>
34007524:	4603      	mov	r3, r0
34007526:	2b00      	cmp	r3, #0
34007528:	f000 8083 	beq.w	34007632 <RCCEx_GetFMCCLKFreq+0x15e>
        ic_divider = LL_RCC_IC3_GetDivider();
3400752c:	f7fb fc4c 	bl	34002dc8 <LL_RCC_IC3_GetDivider>
34007530:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34007532:	f7fb fc3b 	bl	34002dac <LL_RCC_IC3_GetSource>
34007536:	4603      	mov	r3, r0
34007538:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400753c:	d029      	beq.n	34007592 <RCCEx_GetFMCCLKFreq+0xbe>
3400753e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007542:	d82f      	bhi.n	340075a4 <RCCEx_GetFMCCLKFreq+0xd0>
34007544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007548:	d01a      	beq.n	34007580 <RCCEx_GetFMCCLKFreq+0xac>
3400754a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400754e:	d829      	bhi.n	340075a4 <RCCEx_GetFMCCLKFreq+0xd0>
34007550:	2b00      	cmp	r3, #0
34007552:	d003      	beq.n	3400755c <RCCEx_GetFMCCLKFreq+0x88>
34007554:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007558:	d009      	beq.n	3400756e <RCCEx_GetFMCCLKFreq+0x9a>
            break;
3400755a:	e023      	b.n	340075a4 <RCCEx_GetFMCCLKFreq+0xd0>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400755c:	f7fe ffa6 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007560:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34007562:	68fa      	ldr	r2, [r7, #12]
34007564:	68bb      	ldr	r3, [r7, #8]
34007566:	fbb2 f3f3 	udiv	r3, r2, r3
3400756a:	60fb      	str	r3, [r7, #12]
            break;
3400756c:	e01b      	b.n	340075a6 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400756e:	f7fe ffe3 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34007572:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34007574:	68fa      	ldr	r2, [r7, #12]
34007576:	68bb      	ldr	r3, [r7, #8]
34007578:	fbb2 f3f3 	udiv	r3, r2, r3
3400757c:	60fb      	str	r3, [r7, #12]
            break;
3400757e:	e012      	b.n	340075a6 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007580:	f7ff f820 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007584:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34007586:	68fa      	ldr	r2, [r7, #12]
34007588:	68bb      	ldr	r3, [r7, #8]
3400758a:	fbb2 f3f3 	udiv	r3, r2, r3
3400758e:	60fb      	str	r3, [r7, #12]
            break;
34007590:	e009      	b.n	340075a6 <RCCEx_GetFMCCLKFreq+0xd2>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007592:	f7ff f85d 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34007596:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
34007598:	68fa      	ldr	r2, [r7, #12]
3400759a:	68bb      	ldr	r3, [r7, #8]
3400759c:	fbb2 f3f3 	udiv	r3, r2, r3
340075a0:	60fb      	str	r3, [r7, #12]
            break;
340075a2:	e000      	b.n	340075a6 <RCCEx_GetFMCCLKFreq+0xd2>
            break;
340075a4:	bf00      	nop
      break;
340075a6:	e044      	b.n	34007632 <RCCEx_GetFMCCLKFreq+0x15e>
      if (LL_RCC_IC4_IsEnabled() != 0U)
340075a8:	f7fb fc2c 	bl	34002e04 <LL_RCC_IC4_IsEnabled>
340075ac:	4603      	mov	r3, r0
340075ae:	2b00      	cmp	r3, #0
340075b0:	d041      	beq.n	34007636 <RCCEx_GetFMCCLKFreq+0x162>
        ic_divider = LL_RCC_IC4_GetDivider();
340075b2:	f7fb fc49 	bl	34002e48 <LL_RCC_IC4_GetDivider>
340075b6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
340075b8:	f7fb fc38 	bl	34002e2c <LL_RCC_IC4_GetSource>
340075bc:	4603      	mov	r3, r0
340075be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340075c2:	d029      	beq.n	34007618 <RCCEx_GetFMCCLKFreq+0x144>
340075c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340075c8:	d82f      	bhi.n	3400762a <RCCEx_GetFMCCLKFreq+0x156>
340075ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340075ce:	d01a      	beq.n	34007606 <RCCEx_GetFMCCLKFreq+0x132>
340075d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340075d4:	d829      	bhi.n	3400762a <RCCEx_GetFMCCLKFreq+0x156>
340075d6:	2b00      	cmp	r3, #0
340075d8:	d003      	beq.n	340075e2 <RCCEx_GetFMCCLKFreq+0x10e>
340075da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340075de:	d009      	beq.n	340075f4 <RCCEx_GetFMCCLKFreq+0x120>
            break;
340075e0:	e023      	b.n	3400762a <RCCEx_GetFMCCLKFreq+0x156>
            fmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340075e2:	f7fe ff63 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
340075e6:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
340075e8:	68fa      	ldr	r2, [r7, #12]
340075ea:	68bb      	ldr	r3, [r7, #8]
340075ec:	fbb2 f3f3 	udiv	r3, r2, r3
340075f0:	60fb      	str	r3, [r7, #12]
            break;
340075f2:	e01b      	b.n	3400762c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340075f4:	f7fe ffa0 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340075f8:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
340075fa:	68fa      	ldr	r2, [r7, #12]
340075fc:	68bb      	ldr	r3, [r7, #8]
340075fe:	fbb2 f3f3 	udiv	r3, r2, r3
34007602:	60fb      	str	r3, [r7, #12]
            break;
34007604:	e012      	b.n	3400762c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007606:	f7fe ffdd 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
3400760a:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3400760c:	68fa      	ldr	r2, [r7, #12]
3400760e:	68bb      	ldr	r3, [r7, #8]
34007610:	fbb2 f3f3 	udiv	r3, r2, r3
34007614:	60fb      	str	r3, [r7, #12]
            break;
34007616:	e009      	b.n	3400762c <RCCEx_GetFMCCLKFreq+0x158>
            fmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007618:	f7ff f81a 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
3400761c:	60f8      	str	r0, [r7, #12]
            fmc_frequency = fmc_frequency / ic_divider;
3400761e:	68fa      	ldr	r2, [r7, #12]
34007620:	68bb      	ldr	r3, [r7, #8]
34007622:	fbb2 f3f3 	udiv	r3, r2, r3
34007626:	60fb      	str	r3, [r7, #12]
            break;
34007628:	e000      	b.n	3400762c <RCCEx_GetFMCCLKFreq+0x158>
            break;
3400762a:	bf00      	nop
      break;
3400762c:	e003      	b.n	34007636 <RCCEx_GetFMCCLKFreq+0x162>
      break;
3400762e:	bf00      	nop
34007630:	e002      	b.n	34007638 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34007632:	bf00      	nop
34007634:	e000      	b.n	34007638 <RCCEx_GetFMCCLKFreq+0x164>
      break;
34007636:	bf00      	nop
  }

  return fmc_frequency;
34007638:	68fb      	ldr	r3, [r7, #12]
}
3400763a:	4618      	mov	r0, r3
3400763c:	3710      	adds	r7, #16
3400763e:	46bd      	mov	sp, r7
34007640:	bd80      	pop	{r7, pc}
	...

34007644 <RCCEx_GetI2CCLKFreq>:
  *         @arg @ref RCCEx_I2C4_Clock_Source
  * @retval I2C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI2CCLKFreq(uint32_t I2CxSource)
{
34007644:	b580      	push	{r7, lr}
34007646:	b084      	sub	sp, #16
34007648:	af00      	add	r7, sp, #0
3400764a:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
3400764c:	2300      	movs	r3, #0
3400764e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34007650:	6878      	ldr	r0, [r7, #4]
34007652:	f7fa fff9 	bl	34002648 <LL_RCC_GetI2CClockSource>
34007656:	4603      	mov	r3, r0
34007658:	4aa2      	ldr	r2, [pc, #648]	@ (340078e4 <RCCEx_GetI2CCLKFreq+0x2a0>)
3400765a:	4293      	cmp	r3, r2
3400765c:	f000 8172 	beq.w	34007944 <RCCEx_GetI2CCLKFreq+0x300>
34007660:	4aa0      	ldr	r2, [pc, #640]	@ (340078e4 <RCCEx_GetI2CCLKFreq+0x2a0>)
34007662:	4293      	cmp	r3, r2
34007664:	f200 8184 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007668:	4a9f      	ldr	r2, [pc, #636]	@ (340078e8 <RCCEx_GetI2CCLKFreq+0x2a4>)
3400766a:	4293      	cmp	r3, r2
3400766c:	f000 816a 	beq.w	34007944 <RCCEx_GetI2CCLKFreq+0x300>
34007670:	4a9d      	ldr	r2, [pc, #628]	@ (340078e8 <RCCEx_GetI2CCLKFreq+0x2a4>)
34007672:	4293      	cmp	r3, r2
34007674:	f200 817c 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007678:	4a9c      	ldr	r2, [pc, #624]	@ (340078ec <RCCEx_GetI2CCLKFreq+0x2a8>)
3400767a:	4293      	cmp	r3, r2
3400767c:	f000 8162 	beq.w	34007944 <RCCEx_GetI2CCLKFreq+0x300>
34007680:	4a9a      	ldr	r2, [pc, #616]	@ (340078ec <RCCEx_GetI2CCLKFreq+0x2a8>)
34007682:	4293      	cmp	r3, r2
34007684:	f200 8174 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007688:	4a99      	ldr	r2, [pc, #612]	@ (340078f0 <RCCEx_GetI2CCLKFreq+0x2ac>)
3400768a:	4293      	cmp	r3, r2
3400768c:	f000 815a 	beq.w	34007944 <RCCEx_GetI2CCLKFreq+0x300>
34007690:	4a97      	ldr	r2, [pc, #604]	@ (340078f0 <RCCEx_GetI2CCLKFreq+0x2ac>)
34007692:	4293      	cmp	r3, r2
34007694:	f200 816c 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007698:	4a96      	ldr	r2, [pc, #600]	@ (340078f4 <RCCEx_GetI2CCLKFreq+0x2b0>)
3400769a:	4293      	cmp	r3, r2
3400769c:	f000 8160 	beq.w	34007960 <RCCEx_GetI2CCLKFreq+0x31c>
340076a0:	4a94      	ldr	r2, [pc, #592]	@ (340078f4 <RCCEx_GetI2CCLKFreq+0x2b0>)
340076a2:	4293      	cmp	r3, r2
340076a4:	f200 8164 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
340076a8:	4a93      	ldr	r2, [pc, #588]	@ (340078f8 <RCCEx_GetI2CCLKFreq+0x2b4>)
340076aa:	4293      	cmp	r3, r2
340076ac:	f000 8158 	beq.w	34007960 <RCCEx_GetI2CCLKFreq+0x31c>
340076b0:	4a91      	ldr	r2, [pc, #580]	@ (340078f8 <RCCEx_GetI2CCLKFreq+0x2b4>)
340076b2:	4293      	cmp	r3, r2
340076b4:	f200 815c 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
340076b8:	4a90      	ldr	r2, [pc, #576]	@ (340078fc <RCCEx_GetI2CCLKFreq+0x2b8>)
340076ba:	4293      	cmp	r3, r2
340076bc:	f000 8150 	beq.w	34007960 <RCCEx_GetI2CCLKFreq+0x31c>
340076c0:	4a8e      	ldr	r2, [pc, #568]	@ (340078fc <RCCEx_GetI2CCLKFreq+0x2b8>)
340076c2:	4293      	cmp	r3, r2
340076c4:	f200 8154 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
340076c8:	4a8d      	ldr	r2, [pc, #564]	@ (34007900 <RCCEx_GetI2CCLKFreq+0x2bc>)
340076ca:	4293      	cmp	r3, r2
340076cc:	f000 8148 	beq.w	34007960 <RCCEx_GetI2CCLKFreq+0x31c>
340076d0:	4a8b      	ldr	r2, [pc, #556]	@ (34007900 <RCCEx_GetI2CCLKFreq+0x2bc>)
340076d2:	4293      	cmp	r3, r2
340076d4:	f200 814c 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
340076d8:	4a8a      	ldr	r2, [pc, #552]	@ (34007904 <RCCEx_GetI2CCLKFreq+0x2c0>)
340076da:	4293      	cmp	r3, r2
340076dc:	f000 80be 	beq.w	3400785c <RCCEx_GetI2CCLKFreq+0x218>
340076e0:	4a88      	ldr	r2, [pc, #544]	@ (34007904 <RCCEx_GetI2CCLKFreq+0x2c0>)
340076e2:	4293      	cmp	r3, r2
340076e4:	f200 8144 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
340076e8:	4a87      	ldr	r2, [pc, #540]	@ (34007908 <RCCEx_GetI2CCLKFreq+0x2c4>)
340076ea:	4293      	cmp	r3, r2
340076ec:	f000 80b6 	beq.w	3400785c <RCCEx_GetI2CCLKFreq+0x218>
340076f0:	4a85      	ldr	r2, [pc, #532]	@ (34007908 <RCCEx_GetI2CCLKFreq+0x2c4>)
340076f2:	4293      	cmp	r3, r2
340076f4:	f200 813c 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
340076f8:	4a84      	ldr	r2, [pc, #528]	@ (3400790c <RCCEx_GetI2CCLKFreq+0x2c8>)
340076fa:	4293      	cmp	r3, r2
340076fc:	f000 80ae 	beq.w	3400785c <RCCEx_GetI2CCLKFreq+0x218>
34007700:	4a82      	ldr	r2, [pc, #520]	@ (3400790c <RCCEx_GetI2CCLKFreq+0x2c8>)
34007702:	4293      	cmp	r3, r2
34007704:	f200 8134 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007708:	4a81      	ldr	r2, [pc, #516]	@ (34007910 <RCCEx_GetI2CCLKFreq+0x2cc>)
3400770a:	4293      	cmp	r3, r2
3400770c:	f000 80a6 	beq.w	3400785c <RCCEx_GetI2CCLKFreq+0x218>
34007710:	4a7f      	ldr	r2, [pc, #508]	@ (34007910 <RCCEx_GetI2CCLKFreq+0x2cc>)
34007712:	4293      	cmp	r3, r2
34007714:	f200 812c 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007718:	4a7e      	ldr	r2, [pc, #504]	@ (34007914 <RCCEx_GetI2CCLKFreq+0x2d0>)
3400771a:	4293      	cmp	r3, r2
3400771c:	d05a      	beq.n	340077d4 <RCCEx_GetI2CCLKFreq+0x190>
3400771e:	4a7d      	ldr	r2, [pc, #500]	@ (34007914 <RCCEx_GetI2CCLKFreq+0x2d0>)
34007720:	4293      	cmp	r3, r2
34007722:	f200 8125 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007726:	4a7c      	ldr	r2, [pc, #496]	@ (34007918 <RCCEx_GetI2CCLKFreq+0x2d4>)
34007728:	4293      	cmp	r3, r2
3400772a:	d053      	beq.n	340077d4 <RCCEx_GetI2CCLKFreq+0x190>
3400772c:	4a7a      	ldr	r2, [pc, #488]	@ (34007918 <RCCEx_GetI2CCLKFreq+0x2d4>)
3400772e:	4293      	cmp	r3, r2
34007730:	f200 811e 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007734:	4a79      	ldr	r2, [pc, #484]	@ (3400791c <RCCEx_GetI2CCLKFreq+0x2d8>)
34007736:	4293      	cmp	r3, r2
34007738:	d04c      	beq.n	340077d4 <RCCEx_GetI2CCLKFreq+0x190>
3400773a:	4a78      	ldr	r2, [pc, #480]	@ (3400791c <RCCEx_GetI2CCLKFreq+0x2d8>)
3400773c:	4293      	cmp	r3, r2
3400773e:	f200 8117 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007742:	4a77      	ldr	r2, [pc, #476]	@ (34007920 <RCCEx_GetI2CCLKFreq+0x2dc>)
34007744:	4293      	cmp	r3, r2
34007746:	d045      	beq.n	340077d4 <RCCEx_GetI2CCLKFreq+0x190>
34007748:	4a75      	ldr	r2, [pc, #468]	@ (34007920 <RCCEx_GetI2CCLKFreq+0x2dc>)
3400774a:	4293      	cmp	r3, r2
3400774c:	f200 8110 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007750:	4a74      	ldr	r2, [pc, #464]	@ (34007924 <RCCEx_GetI2CCLKFreq+0x2e0>)
34007752:	4293      	cmp	r3, r2
34007754:	d039      	beq.n	340077ca <RCCEx_GetI2CCLKFreq+0x186>
34007756:	4a73      	ldr	r2, [pc, #460]	@ (34007924 <RCCEx_GetI2CCLKFreq+0x2e0>)
34007758:	4293      	cmp	r3, r2
3400775a:	f200 8109 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
3400775e:	4a72      	ldr	r2, [pc, #456]	@ (34007928 <RCCEx_GetI2CCLKFreq+0x2e4>)
34007760:	4293      	cmp	r3, r2
34007762:	d032      	beq.n	340077ca <RCCEx_GetI2CCLKFreq+0x186>
34007764:	4a70      	ldr	r2, [pc, #448]	@ (34007928 <RCCEx_GetI2CCLKFreq+0x2e4>)
34007766:	4293      	cmp	r3, r2
34007768:	f200 8102 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
3400776c:	4a6f      	ldr	r2, [pc, #444]	@ (3400792c <RCCEx_GetI2CCLKFreq+0x2e8>)
3400776e:	4293      	cmp	r3, r2
34007770:	d02b      	beq.n	340077ca <RCCEx_GetI2CCLKFreq+0x186>
34007772:	4a6e      	ldr	r2, [pc, #440]	@ (3400792c <RCCEx_GetI2CCLKFreq+0x2e8>)
34007774:	4293      	cmp	r3, r2
34007776:	f200 80fb 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
3400777a:	4a6d      	ldr	r2, [pc, #436]	@ (34007930 <RCCEx_GetI2CCLKFreq+0x2ec>)
3400777c:	4293      	cmp	r3, r2
3400777e:	d024      	beq.n	340077ca <RCCEx_GetI2CCLKFreq+0x186>
34007780:	4a6b      	ldr	r2, [pc, #428]	@ (34007930 <RCCEx_GetI2CCLKFreq+0x2ec>)
34007782:	4293      	cmp	r3, r2
34007784:	f200 80f4 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007788:	4a6a      	ldr	r2, [pc, #424]	@ (34007934 <RCCEx_GetI2CCLKFreq+0x2f0>)
3400778a:	4293      	cmp	r3, r2
3400778c:	d011      	beq.n	340077b2 <RCCEx_GetI2CCLKFreq+0x16e>
3400778e:	4a69      	ldr	r2, [pc, #420]	@ (34007934 <RCCEx_GetI2CCLKFreq+0x2f0>)
34007790:	4293      	cmp	r3, r2
34007792:	f200 80ed 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
34007796:	4a68      	ldr	r2, [pc, #416]	@ (34007938 <RCCEx_GetI2CCLKFreq+0x2f4>)
34007798:	4293      	cmp	r3, r2
3400779a:	d00a      	beq.n	340077b2 <RCCEx_GetI2CCLKFreq+0x16e>
3400779c:	4a66      	ldr	r2, [pc, #408]	@ (34007938 <RCCEx_GetI2CCLKFreq+0x2f4>)
3400779e:	4293      	cmp	r3, r2
340077a0:	f200 80e6 	bhi.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
340077a4:	4a65      	ldr	r2, [pc, #404]	@ (3400793c <RCCEx_GetI2CCLKFreq+0x2f8>)
340077a6:	4293      	cmp	r3, r2
340077a8:	d003      	beq.n	340077b2 <RCCEx_GetI2CCLKFreq+0x16e>
340077aa:	4a65      	ldr	r2, [pc, #404]	@ (34007940 <RCCEx_GetI2CCLKFreq+0x2fc>)
340077ac:	4293      	cmp	r3, r2
340077ae:	f040 80df 	bne.w	34007970 <RCCEx_GetI2CCLKFreq+0x32c>
  {
    case LL_RCC_I2C1_CLKSOURCE_PCLK1:
    case LL_RCC_I2C2_CLKSOURCE_PCLK1:
    case LL_RCC_I2C3_CLKSOURCE_PCLK1:
    case LL_RCC_I2C4_CLKSOURCE_PCLK1:
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340077b2:	f7fa fb41 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
340077b6:	4603      	mov	r3, r0
340077b8:	4618      	mov	r0, r3
340077ba:	f7fe ff8f 	bl	340066dc <RCCEx_GetHCLKFreq>
340077be:	4603      	mov	r3, r0
340077c0:	4618      	mov	r0, r3
340077c2:	f7fe ff9c 	bl	340066fe <RCCEx_GetPCLK1Freq>
340077c6:	60f8      	str	r0, [r7, #12]
      break;
340077c8:	e0db      	b.n	34007982 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_CLKP:
    case LL_RCC_I2C2_CLKSOURCE_CLKP:
    case LL_RCC_I2C3_CLKSOURCE_CLKP:
    case LL_RCC_I2C4_CLKSOURCE_CLKP:
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340077ca:	2007      	movs	r0, #7
340077cc:	f7ff fa72 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
340077d0:	60f8      	str	r0, [r7, #12]
      break;
340077d2:	e0d6      	b.n	34007982 <RCCEx_GetI2CCLKFreq+0x33e>

    case LL_RCC_I2C1_CLKSOURCE_IC10:
    case LL_RCC_I2C2_CLKSOURCE_IC10:
    case LL_RCC_I2C3_CLKSOURCE_IC10:
    case LL_RCC_I2C4_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
340077d4:	f7fb fc56 	bl	34003084 <LL_RCC_IC10_IsEnabled>
340077d8:	4603      	mov	r3, r0
340077da:	2b00      	cmp	r3, #0
340077dc:	f000 80ca 	beq.w	34007974 <RCCEx_GetI2CCLKFreq+0x330>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
340077e0:	f7fb fc72 	bl	340030c8 <LL_RCC_IC10_GetDivider>
340077e4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
340077e6:	f7fb fc61 	bl	340030ac <LL_RCC_IC10_GetSource>
340077ea:	4603      	mov	r3, r0
340077ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340077f0:	d029      	beq.n	34007846 <RCCEx_GetI2CCLKFreq+0x202>
340077f2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340077f6:	d82f      	bhi.n	34007858 <RCCEx_GetI2CCLKFreq+0x214>
340077f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340077fc:	d01a      	beq.n	34007834 <RCCEx_GetI2CCLKFreq+0x1f0>
340077fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007802:	d829      	bhi.n	34007858 <RCCEx_GetI2CCLKFreq+0x214>
34007804:	2b00      	cmp	r3, #0
34007806:	d003      	beq.n	34007810 <RCCEx_GetI2CCLKFreq+0x1cc>
34007808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400780c:	d009      	beq.n	34007822 <RCCEx_GetI2CCLKFreq+0x1de>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3400780e:	e023      	b.n	34007858 <RCCEx_GetI2CCLKFreq+0x214>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007810:	f7fe fe4c 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007814:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34007816:	68fa      	ldr	r2, [r7, #12]
34007818:	68bb      	ldr	r3, [r7, #8]
3400781a:	fbb2 f3f3 	udiv	r3, r2, r3
3400781e:	60fb      	str	r3, [r7, #12]
            break;
34007820:	e01b      	b.n	3400785a <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007822:	f7fe fe89 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34007826:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
34007828:	68fa      	ldr	r2, [r7, #12]
3400782a:	68bb      	ldr	r3, [r7, #8]
3400782c:	fbb2 f3f3 	udiv	r3, r2, r3
34007830:	60fb      	str	r3, [r7, #12]
            break;
34007832:	e012      	b.n	3400785a <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007834:	f7fe fec6 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007838:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3400783a:	68fa      	ldr	r2, [r7, #12]
3400783c:	68bb      	ldr	r3, [r7, #8]
3400783e:	fbb2 f3f3 	udiv	r3, r2, r3
34007842:	60fb      	str	r3, [r7, #12]
            break;
34007844:	e009      	b.n	3400785a <RCCEx_GetI2CCLKFreq+0x216>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007846:	f7fe ff03 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
3400784a:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3400784c:	68fa      	ldr	r2, [r7, #12]
3400784e:	68bb      	ldr	r3, [r7, #8]
34007850:	fbb2 f3f3 	udiv	r3, r2, r3
34007854:	60fb      	str	r3, [r7, #12]
            break;
34007856:	e000      	b.n	3400785a <RCCEx_GetI2CCLKFreq+0x216>
            break;
34007858:	bf00      	nop
        }
      }
      break;
3400785a:	e08b      	b.n	34007974 <RCCEx_GetI2CCLKFreq+0x330>

    case LL_RCC_I2C1_CLKSOURCE_IC15:
    case LL_RCC_I2C2_CLKSOURCE_IC15:
    case LL_RCC_I2C3_CLKSOURCE_IC15:
    case LL_RCC_I2C4_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
3400785c:	f7fb fd12 	bl	34003284 <LL_RCC_IC15_IsEnabled>
34007860:	4603      	mov	r3, r0
34007862:	2b00      	cmp	r3, #0
34007864:	f000 8088 	beq.w	34007978 <RCCEx_GetI2CCLKFreq+0x334>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34007868:	f7fb fd2e 	bl	340032c8 <LL_RCC_IC15_GetDivider>
3400786c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
3400786e:	f7fb fd1d 	bl	340032ac <LL_RCC_IC15_GetSource>
34007872:	4603      	mov	r3, r0
34007874:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007878:	d029      	beq.n	340078ce <RCCEx_GetI2CCLKFreq+0x28a>
3400787a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400787e:	d82f      	bhi.n	340078e0 <RCCEx_GetI2CCLKFreq+0x29c>
34007880:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007884:	d01a      	beq.n	340078bc <RCCEx_GetI2CCLKFreq+0x278>
34007886:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400788a:	d829      	bhi.n	340078e0 <RCCEx_GetI2CCLKFreq+0x29c>
3400788c:	2b00      	cmp	r3, #0
3400788e:	d003      	beq.n	34007898 <RCCEx_GetI2CCLKFreq+0x254>
34007890:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007894:	d009      	beq.n	340078aa <RCCEx_GetI2CCLKFreq+0x266>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i2c_frequency = i2c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34007896:	e023      	b.n	340078e0 <RCCEx_GetI2CCLKFreq+0x29c>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007898:	f7fe fe08 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
3400789c:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
3400789e:	68fa      	ldr	r2, [r7, #12]
340078a0:	68bb      	ldr	r3, [r7, #8]
340078a2:	fbb2 f3f3 	udiv	r3, r2, r3
340078a6:	60fb      	str	r3, [r7, #12]
            break;
340078a8:	e01b      	b.n	340078e2 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340078aa:	f7fe fe45 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340078ae:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340078b0:	68fa      	ldr	r2, [r7, #12]
340078b2:	68bb      	ldr	r3, [r7, #8]
340078b4:	fbb2 f3f3 	udiv	r3, r2, r3
340078b8:	60fb      	str	r3, [r7, #12]
            break;
340078ba:	e012      	b.n	340078e2 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340078bc:	f7fe fe82 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
340078c0:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340078c2:	68fa      	ldr	r2, [r7, #12]
340078c4:	68bb      	ldr	r3, [r7, #8]
340078c6:	fbb2 f3f3 	udiv	r3, r2, r3
340078ca:	60fb      	str	r3, [r7, #12]
            break;
340078cc:	e009      	b.n	340078e2 <RCCEx_GetI2CCLKFreq+0x29e>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340078ce:	f7fe febf 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
340078d2:	60f8      	str	r0, [r7, #12]
            i2c_frequency = i2c_frequency / ic_divider;
340078d4:	68fa      	ldr	r2, [r7, #12]
340078d6:	68bb      	ldr	r3, [r7, #8]
340078d8:	fbb2 f3f3 	udiv	r3, r2, r3
340078dc:	60fb      	str	r3, [r7, #12]
            break;
340078de:	e000      	b.n	340078e2 <RCCEx_GetI2CCLKFreq+0x29e>
            break;
340078e0:	bf00      	nop
        }
      }
      break;
340078e2:	e049      	b.n	34007978 <RCCEx_GetI2CCLKFreq+0x334>
340078e4:	07050c0c 	.word	0x07050c0c
340078e8:	0705080c 	.word	0x0705080c
340078ec:	0705040c 	.word	0x0705040c
340078f0:	0705000c 	.word	0x0705000c
340078f4:	07040c0c 	.word	0x07040c0c
340078f8:	0704080c 	.word	0x0704080c
340078fc:	0704040c 	.word	0x0704040c
34007900:	0704000c 	.word	0x0704000c
34007904:	07030c0c 	.word	0x07030c0c
34007908:	0703080c 	.word	0x0703080c
3400790c:	0703040c 	.word	0x0703040c
34007910:	0703000c 	.word	0x0703000c
34007914:	07020c0c 	.word	0x07020c0c
34007918:	0702080c 	.word	0x0702080c
3400791c:	0702040c 	.word	0x0702040c
34007920:	0702000c 	.word	0x0702000c
34007924:	07010c0c 	.word	0x07010c0c
34007928:	0701080c 	.word	0x0701080c
3400792c:	0701040c 	.word	0x0701040c
34007930:	0701000c 	.word	0x0701000c
34007934:	07000c0c 	.word	0x07000c0c
34007938:	0700080c 	.word	0x0700080c
3400793c:	0700000c 	.word	0x0700000c
34007940:	0700040c 	.word	0x0700040c

    case LL_RCC_I2C1_CLKSOURCE_HSI:
    case LL_RCC_I2C2_CLKSOURCE_HSI:
    case LL_RCC_I2C3_CLKSOURCE_HSI:
    case LL_RCC_I2C4_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34007944:	f7fa fb3a 	bl	34001fbc <LL_RCC_HSI_IsReady>
34007948:	4603      	mov	r3, r0
3400794a:	2b00      	cmp	r3, #0
3400794c:	d016      	beq.n	3400797c <RCCEx_GetI2CCLKFreq+0x338>
      {
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400794e:	f7fa fb47 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34007952:	4603      	mov	r3, r0
34007954:	09db      	lsrs	r3, r3, #7
34007956:	4a0d      	ldr	r2, [pc, #52]	@ (3400798c <RCCEx_GetI2CCLKFreq+0x348>)
34007958:	fa22 f303 	lsr.w	r3, r2, r3
3400795c:	60fb      	str	r3, [r7, #12]
      }
      break;
3400795e:	e00d      	b.n	3400797c <RCCEx_GetI2CCLKFreq+0x338>

    case LL_RCC_I2C1_CLKSOURCE_MSI:
    case LL_RCC_I2C2_CLKSOURCE_MSI:
    case LL_RCC_I2C3_CLKSOURCE_MSI:
    case LL_RCC_I2C4_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34007960:	f7fa fb4c 	bl	34001ffc <LL_RCC_MSI_IsReady>
34007964:	4603      	mov	r3, r0
34007966:	2b00      	cmp	r3, #0
34007968:	d00a      	beq.n	34007980 <RCCEx_GetI2CCLKFreq+0x33c>
      {
        i2c_frequency = MSI_VALUE;
3400796a:	4b09      	ldr	r3, [pc, #36]	@ (34007990 <RCCEx_GetI2CCLKFreq+0x34c>)
3400796c:	60fb      	str	r3, [r7, #12]
      }
      break;
3400796e:	e007      	b.n	34007980 <RCCEx_GetI2CCLKFreq+0x33c>

    default:
      /* Unexpected case */
      break;
34007970:	bf00      	nop
34007972:	e006      	b.n	34007982 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34007974:	bf00      	nop
34007976:	e004      	b.n	34007982 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34007978:	bf00      	nop
3400797a:	e002      	b.n	34007982 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
3400797c:	bf00      	nop
3400797e:	e000      	b.n	34007982 <RCCEx_GetI2CCLKFreq+0x33e>
      break;
34007980:	bf00      	nop
  }

  return i2c_frequency;
34007982:	68fb      	ldr	r3, [r7, #12]
}
34007984:	4618      	mov	r0, r3
34007986:	3710      	adds	r7, #16
34007988:	46bd      	mov	sp, r7
3400798a:	bd80      	pop	{r7, pc}
3400798c:	03d09000 	.word	0x03d09000
34007990:	003d0900 	.word	0x003d0900

34007994 <RCCEx_GetI3CCLKFreq>:
  *         @arg @ref RCCEx_I3C2_Clock_Source
  * @retval I3C clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetI3CCLKFreq(uint32_t I3CxSource)
{
34007994:	b580      	push	{r7, lr}
34007996:	b084      	sub	sp, #16
34007998:	af00      	add	r7, sp, #0
3400799a:	6078      	str	r0, [r7, #4]
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
3400799c:	2300      	movs	r3, #0
3400799e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetI3CClockSource(I3CxSource))
340079a0:	6878      	ldr	r0, [r7, #4]
340079a2:	f7fa fe5d 	bl	34002660 <LL_RCC_GetI3CClockSource>
340079a6:	4603      	mov	r3, r0
340079a8:	4a86      	ldr	r2, [pc, #536]	@ (34007bc4 <RCCEx_GetI3CCLKFreq+0x230>)
340079aa:	4293      	cmp	r3, r2
340079ac:	f000 80e6 	beq.w	34007b7c <RCCEx_GetI3CCLKFreq+0x1e8>
340079b0:	4a84      	ldr	r2, [pc, #528]	@ (34007bc4 <RCCEx_GetI3CCLKFreq+0x230>)
340079b2:	4293      	cmp	r3, r2
340079b4:	f200 80f8 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
340079b8:	4a83      	ldr	r2, [pc, #524]	@ (34007bc8 <RCCEx_GetI3CCLKFreq+0x234>)
340079ba:	4293      	cmp	r3, r2
340079bc:	f000 80de 	beq.w	34007b7c <RCCEx_GetI3CCLKFreq+0x1e8>
340079c0:	4a81      	ldr	r2, [pc, #516]	@ (34007bc8 <RCCEx_GetI3CCLKFreq+0x234>)
340079c2:	4293      	cmp	r3, r2
340079c4:	f200 80f0 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
340079c8:	4a80      	ldr	r2, [pc, #512]	@ (34007bcc <RCCEx_GetI3CCLKFreq+0x238>)
340079ca:	4293      	cmp	r3, r2
340079cc:	f000 80e4 	beq.w	34007b98 <RCCEx_GetI3CCLKFreq+0x204>
340079d0:	4a7e      	ldr	r2, [pc, #504]	@ (34007bcc <RCCEx_GetI3CCLKFreq+0x238>)
340079d2:	4293      	cmp	r3, r2
340079d4:	f200 80e8 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
340079d8:	4a7d      	ldr	r2, [pc, #500]	@ (34007bd0 <RCCEx_GetI3CCLKFreq+0x23c>)
340079da:	4293      	cmp	r3, r2
340079dc:	f000 80dc 	beq.w	34007b98 <RCCEx_GetI3CCLKFreq+0x204>
340079e0:	4a7b      	ldr	r2, [pc, #492]	@ (34007bd0 <RCCEx_GetI3CCLKFreq+0x23c>)
340079e2:	4293      	cmp	r3, r2
340079e4:	f200 80e0 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
340079e8:	4a7a      	ldr	r2, [pc, #488]	@ (34007bd4 <RCCEx_GetI3CCLKFreq+0x240>)
340079ea:	4293      	cmp	r3, r2
340079ec:	f000 8083 	beq.w	34007af6 <RCCEx_GetI3CCLKFreq+0x162>
340079f0:	4a78      	ldr	r2, [pc, #480]	@ (34007bd4 <RCCEx_GetI3CCLKFreq+0x240>)
340079f2:	4293      	cmp	r3, r2
340079f4:	f200 80d8 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
340079f8:	4a77      	ldr	r2, [pc, #476]	@ (34007bd8 <RCCEx_GetI3CCLKFreq+0x244>)
340079fa:	4293      	cmp	r3, r2
340079fc:	d07b      	beq.n	34007af6 <RCCEx_GetI3CCLKFreq+0x162>
340079fe:	4a76      	ldr	r2, [pc, #472]	@ (34007bd8 <RCCEx_GetI3CCLKFreq+0x244>)
34007a00:	4293      	cmp	r3, r2
34007a02:	f200 80d1 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
34007a06:	4a75      	ldr	r2, [pc, #468]	@ (34007bdc <RCCEx_GetI3CCLKFreq+0x248>)
34007a08:	4293      	cmp	r3, r2
34007a0a:	d030      	beq.n	34007a6e <RCCEx_GetI3CCLKFreq+0xda>
34007a0c:	4a73      	ldr	r2, [pc, #460]	@ (34007bdc <RCCEx_GetI3CCLKFreq+0x248>)
34007a0e:	4293      	cmp	r3, r2
34007a10:	f200 80ca 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
34007a14:	4a72      	ldr	r2, [pc, #456]	@ (34007be0 <RCCEx_GetI3CCLKFreq+0x24c>)
34007a16:	4293      	cmp	r3, r2
34007a18:	d029      	beq.n	34007a6e <RCCEx_GetI3CCLKFreq+0xda>
34007a1a:	4a71      	ldr	r2, [pc, #452]	@ (34007be0 <RCCEx_GetI3CCLKFreq+0x24c>)
34007a1c:	4293      	cmp	r3, r2
34007a1e:	f200 80c3 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
34007a22:	4a70      	ldr	r2, [pc, #448]	@ (34007be4 <RCCEx_GetI3CCLKFreq+0x250>)
34007a24:	4293      	cmp	r3, r2
34007a26:	d01d      	beq.n	34007a64 <RCCEx_GetI3CCLKFreq+0xd0>
34007a28:	4a6e      	ldr	r2, [pc, #440]	@ (34007be4 <RCCEx_GetI3CCLKFreq+0x250>)
34007a2a:	4293      	cmp	r3, r2
34007a2c:	f200 80bc 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
34007a30:	4a6d      	ldr	r2, [pc, #436]	@ (34007be8 <RCCEx_GetI3CCLKFreq+0x254>)
34007a32:	4293      	cmp	r3, r2
34007a34:	d016      	beq.n	34007a64 <RCCEx_GetI3CCLKFreq+0xd0>
34007a36:	4a6c      	ldr	r2, [pc, #432]	@ (34007be8 <RCCEx_GetI3CCLKFreq+0x254>)
34007a38:	4293      	cmp	r3, r2
34007a3a:	f200 80b5 	bhi.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
34007a3e:	4a6b      	ldr	r2, [pc, #428]	@ (34007bec <RCCEx_GetI3CCLKFreq+0x258>)
34007a40:	4293      	cmp	r3, r2
34007a42:	d003      	beq.n	34007a4c <RCCEx_GetI3CCLKFreq+0xb8>
34007a44:	4a6a      	ldr	r2, [pc, #424]	@ (34007bf0 <RCCEx_GetI3CCLKFreq+0x25c>)
34007a46:	4293      	cmp	r3, r2
34007a48:	f040 80ae 	bne.w	34007ba8 <RCCEx_GetI3CCLKFreq+0x214>
  {
    case LL_RCC_I3C1_CLKSOURCE_PCLK1:
    case LL_RCC_I3C2_CLKSOURCE_PCLK1:
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007a4c:	f7fa f9f4 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34007a50:	4603      	mov	r3, r0
34007a52:	4618      	mov	r0, r3
34007a54:	f7fe fe42 	bl	340066dc <RCCEx_GetHCLKFreq>
34007a58:	4603      	mov	r3, r0
34007a5a:	4618      	mov	r0, r3
34007a5c:	f7fe fe4f 	bl	340066fe <RCCEx_GetPCLK1Freq>
34007a60:	60f8      	str	r0, [r7, #12]
      break;
34007a62:	e0aa      	b.n	34007bba <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_CLKP:
    case LL_RCC_I3C2_CLKSOURCE_CLKP:
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007a64:	2007      	movs	r0, #7
34007a66:	f7ff f925 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34007a6a:	60f8      	str	r0, [r7, #12]
      break;
34007a6c:	e0a5      	b.n	34007bba <RCCEx_GetI3CCLKFreq+0x226>

    case LL_RCC_I3C1_CLKSOURCE_IC10:
    case LL_RCC_I3C2_CLKSOURCE_IC10:
      if (LL_RCC_IC10_IsEnabled() != 0U)
34007a6e:	f7fb fb09 	bl	34003084 <LL_RCC_IC10_IsEnabled>
34007a72:	4603      	mov	r3, r0
34007a74:	2b00      	cmp	r3, #0
34007a76:	f000 8099 	beq.w	34007bac <RCCEx_GetI3CCLKFreq+0x218>
      {
        ic_divider = LL_RCC_IC10_GetDivider();
34007a7a:	f7fb fb25 	bl	340030c8 <LL_RCC_IC10_GetDivider>
34007a7e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC10_GetSource())
34007a80:	f7fb fb14 	bl	340030ac <LL_RCC_IC10_GetSource>
34007a84:	4603      	mov	r3, r0
34007a86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007a8a:	d029      	beq.n	34007ae0 <RCCEx_GetI3CCLKFreq+0x14c>
34007a8c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007a90:	d82f      	bhi.n	34007af2 <RCCEx_GetI3CCLKFreq+0x15e>
34007a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007a96:	d01a      	beq.n	34007ace <RCCEx_GetI3CCLKFreq+0x13a>
34007a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007a9c:	d829      	bhi.n	34007af2 <RCCEx_GetI3CCLKFreq+0x15e>
34007a9e:	2b00      	cmp	r3, #0
34007aa0:	d003      	beq.n	34007aaa <RCCEx_GetI3CCLKFreq+0x116>
34007aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007aa6:	d009      	beq.n	34007abc <RCCEx_GetI3CCLKFreq+0x128>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34007aa8:	e023      	b.n	34007af2 <RCCEx_GetI3CCLKFreq+0x15e>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007aaa:	f7fe fcff 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007aae:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34007ab0:	68fa      	ldr	r2, [r7, #12]
34007ab2:	68bb      	ldr	r3, [r7, #8]
34007ab4:	fbb2 f3f3 	udiv	r3, r2, r3
34007ab8:	60fb      	str	r3, [r7, #12]
            break;
34007aba:	e01b      	b.n	34007af4 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007abc:	f7fe fd3c 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34007ac0:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34007ac2:	68fa      	ldr	r2, [r7, #12]
34007ac4:	68bb      	ldr	r3, [r7, #8]
34007ac6:	fbb2 f3f3 	udiv	r3, r2, r3
34007aca:	60fb      	str	r3, [r7, #12]
            break;
34007acc:	e012      	b.n	34007af4 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007ace:	f7fe fd79 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007ad2:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34007ad4:	68fa      	ldr	r2, [r7, #12]
34007ad6:	68bb      	ldr	r3, [r7, #8]
34007ad8:	fbb2 f3f3 	udiv	r3, r2, r3
34007adc:	60fb      	str	r3, [r7, #12]
            break;
34007ade:	e009      	b.n	34007af4 <RCCEx_GetI3CCLKFreq+0x160>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007ae0:	f7fe fdb6 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34007ae4:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34007ae6:	68fa      	ldr	r2, [r7, #12]
34007ae8:	68bb      	ldr	r3, [r7, #8]
34007aea:	fbb2 f3f3 	udiv	r3, r2, r3
34007aee:	60fb      	str	r3, [r7, #12]
            break;
34007af0:	e000      	b.n	34007af4 <RCCEx_GetI3CCLKFreq+0x160>
            break;
34007af2:	bf00      	nop
        }
      }
      break;
34007af4:	e05a      	b.n	34007bac <RCCEx_GetI3CCLKFreq+0x218>

    case LL_RCC_I3C1_CLKSOURCE_IC15:
    case LL_RCC_I3C2_CLKSOURCE_IC15:
      if (LL_RCC_IC15_IsEnabled() != 0U)
34007af6:	f7fb fbc5 	bl	34003284 <LL_RCC_IC15_IsEnabled>
34007afa:	4603      	mov	r3, r0
34007afc:	2b00      	cmp	r3, #0
34007afe:	d057      	beq.n	34007bb0 <RCCEx_GetI3CCLKFreq+0x21c>
      {
        ic_divider = LL_RCC_IC15_GetDivider();
34007b00:	f7fb fbe2 	bl	340032c8 <LL_RCC_IC15_GetDivider>
34007b04:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34007b06:	f7fb fbd1 	bl	340032ac <LL_RCC_IC15_GetSource>
34007b0a:	4603      	mov	r3, r0
34007b0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b10:	d029      	beq.n	34007b66 <RCCEx_GetI3CCLKFreq+0x1d2>
34007b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007b16:	d82f      	bhi.n	34007b78 <RCCEx_GetI3CCLKFreq+0x1e4>
34007b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b1c:	d01a      	beq.n	34007b54 <RCCEx_GetI3CCLKFreq+0x1c0>
34007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007b22:	d829      	bhi.n	34007b78 <RCCEx_GetI3CCLKFreq+0x1e4>
34007b24:	2b00      	cmp	r3, #0
34007b26:	d003      	beq.n	34007b30 <RCCEx_GetI3CCLKFreq+0x19c>
34007b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007b2c:	d009      	beq.n	34007b42 <RCCEx_GetI3CCLKFreq+0x1ae>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            i3c_frequency = i3c_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34007b2e:	e023      	b.n	34007b78 <RCCEx_GetI3CCLKFreq+0x1e4>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007b30:	f7fe fcbc 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007b34:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34007b36:	68fa      	ldr	r2, [r7, #12]
34007b38:	68bb      	ldr	r3, [r7, #8]
34007b3a:	fbb2 f3f3 	udiv	r3, r2, r3
34007b3e:	60fb      	str	r3, [r7, #12]
            break;
34007b40:	e01b      	b.n	34007b7a <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007b42:	f7fe fcf9 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34007b46:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34007b48:	68fa      	ldr	r2, [r7, #12]
34007b4a:	68bb      	ldr	r3, [r7, #8]
34007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
34007b50:	60fb      	str	r3, [r7, #12]
            break;
34007b52:	e012      	b.n	34007b7a <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007b54:	f7fe fd36 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007b58:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34007b5a:	68fa      	ldr	r2, [r7, #12]
34007b5c:	68bb      	ldr	r3, [r7, #8]
34007b5e:	fbb2 f3f3 	udiv	r3, r2, r3
34007b62:	60fb      	str	r3, [r7, #12]
            break;
34007b64:	e009      	b.n	34007b7a <RCCEx_GetI3CCLKFreq+0x1e6>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007b66:	f7fe fd73 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34007b6a:	60f8      	str	r0, [r7, #12]
            i3c_frequency = i3c_frequency / ic_divider;
34007b6c:	68fa      	ldr	r2, [r7, #12]
34007b6e:	68bb      	ldr	r3, [r7, #8]
34007b70:	fbb2 f3f3 	udiv	r3, r2, r3
34007b74:	60fb      	str	r3, [r7, #12]
            break;
34007b76:	e000      	b.n	34007b7a <RCCEx_GetI3CCLKFreq+0x1e6>
            break;
34007b78:	bf00      	nop
        }
      }
      break;
34007b7a:	e019      	b.n	34007bb0 <RCCEx_GetI3CCLKFreq+0x21c>

    case LL_RCC_I3C1_CLKSOURCE_HSI:
    case LL_RCC_I3C2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34007b7c:	f7fa fa1e 	bl	34001fbc <LL_RCC_HSI_IsReady>
34007b80:	4603      	mov	r3, r0
34007b82:	2b00      	cmp	r3, #0
34007b84:	d016      	beq.n	34007bb4 <RCCEx_GetI3CCLKFreq+0x220>
      {
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34007b86:	f7fa fa2b 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34007b8a:	4603      	mov	r3, r0
34007b8c:	09db      	lsrs	r3, r3, #7
34007b8e:	4a19      	ldr	r2, [pc, #100]	@ (34007bf4 <RCCEx_GetI3CCLKFreq+0x260>)
34007b90:	fa22 f303 	lsr.w	r3, r2, r3
34007b94:	60fb      	str	r3, [r7, #12]
      }
      break;
34007b96:	e00d      	b.n	34007bb4 <RCCEx_GetI3CCLKFreq+0x220>

    case LL_RCC_I3C1_CLKSOURCE_MSI:
    case LL_RCC_I3C2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34007b98:	f7fa fa30 	bl	34001ffc <LL_RCC_MSI_IsReady>
34007b9c:	4603      	mov	r3, r0
34007b9e:	2b00      	cmp	r3, #0
34007ba0:	d00a      	beq.n	34007bb8 <RCCEx_GetI3CCLKFreq+0x224>
      {
        i3c_frequency = MSI_VALUE;
34007ba2:	4b15      	ldr	r3, [pc, #84]	@ (34007bf8 <RCCEx_GetI3CCLKFreq+0x264>)
34007ba4:	60fb      	str	r3, [r7, #12]
      }
      break;
34007ba6:	e007      	b.n	34007bb8 <RCCEx_GetI3CCLKFreq+0x224>

    default:
      /* Unexpected case */
      break;
34007ba8:	bf00      	nop
34007baa:	e006      	b.n	34007bba <RCCEx_GetI3CCLKFreq+0x226>
      break;
34007bac:	bf00      	nop
34007bae:	e004      	b.n	34007bba <RCCEx_GetI3CCLKFreq+0x226>
      break;
34007bb0:	bf00      	nop
34007bb2:	e002      	b.n	34007bba <RCCEx_GetI3CCLKFreq+0x226>
      break;
34007bb4:	bf00      	nop
34007bb6:	e000      	b.n	34007bba <RCCEx_GetI3CCLKFreq+0x226>
      break;
34007bb8:	bf00      	nop
  }

  return i3c_frequency;
34007bba:	68fb      	ldr	r3, [r7, #12]
}
34007bbc:	4618      	mov	r0, r3
34007bbe:	3710      	adds	r7, #16
34007bc0:	46bd      	mov	sp, r7
34007bc2:	bd80      	pop	{r7, pc}
34007bc4:	0705140c 	.word	0x0705140c
34007bc8:	0705100c 	.word	0x0705100c
34007bcc:	0704140c 	.word	0x0704140c
34007bd0:	0704100c 	.word	0x0704100c
34007bd4:	0703140c 	.word	0x0703140c
34007bd8:	0703100c 	.word	0x0703100c
34007bdc:	0702140c 	.word	0x0702140c
34007be0:	0702100c 	.word	0x0702100c
34007be4:	0701140c 	.word	0x0701140c
34007be8:	0701100c 	.word	0x0701100c
34007bec:	0700100c 	.word	0x0700100c
34007bf0:	0700140c 	.word	0x0700140c
34007bf4:	03d09000 	.word	0x03d09000
34007bf8:	003d0900 	.word	0x003d0900

34007bfc <RCCEx_GetLPTIMCLKFreq>:
  *         @arg @ref RCCEx_LPTIM5_Clock_Source
  * @retval LPTIM clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPTIMCLKFreq(uint32_t LPTIMxSource)
{
34007bfc:	b590      	push	{r4, r7, lr}
34007bfe:	b085      	sub	sp, #20
34007c00:	af00      	add	r7, sp, #0
34007c02:	6078      	str	r0, [r7, #4]
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
34007c04:	2300      	movs	r3, #0
34007c06:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34007c08:	6878      	ldr	r0, [r7, #4]
34007c0a:	f7fa fd35 	bl	34002678 <LL_RCC_GetLPTIMClockSource>
34007c0e:	4603      	mov	r3, r0
34007c10:	4aa1      	ldr	r2, [pc, #644]	@ (34007e98 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34007c12:	4293      	cmp	r3, r2
34007c14:	f000 8185 	beq.w	34007f22 <RCCEx_GetLPTIMCLKFreq+0x326>
34007c18:	4a9f      	ldr	r2, [pc, #636]	@ (34007e98 <RCCEx_GetLPTIMCLKFreq+0x29c>)
34007c1a:	4293      	cmp	r3, r2
34007c1c:	f200 818b 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007c20:	4a9e      	ldr	r2, [pc, #632]	@ (34007e9c <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34007c22:	4293      	cmp	r3, r2
34007c24:	f000 817d 	beq.w	34007f22 <RCCEx_GetLPTIMCLKFreq+0x326>
34007c28:	4a9c      	ldr	r2, [pc, #624]	@ (34007e9c <RCCEx_GetLPTIMCLKFreq+0x2a0>)
34007c2a:	4293      	cmp	r3, r2
34007c2c:	f200 8183 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007c30:	4a9b      	ldr	r2, [pc, #620]	@ (34007ea0 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34007c32:	4293      	cmp	r3, r2
34007c34:	f000 8175 	beq.w	34007f22 <RCCEx_GetLPTIMCLKFreq+0x326>
34007c38:	4a99      	ldr	r2, [pc, #612]	@ (34007ea0 <RCCEx_GetLPTIMCLKFreq+0x2a4>)
34007c3a:	4293      	cmp	r3, r2
34007c3c:	f200 817b 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007c40:	4a98      	ldr	r2, [pc, #608]	@ (34007ea4 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34007c42:	4293      	cmp	r3, r2
34007c44:	f000 816d 	beq.w	34007f22 <RCCEx_GetLPTIMCLKFreq+0x326>
34007c48:	4a96      	ldr	r2, [pc, #600]	@ (34007ea4 <RCCEx_GetLPTIMCLKFreq+0x2a8>)
34007c4a:	4293      	cmp	r3, r2
34007c4c:	f200 8173 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007c50:	4a95      	ldr	r2, [pc, #596]	@ (34007ea8 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34007c52:	4293      	cmp	r3, r2
34007c54:	f000 8165 	beq.w	34007f22 <RCCEx_GetLPTIMCLKFreq+0x326>
34007c58:	4a93      	ldr	r2, [pc, #588]	@ (34007ea8 <RCCEx_GetLPTIMCLKFreq+0x2ac>)
34007c5a:	4293      	cmp	r3, r2
34007c5c:	f200 816b 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007c60:	4a92      	ldr	r2, [pc, #584]	@ (34007eac <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34007c62:	4293      	cmp	r3, r2
34007c64:	f000 8154 	beq.w	34007f10 <RCCEx_GetLPTIMCLKFreq+0x314>
34007c68:	4a90      	ldr	r2, [pc, #576]	@ (34007eac <RCCEx_GetLPTIMCLKFreq+0x2b0>)
34007c6a:	4293      	cmp	r3, r2
34007c6c:	f200 8163 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007c70:	4a8f      	ldr	r2, [pc, #572]	@ (34007eb0 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34007c72:	4293      	cmp	r3, r2
34007c74:	f000 814c 	beq.w	34007f10 <RCCEx_GetLPTIMCLKFreq+0x314>
34007c78:	4a8d      	ldr	r2, [pc, #564]	@ (34007eb0 <RCCEx_GetLPTIMCLKFreq+0x2b4>)
34007c7a:	4293      	cmp	r3, r2
34007c7c:	f200 815b 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007c80:	4a8c      	ldr	r2, [pc, #560]	@ (34007eb4 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34007c82:	4293      	cmp	r3, r2
34007c84:	f000 8144 	beq.w	34007f10 <RCCEx_GetLPTIMCLKFreq+0x314>
34007c88:	4a8a      	ldr	r2, [pc, #552]	@ (34007eb4 <RCCEx_GetLPTIMCLKFreq+0x2b8>)
34007c8a:	4293      	cmp	r3, r2
34007c8c:	f200 8153 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007c90:	4a89      	ldr	r2, [pc, #548]	@ (34007eb8 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34007c92:	4293      	cmp	r3, r2
34007c94:	f000 813c 	beq.w	34007f10 <RCCEx_GetLPTIMCLKFreq+0x314>
34007c98:	4a87      	ldr	r2, [pc, #540]	@ (34007eb8 <RCCEx_GetLPTIMCLKFreq+0x2bc>)
34007c9a:	4293      	cmp	r3, r2
34007c9c:	f200 814b 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007ca0:	4a86      	ldr	r2, [pc, #536]	@ (34007ebc <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34007ca2:	4293      	cmp	r3, r2
34007ca4:	f000 8134 	beq.w	34007f10 <RCCEx_GetLPTIMCLKFreq+0x314>
34007ca8:	4a84      	ldr	r2, [pc, #528]	@ (34007ebc <RCCEx_GetLPTIMCLKFreq+0x2c0>)
34007caa:	4293      	cmp	r3, r2
34007cac:	f200 8143 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007cb0:	4a83      	ldr	r2, [pc, #524]	@ (34007ec0 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
34007cb2:	4293      	cmp	r3, r2
34007cb4:	f000 80e7 	beq.w	34007e86 <RCCEx_GetLPTIMCLKFreq+0x28a>
34007cb8:	4a81      	ldr	r2, [pc, #516]	@ (34007ec0 <RCCEx_GetLPTIMCLKFreq+0x2c4>)
34007cba:	4293      	cmp	r3, r2
34007cbc:	f200 813b 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007cc0:	4a80      	ldr	r2, [pc, #512]	@ (34007ec4 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34007cc2:	4293      	cmp	r3, r2
34007cc4:	f000 80df 	beq.w	34007e86 <RCCEx_GetLPTIMCLKFreq+0x28a>
34007cc8:	4a7e      	ldr	r2, [pc, #504]	@ (34007ec4 <RCCEx_GetLPTIMCLKFreq+0x2c8>)
34007cca:	4293      	cmp	r3, r2
34007ccc:	f200 8133 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007cd0:	4a7d      	ldr	r2, [pc, #500]	@ (34007ec8 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34007cd2:	4293      	cmp	r3, r2
34007cd4:	f000 80d7 	beq.w	34007e86 <RCCEx_GetLPTIMCLKFreq+0x28a>
34007cd8:	4a7b      	ldr	r2, [pc, #492]	@ (34007ec8 <RCCEx_GetLPTIMCLKFreq+0x2cc>)
34007cda:	4293      	cmp	r3, r2
34007cdc:	f200 812b 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007ce0:	4a7a      	ldr	r2, [pc, #488]	@ (34007ecc <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34007ce2:	4293      	cmp	r3, r2
34007ce4:	f000 80cf 	beq.w	34007e86 <RCCEx_GetLPTIMCLKFreq+0x28a>
34007ce8:	4a78      	ldr	r2, [pc, #480]	@ (34007ecc <RCCEx_GetLPTIMCLKFreq+0x2d0>)
34007cea:	4293      	cmp	r3, r2
34007cec:	f200 8123 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007cf0:	4a77      	ldr	r2, [pc, #476]	@ (34007ed0 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34007cf2:	4293      	cmp	r3, r2
34007cf4:	f000 80c7 	beq.w	34007e86 <RCCEx_GetLPTIMCLKFreq+0x28a>
34007cf8:	4a75      	ldr	r2, [pc, #468]	@ (34007ed0 <RCCEx_GetLPTIMCLKFreq+0x2d4>)
34007cfa:	4293      	cmp	r3, r2
34007cfc:	f200 811b 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d00:	4a74      	ldr	r2, [pc, #464]	@ (34007ed4 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34007d02:	4293      	cmp	r3, r2
34007d04:	d07b      	beq.n	34007dfe <RCCEx_GetLPTIMCLKFreq+0x202>
34007d06:	4a73      	ldr	r2, [pc, #460]	@ (34007ed4 <RCCEx_GetLPTIMCLKFreq+0x2d8>)
34007d08:	4293      	cmp	r3, r2
34007d0a:	f200 8114 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d0e:	4a72      	ldr	r2, [pc, #456]	@ (34007ed8 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34007d10:	4293      	cmp	r3, r2
34007d12:	d074      	beq.n	34007dfe <RCCEx_GetLPTIMCLKFreq+0x202>
34007d14:	4a70      	ldr	r2, [pc, #448]	@ (34007ed8 <RCCEx_GetLPTIMCLKFreq+0x2dc>)
34007d16:	4293      	cmp	r3, r2
34007d18:	f200 810d 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d1c:	4a6f      	ldr	r2, [pc, #444]	@ (34007edc <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34007d1e:	4293      	cmp	r3, r2
34007d20:	d06d      	beq.n	34007dfe <RCCEx_GetLPTIMCLKFreq+0x202>
34007d22:	4a6e      	ldr	r2, [pc, #440]	@ (34007edc <RCCEx_GetLPTIMCLKFreq+0x2e0>)
34007d24:	4293      	cmp	r3, r2
34007d26:	f200 8106 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d2a:	4a6d      	ldr	r2, [pc, #436]	@ (34007ee0 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34007d2c:	4293      	cmp	r3, r2
34007d2e:	d066      	beq.n	34007dfe <RCCEx_GetLPTIMCLKFreq+0x202>
34007d30:	4a6b      	ldr	r2, [pc, #428]	@ (34007ee0 <RCCEx_GetLPTIMCLKFreq+0x2e4>)
34007d32:	4293      	cmp	r3, r2
34007d34:	f200 80ff 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d38:	4a6a      	ldr	r2, [pc, #424]	@ (34007ee4 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34007d3a:	4293      	cmp	r3, r2
34007d3c:	d05f      	beq.n	34007dfe <RCCEx_GetLPTIMCLKFreq+0x202>
34007d3e:	4a69      	ldr	r2, [pc, #420]	@ (34007ee4 <RCCEx_GetLPTIMCLKFreq+0x2e8>)
34007d40:	4293      	cmp	r3, r2
34007d42:	f200 80f8 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d46:	4a68      	ldr	r2, [pc, #416]	@ (34007ee8 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34007d48:	4293      	cmp	r3, r2
34007d4a:	d053      	beq.n	34007df4 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34007d4c:	4a66      	ldr	r2, [pc, #408]	@ (34007ee8 <RCCEx_GetLPTIMCLKFreq+0x2ec>)
34007d4e:	4293      	cmp	r3, r2
34007d50:	f200 80f1 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d54:	4a65      	ldr	r2, [pc, #404]	@ (34007eec <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34007d56:	4293      	cmp	r3, r2
34007d58:	d04c      	beq.n	34007df4 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34007d5a:	4a64      	ldr	r2, [pc, #400]	@ (34007eec <RCCEx_GetLPTIMCLKFreq+0x2f0>)
34007d5c:	4293      	cmp	r3, r2
34007d5e:	f200 80ea 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d62:	4a63      	ldr	r2, [pc, #396]	@ (34007ef0 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34007d64:	4293      	cmp	r3, r2
34007d66:	d045      	beq.n	34007df4 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34007d68:	4a61      	ldr	r2, [pc, #388]	@ (34007ef0 <RCCEx_GetLPTIMCLKFreq+0x2f4>)
34007d6a:	4293      	cmp	r3, r2
34007d6c:	f200 80e3 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d70:	4a60      	ldr	r2, [pc, #384]	@ (34007ef4 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34007d72:	4293      	cmp	r3, r2
34007d74:	d03e      	beq.n	34007df4 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34007d76:	4a5f      	ldr	r2, [pc, #380]	@ (34007ef4 <RCCEx_GetLPTIMCLKFreq+0x2f8>)
34007d78:	4293      	cmp	r3, r2
34007d7a:	f200 80dc 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d7e:	4a5e      	ldr	r2, [pc, #376]	@ (34007ef8 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34007d80:	4293      	cmp	r3, r2
34007d82:	d037      	beq.n	34007df4 <RCCEx_GetLPTIMCLKFreq+0x1f8>
34007d84:	4a5c      	ldr	r2, [pc, #368]	@ (34007ef8 <RCCEx_GetLPTIMCLKFreq+0x2fc>)
34007d86:	4293      	cmp	r3, r2
34007d88:	f200 80d5 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d8c:	4a5b      	ldr	r2, [pc, #364]	@ (34007efc <RCCEx_GetLPTIMCLKFreq+0x300>)
34007d8e:	4293      	cmp	r3, r2
34007d90:	d024      	beq.n	34007ddc <RCCEx_GetLPTIMCLKFreq+0x1e0>
34007d92:	4a5a      	ldr	r2, [pc, #360]	@ (34007efc <RCCEx_GetLPTIMCLKFreq+0x300>)
34007d94:	4293      	cmp	r3, r2
34007d96:	f200 80ce 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007d9a:	4a59      	ldr	r2, [pc, #356]	@ (34007f00 <RCCEx_GetLPTIMCLKFreq+0x304>)
34007d9c:	4293      	cmp	r3, r2
34007d9e:	d01d      	beq.n	34007ddc <RCCEx_GetLPTIMCLKFreq+0x1e0>
34007da0:	4a57      	ldr	r2, [pc, #348]	@ (34007f00 <RCCEx_GetLPTIMCLKFreq+0x304>)
34007da2:	4293      	cmp	r3, r2
34007da4:	f200 80c7 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007da8:	4a56      	ldr	r2, [pc, #344]	@ (34007f04 <RCCEx_GetLPTIMCLKFreq+0x308>)
34007daa:	4293      	cmp	r3, r2
34007dac:	d016      	beq.n	34007ddc <RCCEx_GetLPTIMCLKFreq+0x1e0>
34007dae:	4a55      	ldr	r2, [pc, #340]	@ (34007f04 <RCCEx_GetLPTIMCLKFreq+0x308>)
34007db0:	4293      	cmp	r3, r2
34007db2:	f200 80c0 	bhi.w	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
34007db6:	4a54      	ldr	r2, [pc, #336]	@ (34007f08 <RCCEx_GetLPTIMCLKFreq+0x30c>)
34007db8:	4293      	cmp	r3, r2
34007dba:	d003      	beq.n	34007dc4 <RCCEx_GetLPTIMCLKFreq+0x1c8>
34007dbc:	4a53      	ldr	r2, [pc, #332]	@ (34007f0c <RCCEx_GetLPTIMCLKFreq+0x310>)
34007dbe:	4293      	cmp	r3, r2
34007dc0:	d00c      	beq.n	34007ddc <RCCEx_GetLPTIMCLKFreq+0x1e0>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
34007dc2:	e0b8      	b.n	34007f36 <RCCEx_GetLPTIMCLKFreq+0x33a>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007dc4:	f7fa f838 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34007dc8:	4603      	mov	r3, r0
34007dca:	4618      	mov	r0, r3
34007dcc:	f7fe fc86 	bl	340066dc <RCCEx_GetHCLKFreq>
34007dd0:	4603      	mov	r3, r0
34007dd2:	4618      	mov	r0, r3
34007dd4:	f7fe fc93 	bl	340066fe <RCCEx_GetPCLK1Freq>
34007dd8:	60f8      	str	r0, [r7, #12]
      break;
34007dda:	e0b3      	b.n	34007f44 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007ddc:	f7fa f82c 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34007de0:	4603      	mov	r3, r0
34007de2:	4618      	mov	r0, r3
34007de4:	f7fe fc7a 	bl	340066dc <RCCEx_GetHCLKFreq>
34007de8:	4603      	mov	r3, r0
34007dea:	4618      	mov	r0, r3
34007dec:	f7fe fca8 	bl	34006740 <RCCEx_GetPCLK4Freq>
34007df0:	60f8      	str	r0, [r7, #12]
      break;
34007df2:	e0a7      	b.n	34007f44 <RCCEx_GetLPTIMCLKFreq+0x348>
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007df4:	2007      	movs	r0, #7
34007df6:	f7fe ff5d 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34007dfa:	60f8      	str	r0, [r7, #12]
      break;
34007dfc:	e0a2      	b.n	34007f44 <RCCEx_GetLPTIMCLKFreq+0x348>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34007dfe:	f7fb fa41 	bl	34003284 <LL_RCC_IC15_IsEnabled>
34007e02:	4603      	mov	r3, r0
34007e04:	2b00      	cmp	r3, #0
34007e06:	f000 8098 	beq.w	34007f3a <RCCEx_GetLPTIMCLKFreq+0x33e>
        ic_divider = LL_RCC_IC15_GetDivider();
34007e0a:	f7fb fa5d 	bl	340032c8 <LL_RCC_IC15_GetDivider>
34007e0e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34007e10:	f7fb fa4c 	bl	340032ac <LL_RCC_IC15_GetSource>
34007e14:	4603      	mov	r3, r0
34007e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007e1a:	d029      	beq.n	34007e70 <RCCEx_GetLPTIMCLKFreq+0x274>
34007e1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007e20:	d82f      	bhi.n	34007e82 <RCCEx_GetLPTIMCLKFreq+0x286>
34007e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007e26:	d01a      	beq.n	34007e5e <RCCEx_GetLPTIMCLKFreq+0x262>
34007e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34007e2c:	d829      	bhi.n	34007e82 <RCCEx_GetLPTIMCLKFreq+0x286>
34007e2e:	2b00      	cmp	r3, #0
34007e30:	d003      	beq.n	34007e3a <RCCEx_GetLPTIMCLKFreq+0x23e>
34007e32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34007e36:	d009      	beq.n	34007e4c <RCCEx_GetLPTIMCLKFreq+0x250>
            break;
34007e38:	e023      	b.n	34007e82 <RCCEx_GetLPTIMCLKFreq+0x286>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34007e3a:	f7fe fb37 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34007e3e:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34007e40:	68fa      	ldr	r2, [r7, #12]
34007e42:	68bb      	ldr	r3, [r7, #8]
34007e44:	fbb2 f3f3 	udiv	r3, r2, r3
34007e48:	60fb      	str	r3, [r7, #12]
            break;
34007e4a:	e01b      	b.n	34007e84 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34007e4c:	f7fe fb74 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34007e50:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34007e52:	68fa      	ldr	r2, [r7, #12]
34007e54:	68bb      	ldr	r3, [r7, #8]
34007e56:	fbb2 f3f3 	udiv	r3, r2, r3
34007e5a:	60fb      	str	r3, [r7, #12]
            break;
34007e5c:	e012      	b.n	34007e84 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34007e5e:	f7fe fbb1 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34007e62:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34007e64:	68fa      	ldr	r2, [r7, #12]
34007e66:	68bb      	ldr	r3, [r7, #8]
34007e68:	fbb2 f3f3 	udiv	r3, r2, r3
34007e6c:	60fb      	str	r3, [r7, #12]
            break;
34007e6e:	e009      	b.n	34007e84 <RCCEx_GetLPTIMCLKFreq+0x288>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34007e70:	f7fe fbee 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34007e74:	60f8      	str	r0, [r7, #12]
            lptim_frequency = lptim_frequency / ic_divider;
34007e76:	68fa      	ldr	r2, [r7, #12]
34007e78:	68bb      	ldr	r3, [r7, #8]
34007e7a:	fbb2 f3f3 	udiv	r3, r2, r3
34007e7e:	60fb      	str	r3, [r7, #12]
            break;
34007e80:	e000      	b.n	34007e84 <RCCEx_GetLPTIMCLKFreq+0x288>
            break;
34007e82:	bf00      	nop
      break;
34007e84:	e059      	b.n	34007f3a <RCCEx_GetLPTIMCLKFreq+0x33e>
      if (LL_RCC_LSE_IsReady() != 0U)
34007e86:	f7fa f8d9 	bl	3400203c <LL_RCC_LSE_IsReady>
34007e8a:	4603      	mov	r3, r0
34007e8c:	2b00      	cmp	r3, #0
34007e8e:	d056      	beq.n	34007f3e <RCCEx_GetLPTIMCLKFreq+0x342>
        lptim_frequency = LSE_VALUE;
34007e90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34007e94:	60fb      	str	r3, [r7, #12]
      break;
34007e96:	e052      	b.n	34007f3e <RCCEx_GetLPTIMCLKFreq+0x342>
34007e98:	0705182c 	.word	0x0705182c
34007e9c:	0705142c 	.word	0x0705142c
34007ea0:	0705102c 	.word	0x0705102c
34007ea4:	07050c2c 	.word	0x07050c2c
34007ea8:	0705082c 	.word	0x0705082c
34007eac:	0704182c 	.word	0x0704182c
34007eb0:	0704142c 	.word	0x0704142c
34007eb4:	0704102c 	.word	0x0704102c
34007eb8:	07040c2c 	.word	0x07040c2c
34007ebc:	0704082c 	.word	0x0704082c
34007ec0:	0703182c 	.word	0x0703182c
34007ec4:	0703142c 	.word	0x0703142c
34007ec8:	0703102c 	.word	0x0703102c
34007ecc:	07030c2c 	.word	0x07030c2c
34007ed0:	0703082c 	.word	0x0703082c
34007ed4:	0702182c 	.word	0x0702182c
34007ed8:	0702142c 	.word	0x0702142c
34007edc:	0702102c 	.word	0x0702102c
34007ee0:	07020c2c 	.word	0x07020c2c
34007ee4:	0702082c 	.word	0x0702082c
34007ee8:	0701182c 	.word	0x0701182c
34007eec:	0701142c 	.word	0x0701142c
34007ef0:	0701102c 	.word	0x0701102c
34007ef4:	07010c2c 	.word	0x07010c2c
34007ef8:	0701082c 	.word	0x0701082c
34007efc:	0700182c 	.word	0x0700182c
34007f00:	0700142c 	.word	0x0700142c
34007f04:	0700102c 	.word	0x0700102c
34007f08:	0700082c 	.word	0x0700082c
34007f0c:	07000c2c 	.word	0x07000c2c
      if (LL_RCC_LSI_IsReady() != 0U)
34007f10:	f7fa f8a6 	bl	34002060 <LL_RCC_LSI_IsReady>
34007f14:	4603      	mov	r3, r0
34007f16:	2b00      	cmp	r3, #0
34007f18:	d013      	beq.n	34007f42 <RCCEx_GetLPTIMCLKFreq+0x346>
        lptim_frequency = LSI_VALUE;
34007f1a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
34007f1e:	60fb      	str	r3, [r7, #12]
      break;
34007f20:	e00f      	b.n	34007f42 <RCCEx_GetLPTIMCLKFreq+0x346>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34007f22:	f7f9 ff89 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34007f26:	4604      	mov	r4, r0
34007f28:	f7fa fcb0 	bl	3400288c <LL_RCC_GetTIMPrescaler>
34007f2c:	4603      	mov	r3, r0
34007f2e:	fa24 f303 	lsr.w	r3, r4, r3
34007f32:	60fb      	str	r3, [r7, #12]
      break;
34007f34:	e006      	b.n	34007f44 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34007f36:	bf00      	nop
34007f38:	e004      	b.n	34007f44 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34007f3a:	bf00      	nop
34007f3c:	e002      	b.n	34007f44 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34007f3e:	bf00      	nop
34007f40:	e000      	b.n	34007f44 <RCCEx_GetLPTIMCLKFreq+0x348>
      break;
34007f42:	bf00      	nop
  }

  return lptim_frequency;
34007f44:	68fb      	ldr	r3, [r7, #12]
}
34007f46:	4618      	mov	r0, r3
34007f48:	3714      	adds	r7, #20
34007f4a:	46bd      	mov	sp, r7
34007f4c:	bd90      	pop	{r4, r7, pc}
34007f4e:	bf00      	nop

34007f50 <RCCEx_GetLPUARTCLKFreq>:
  *         @arg @ref RCCEx_LPUART1_Clock_Source
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLPUARTCLKFreq(uint32_t LPUARTxSource)
{
34007f50:	b580      	push	{r7, lr}
34007f52:	b084      	sub	sp, #16
34007f54:	af00      	add	r7, sp, #0
34007f56:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = RCC_PERIPH_FREQUENCY_NO;
34007f58:	2300      	movs	r3, #0
34007f5a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34007f5c:	6878      	ldr	r0, [r7, #4]
34007f5e:	f7fa fb97 	bl	34002690 <LL_RCC_GetLPUARTClockSource>
34007f62:	4603      	mov	r3, r0
34007f64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34007f68:	f000 80c0 	beq.w	340080ec <RCCEx_GetLPUARTCLKFreq+0x19c>
34007f6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34007f70:	f200 80db 	bhi.w	3400812a <RCCEx_GetLPUARTCLKFreq+0x1da>
34007f74:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34007f78:	f000 80c6 	beq.w	34008108 <RCCEx_GetLPUARTCLKFreq+0x1b8>
34007f7c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34007f80:	f200 80d3 	bhi.w	3400812a <RCCEx_GetLPUARTCLKFreq+0x1da>
34007f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34007f88:	f000 80c6 	beq.w	34008118 <RCCEx_GetLPUARTCLKFreq+0x1c8>
34007f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34007f90:	f200 80cb 	bhi.w	3400812a <RCCEx_GetLPUARTCLKFreq+0x1da>
34007f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34007f98:	d065      	beq.n	34008066 <RCCEx_GetLPUARTCLKFreq+0x116>
34007f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34007f9e:	f200 80c4 	bhi.w	3400812a <RCCEx_GetLPUARTCLKFreq+0x1da>
34007fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34007fa6:	d01a      	beq.n	34007fde <RCCEx_GetLPUARTCLKFreq+0x8e>
34007fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34007fac:	f200 80bd 	bhi.w	3400812a <RCCEx_GetLPUARTCLKFreq+0x1da>
34007fb0:	2b00      	cmp	r3, #0
34007fb2:	d003      	beq.n	34007fbc <RCCEx_GetLPUARTCLKFreq+0x6c>
34007fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34007fb8:	d00c      	beq.n	34007fd4 <RCCEx_GetLPUARTCLKFreq+0x84>
      }
      break;

    default:
      /* Unexpected case */
      break;
34007fba:	e0b6      	b.n	3400812a <RCCEx_GetLPUARTCLKFreq+0x1da>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34007fbc:	f7f9 ff3c 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34007fc0:	4603      	mov	r3, r0
34007fc2:	4618      	mov	r0, r3
34007fc4:	f7fe fb8a 	bl	340066dc <RCCEx_GetHCLKFreq>
34007fc8:	4603      	mov	r3, r0
34007fca:	4618      	mov	r0, r3
34007fcc:	f7fe fbb8 	bl	34006740 <RCCEx_GetPCLK4Freq>
34007fd0:	60f8      	str	r0, [r7, #12]
      break;
34007fd2:	e0b5      	b.n	34008140 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      lpuart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34007fd4:	2007      	movs	r0, #7
34007fd6:	f7fe fe6d 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34007fda:	60f8      	str	r0, [r7, #12]
      break;
34007fdc:	e0b0      	b.n	34008140 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34007fde:	f7fb f811 	bl	34003004 <LL_RCC_IC9_IsEnabled>
34007fe2:	4603      	mov	r3, r0
34007fe4:	2b00      	cmp	r3, #0
34007fe6:	f000 80a2 	beq.w	3400812e <RCCEx_GetLPUARTCLKFreq+0x1de>
        ic_divider = LL_RCC_IC9_GetDivider();
34007fea:	f7fb f82d 	bl	34003048 <LL_RCC_IC9_GetDivider>
34007fee:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34007ff0:	f7fb f81c 	bl	3400302c <LL_RCC_IC9_GetSource>
34007ff4:	4603      	mov	r3, r0
34007ff6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34007ffa:	d029      	beq.n	34008050 <RCCEx_GetLPUARTCLKFreq+0x100>
34007ffc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008000:	d82f      	bhi.n	34008062 <RCCEx_GetLPUARTCLKFreq+0x112>
34008002:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008006:	d01a      	beq.n	3400803e <RCCEx_GetLPUARTCLKFreq+0xee>
34008008:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400800c:	d829      	bhi.n	34008062 <RCCEx_GetLPUARTCLKFreq+0x112>
3400800e:	2b00      	cmp	r3, #0
34008010:	d003      	beq.n	3400801a <RCCEx_GetLPUARTCLKFreq+0xca>
34008012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008016:	d009      	beq.n	3400802c <RCCEx_GetLPUARTCLKFreq+0xdc>
            break;
34008018:	e023      	b.n	34008062 <RCCEx_GetLPUARTCLKFreq+0x112>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400801a:	f7fe fa47 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
3400801e:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34008020:	68fa      	ldr	r2, [r7, #12]
34008022:	68bb      	ldr	r3, [r7, #8]
34008024:	fbb2 f3f3 	udiv	r3, r2, r3
34008028:	60fb      	str	r3, [r7, #12]
            break;
3400802a:	e01b      	b.n	34008064 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400802c:	f7fe fa84 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34008030:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34008032:	68fa      	ldr	r2, [r7, #12]
34008034:	68bb      	ldr	r3, [r7, #8]
34008036:	fbb2 f3f3 	udiv	r3, r2, r3
3400803a:	60fb      	str	r3, [r7, #12]
            break;
3400803c:	e012      	b.n	34008064 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400803e:	f7fe fac1 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34008042:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34008044:	68fa      	ldr	r2, [r7, #12]
34008046:	68bb      	ldr	r3, [r7, #8]
34008048:	fbb2 f3f3 	udiv	r3, r2, r3
3400804c:	60fb      	str	r3, [r7, #12]
            break;
3400804e:	e009      	b.n	34008064 <RCCEx_GetLPUARTCLKFreq+0x114>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008050:	f7fe fafe 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34008054:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
34008056:	68fa      	ldr	r2, [r7, #12]
34008058:	68bb      	ldr	r3, [r7, #8]
3400805a:	fbb2 f3f3 	udiv	r3, r2, r3
3400805e:	60fb      	str	r3, [r7, #12]
            break;
34008060:	e000      	b.n	34008064 <RCCEx_GetLPUARTCLKFreq+0x114>
            break;
34008062:	bf00      	nop
      break;
34008064:	e063      	b.n	3400812e <RCCEx_GetLPUARTCLKFreq+0x1de>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34008066:	f7fb f8cd 	bl	34003204 <LL_RCC_IC14_IsEnabled>
3400806a:	4603      	mov	r3, r0
3400806c:	2b00      	cmp	r3, #0
3400806e:	d060      	beq.n	34008132 <RCCEx_GetLPUARTCLKFreq+0x1e2>
        ic_divider = LL_RCC_IC14_GetDivider();
34008070:	f7fb f8ea 	bl	34003248 <LL_RCC_IC14_GetDivider>
34008074:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34008076:	f7fb f8d9 	bl	3400322c <LL_RCC_IC14_GetSource>
3400807a:	4603      	mov	r3, r0
3400807c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008080:	d029      	beq.n	340080d6 <RCCEx_GetLPUARTCLKFreq+0x186>
34008082:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008086:	d82f      	bhi.n	340080e8 <RCCEx_GetLPUARTCLKFreq+0x198>
34008088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400808c:	d01a      	beq.n	340080c4 <RCCEx_GetLPUARTCLKFreq+0x174>
3400808e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008092:	d829      	bhi.n	340080e8 <RCCEx_GetLPUARTCLKFreq+0x198>
34008094:	2b00      	cmp	r3, #0
34008096:	d003      	beq.n	340080a0 <RCCEx_GetLPUARTCLKFreq+0x150>
34008098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400809c:	d009      	beq.n	340080b2 <RCCEx_GetLPUARTCLKFreq+0x162>
            break;
3400809e:	e023      	b.n	340080e8 <RCCEx_GetLPUARTCLKFreq+0x198>
            lpuart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340080a0:	f7fe fa04 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
340080a4:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340080a6:	68fa      	ldr	r2, [r7, #12]
340080a8:	68bb      	ldr	r3, [r7, #8]
340080aa:	fbb2 f3f3 	udiv	r3, r2, r3
340080ae:	60fb      	str	r3, [r7, #12]
            break;
340080b0:	e01b      	b.n	340080ea <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340080b2:	f7fe fa41 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340080b6:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340080b8:	68fa      	ldr	r2, [r7, #12]
340080ba:	68bb      	ldr	r3, [r7, #8]
340080bc:	fbb2 f3f3 	udiv	r3, r2, r3
340080c0:	60fb      	str	r3, [r7, #12]
            break;
340080c2:	e012      	b.n	340080ea <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340080c4:	f7fe fa7e 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
340080c8:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340080ca:	68fa      	ldr	r2, [r7, #12]
340080cc:	68bb      	ldr	r3, [r7, #8]
340080ce:	fbb2 f3f3 	udiv	r3, r2, r3
340080d2:	60fb      	str	r3, [r7, #12]
            break;
340080d4:	e009      	b.n	340080ea <RCCEx_GetLPUARTCLKFreq+0x19a>
            lpuart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340080d6:	f7fe fabb 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
340080da:	60f8      	str	r0, [r7, #12]
            lpuart_frequency = lpuart_frequency / ic_divider;
340080dc:	68fa      	ldr	r2, [r7, #12]
340080de:	68bb      	ldr	r3, [r7, #8]
340080e0:	fbb2 f3f3 	udiv	r3, r2, r3
340080e4:	60fb      	str	r3, [r7, #12]
            break;
340080e6:	e000      	b.n	340080ea <RCCEx_GetLPUARTCLKFreq+0x19a>
            break;
340080e8:	bf00      	nop
      break;
340080ea:	e022      	b.n	34008132 <RCCEx_GetLPUARTCLKFreq+0x1e2>
      if (LL_RCC_HSI_IsReady() != 0U)
340080ec:	f7f9 ff66 	bl	34001fbc <LL_RCC_HSI_IsReady>
340080f0:	4603      	mov	r3, r0
340080f2:	2b00      	cmp	r3, #0
340080f4:	d01f      	beq.n	34008136 <RCCEx_GetLPUARTCLKFreq+0x1e6>
        lpuart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340080f6:	f7f9 ff73 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
340080fa:	4603      	mov	r3, r0
340080fc:	09db      	lsrs	r3, r3, #7
340080fe:	4a13      	ldr	r2, [pc, #76]	@ (3400814c <RCCEx_GetLPUARTCLKFreq+0x1fc>)
34008100:	fa22 f303 	lsr.w	r3, r2, r3
34008104:	60fb      	str	r3, [r7, #12]
      break;
34008106:	e016      	b.n	34008136 <RCCEx_GetLPUARTCLKFreq+0x1e6>
      if (LL_RCC_MSI_IsReady() != 0U)
34008108:	f7f9 ff78 	bl	34001ffc <LL_RCC_MSI_IsReady>
3400810c:	4603      	mov	r3, r0
3400810e:	2b00      	cmp	r3, #0
34008110:	d013      	beq.n	3400813a <RCCEx_GetLPUARTCLKFreq+0x1ea>
        lpuart_frequency = MSI_VALUE;
34008112:	4b0f      	ldr	r3, [pc, #60]	@ (34008150 <RCCEx_GetLPUARTCLKFreq+0x200>)
34008114:	60fb      	str	r3, [r7, #12]
      break;
34008116:	e010      	b.n	3400813a <RCCEx_GetLPUARTCLKFreq+0x1ea>
      if (LL_RCC_LSE_IsReady() != 0U)
34008118:	f7f9 ff90 	bl	3400203c <LL_RCC_LSE_IsReady>
3400811c:	4603      	mov	r3, r0
3400811e:	2b00      	cmp	r3, #0
34008120:	d00d      	beq.n	3400813e <RCCEx_GetLPUARTCLKFreq+0x1ee>
        lpuart_frequency = LSE_VALUE;
34008122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34008126:	60fb      	str	r3, [r7, #12]
      break;
34008128:	e009      	b.n	3400813e <RCCEx_GetLPUARTCLKFreq+0x1ee>
      break;
3400812a:	bf00      	nop
3400812c:	e008      	b.n	34008140 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3400812e:	bf00      	nop
34008130:	e006      	b.n	34008140 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34008132:	bf00      	nop
34008134:	e004      	b.n	34008140 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
34008136:	bf00      	nop
34008138:	e002      	b.n	34008140 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3400813a:	bf00      	nop
3400813c:	e000      	b.n	34008140 <RCCEx_GetLPUARTCLKFreq+0x1f0>
      break;
3400813e:	bf00      	nop
  }

  return lpuart_frequency;
34008140:	68fb      	ldr	r3, [r7, #12]
}
34008142:	4618      	mov	r0, r3
34008144:	3710      	adds	r7, #16
34008146:	46bd      	mov	sp, r7
34008148:	bd80      	pop	{r7, pc}
3400814a:	bf00      	nop
3400814c:	03d09000 	.word	0x03d09000
34008150:	003d0900 	.word	0x003d0900

34008154 <RCCEx_GetLTDCCLKFreq>:
  *         @arg @ref RCCEx_LTDC_Clock_Source
  * @retval LTDC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetLTDCCLKFreq(uint32_t LTDCxSource)
{
34008154:	b580      	push	{r7, lr}
34008156:	b084      	sub	sp, #16
34008158:	af00      	add	r7, sp, #0
3400815a:	6078      	str	r0, [r7, #4]
  uint32_t ltdc_frequency = RCC_PERIPH_FREQUENCY_NO;
3400815c:	2300      	movs	r3, #0
3400815e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34008160:	6878      	ldr	r0, [r7, #4]
34008162:	f7fa faa7 	bl	340026b4 <LL_RCC_GetLTDCClockSource>
34008166:	4603      	mov	r3, r0
34008168:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
3400816c:	d062      	beq.n	34008234 <RCCEx_GetLTDCCLKFreq+0xe0>
3400816e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34008172:	d86d      	bhi.n	34008250 <RCCEx_GetLTDCCLKFreq+0xfc>
34008174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34008178:	d019      	beq.n	340081ae <RCCEx_GetLTDCCLKFreq+0x5a>
3400817a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
3400817e:	d867      	bhi.n	34008250 <RCCEx_GetLTDCCLKFreq+0xfc>
34008180:	2b00      	cmp	r3, #0
34008182:	d003      	beq.n	3400818c <RCCEx_GetLTDCCLKFreq+0x38>
34008184:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34008188:	d00c      	beq.n	340081a4 <RCCEx_GetLTDCCLKFreq+0x50>
      }
      break;

    default:
      /* Unexpected case */
      break;
3400818a:	e061      	b.n	34008250 <RCCEx_GetLTDCCLKFreq+0xfc>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400818c:	f7f9 fe54 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34008190:	4603      	mov	r3, r0
34008192:	4618      	mov	r0, r3
34008194:	f7fe faa2 	bl	340066dc <RCCEx_GetHCLKFreq>
34008198:	4603      	mov	r3, r0
3400819a:	4618      	mov	r0, r3
3400819c:	f7fe fae1 	bl	34006762 <RCCEx_GetPCLK5Freq>
340081a0:	60f8      	str	r0, [r7, #12]
      break;
340081a2:	e05a      	b.n	3400825a <RCCEx_GetLTDCCLKFreq+0x106>
      ltdc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340081a4:	2007      	movs	r0, #7
340081a6:	f7fe fd85 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
340081aa:	60f8      	str	r0, [r7, #12]
      break;
340081ac:	e055      	b.n	3400825a <RCCEx_GetLTDCCLKFreq+0x106>
      if (LL_RCC_IC16_IsEnabled() != 0U)
340081ae:	f7fb f8a9 	bl	34003304 <LL_RCC_IC16_IsEnabled>
340081b2:	4603      	mov	r3, r0
340081b4:	2b00      	cmp	r3, #0
340081b6:	d04d      	beq.n	34008254 <RCCEx_GetLTDCCLKFreq+0x100>
        ic_divider = LL_RCC_IC16_GetDivider();
340081b8:	f7fb f8c6 	bl	34003348 <LL_RCC_IC16_GetDivider>
340081bc:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC16_GetSource())
340081be:	f7fb f8b5 	bl	3400332c <LL_RCC_IC16_GetSource>
340081c2:	4603      	mov	r3, r0
340081c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340081c8:	d029      	beq.n	3400821e <RCCEx_GetLTDCCLKFreq+0xca>
340081ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340081ce:	d82f      	bhi.n	34008230 <RCCEx_GetLTDCCLKFreq+0xdc>
340081d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340081d4:	d01a      	beq.n	3400820c <RCCEx_GetLTDCCLKFreq+0xb8>
340081d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340081da:	d829      	bhi.n	34008230 <RCCEx_GetLTDCCLKFreq+0xdc>
340081dc:	2b00      	cmp	r3, #0
340081de:	d003      	beq.n	340081e8 <RCCEx_GetLTDCCLKFreq+0x94>
340081e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340081e4:	d009      	beq.n	340081fa <RCCEx_GetLTDCCLKFreq+0xa6>
            break;
340081e6:	e023      	b.n	34008230 <RCCEx_GetLTDCCLKFreq+0xdc>
            ltdc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340081e8:	f7fe f960 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
340081ec:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
340081ee:	68fa      	ldr	r2, [r7, #12]
340081f0:	68bb      	ldr	r3, [r7, #8]
340081f2:	fbb2 f3f3 	udiv	r3, r2, r3
340081f6:	60fb      	str	r3, [r7, #12]
            break;
340081f8:	e01b      	b.n	34008232 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340081fa:	f7fe f99d 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340081fe:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34008200:	68fa      	ldr	r2, [r7, #12]
34008202:	68bb      	ldr	r3, [r7, #8]
34008204:	fbb2 f3f3 	udiv	r3, r2, r3
34008208:	60fb      	str	r3, [r7, #12]
            break;
3400820a:	e012      	b.n	34008232 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400820c:	f7fe f9da 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34008210:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34008212:	68fa      	ldr	r2, [r7, #12]
34008214:	68bb      	ldr	r3, [r7, #8]
34008216:	fbb2 f3f3 	udiv	r3, r2, r3
3400821a:	60fb      	str	r3, [r7, #12]
            break;
3400821c:	e009      	b.n	34008232 <RCCEx_GetLTDCCLKFreq+0xde>
            ltdc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400821e:	f7fe fa17 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34008222:	60f8      	str	r0, [r7, #12]
            ltdc_frequency = ltdc_frequency / ic_divider;
34008224:	68fa      	ldr	r2, [r7, #12]
34008226:	68bb      	ldr	r3, [r7, #8]
34008228:	fbb2 f3f3 	udiv	r3, r2, r3
3400822c:	60fb      	str	r3, [r7, #12]
            break;
3400822e:	e000      	b.n	34008232 <RCCEx_GetLTDCCLKFreq+0xde>
            break;
34008230:	bf00      	nop
      break;
34008232:	e00f      	b.n	34008254 <RCCEx_GetLTDCCLKFreq+0x100>
      if (LL_RCC_HSI_IsReady() != 0U)
34008234:	f7f9 fec2 	bl	34001fbc <LL_RCC_HSI_IsReady>
34008238:	4603      	mov	r3, r0
3400823a:	2b00      	cmp	r3, #0
3400823c:	d00c      	beq.n	34008258 <RCCEx_GetLTDCCLKFreq+0x104>
        ltdc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3400823e:	f7f9 fecf 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34008242:	4603      	mov	r3, r0
34008244:	09db      	lsrs	r3, r3, #7
34008246:	4a07      	ldr	r2, [pc, #28]	@ (34008264 <RCCEx_GetLTDCCLKFreq+0x110>)
34008248:	fa22 f303 	lsr.w	r3, r2, r3
3400824c:	60fb      	str	r3, [r7, #12]
      break;
3400824e:	e003      	b.n	34008258 <RCCEx_GetLTDCCLKFreq+0x104>
      break;
34008250:	bf00      	nop
34008252:	e002      	b.n	3400825a <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34008254:	bf00      	nop
34008256:	e000      	b.n	3400825a <RCCEx_GetLTDCCLKFreq+0x106>
      break;
34008258:	bf00      	nop
  }

  return ltdc_frequency;
3400825a:	68fb      	ldr	r3, [r7, #12]
}
3400825c:	4618      	mov	r0, r3
3400825e:	3710      	adds	r7, #16
34008260:	46bd      	mov	sp, r7
34008262:	bd80      	pop	{r7, pc}
34008264:	03d09000 	.word	0x03d09000

34008268 <RCCEx_GetMDFCLKFreq>:
  *         @arg @ref RCCEx_MDF1_Clock_Source
  * @retval MDF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetMDFCLKFreq(uint32_t MDFxSource)
{
34008268:	b590      	push	{r4, r7, lr}
3400826a:	b085      	sub	sp, #20
3400826c:	af00      	add	r7, sp, #0
3400826e:	6078      	str	r0, [r7, #4]
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
34008270:	2300      	movs	r3, #0
34008272:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34008274:	6878      	ldr	r0, [r7, #4]
34008276:	f7fa fa2f 	bl	340026d8 <LL_RCC_GetMDFClockSource>
3400827a:	4603      	mov	r3, r0
3400827c:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34008280:	f000 80dd 	beq.w	3400843e <RCCEx_GetMDFCLKFreq+0x1d6>
34008284:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34008288:	f200 80e3 	bhi.w	34008452 <RCCEx_GetMDFCLKFreq+0x1ea>
3400828c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34008290:	f000 80d2 	beq.w	34008438 <RCCEx_GetMDFCLKFreq+0x1d0>
34008294:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34008298:	f200 80db 	bhi.w	34008452 <RCCEx_GetMDFCLKFreq+0x1ea>
3400829c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340082a0:	f000 80b4 	beq.w	3400840c <RCCEx_GetMDFCLKFreq+0x1a4>
340082a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
340082a8:	f200 80d3 	bhi.w	34008452 <RCCEx_GetMDFCLKFreq+0x1ea>
340082ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340082b0:	f000 80ba 	beq.w	34008428 <RCCEx_GetMDFCLKFreq+0x1c0>
340082b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
340082b8:	f200 80cb 	bhi.w	34008452 <RCCEx_GetMDFCLKFreq+0x1ea>
340082bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340082c0:	d061      	beq.n	34008386 <RCCEx_GetMDFCLKFreq+0x11e>
340082c2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
340082c6:	f200 80c4 	bhi.w	34008452 <RCCEx_GetMDFCLKFreq+0x1ea>
340082ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340082ce:	d016      	beq.n	340082fe <RCCEx_GetMDFCLKFreq+0x96>
340082d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
340082d4:	f200 80bd 	bhi.w	34008452 <RCCEx_GetMDFCLKFreq+0x1ea>
340082d8:	2b00      	cmp	r3, #0
340082da:	d003      	beq.n	340082e4 <RCCEx_GetMDFCLKFreq+0x7c>
340082dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
340082e0:	d008      	beq.n	340082f4 <RCCEx_GetMDFCLKFreq+0x8c>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
      break;

    default:
      /* Unexpected case */
      break;
340082e2:	e0b6      	b.n	34008452 <RCCEx_GetMDFCLKFreq+0x1ea>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340082e4:	f7f9 fda8 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
340082e8:	4603      	mov	r3, r0
340082ea:	4618      	mov	r0, r3
340082ec:	f7fe f9f6 	bl	340066dc <RCCEx_GetHCLKFreq>
340082f0:	60f8      	str	r0, [r7, #12]
      break;
340082f2:	e0b7      	b.n	34008464 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340082f4:	2007      	movs	r0, #7
340082f6:	f7fe fcdd 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
340082fa:	60f8      	str	r0, [r7, #12]
      break;
340082fc:	e0b2      	b.n	34008464 <RCCEx_GetMDFCLKFreq+0x1fc>
      if (LL_RCC_IC7_IsEnabled() != 0U)
340082fe:	f7fa fe01 	bl	34002f04 <LL_RCC_IC7_IsEnabled>
34008302:	4603      	mov	r3, r0
34008304:	2b00      	cmp	r3, #0
34008306:	f000 80a6 	beq.w	34008456 <RCCEx_GetMDFCLKFreq+0x1ee>
        ic_divider = LL_RCC_IC7_GetDivider();
3400830a:	f7fa fe1d 	bl	34002f48 <LL_RCC_IC7_GetDivider>
3400830e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34008310:	f7fa fe0c 	bl	34002f2c <LL_RCC_IC7_GetSource>
34008314:	4603      	mov	r3, r0
34008316:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400831a:	d029      	beq.n	34008370 <RCCEx_GetMDFCLKFreq+0x108>
3400831c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008320:	d82f      	bhi.n	34008382 <RCCEx_GetMDFCLKFreq+0x11a>
34008322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008326:	d01a      	beq.n	3400835e <RCCEx_GetMDFCLKFreq+0xf6>
34008328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400832c:	d829      	bhi.n	34008382 <RCCEx_GetMDFCLKFreq+0x11a>
3400832e:	2b00      	cmp	r3, #0
34008330:	d003      	beq.n	3400833a <RCCEx_GetMDFCLKFreq+0xd2>
34008332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008336:	d009      	beq.n	3400834c <RCCEx_GetMDFCLKFreq+0xe4>
            break;
34008338:	e023      	b.n	34008382 <RCCEx_GetMDFCLKFreq+0x11a>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400833a:	f7fe f8b7 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
3400833e:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34008340:	68fa      	ldr	r2, [r7, #12]
34008342:	68bb      	ldr	r3, [r7, #8]
34008344:	fbb2 f3f3 	udiv	r3, r2, r3
34008348:	60fb      	str	r3, [r7, #12]
            break;
3400834a:	e01b      	b.n	34008384 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400834c:	f7fe f8f4 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34008350:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34008352:	68fa      	ldr	r2, [r7, #12]
34008354:	68bb      	ldr	r3, [r7, #8]
34008356:	fbb2 f3f3 	udiv	r3, r2, r3
3400835a:	60fb      	str	r3, [r7, #12]
            break;
3400835c:	e012      	b.n	34008384 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400835e:	f7fe f931 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34008362:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34008364:	68fa      	ldr	r2, [r7, #12]
34008366:	68bb      	ldr	r3, [r7, #8]
34008368:	fbb2 f3f3 	udiv	r3, r2, r3
3400836c:	60fb      	str	r3, [r7, #12]
            break;
3400836e:	e009      	b.n	34008384 <RCCEx_GetMDFCLKFreq+0x11c>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008370:	f7fe f96e 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34008374:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
34008376:	68fa      	ldr	r2, [r7, #12]
34008378:	68bb      	ldr	r3, [r7, #8]
3400837a:	fbb2 f3f3 	udiv	r3, r2, r3
3400837e:	60fb      	str	r3, [r7, #12]
            break;
34008380:	e000      	b.n	34008384 <RCCEx_GetMDFCLKFreq+0x11c>
            break;
34008382:	bf00      	nop
      break;
34008384:	e067      	b.n	34008456 <RCCEx_GetMDFCLKFreq+0x1ee>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008386:	f7fa fdfd 	bl	34002f84 <LL_RCC_IC8_IsEnabled>
3400838a:	4603      	mov	r3, r0
3400838c:	2b00      	cmp	r3, #0
3400838e:	d064      	beq.n	3400845a <RCCEx_GetMDFCLKFreq+0x1f2>
        ic_divider = LL_RCC_IC8_GetDivider();
34008390:	f7fa fe1a 	bl	34002fc8 <LL_RCC_IC8_GetDivider>
34008394:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34008396:	f7fa fe09 	bl	34002fac <LL_RCC_IC8_GetSource>
3400839a:	4603      	mov	r3, r0
3400839c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340083a0:	d029      	beq.n	340083f6 <RCCEx_GetMDFCLKFreq+0x18e>
340083a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340083a6:	d82f      	bhi.n	34008408 <RCCEx_GetMDFCLKFreq+0x1a0>
340083a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340083ac:	d01a      	beq.n	340083e4 <RCCEx_GetMDFCLKFreq+0x17c>
340083ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340083b2:	d829      	bhi.n	34008408 <RCCEx_GetMDFCLKFreq+0x1a0>
340083b4:	2b00      	cmp	r3, #0
340083b6:	d003      	beq.n	340083c0 <RCCEx_GetMDFCLKFreq+0x158>
340083b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340083bc:	d009      	beq.n	340083d2 <RCCEx_GetMDFCLKFreq+0x16a>
            break;
340083be:	e023      	b.n	34008408 <RCCEx_GetMDFCLKFreq+0x1a0>
            adf_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340083c0:	f7fe f874 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
340083c4:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340083c6:	68fa      	ldr	r2, [r7, #12]
340083c8:	68bb      	ldr	r3, [r7, #8]
340083ca:	fbb2 f3f3 	udiv	r3, r2, r3
340083ce:	60fb      	str	r3, [r7, #12]
            break;
340083d0:	e01b      	b.n	3400840a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340083d2:	f7fe f8b1 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340083d6:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340083d8:	68fa      	ldr	r2, [r7, #12]
340083da:	68bb      	ldr	r3, [r7, #8]
340083dc:	fbb2 f3f3 	udiv	r3, r2, r3
340083e0:	60fb      	str	r3, [r7, #12]
            break;
340083e2:	e012      	b.n	3400840a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340083e4:	f7fe f8ee 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
340083e8:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340083ea:	68fa      	ldr	r2, [r7, #12]
340083ec:	68bb      	ldr	r3, [r7, #8]
340083ee:	fbb2 f3f3 	udiv	r3, r2, r3
340083f2:	60fb      	str	r3, [r7, #12]
            break;
340083f4:	e009      	b.n	3400840a <RCCEx_GetMDFCLKFreq+0x1a2>
            adf_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340083f6:	f7fe f92b 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
340083fa:	60f8      	str	r0, [r7, #12]
            adf_frequency = adf_frequency / ic_divider;
340083fc:	68fa      	ldr	r2, [r7, #12]
340083fe:	68bb      	ldr	r3, [r7, #8]
34008400:	fbb2 f3f3 	udiv	r3, r2, r3
34008404:	60fb      	str	r3, [r7, #12]
            break;
34008406:	e000      	b.n	3400840a <RCCEx_GetMDFCLKFreq+0x1a2>
            break;
34008408:	bf00      	nop
      break;
3400840a:	e026      	b.n	3400845a <RCCEx_GetMDFCLKFreq+0x1f2>
      if (LL_RCC_HSI_IsReady() != 0U)
3400840c:	f7f9 fdd6 	bl	34001fbc <LL_RCC_HSI_IsReady>
34008410:	4603      	mov	r3, r0
34008412:	2b00      	cmp	r3, #0
34008414:	d023      	beq.n	3400845e <RCCEx_GetMDFCLKFreq+0x1f6>
        adf_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008416:	f7f9 fde3 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
3400841a:	4603      	mov	r3, r0
3400841c:	09db      	lsrs	r3, r3, #7
3400841e:	4a14      	ldr	r2, [pc, #80]	@ (34008470 <RCCEx_GetMDFCLKFreq+0x208>)
34008420:	fa22 f303 	lsr.w	r3, r2, r3
34008424:	60fb      	str	r3, [r7, #12]
      break;
34008426:	e01a      	b.n	3400845e <RCCEx_GetMDFCLKFreq+0x1f6>
      if (LL_RCC_MSI_IsReady() != 0U)
34008428:	f7f9 fde8 	bl	34001ffc <LL_RCC_MSI_IsReady>
3400842c:	4603      	mov	r3, r0
3400842e:	2b00      	cmp	r3, #0
34008430:	d017      	beq.n	34008462 <RCCEx_GetMDFCLKFreq+0x1fa>
        adf_frequency = MSI_VALUE;
34008432:	4b10      	ldr	r3, [pc, #64]	@ (34008474 <RCCEx_GetMDFCLKFreq+0x20c>)
34008434:	60fb      	str	r3, [r7, #12]
      break;
34008436:	e014      	b.n	34008462 <RCCEx_GetMDFCLKFreq+0x1fa>
      adf_frequency = EXTERNAL_CLOCK_VALUE;
34008438:	4b0f      	ldr	r3, [pc, #60]	@ (34008478 <RCCEx_GetMDFCLKFreq+0x210>)
3400843a:	60fb      	str	r3, [r7, #12]
      break;
3400843c:	e012      	b.n	34008464 <RCCEx_GetMDFCLKFreq+0x1fc>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3400843e:	f7f9 fcfb 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34008442:	4604      	mov	r4, r0
34008444:	f7fa fa22 	bl	3400288c <LL_RCC_GetTIMPrescaler>
34008448:	4603      	mov	r3, r0
3400844a:	fa24 f303 	lsr.w	r3, r4, r3
3400844e:	60fb      	str	r3, [r7, #12]
      break;
34008450:	e008      	b.n	34008464 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34008452:	bf00      	nop
34008454:	e006      	b.n	34008464 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34008456:	bf00      	nop
34008458:	e004      	b.n	34008464 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3400845a:	bf00      	nop
3400845c:	e002      	b.n	34008464 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
3400845e:	bf00      	nop
34008460:	e000      	b.n	34008464 <RCCEx_GetMDFCLKFreq+0x1fc>
      break;
34008462:	bf00      	nop
  }

  return adf_frequency;
34008464:	68fb      	ldr	r3, [r7, #12]
}
34008466:	4618      	mov	r0, r3
34008468:	3714      	adds	r7, #20
3400846a:	46bd      	mov	sp, r7
3400846c:	bd90      	pop	{r4, r7, pc}
3400846e:	bf00      	nop
34008470:	03d09000 	.word	0x03d09000
34008474:	003d0900 	.word	0x003d0900
34008478:	00bb8000 	.word	0x00bb8000

3400847c <RCCEx_GetPSSICLKFreq>:
  *         @arg @ref RCCEx_PSSI_Clock_Source
  * @retval PSSI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetPSSICLKFreq(uint32_t PSSIxSource)
{
3400847c:	b580      	push	{r7, lr}
3400847e:	b084      	sub	sp, #16
34008480:	af00      	add	r7, sp, #0
34008482:	6078      	str	r0, [r7, #4]
  uint32_t pssi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008484:	2300      	movs	r3, #0
34008486:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34008488:	6878      	ldr	r0, [r7, #4]
3400848a:	f7fa f937 	bl	340026fc <LL_RCC_GetPSSIClockSource>
3400848e:	4603      	mov	r3, r0
34008490:	2b30      	cmp	r3, #48	@ 0x30
34008492:	d05a      	beq.n	3400854a <RCCEx_GetPSSICLKFreq+0xce>
34008494:	2b30      	cmp	r3, #48	@ 0x30
34008496:	d866      	bhi.n	34008566 <RCCEx_GetPSSICLKFreq+0xea>
34008498:	2b20      	cmp	r3, #32
3400849a:	d013      	beq.n	340084c4 <RCCEx_GetPSSICLKFreq+0x48>
3400849c:	2b20      	cmp	r3, #32
3400849e:	d862      	bhi.n	34008566 <RCCEx_GetPSSICLKFreq+0xea>
340084a0:	2b00      	cmp	r3, #0
340084a2:	d002      	beq.n	340084aa <RCCEx_GetPSSICLKFreq+0x2e>
340084a4:	2b10      	cmp	r3, #16
340084a6:	d008      	beq.n	340084ba <RCCEx_GetPSSICLKFreq+0x3e>
      }
      break;

    default:
      /* Unexpected case */
      break;
340084a8:	e05d      	b.n	34008566 <RCCEx_GetPSSICLKFreq+0xea>
      pssi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
340084aa:	f7f9 fcc5 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
340084ae:	4603      	mov	r3, r0
340084b0:	4618      	mov	r0, r3
340084b2:	f7fe f913 	bl	340066dc <RCCEx_GetHCLKFreq>
340084b6:	60f8      	str	r0, [r7, #12]
      break;
340084b8:	e05a      	b.n	34008570 <RCCEx_GetPSSICLKFreq+0xf4>
      pssi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340084ba:	2007      	movs	r0, #7
340084bc:	f7fe fbfa 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
340084c0:	60f8      	str	r0, [r7, #12]
      break;
340084c2:	e055      	b.n	34008570 <RCCEx_GetPSSICLKFreq+0xf4>
      if (LL_RCC_IC20_IsEnabled() != 0U)
340084c4:	f7fb f81e 	bl	34003504 <LL_RCC_IC20_IsEnabled>
340084c8:	4603      	mov	r3, r0
340084ca:	2b00      	cmp	r3, #0
340084cc:	d04d      	beq.n	3400856a <RCCEx_GetPSSICLKFreq+0xee>
        ic_divider = LL_RCC_IC20_GetDivider();
340084ce:	f7fb f83b 	bl	34003548 <LL_RCC_IC20_GetDivider>
340084d2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC20_GetSource())
340084d4:	f7fb f82a 	bl	3400352c <LL_RCC_IC20_GetSource>
340084d8:	4603      	mov	r3, r0
340084da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340084de:	d029      	beq.n	34008534 <RCCEx_GetPSSICLKFreq+0xb8>
340084e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340084e4:	d82f      	bhi.n	34008546 <RCCEx_GetPSSICLKFreq+0xca>
340084e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340084ea:	d01a      	beq.n	34008522 <RCCEx_GetPSSICLKFreq+0xa6>
340084ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340084f0:	d829      	bhi.n	34008546 <RCCEx_GetPSSICLKFreq+0xca>
340084f2:	2b00      	cmp	r3, #0
340084f4:	d003      	beq.n	340084fe <RCCEx_GetPSSICLKFreq+0x82>
340084f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340084fa:	d009      	beq.n	34008510 <RCCEx_GetPSSICLKFreq+0x94>
            break;
340084fc:	e023      	b.n	34008546 <RCCEx_GetPSSICLKFreq+0xca>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340084fe:	f7fd ffd5 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34008502:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34008504:	68fa      	ldr	r2, [r7, #12]
34008506:	68bb      	ldr	r3, [r7, #8]
34008508:	fbb2 f3f3 	udiv	r3, r2, r3
3400850c:	60fb      	str	r3, [r7, #12]
            break;
3400850e:	e01b      	b.n	34008548 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008510:	f7fe f812 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34008514:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34008516:	68fa      	ldr	r2, [r7, #12]
34008518:	68bb      	ldr	r3, [r7, #8]
3400851a:	fbb2 f3f3 	udiv	r3, r2, r3
3400851e:	60fb      	str	r3, [r7, #12]
            break;
34008520:	e012      	b.n	34008548 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008522:	f7fe f84f 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34008526:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
34008528:	68fa      	ldr	r2, [r7, #12]
3400852a:	68bb      	ldr	r3, [r7, #8]
3400852c:	fbb2 f3f3 	udiv	r3, r2, r3
34008530:	60fb      	str	r3, [r7, #12]
            break;
34008532:	e009      	b.n	34008548 <RCCEx_GetPSSICLKFreq+0xcc>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008534:	f7fe f88c 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34008538:	60f8      	str	r0, [r7, #12]
            pssi_frequency = pssi_frequency / ic_divider;
3400853a:	68fa      	ldr	r2, [r7, #12]
3400853c:	68bb      	ldr	r3, [r7, #8]
3400853e:	fbb2 f3f3 	udiv	r3, r2, r3
34008542:	60fb      	str	r3, [r7, #12]
            break;
34008544:	e000      	b.n	34008548 <RCCEx_GetPSSICLKFreq+0xcc>
            break;
34008546:	bf00      	nop
      break;
34008548:	e00f      	b.n	3400856a <RCCEx_GetPSSICLKFreq+0xee>
      if (LL_RCC_HSI_IsReady() != 0U)
3400854a:	f7f9 fd37 	bl	34001fbc <LL_RCC_HSI_IsReady>
3400854e:	4603      	mov	r3, r0
34008550:	2b00      	cmp	r3, #0
34008552:	d00c      	beq.n	3400856e <RCCEx_GetPSSICLKFreq+0xf2>
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008554:	f7f9 fd44 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34008558:	4603      	mov	r3, r0
3400855a:	09db      	lsrs	r3, r3, #7
3400855c:	4a07      	ldr	r2, [pc, #28]	@ (3400857c <RCCEx_GetPSSICLKFreq+0x100>)
3400855e:	fa22 f303 	lsr.w	r3, r2, r3
34008562:	60fb      	str	r3, [r7, #12]
      break;
34008564:	e003      	b.n	3400856e <RCCEx_GetPSSICLKFreq+0xf2>
      break;
34008566:	bf00      	nop
34008568:	e002      	b.n	34008570 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3400856a:	bf00      	nop
3400856c:	e000      	b.n	34008570 <RCCEx_GetPSSICLKFreq+0xf4>
      break;
3400856e:	bf00      	nop
  }

  return pssi_frequency;
34008570:	68fb      	ldr	r3, [r7, #12]
}
34008572:	4618      	mov	r0, r3
34008574:	3710      	adds	r7, #16
34008576:	46bd      	mov	sp, r7
34008578:	bd80      	pop	{r7, pc}
3400857a:	bf00      	nop
3400857c:	03d09000 	.word	0x03d09000

34008580 <RCCEx_GetRTCCLKFreq>:
  * @brief  Return RTC clock frequency
  * @retval RTC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetRTCCLKFreq()
{
34008580:	b580      	push	{r7, lr}
34008582:	b082      	sub	sp, #8
34008584:	af00      	add	r7, sp, #0
  uint32_t rtc_frequency = RCC_PERIPH_FREQUENCY_NO;
34008586:	2300      	movs	r3, #0
34008588:	607b      	str	r3, [r7, #4]

  switch (LL_RCC_GetRTCClockSource())
3400858a:	f7fa f945 	bl	34002818 <LL_RCC_GetRTCClockSource>
3400858e:	4603      	mov	r3, r0
34008590:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34008594:	d020      	beq.n	340085d8 <RCCEx_GetRTCCLKFreq+0x58>
34008596:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400859a:	d830      	bhi.n	340085fe <RCCEx_GetRTCCLKFreq+0x7e>
3400859c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340085a0:	d011      	beq.n	340085c6 <RCCEx_GetRTCCLKFreq+0x46>
340085a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
340085a6:	d82a      	bhi.n	340085fe <RCCEx_GetRTCCLKFreq+0x7e>
340085a8:	2b00      	cmp	r3, #0
340085aa:	d02a      	beq.n	34008602 <RCCEx_GetRTCCLKFreq+0x82>
340085ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
340085b0:	d000      	beq.n	340085b4 <RCCEx_GetRTCCLKFreq+0x34>
      }
      break;

    default:
      /* Unexpected case */
      break;
340085b2:	e024      	b.n	340085fe <RCCEx_GetRTCCLKFreq+0x7e>
      if (LL_RCC_LSE_IsReady() != 0U)
340085b4:	f7f9 fd42 	bl	3400203c <LL_RCC_LSE_IsReady>
340085b8:	4603      	mov	r3, r0
340085ba:	2b00      	cmp	r3, #0
340085bc:	d023      	beq.n	34008606 <RCCEx_GetRTCCLKFreq+0x86>
        rtc_frequency = LSE_VALUE;
340085be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
340085c2:	607b      	str	r3, [r7, #4]
      break;
340085c4:	e01f      	b.n	34008606 <RCCEx_GetRTCCLKFreq+0x86>
      if (LL_RCC_LSI_IsReady() != 0U)
340085c6:	f7f9 fd4b 	bl	34002060 <LL_RCC_LSI_IsReady>
340085ca:	4603      	mov	r3, r0
340085cc:	2b00      	cmp	r3, #0
340085ce:	d01c      	beq.n	3400860a <RCCEx_GetRTCCLKFreq+0x8a>
        rtc_frequency = LSI_VALUE;
340085d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
340085d4:	607b      	str	r3, [r7, #4]
      break;
340085d6:	e018      	b.n	3400860a <RCCEx_GetRTCCLKFreq+0x8a>
      if (LL_RCC_HSE_IsReady() != 0U)
340085d8:	f7f9 fcde 	bl	34001f98 <LL_RCC_HSE_IsReady>
340085dc:	4603      	mov	r3, r0
340085de:	2b00      	cmp	r3, #0
340085e0:	d015      	beq.n	3400860e <RCCEx_GetRTCCLKFreq+0x8e>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
340085e2:	4b0e      	ldr	r3, [pc, #56]	@ (3400861c <RCCEx_GetRTCCLKFreq+0x9c>)
340085e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
340085e8:	0b1b      	lsrs	r3, r3, #12
340085ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
340085ee:	3301      	adds	r3, #1
340085f0:	603b      	str	r3, [r7, #0]
        rtc_frequency = HSE_VALUE / prescaler;
340085f2:	4a0b      	ldr	r2, [pc, #44]	@ (34008620 <RCCEx_GetRTCCLKFreq+0xa0>)
340085f4:	683b      	ldr	r3, [r7, #0]
340085f6:	fbb2 f3f3 	udiv	r3, r2, r3
340085fa:	607b      	str	r3, [r7, #4]
      break;
340085fc:	e007      	b.n	3400860e <RCCEx_GetRTCCLKFreq+0x8e>
      break;
340085fe:	bf00      	nop
34008600:	e006      	b.n	34008610 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34008602:	bf00      	nop
34008604:	e004      	b.n	34008610 <RCCEx_GetRTCCLKFreq+0x90>
      break;
34008606:	bf00      	nop
34008608:	e002      	b.n	34008610 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3400860a:	bf00      	nop
3400860c:	e000      	b.n	34008610 <RCCEx_GetRTCCLKFreq+0x90>
      break;
3400860e:	bf00      	nop
  }

  return rtc_frequency;
34008610:	687b      	ldr	r3, [r7, #4]
}
34008612:	4618      	mov	r0, r3
34008614:	3708      	adds	r7, #8
34008616:	46bd      	mov	sp, r7
34008618:	bd80      	pop	{r7, pc}
3400861a:	bf00      	nop
3400861c:	56028000 	.word	0x56028000
34008620:	02dc6c00 	.word	0x02dc6c00

34008624 <RCCEx_GetSAICLKFreq>:
  *         @arg @ref RCCEx_SAI2_Clock_Source
  * @retval SAI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSAICLKFreq(uint32_t SAIxSource)
{
34008624:	b580      	push	{r7, lr}
34008626:	b084      	sub	sp, #16
34008628:	af00      	add	r7, sp, #0
3400862a:	6078      	str	r0, [r7, #4]
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
3400862c:	2300      	movs	r3, #0
3400862e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34008630:	6878      	ldr	r0, [r7, #4]
34008632:	f7fa f875 	bl	34002720 <LL_RCC_GetSAIClockSource>
34008636:	4603      	mov	r3, r0
34008638:	4a9a      	ldr	r2, [pc, #616]	@ (340088a4 <RCCEx_GetSAICLKFreq+0x280>)
3400863a:	4293      	cmp	r3, r2
3400863c:	f000 811f 	beq.w	3400887e <RCCEx_GetSAICLKFreq+0x25a>
34008640:	4a98      	ldr	r2, [pc, #608]	@ (340088a4 <RCCEx_GetSAICLKFreq+0x280>)
34008642:	4293      	cmp	r3, r2
34008644:	f200 8120 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
34008648:	4a97      	ldr	r2, [pc, #604]	@ (340088a8 <RCCEx_GetSAICLKFreq+0x284>)
3400864a:	4293      	cmp	r3, r2
3400864c:	f000 8117 	beq.w	3400887e <RCCEx_GetSAICLKFreq+0x25a>
34008650:	4a95      	ldr	r2, [pc, #596]	@ (340088a8 <RCCEx_GetSAICLKFreq+0x284>)
34008652:	4293      	cmp	r3, r2
34008654:	f200 8118 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
34008658:	4a94      	ldr	r2, [pc, #592]	@ (340088ac <RCCEx_GetSAICLKFreq+0x288>)
3400865a:	4293      	cmp	r3, r2
3400865c:	f000 810c 	beq.w	34008878 <RCCEx_GetSAICLKFreq+0x254>
34008660:	4a92      	ldr	r2, [pc, #584]	@ (340088ac <RCCEx_GetSAICLKFreq+0x288>)
34008662:	4293      	cmp	r3, r2
34008664:	f200 8110 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
34008668:	4a91      	ldr	r2, [pc, #580]	@ (340088b0 <RCCEx_GetSAICLKFreq+0x28c>)
3400866a:	4293      	cmp	r3, r2
3400866c:	f000 8104 	beq.w	34008878 <RCCEx_GetSAICLKFreq+0x254>
34008670:	4a8f      	ldr	r2, [pc, #572]	@ (340088b0 <RCCEx_GetSAICLKFreq+0x28c>)
34008672:	4293      	cmp	r3, r2
34008674:	f200 8108 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
34008678:	4a8e      	ldr	r2, [pc, #568]	@ (340088b4 <RCCEx_GetSAICLKFreq+0x290>)
3400867a:	4293      	cmp	r3, r2
3400867c:	f000 80e6 	beq.w	3400884c <RCCEx_GetSAICLKFreq+0x228>
34008680:	4a8c      	ldr	r2, [pc, #560]	@ (340088b4 <RCCEx_GetSAICLKFreq+0x290>)
34008682:	4293      	cmp	r3, r2
34008684:	f200 8100 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
34008688:	4a8b      	ldr	r2, [pc, #556]	@ (340088b8 <RCCEx_GetSAICLKFreq+0x294>)
3400868a:	4293      	cmp	r3, r2
3400868c:	f000 80de 	beq.w	3400884c <RCCEx_GetSAICLKFreq+0x228>
34008690:	4a89      	ldr	r2, [pc, #548]	@ (340088b8 <RCCEx_GetSAICLKFreq+0x294>)
34008692:	4293      	cmp	r3, r2
34008694:	f200 80f8 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
34008698:	4a88      	ldr	r2, [pc, #544]	@ (340088bc <RCCEx_GetSAICLKFreq+0x298>)
3400869a:	4293      	cmp	r3, r2
3400869c:	f000 80e4 	beq.w	34008868 <RCCEx_GetSAICLKFreq+0x244>
340086a0:	4a86      	ldr	r2, [pc, #536]	@ (340088bc <RCCEx_GetSAICLKFreq+0x298>)
340086a2:	4293      	cmp	r3, r2
340086a4:	f200 80f0 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
340086a8:	4a85      	ldr	r2, [pc, #532]	@ (340088c0 <RCCEx_GetSAICLKFreq+0x29c>)
340086aa:	4293      	cmp	r3, r2
340086ac:	f000 80dc 	beq.w	34008868 <RCCEx_GetSAICLKFreq+0x244>
340086b0:	4a83      	ldr	r2, [pc, #524]	@ (340088c0 <RCCEx_GetSAICLKFreq+0x29c>)
340086b2:	4293      	cmp	r3, r2
340086b4:	f200 80e8 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
340086b8:	4a82      	ldr	r2, [pc, #520]	@ (340088c4 <RCCEx_GetSAICLKFreq+0x2a0>)
340086ba:	4293      	cmp	r3, r2
340086bc:	f000 8083 	beq.w	340087c6 <RCCEx_GetSAICLKFreq+0x1a2>
340086c0:	4a80      	ldr	r2, [pc, #512]	@ (340088c4 <RCCEx_GetSAICLKFreq+0x2a0>)
340086c2:	4293      	cmp	r3, r2
340086c4:	f200 80e0 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
340086c8:	4a7f      	ldr	r2, [pc, #508]	@ (340088c8 <RCCEx_GetSAICLKFreq+0x2a4>)
340086ca:	4293      	cmp	r3, r2
340086cc:	d07b      	beq.n	340087c6 <RCCEx_GetSAICLKFreq+0x1a2>
340086ce:	4a7e      	ldr	r2, [pc, #504]	@ (340088c8 <RCCEx_GetSAICLKFreq+0x2a4>)
340086d0:	4293      	cmp	r3, r2
340086d2:	f200 80d9 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
340086d6:	4a7d      	ldr	r2, [pc, #500]	@ (340088cc <RCCEx_GetSAICLKFreq+0x2a8>)
340086d8:	4293      	cmp	r3, r2
340086da:	d030      	beq.n	3400873e <RCCEx_GetSAICLKFreq+0x11a>
340086dc:	4a7b      	ldr	r2, [pc, #492]	@ (340088cc <RCCEx_GetSAICLKFreq+0x2a8>)
340086de:	4293      	cmp	r3, r2
340086e0:	f200 80d2 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
340086e4:	4a7a      	ldr	r2, [pc, #488]	@ (340088d0 <RCCEx_GetSAICLKFreq+0x2ac>)
340086e6:	4293      	cmp	r3, r2
340086e8:	d029      	beq.n	3400873e <RCCEx_GetSAICLKFreq+0x11a>
340086ea:	4a79      	ldr	r2, [pc, #484]	@ (340088d0 <RCCEx_GetSAICLKFreq+0x2ac>)
340086ec:	4293      	cmp	r3, r2
340086ee:	f200 80cb 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
340086f2:	4a78      	ldr	r2, [pc, #480]	@ (340088d4 <RCCEx_GetSAICLKFreq+0x2b0>)
340086f4:	4293      	cmp	r3, r2
340086f6:	d01d      	beq.n	34008734 <RCCEx_GetSAICLKFreq+0x110>
340086f8:	4a76      	ldr	r2, [pc, #472]	@ (340088d4 <RCCEx_GetSAICLKFreq+0x2b0>)
340086fa:	4293      	cmp	r3, r2
340086fc:	f200 80c4 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
34008700:	4a75      	ldr	r2, [pc, #468]	@ (340088d8 <RCCEx_GetSAICLKFreq+0x2b4>)
34008702:	4293      	cmp	r3, r2
34008704:	d016      	beq.n	34008734 <RCCEx_GetSAICLKFreq+0x110>
34008706:	4a74      	ldr	r2, [pc, #464]	@ (340088d8 <RCCEx_GetSAICLKFreq+0x2b4>)
34008708:	4293      	cmp	r3, r2
3400870a:	f200 80bd 	bhi.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
3400870e:	4a73      	ldr	r2, [pc, #460]	@ (340088dc <RCCEx_GetSAICLKFreq+0x2b8>)
34008710:	4293      	cmp	r3, r2
34008712:	d003      	beq.n	3400871c <RCCEx_GetSAICLKFreq+0xf8>
34008714:	4a72      	ldr	r2, [pc, #456]	@ (340088e0 <RCCEx_GetSAICLKFreq+0x2bc>)
34008716:	4293      	cmp	r3, r2
34008718:	f040 80b6 	bne.w	34008888 <RCCEx_GetSAICLKFreq+0x264>
  {
    case LL_RCC_SAI1_CLKSOURCE_PCLK2:
    case LL_RCC_SAI2_CLKSOURCE_PCLK2:
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400871c:	f7f9 fb8c 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34008720:	4603      	mov	r3, r0
34008722:	4618      	mov	r0, r3
34008724:	f7fd ffda 	bl	340066dc <RCCEx_GetHCLKFreq>
34008728:	4603      	mov	r3, r0
3400872a:	4618      	mov	r0, r3
3400872c:	f7fd fff7 	bl	3400671e <RCCEx_GetPCLK2Freq>
34008730:	60f8      	str	r0, [r7, #12]
      break;
34008732:	e0b2      	b.n	3400889a <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_CLKP:
    case LL_RCC_SAI2_CLKSOURCE_CLKP:
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008734:	2007      	movs	r0, #7
34008736:	f7fe fabd 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
3400873a:	60f8      	str	r0, [r7, #12]
      break;
3400873c:	e0ad      	b.n	3400889a <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_IC7:
    case LL_RCC_SAI2_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
3400873e:	f7fa fbe1 	bl	34002f04 <LL_RCC_IC7_IsEnabled>
34008742:	4603      	mov	r3, r0
34008744:	2b00      	cmp	r3, #0
34008746:	f000 80a1 	beq.w	3400888c <RCCEx_GetSAICLKFreq+0x268>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
3400874a:	f7fa fbfd 	bl	34002f48 <LL_RCC_IC7_GetDivider>
3400874e:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34008750:	f7fa fbec 	bl	34002f2c <LL_RCC_IC7_GetSource>
34008754:	4603      	mov	r3, r0
34008756:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400875a:	d029      	beq.n	340087b0 <RCCEx_GetSAICLKFreq+0x18c>
3400875c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008760:	d82f      	bhi.n	340087c2 <RCCEx_GetSAICLKFreq+0x19e>
34008762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008766:	d01a      	beq.n	3400879e <RCCEx_GetSAICLKFreq+0x17a>
34008768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400876c:	d829      	bhi.n	340087c2 <RCCEx_GetSAICLKFreq+0x19e>
3400876e:	2b00      	cmp	r3, #0
34008770:	d003      	beq.n	3400877a <RCCEx_GetSAICLKFreq+0x156>
34008772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008776:	d009      	beq.n	3400878c <RCCEx_GetSAICLKFreq+0x168>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34008778:	e023      	b.n	340087c2 <RCCEx_GetSAICLKFreq+0x19e>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400877a:	f7fd fe97 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
3400877e:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34008780:	68fa      	ldr	r2, [r7, #12]
34008782:	68bb      	ldr	r3, [r7, #8]
34008784:	fbb2 f3f3 	udiv	r3, r2, r3
34008788:	60fb      	str	r3, [r7, #12]
            break;
3400878a:	e01b      	b.n	340087c4 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400878c:	f7fd fed4 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34008790:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34008792:	68fa      	ldr	r2, [r7, #12]
34008794:	68bb      	ldr	r3, [r7, #8]
34008796:	fbb2 f3f3 	udiv	r3, r2, r3
3400879a:	60fb      	str	r3, [r7, #12]
            break;
3400879c:	e012      	b.n	340087c4 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400879e:	f7fd ff11 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
340087a2:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
340087a4:	68fa      	ldr	r2, [r7, #12]
340087a6:	68bb      	ldr	r3, [r7, #8]
340087a8:	fbb2 f3f3 	udiv	r3, r2, r3
340087ac:	60fb      	str	r3, [r7, #12]
            break;
340087ae:	e009      	b.n	340087c4 <RCCEx_GetSAICLKFreq+0x1a0>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340087b0:	f7fd ff4e 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
340087b4:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
340087b6:	68fa      	ldr	r2, [r7, #12]
340087b8:	68bb      	ldr	r3, [r7, #8]
340087ba:	fbb2 f3f3 	udiv	r3, r2, r3
340087be:	60fb      	str	r3, [r7, #12]
            break;
340087c0:	e000      	b.n	340087c4 <RCCEx_GetSAICLKFreq+0x1a0>
            break;
340087c2:	bf00      	nop
        }
      }
      break;
340087c4:	e062      	b.n	3400888c <RCCEx_GetSAICLKFreq+0x268>

    case LL_RCC_SAI1_CLKSOURCE_IC8:
    case LL_RCC_SAI2_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
340087c6:	f7fa fbdd 	bl	34002f84 <LL_RCC_IC8_IsEnabled>
340087ca:	4603      	mov	r3, r0
340087cc:	2b00      	cmp	r3, #0
340087ce:	d05f      	beq.n	34008890 <RCCEx_GetSAICLKFreq+0x26c>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
340087d0:	f7fa fbfa 	bl	34002fc8 <LL_RCC_IC8_GetDivider>
340087d4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
340087d6:	f7fa fbe9 	bl	34002fac <LL_RCC_IC8_GetSource>
340087da:	4603      	mov	r3, r0
340087dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340087e0:	d029      	beq.n	34008836 <RCCEx_GetSAICLKFreq+0x212>
340087e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340087e6:	d82f      	bhi.n	34008848 <RCCEx_GetSAICLKFreq+0x224>
340087e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340087ec:	d01a      	beq.n	34008824 <RCCEx_GetSAICLKFreq+0x200>
340087ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340087f2:	d829      	bhi.n	34008848 <RCCEx_GetSAICLKFreq+0x224>
340087f4:	2b00      	cmp	r3, #0
340087f6:	d003      	beq.n	34008800 <RCCEx_GetSAICLKFreq+0x1dc>
340087f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340087fc:	d009      	beq.n	34008812 <RCCEx_GetSAICLKFreq+0x1ee>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sai_frequency = sai_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340087fe:	e023      	b.n	34008848 <RCCEx_GetSAICLKFreq+0x224>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008800:	f7fd fe54 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34008804:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34008806:	68fa      	ldr	r2, [r7, #12]
34008808:	68bb      	ldr	r3, [r7, #8]
3400880a:	fbb2 f3f3 	udiv	r3, r2, r3
3400880e:	60fb      	str	r3, [r7, #12]
            break;
34008810:	e01b      	b.n	3400884a <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008812:	f7fd fe91 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34008816:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
34008818:	68fa      	ldr	r2, [r7, #12]
3400881a:	68bb      	ldr	r3, [r7, #8]
3400881c:	fbb2 f3f3 	udiv	r3, r2, r3
34008820:	60fb      	str	r3, [r7, #12]
            break;
34008822:	e012      	b.n	3400884a <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008824:	f7fd fece 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34008828:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3400882a:	68fa      	ldr	r2, [r7, #12]
3400882c:	68bb      	ldr	r3, [r7, #8]
3400882e:	fbb2 f3f3 	udiv	r3, r2, r3
34008832:	60fb      	str	r3, [r7, #12]
            break;
34008834:	e009      	b.n	3400884a <RCCEx_GetSAICLKFreq+0x226>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008836:	f7fd ff0b 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
3400883a:	60f8      	str	r0, [r7, #12]
            sai_frequency = sai_frequency / ic_divider;
3400883c:	68fa      	ldr	r2, [r7, #12]
3400883e:	68bb      	ldr	r3, [r7, #8]
34008840:	fbb2 f3f3 	udiv	r3, r2, r3
34008844:	60fb      	str	r3, [r7, #12]
            break;
34008846:	e000      	b.n	3400884a <RCCEx_GetSAICLKFreq+0x226>
            break;
34008848:	bf00      	nop
        }
      }
      break;
3400884a:	e021      	b.n	34008890 <RCCEx_GetSAICLKFreq+0x26c>

    case LL_RCC_SAI1_CLKSOURCE_HSI:
    case LL_RCC_SAI2_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3400884c:	f7f9 fbb6 	bl	34001fbc <LL_RCC_HSI_IsReady>
34008850:	4603      	mov	r3, r0
34008852:	2b00      	cmp	r3, #0
34008854:	d01e      	beq.n	34008894 <RCCEx_GetSAICLKFreq+0x270>
      {
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008856:	f7f9 fbc3 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
3400885a:	4603      	mov	r3, r0
3400885c:	09db      	lsrs	r3, r3, #7
3400885e:	4a21      	ldr	r2, [pc, #132]	@ (340088e4 <RCCEx_GetSAICLKFreq+0x2c0>)
34008860:	fa22 f303 	lsr.w	r3, r2, r3
34008864:	60fb      	str	r3, [r7, #12]
      }
      break;
34008866:	e015      	b.n	34008894 <RCCEx_GetSAICLKFreq+0x270>

    case LL_RCC_SAI1_CLKSOURCE_MSI:
    case LL_RCC_SAI2_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34008868:	f7f9 fbc8 	bl	34001ffc <LL_RCC_MSI_IsReady>
3400886c:	4603      	mov	r3, r0
3400886e:	2b00      	cmp	r3, #0
34008870:	d012      	beq.n	34008898 <RCCEx_GetSAICLKFreq+0x274>
      {
        sai_frequency = MSI_VALUE;
34008872:	4b1d      	ldr	r3, [pc, #116]	@ (340088e8 <RCCEx_GetSAICLKFreq+0x2c4>)
34008874:	60fb      	str	r3, [r7, #12]
      }
      break;
34008876:	e00f      	b.n	34008898 <RCCEx_GetSAICLKFreq+0x274>

    case LL_RCC_SAI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SAI2_CLKSOURCE_I2S_CKIN:
      sai_frequency = EXTERNAL_CLOCK_VALUE;
34008878:	4b1c      	ldr	r3, [pc, #112]	@ (340088ec <RCCEx_GetSAICLKFreq+0x2c8>)
3400887a:	60fb      	str	r3, [r7, #12]
      break;
3400887c:	e00d      	b.n	3400889a <RCCEx_GetSAICLKFreq+0x276>

    case LL_RCC_SAI1_CLKSOURCE_SPDIFRX1:
    case LL_RCC_SAI2_CLKSOURCE_SPDIFRX1:
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
3400887e:	2007      	movs	r0, #7
34008880:	f000 f920 	bl	34008ac4 <RCCEx_GetSPDIFRXCLKFreq>
34008884:	60f8      	str	r0, [r7, #12]
      break;
34008886:	e008      	b.n	3400889a <RCCEx_GetSAICLKFreq+0x276>

    default:
      /* Unexpected case */
      break;
34008888:	bf00      	nop
3400888a:	e006      	b.n	3400889a <RCCEx_GetSAICLKFreq+0x276>
      break;
3400888c:	bf00      	nop
3400888e:	e004      	b.n	3400889a <RCCEx_GetSAICLKFreq+0x276>
      break;
34008890:	bf00      	nop
34008892:	e002      	b.n	3400889a <RCCEx_GetSAICLKFreq+0x276>
      break;
34008894:	bf00      	nop
34008896:	e000      	b.n	3400889a <RCCEx_GetSAICLKFreq+0x276>
      break;
34008898:	bf00      	nop
  }

  return sai_frequency;
3400889a:	68fb      	ldr	r3, [r7, #12]
}
3400889c:	4618      	mov	r0, r3
3400889e:	3710      	adds	r7, #16
340088a0:	46bd      	mov	sp, r7
340088a2:	bd80      	pop	{r7, pc}
340088a4:	07071818 	.word	0x07071818
340088a8:	07071418 	.word	0x07071418
340088ac:	07061818 	.word	0x07061818
340088b0:	07061418 	.word	0x07061418
340088b4:	07051818 	.word	0x07051818
340088b8:	07051418 	.word	0x07051418
340088bc:	07041818 	.word	0x07041818
340088c0:	07041418 	.word	0x07041418
340088c4:	07031818 	.word	0x07031818
340088c8:	07031418 	.word	0x07031418
340088cc:	07021818 	.word	0x07021818
340088d0:	07021418 	.word	0x07021418
340088d4:	07011818 	.word	0x07011818
340088d8:	07011418 	.word	0x07011418
340088dc:	07001418 	.word	0x07001418
340088e0:	07001818 	.word	0x07001818
340088e4:	03d09000 	.word	0x03d09000
340088e8:	003d0900 	.word	0x003d0900
340088ec:	00bb8000 	.word	0x00bb8000

340088f0 <RCCEx_GetSDMMCCLKFreq>:
  *         @arg @ref RCCEx_SDMMC2_Clock_Source
  * @retval SDMMC clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSDMMCCLKFreq(uint32_t SDMMCxSource)
{
340088f0:	b580      	push	{r7, lr}
340088f2:	b084      	sub	sp, #16
340088f4:	af00      	add	r7, sp, #0
340088f6:	6078      	str	r0, [r7, #4]
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
340088f8:	2300      	movs	r3, #0
340088fa:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
340088fc:	6878      	ldr	r0, [r7, #4]
340088fe:	f7f9 ff1b 	bl	34002738 <LL_RCC_GetSDMMCClockSource>
34008902:	4603      	mov	r3, r0
34008904:	4a67      	ldr	r2, [pc, #412]	@ (34008aa4 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
34008906:	4293      	cmp	r3, r2
34008908:	d07e      	beq.n	34008a08 <RCCEx_GetSDMMCCLKFreq+0x118>
3400890a:	4a66      	ldr	r2, [pc, #408]	@ (34008aa4 <RCCEx_GetSDMMCCLKFreq+0x1b4>)
3400890c:	4293      	cmp	r3, r2
3400890e:	f200 80be 	bhi.w	34008a8e <RCCEx_GetSDMMCCLKFreq+0x19e>
34008912:	4a65      	ldr	r2, [pc, #404]	@ (34008aa8 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
34008914:	4293      	cmp	r3, r2
34008916:	d077      	beq.n	34008a08 <RCCEx_GetSDMMCCLKFreq+0x118>
34008918:	4a63      	ldr	r2, [pc, #396]	@ (34008aa8 <RCCEx_GetSDMMCCLKFreq+0x1b8>)
3400891a:	4293      	cmp	r3, r2
3400891c:	f200 80b7 	bhi.w	34008a8e <RCCEx_GetSDMMCCLKFreq+0x19e>
34008920:	4a62      	ldr	r2, [pc, #392]	@ (34008aac <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34008922:	4293      	cmp	r3, r2
34008924:	d02c      	beq.n	34008980 <RCCEx_GetSDMMCCLKFreq+0x90>
34008926:	4a61      	ldr	r2, [pc, #388]	@ (34008aac <RCCEx_GetSDMMCCLKFreq+0x1bc>)
34008928:	4293      	cmp	r3, r2
3400892a:	f200 80b0 	bhi.w	34008a8e <RCCEx_GetSDMMCCLKFreq+0x19e>
3400892e:	4a60      	ldr	r2, [pc, #384]	@ (34008ab0 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34008930:	4293      	cmp	r3, r2
34008932:	d025      	beq.n	34008980 <RCCEx_GetSDMMCCLKFreq+0x90>
34008934:	4a5e      	ldr	r2, [pc, #376]	@ (34008ab0 <RCCEx_GetSDMMCCLKFreq+0x1c0>)
34008936:	4293      	cmp	r3, r2
34008938:	f200 80a9 	bhi.w	34008a8e <RCCEx_GetSDMMCCLKFreq+0x19e>
3400893c:	4a5d      	ldr	r2, [pc, #372]	@ (34008ab4 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
3400893e:	4293      	cmp	r3, r2
34008940:	d019      	beq.n	34008976 <RCCEx_GetSDMMCCLKFreq+0x86>
34008942:	4a5c      	ldr	r2, [pc, #368]	@ (34008ab4 <RCCEx_GetSDMMCCLKFreq+0x1c4>)
34008944:	4293      	cmp	r3, r2
34008946:	f200 80a2 	bhi.w	34008a8e <RCCEx_GetSDMMCCLKFreq+0x19e>
3400894a:	4a5b      	ldr	r2, [pc, #364]	@ (34008ab8 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
3400894c:	4293      	cmp	r3, r2
3400894e:	d012      	beq.n	34008976 <RCCEx_GetSDMMCCLKFreq+0x86>
34008950:	4a59      	ldr	r2, [pc, #356]	@ (34008ab8 <RCCEx_GetSDMMCCLKFreq+0x1c8>)
34008952:	4293      	cmp	r3, r2
34008954:	f200 809b 	bhi.w	34008a8e <RCCEx_GetSDMMCCLKFreq+0x19e>
34008958:	4a58      	ldr	r2, [pc, #352]	@ (34008abc <RCCEx_GetSDMMCCLKFreq+0x1cc>)
3400895a:	4293      	cmp	r3, r2
3400895c:	d003      	beq.n	34008966 <RCCEx_GetSDMMCCLKFreq+0x76>
3400895e:	4a58      	ldr	r2, [pc, #352]	@ (34008ac0 <RCCEx_GetSDMMCCLKFreq+0x1d0>)
34008960:	4293      	cmp	r3, r2
34008962:	f040 8094 	bne.w	34008a8e <RCCEx_GetSDMMCCLKFreq+0x19e>
  {
    case LL_RCC_SDMMC1_CLKSOURCE_HCLK:
    case LL_RCC_SDMMC2_CLKSOURCE_HCLK:
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34008966:	f7f9 fa67 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
3400896a:	4603      	mov	r3, r0
3400896c:	4618      	mov	r0, r3
3400896e:	f7fd feb5 	bl	340066dc <RCCEx_GetHCLKFreq>
34008972:	60f8      	str	r0, [r7, #12]
      break;
34008974:	e090      	b.n	34008a98 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_CLKP:
    case LL_RCC_SDMMC2_CLKSOURCE_CLKP:
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008976:	2007      	movs	r0, #7
34008978:	f7fe f99c 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
3400897c:	60f8      	str	r0, [r7, #12]
      break;
3400897e:	e08b      	b.n	34008a98 <RCCEx_GetSDMMCCLKFreq+0x1a8>

    case LL_RCC_SDMMC1_CLKSOURCE_IC4:
    case LL_RCC_SDMMC2_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34008980:	f7fa fa40 	bl	34002e04 <LL_RCC_IC4_IsEnabled>
34008984:	4603      	mov	r3, r0
34008986:	2b00      	cmp	r3, #0
34008988:	f000 8083 	beq.w	34008a92 <RCCEx_GetSDMMCCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
3400898c:	f7fa fa5c 	bl	34002e48 <LL_RCC_IC4_GetDivider>
34008990:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34008992:	f7fa fa4b 	bl	34002e2c <LL_RCC_IC4_GetSource>
34008996:	4603      	mov	r3, r0
34008998:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400899c:	d029      	beq.n	340089f2 <RCCEx_GetSDMMCCLKFreq+0x102>
3400899e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340089a2:	d82f      	bhi.n	34008a04 <RCCEx_GetSDMMCCLKFreq+0x114>
340089a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340089a8:	d01a      	beq.n	340089e0 <RCCEx_GetSDMMCCLKFreq+0xf0>
340089aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340089ae:	d829      	bhi.n	34008a04 <RCCEx_GetSDMMCCLKFreq+0x114>
340089b0:	2b00      	cmp	r3, #0
340089b2:	d003      	beq.n	340089bc <RCCEx_GetSDMMCCLKFreq+0xcc>
340089b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340089b8:	d009      	beq.n	340089ce <RCCEx_GetSDMMCCLKFreq+0xde>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340089ba:	e023      	b.n	34008a04 <RCCEx_GetSDMMCCLKFreq+0x114>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340089bc:	f7fd fd76 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
340089c0:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340089c2:	68fa      	ldr	r2, [r7, #12]
340089c4:	68bb      	ldr	r3, [r7, #8]
340089c6:	fbb2 f3f3 	udiv	r3, r2, r3
340089ca:	60fb      	str	r3, [r7, #12]
            break;
340089cc:	e01b      	b.n	34008a06 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340089ce:	f7fd fdb3 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340089d2:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340089d4:	68fa      	ldr	r2, [r7, #12]
340089d6:	68bb      	ldr	r3, [r7, #8]
340089d8:	fbb2 f3f3 	udiv	r3, r2, r3
340089dc:	60fb      	str	r3, [r7, #12]
            break;
340089de:	e012      	b.n	34008a06 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340089e0:	f7fd fdf0 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
340089e4:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340089e6:	68fa      	ldr	r2, [r7, #12]
340089e8:	68bb      	ldr	r3, [r7, #8]
340089ea:	fbb2 f3f3 	udiv	r3, r2, r3
340089ee:	60fb      	str	r3, [r7, #12]
            break;
340089f0:	e009      	b.n	34008a06 <RCCEx_GetSDMMCCLKFreq+0x116>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340089f2:	f7fd fe2d 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
340089f6:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
340089f8:	68fa      	ldr	r2, [r7, #12]
340089fa:	68bb      	ldr	r3, [r7, #8]
340089fc:	fbb2 f3f3 	udiv	r3, r2, r3
34008a00:	60fb      	str	r3, [r7, #12]
            break;
34008a02:	e000      	b.n	34008a06 <RCCEx_GetSDMMCCLKFreq+0x116>
            break;
34008a04:	bf00      	nop
        }
      }
      break;
34008a06:	e044      	b.n	34008a92 <RCCEx_GetSDMMCCLKFreq+0x1a2>

    case LL_RCC_SDMMC1_CLKSOURCE_IC5:
    case LL_RCC_SDMMC2_CLKSOURCE_IC5:
      if (LL_RCC_IC5_IsEnabled() != 0U)
34008a08:	f7fa fa3c 	bl	34002e84 <LL_RCC_IC5_IsEnabled>
34008a0c:	4603      	mov	r3, r0
34008a0e:	2b00      	cmp	r3, #0
34008a10:	d041      	beq.n	34008a96 <RCCEx_GetSDMMCCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC5_GetDivider();
34008a12:	f7fa fa59 	bl	34002ec8 <LL_RCC_IC5_GetDivider>
34008a16:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC5_GetSource())
34008a18:	f7fa fa48 	bl	34002eac <LL_RCC_IC5_GetSource>
34008a1c:	4603      	mov	r3, r0
34008a1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008a22:	d029      	beq.n	34008a78 <RCCEx_GetSDMMCCLKFreq+0x188>
34008a24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008a28:	d82f      	bhi.n	34008a8a <RCCEx_GetSDMMCCLKFreq+0x19a>
34008a2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008a2e:	d01a      	beq.n	34008a66 <RCCEx_GetSDMMCCLKFreq+0x176>
34008a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008a34:	d829      	bhi.n	34008a8a <RCCEx_GetSDMMCCLKFreq+0x19a>
34008a36:	2b00      	cmp	r3, #0
34008a38:	d003      	beq.n	34008a42 <RCCEx_GetSDMMCCLKFreq+0x152>
34008a3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008a3e:	d009      	beq.n	34008a54 <RCCEx_GetSDMMCCLKFreq+0x164>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            sdmmc_frequency = sdmmc_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34008a40:	e023      	b.n	34008a8a <RCCEx_GetSDMMCCLKFreq+0x19a>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008a42:	f7fd fd33 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34008a46:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34008a48:	68fa      	ldr	r2, [r7, #12]
34008a4a:	68bb      	ldr	r3, [r7, #8]
34008a4c:	fbb2 f3f3 	udiv	r3, r2, r3
34008a50:	60fb      	str	r3, [r7, #12]
            break;
34008a52:	e01b      	b.n	34008a8c <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008a54:	f7fd fd70 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34008a58:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34008a5a:	68fa      	ldr	r2, [r7, #12]
34008a5c:	68bb      	ldr	r3, [r7, #8]
34008a5e:	fbb2 f3f3 	udiv	r3, r2, r3
34008a62:	60fb      	str	r3, [r7, #12]
            break;
34008a64:	e012      	b.n	34008a8c <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008a66:	f7fd fdad 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34008a6a:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34008a6c:	68fa      	ldr	r2, [r7, #12]
34008a6e:	68bb      	ldr	r3, [r7, #8]
34008a70:	fbb2 f3f3 	udiv	r3, r2, r3
34008a74:	60fb      	str	r3, [r7, #12]
            break;
34008a76:	e009      	b.n	34008a8c <RCCEx_GetSDMMCCLKFreq+0x19c>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008a78:	f7fd fdea 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34008a7c:	60f8      	str	r0, [r7, #12]
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34008a7e:	68fa      	ldr	r2, [r7, #12]
34008a80:	68bb      	ldr	r3, [r7, #8]
34008a82:	fbb2 f3f3 	udiv	r3, r2, r3
34008a86:	60fb      	str	r3, [r7, #12]
            break;
34008a88:	e000      	b.n	34008a8c <RCCEx_GetSDMMCCLKFreq+0x19c>
            break;
34008a8a:	bf00      	nop
        }
      }
      break;
34008a8c:	e003      	b.n	34008a96 <RCCEx_GetSDMMCCLKFreq+0x1a6>

    default:
      /* Unexpected case */
      break;
34008a8e:	bf00      	nop
34008a90:	e002      	b.n	34008a98 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34008a92:	bf00      	nop
34008a94:	e000      	b.n	34008a98 <RCCEx_GetSDMMCCLKFreq+0x1a8>
      break;
34008a96:	bf00      	nop
  }

  return sdmmc_frequency;
34008a98:	68fb      	ldr	r3, [r7, #12]
}
34008a9a:	4618      	mov	r0, r3
34008a9c:	3710      	adds	r7, #16
34008a9e:	46bd      	mov	sp, r7
34008aa0:	bd80      	pop	{r7, pc}
34008aa2:	bf00      	nop
34008aa4:	0303041c 	.word	0x0303041c
34008aa8:	0303001c 	.word	0x0303001c
34008aac:	0302041c 	.word	0x0302041c
34008ab0:	0302001c 	.word	0x0302001c
34008ab4:	0301041c 	.word	0x0301041c
34008ab8:	0301001c 	.word	0x0301001c
34008abc:	0300001c 	.word	0x0300001c
34008ac0:	0300041c 	.word	0x0300041c

34008ac4 <RCCEx_GetSPDIFRXCLKFreq>:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
{
34008ac4:	b580      	push	{r7, lr}
34008ac6:	b084      	sub	sp, #16
34008ac8:	af00      	add	r7, sp, #0
34008aca:	6078      	str	r0, [r7, #4]
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
34008acc:	2300      	movs	r3, #0
34008ace:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34008ad0:	6878      	ldr	r0, [r7, #4]
34008ad2:	f7f9 fe3d 	bl	34002750 <LL_RCC_GetSPDIFRXClockSource>
34008ad6:	4603      	mov	r3, r0
34008ad8:	2b06      	cmp	r3, #6
34008ada:	f200 80c2 	bhi.w	34008c62 <RCCEx_GetSPDIFRXCLKFreq+0x19e>
34008ade:	a201      	add	r2, pc, #4	@ (adr r2, 34008ae4 <RCCEx_GetSPDIFRXCLKFreq+0x20>)
34008ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
34008ae4:	34008b01 	.word	0x34008b01
34008ae8:	34008b19 	.word	0x34008b19
34008aec:	34008b23 	.word	0x34008b23
34008af0:	34008bab 	.word	0x34008bab
34008af4:	34008c4d 	.word	0x34008c4d
34008af8:	34008c31 	.word	0x34008c31
34008afc:	34008c5d 	.word	0x34008c5d
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008b00:	f7f9 f99a 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34008b04:	4603      	mov	r3, r0
34008b06:	4618      	mov	r0, r3
34008b08:	f7fd fde8 	bl	340066dc <RCCEx_GetHCLKFreq>
34008b0c:	4603      	mov	r3, r0
34008b0e:	4618      	mov	r0, r3
34008b10:	f7fd fdf5 	bl	340066fe <RCCEx_GetPCLK1Freq>
34008b14:	60f8      	str	r0, [r7, #12]
      break;
34008b16:	e0ad      	b.n	34008c74 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_CLKP:
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34008b18:	2007      	movs	r0, #7
34008b1a:	f7fe f8cb 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34008b1e:	60f8      	str	r0, [r7, #12]
      break;
34008b20:	e0a8      	b.n	34008c74 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC7:
      if (LL_RCC_IC7_IsEnabled() != 0U)
34008b22:	f7fa f9ef 	bl	34002f04 <LL_RCC_IC7_IsEnabled>
34008b26:	4603      	mov	r3, r0
34008b28:	2b00      	cmp	r3, #0
34008b2a:	f000 809c 	beq.w	34008c66 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>
      {
        ic_divider = LL_RCC_IC7_GetDivider();
34008b2e:	f7fa fa0b 	bl	34002f48 <LL_RCC_IC7_GetDivider>
34008b32:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC7_GetSource())
34008b34:	f7fa f9fa 	bl	34002f2c <LL_RCC_IC7_GetSource>
34008b38:	4603      	mov	r3, r0
34008b3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008b3e:	d029      	beq.n	34008b94 <RCCEx_GetSPDIFRXCLKFreq+0xd0>
34008b40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008b44:	d82f      	bhi.n	34008ba6 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34008b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008b4a:	d01a      	beq.n	34008b82 <RCCEx_GetSPDIFRXCLKFreq+0xbe>
34008b4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008b50:	d829      	bhi.n	34008ba6 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
34008b52:	2b00      	cmp	r3, #0
34008b54:	d003      	beq.n	34008b5e <RCCEx_GetSPDIFRXCLKFreq+0x9a>
34008b56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008b5a:	d009      	beq.n	34008b70 <RCCEx_GetSPDIFRXCLKFreq+0xac>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34008b5c:	e023      	b.n	34008ba6 <RCCEx_GetSPDIFRXCLKFreq+0xe2>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008b5e:	f7fd fca5 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34008b62:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008b64:	68fa      	ldr	r2, [r7, #12]
34008b66:	68bb      	ldr	r3, [r7, #8]
34008b68:	fbb2 f3f3 	udiv	r3, r2, r3
34008b6c:	60fb      	str	r3, [r7, #12]
            break;
34008b6e:	e01b      	b.n	34008ba8 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008b70:	f7fd fce2 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34008b74:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008b76:	68fa      	ldr	r2, [r7, #12]
34008b78:	68bb      	ldr	r3, [r7, #8]
34008b7a:	fbb2 f3f3 	udiv	r3, r2, r3
34008b7e:	60fb      	str	r3, [r7, #12]
            break;
34008b80:	e012      	b.n	34008ba8 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008b82:	f7fd fd1f 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34008b86:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008b88:	68fa      	ldr	r2, [r7, #12]
34008b8a:	68bb      	ldr	r3, [r7, #8]
34008b8c:	fbb2 f3f3 	udiv	r3, r2, r3
34008b90:	60fb      	str	r3, [r7, #12]
            break;
34008b92:	e009      	b.n	34008ba8 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008b94:	f7fd fd5c 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34008b98:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008b9a:	68fa      	ldr	r2, [r7, #12]
34008b9c:	68bb      	ldr	r3, [r7, #8]
34008b9e:	fbb2 f3f3 	udiv	r3, r2, r3
34008ba2:	60fb      	str	r3, [r7, #12]
            break;
34008ba4:	e000      	b.n	34008ba8 <RCCEx_GetSPDIFRXCLKFreq+0xe4>
            break;
34008ba6:	bf00      	nop
        }
      }
      break;
34008ba8:	e05d      	b.n	34008c66 <RCCEx_GetSPDIFRXCLKFreq+0x1a2>

    case LL_RCC_SPDIFRX1_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34008baa:	f7fa f9eb 	bl	34002f84 <LL_RCC_IC8_IsEnabled>
34008bae:	4603      	mov	r3, r0
34008bb0:	2b00      	cmp	r3, #0
34008bb2:	d05a      	beq.n	34008c6a <RCCEx_GetSPDIFRXCLKFreq+0x1a6>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
34008bb4:	f7fa fa08 	bl	34002fc8 <LL_RCC_IC8_GetDivider>
34008bb8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34008bba:	f7fa f9f7 	bl	34002fac <LL_RCC_IC8_GetSource>
34008bbe:	4603      	mov	r3, r0
34008bc0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008bc4:	d029      	beq.n	34008c1a <RCCEx_GetSPDIFRXCLKFreq+0x156>
34008bc6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34008bca:	d82f      	bhi.n	34008c2c <RCCEx_GetSPDIFRXCLKFreq+0x168>
34008bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008bd0:	d01a      	beq.n	34008c08 <RCCEx_GetSPDIFRXCLKFreq+0x144>
34008bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34008bd6:	d829      	bhi.n	34008c2c <RCCEx_GetSPDIFRXCLKFreq+0x168>
34008bd8:	2b00      	cmp	r3, #0
34008bda:	d003      	beq.n	34008be4 <RCCEx_GetSPDIFRXCLKFreq+0x120>
34008bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34008be0:	d009      	beq.n	34008bf6 <RCCEx_GetSPDIFRXCLKFreq+0x132>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spdifrx_frequency = spdifrx_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34008be2:	e023      	b.n	34008c2c <RCCEx_GetSPDIFRXCLKFreq+0x168>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34008be4:	f7fd fc62 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34008be8:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008bea:	68fa      	ldr	r2, [r7, #12]
34008bec:	68bb      	ldr	r3, [r7, #8]
34008bee:	fbb2 f3f3 	udiv	r3, r2, r3
34008bf2:	60fb      	str	r3, [r7, #12]
            break;
34008bf4:	e01b      	b.n	34008c2e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34008bf6:	f7fd fc9f 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34008bfa:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008bfc:	68fa      	ldr	r2, [r7, #12]
34008bfe:	68bb      	ldr	r3, [r7, #8]
34008c00:	fbb2 f3f3 	udiv	r3, r2, r3
34008c04:	60fb      	str	r3, [r7, #12]
            break;
34008c06:	e012      	b.n	34008c2e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34008c08:	f7fd fcdc 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34008c0c:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008c0e:	68fa      	ldr	r2, [r7, #12]
34008c10:	68bb      	ldr	r3, [r7, #8]
34008c12:	fbb2 f3f3 	udiv	r3, r2, r3
34008c16:	60fb      	str	r3, [r7, #12]
            break;
34008c18:	e009      	b.n	34008c2e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34008c1a:	f7fd fd19 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34008c1e:	60f8      	str	r0, [r7, #12]
            spdifrx_frequency = spdifrx_frequency / ic_divider;
34008c20:	68fa      	ldr	r2, [r7, #12]
34008c22:	68bb      	ldr	r3, [r7, #8]
34008c24:	fbb2 f3f3 	udiv	r3, r2, r3
34008c28:	60fb      	str	r3, [r7, #12]
            break;
34008c2a:	e000      	b.n	34008c2e <RCCEx_GetSPDIFRXCLKFreq+0x16a>
            break;
34008c2c:	bf00      	nop
        }
      }
      break;
34008c2e:	e01c      	b.n	34008c6a <RCCEx_GetSPDIFRXCLKFreq+0x1a6>

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34008c30:	f7f9 f9c4 	bl	34001fbc <LL_RCC_HSI_IsReady>
34008c34:	4603      	mov	r3, r0
34008c36:	2b00      	cmp	r3, #0
34008c38:	d019      	beq.n	34008c6e <RCCEx_GetSPDIFRXCLKFreq+0x1aa>
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34008c3a:	f7f9 f9d1 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34008c3e:	4603      	mov	r3, r0
34008c40:	09db      	lsrs	r3, r3, #7
34008c42:	4a0f      	ldr	r2, [pc, #60]	@ (34008c80 <RCCEx_GetSPDIFRXCLKFreq+0x1bc>)
34008c44:	fa22 f303 	lsr.w	r3, r2, r3
34008c48:	60fb      	str	r3, [r7, #12]
      }
      break;
34008c4a:	e010      	b.n	34008c6e <RCCEx_GetSPDIFRXCLKFreq+0x1aa>

    case LL_RCC_SPDIFRX1_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34008c4c:	f7f9 f9d6 	bl	34001ffc <LL_RCC_MSI_IsReady>
34008c50:	4603      	mov	r3, r0
34008c52:	2b00      	cmp	r3, #0
34008c54:	d00d      	beq.n	34008c72 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>
      {
        spdifrx_frequency = MSI_VALUE;
34008c56:	4b0b      	ldr	r3, [pc, #44]	@ (34008c84 <RCCEx_GetSPDIFRXCLKFreq+0x1c0>)
34008c58:	60fb      	str	r3, [r7, #12]
      }
      break;
34008c5a:	e00a      	b.n	34008c72 <RCCEx_GetSPDIFRXCLKFreq+0x1ae>

    case LL_RCC_SPDIFRX1_CLKSOURCE_I2S_CKIN:
      spdifrx_frequency = EXTERNAL_CLOCK_VALUE;
34008c5c:	4b0a      	ldr	r3, [pc, #40]	@ (34008c88 <RCCEx_GetSPDIFRXCLKFreq+0x1c4>)
34008c5e:	60fb      	str	r3, [r7, #12]
      break;
34008c60:	e008      	b.n	34008c74 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>

    default:
      /* Unexpected case */
      break;
34008c62:	bf00      	nop
34008c64:	e006      	b.n	34008c74 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34008c66:	bf00      	nop
34008c68:	e004      	b.n	34008c74 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34008c6a:	bf00      	nop
34008c6c:	e002      	b.n	34008c74 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34008c6e:	bf00      	nop
34008c70:	e000      	b.n	34008c74 <RCCEx_GetSPDIFRXCLKFreq+0x1b0>
      break;
34008c72:	bf00      	nop
  }

  return spdifrx_frequency;
34008c74:	68fb      	ldr	r3, [r7, #12]
}
34008c76:	4618      	mov	r0, r3
34008c78:	3710      	adds	r7, #16
34008c7a:	46bd      	mov	sp, r7
34008c7c:	bd80      	pop	{r7, pc}
34008c7e:	bf00      	nop
34008c80:	03d09000 	.word	0x03d09000
34008c84:	003d0900 	.word	0x003d0900
34008c88:	00bb8000 	.word	0x00bb8000

34008c8c <RCCEx_GetSPICLKFreq>:
  *         @arg @ref RCCEx_SPI6_Clock_Source
  * @retval SPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPICLKFreq(uint32_t SPIxSource)
{
34008c8c:	b580      	push	{r7, lr}
34008c8e:	b084      	sub	sp, #16
34008c90:	af00      	add	r7, sp, #0
34008c92:	6078      	str	r0, [r7, #4]
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34008c94:	2300      	movs	r3, #0
34008c96:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34008c98:	6878      	ldr	r0, [r7, #4]
34008c9a:	f7f9 fd6b 	bl	34002774 <LL_RCC_GetSPIClockSource>
34008c9e:	4603      	mov	r3, r0
34008ca0:	4aa7      	ldr	r2, [pc, #668]	@ (34008f40 <RCCEx_GetSPICLKFreq+0x2b4>)
34008ca2:	4293      	cmp	r3, r2
34008ca4:	f000 829e 	beq.w	340091e4 <RCCEx_GetSPICLKFreq+0x558>
34008ca8:	4aa5      	ldr	r2, [pc, #660]	@ (34008f40 <RCCEx_GetSPICLKFreq+0x2b4>)
34008caa:	4293      	cmp	r3, r2
34008cac:	f200 82a5 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008cb0:	4aa4      	ldr	r2, [pc, #656]	@ (34008f44 <RCCEx_GetSPICLKFreq+0x2b8>)
34008cb2:	4293      	cmp	r3, r2
34008cb4:	f000 8299 	beq.w	340091ea <RCCEx_GetSPICLKFreq+0x55e>
34008cb8:	4aa2      	ldr	r2, [pc, #648]	@ (34008f44 <RCCEx_GetSPICLKFreq+0x2b8>)
34008cba:	4293      	cmp	r3, r2
34008cbc:	f200 829d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008cc0:	4aa1      	ldr	r2, [pc, #644]	@ (34008f48 <RCCEx_GetSPICLKFreq+0x2bc>)
34008cc2:	4293      	cmp	r3, r2
34008cc4:	f000 8291 	beq.w	340091ea <RCCEx_GetSPICLKFreq+0x55e>
34008cc8:	4a9f      	ldr	r2, [pc, #636]	@ (34008f48 <RCCEx_GetSPICLKFreq+0x2bc>)
34008cca:	4293      	cmp	r3, r2
34008ccc:	f200 8295 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008cd0:	4a9e      	ldr	r2, [pc, #632]	@ (34008f4c <RCCEx_GetSPICLKFreq+0x2c0>)
34008cd2:	4293      	cmp	r3, r2
34008cd4:	f000 8286 	beq.w	340091e4 <RCCEx_GetSPICLKFreq+0x558>
34008cd8:	4a9c      	ldr	r2, [pc, #624]	@ (34008f4c <RCCEx_GetSPICLKFreq+0x2c0>)
34008cda:	4293      	cmp	r3, r2
34008cdc:	f200 828d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008ce0:	4a9b      	ldr	r2, [pc, #620]	@ (34008f50 <RCCEx_GetSPICLKFreq+0x2c4>)
34008ce2:	4293      	cmp	r3, r2
34008ce4:	f000 827e 	beq.w	340091e4 <RCCEx_GetSPICLKFreq+0x558>
34008ce8:	4a99      	ldr	r2, [pc, #612]	@ (34008f50 <RCCEx_GetSPICLKFreq+0x2c4>)
34008cea:	4293      	cmp	r3, r2
34008cec:	f200 8285 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008cf0:	4a98      	ldr	r2, [pc, #608]	@ (34008f54 <RCCEx_GetSPICLKFreq+0x2c8>)
34008cf2:	4293      	cmp	r3, r2
34008cf4:	f000 8276 	beq.w	340091e4 <RCCEx_GetSPICLKFreq+0x558>
34008cf8:	4a96      	ldr	r2, [pc, #600]	@ (34008f54 <RCCEx_GetSPICLKFreq+0x2c8>)
34008cfa:	4293      	cmp	r3, r2
34008cfc:	f200 827d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d00:	4a95      	ldr	r2, [pc, #596]	@ (34008f58 <RCCEx_GetSPICLKFreq+0x2cc>)
34008d02:	4293      	cmp	r3, r2
34008d04:	f000 8258 	beq.w	340091b8 <RCCEx_GetSPICLKFreq+0x52c>
34008d08:	4a93      	ldr	r2, [pc, #588]	@ (34008f58 <RCCEx_GetSPICLKFreq+0x2cc>)
34008d0a:	4293      	cmp	r3, r2
34008d0c:	f200 8275 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d10:	4a92      	ldr	r2, [pc, #584]	@ (34008f5c <RCCEx_GetSPICLKFreq+0x2d0>)
34008d12:	4293      	cmp	r3, r2
34008d14:	f000 8250 	beq.w	340091b8 <RCCEx_GetSPICLKFreq+0x52c>
34008d18:	4a90      	ldr	r2, [pc, #576]	@ (34008f5c <RCCEx_GetSPICLKFreq+0x2d0>)
34008d1a:	4293      	cmp	r3, r2
34008d1c:	f200 826d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d20:	4a8f      	ldr	r2, [pc, #572]	@ (34008f60 <RCCEx_GetSPICLKFreq+0x2d4>)
34008d22:	4293      	cmp	r3, r2
34008d24:	f000 8248 	beq.w	340091b8 <RCCEx_GetSPICLKFreq+0x52c>
34008d28:	4a8d      	ldr	r2, [pc, #564]	@ (34008f60 <RCCEx_GetSPICLKFreq+0x2d4>)
34008d2a:	4293      	cmp	r3, r2
34008d2c:	f200 8265 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d30:	4a8c      	ldr	r2, [pc, #560]	@ (34008f64 <RCCEx_GetSPICLKFreq+0x2d8>)
34008d32:	4293      	cmp	r3, r2
34008d34:	f000 8240 	beq.w	340091b8 <RCCEx_GetSPICLKFreq+0x52c>
34008d38:	4a8a      	ldr	r2, [pc, #552]	@ (34008f64 <RCCEx_GetSPICLKFreq+0x2d8>)
34008d3a:	4293      	cmp	r3, r2
34008d3c:	f200 825d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d40:	4a89      	ldr	r2, [pc, #548]	@ (34008f68 <RCCEx_GetSPICLKFreq+0x2dc>)
34008d42:	4293      	cmp	r3, r2
34008d44:	f000 8238 	beq.w	340091b8 <RCCEx_GetSPICLKFreq+0x52c>
34008d48:	4a87      	ldr	r2, [pc, #540]	@ (34008f68 <RCCEx_GetSPICLKFreq+0x2dc>)
34008d4a:	4293      	cmp	r3, r2
34008d4c:	f200 8255 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d50:	4a86      	ldr	r2, [pc, #536]	@ (34008f6c <RCCEx_GetSPICLKFreq+0x2e0>)
34008d52:	4293      	cmp	r3, r2
34008d54:	f000 8230 	beq.w	340091b8 <RCCEx_GetSPICLKFreq+0x52c>
34008d58:	4a84      	ldr	r2, [pc, #528]	@ (34008f6c <RCCEx_GetSPICLKFreq+0x2e0>)
34008d5a:	4293      	cmp	r3, r2
34008d5c:	f200 824d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d60:	4a83      	ldr	r2, [pc, #524]	@ (34008f70 <RCCEx_GetSPICLKFreq+0x2e4>)
34008d62:	4293      	cmp	r3, r2
34008d64:	f000 8236 	beq.w	340091d4 <RCCEx_GetSPICLKFreq+0x548>
34008d68:	4a81      	ldr	r2, [pc, #516]	@ (34008f70 <RCCEx_GetSPICLKFreq+0x2e4>)
34008d6a:	4293      	cmp	r3, r2
34008d6c:	f200 8245 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d70:	4a80      	ldr	r2, [pc, #512]	@ (34008f74 <RCCEx_GetSPICLKFreq+0x2e8>)
34008d72:	4293      	cmp	r3, r2
34008d74:	f000 822e 	beq.w	340091d4 <RCCEx_GetSPICLKFreq+0x548>
34008d78:	4a7e      	ldr	r2, [pc, #504]	@ (34008f74 <RCCEx_GetSPICLKFreq+0x2e8>)
34008d7a:	4293      	cmp	r3, r2
34008d7c:	f200 823d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d80:	4a7d      	ldr	r2, [pc, #500]	@ (34008f78 <RCCEx_GetSPICLKFreq+0x2ec>)
34008d82:	4293      	cmp	r3, r2
34008d84:	f000 8226 	beq.w	340091d4 <RCCEx_GetSPICLKFreq+0x548>
34008d88:	4a7b      	ldr	r2, [pc, #492]	@ (34008f78 <RCCEx_GetSPICLKFreq+0x2ec>)
34008d8a:	4293      	cmp	r3, r2
34008d8c:	f200 8235 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008d90:	4a7a      	ldr	r2, [pc, #488]	@ (34008f7c <RCCEx_GetSPICLKFreq+0x2f0>)
34008d92:	4293      	cmp	r3, r2
34008d94:	f000 821e 	beq.w	340091d4 <RCCEx_GetSPICLKFreq+0x548>
34008d98:	4a78      	ldr	r2, [pc, #480]	@ (34008f7c <RCCEx_GetSPICLKFreq+0x2f0>)
34008d9a:	4293      	cmp	r3, r2
34008d9c:	f200 822d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008da0:	4a77      	ldr	r2, [pc, #476]	@ (34008f80 <RCCEx_GetSPICLKFreq+0x2f4>)
34008da2:	4293      	cmp	r3, r2
34008da4:	f000 8216 	beq.w	340091d4 <RCCEx_GetSPICLKFreq+0x548>
34008da8:	4a75      	ldr	r2, [pc, #468]	@ (34008f80 <RCCEx_GetSPICLKFreq+0x2f4>)
34008daa:	4293      	cmp	r3, r2
34008dac:	f200 8225 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008db0:	4a74      	ldr	r2, [pc, #464]	@ (34008f84 <RCCEx_GetSPICLKFreq+0x2f8>)
34008db2:	4293      	cmp	r3, r2
34008db4:	f000 820e 	beq.w	340091d4 <RCCEx_GetSPICLKFreq+0x548>
34008db8:	4a72      	ldr	r2, [pc, #456]	@ (34008f84 <RCCEx_GetSPICLKFreq+0x2f8>)
34008dba:	4293      	cmp	r3, r2
34008dbc:	f200 821d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008dc0:	4a71      	ldr	r2, [pc, #452]	@ (34008f88 <RCCEx_GetSPICLKFreq+0x2fc>)
34008dc2:	4293      	cmp	r3, r2
34008dc4:	f000 8171 	beq.w	340090aa <RCCEx_GetSPICLKFreq+0x41e>
34008dc8:	4a6f      	ldr	r2, [pc, #444]	@ (34008f88 <RCCEx_GetSPICLKFreq+0x2fc>)
34008dca:	4293      	cmp	r3, r2
34008dcc:	f200 8215 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008dd0:	4a6e      	ldr	r2, [pc, #440]	@ (34008f8c <RCCEx_GetSPICLKFreq+0x300>)
34008dd2:	4293      	cmp	r3, r2
34008dd4:	f000 81ad 	beq.w	34009132 <RCCEx_GetSPICLKFreq+0x4a6>
34008dd8:	4a6c      	ldr	r2, [pc, #432]	@ (34008f8c <RCCEx_GetSPICLKFreq+0x300>)
34008dda:	4293      	cmp	r3, r2
34008ddc:	f200 820d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008de0:	4a6b      	ldr	r2, [pc, #428]	@ (34008f90 <RCCEx_GetSPICLKFreq+0x304>)
34008de2:	4293      	cmp	r3, r2
34008de4:	f000 81a5 	beq.w	34009132 <RCCEx_GetSPICLKFreq+0x4a6>
34008de8:	4a69      	ldr	r2, [pc, #420]	@ (34008f90 <RCCEx_GetSPICLKFreq+0x304>)
34008dea:	4293      	cmp	r3, r2
34008dec:	f200 8205 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008df0:	4a68      	ldr	r2, [pc, #416]	@ (34008f94 <RCCEx_GetSPICLKFreq+0x308>)
34008df2:	4293      	cmp	r3, r2
34008df4:	f000 8159 	beq.w	340090aa <RCCEx_GetSPICLKFreq+0x41e>
34008df8:	4a66      	ldr	r2, [pc, #408]	@ (34008f94 <RCCEx_GetSPICLKFreq+0x308>)
34008dfa:	4293      	cmp	r3, r2
34008dfc:	f200 81fd 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e00:	4a65      	ldr	r2, [pc, #404]	@ (34008f98 <RCCEx_GetSPICLKFreq+0x30c>)
34008e02:	4293      	cmp	r3, r2
34008e04:	f000 8151 	beq.w	340090aa <RCCEx_GetSPICLKFreq+0x41e>
34008e08:	4a63      	ldr	r2, [pc, #396]	@ (34008f98 <RCCEx_GetSPICLKFreq+0x30c>)
34008e0a:	4293      	cmp	r3, r2
34008e0c:	f200 81f5 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e10:	4a62      	ldr	r2, [pc, #392]	@ (34008f9c <RCCEx_GetSPICLKFreq+0x310>)
34008e12:	4293      	cmp	r3, r2
34008e14:	f000 8149 	beq.w	340090aa <RCCEx_GetSPICLKFreq+0x41e>
34008e18:	4a60      	ldr	r2, [pc, #384]	@ (34008f9c <RCCEx_GetSPICLKFreq+0x310>)
34008e1a:	4293      	cmp	r3, r2
34008e1c:	f200 81ed 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e20:	4a5f      	ldr	r2, [pc, #380]	@ (34008fa0 <RCCEx_GetSPICLKFreq+0x314>)
34008e22:	4293      	cmp	r3, r2
34008e24:	f000 80fd 	beq.w	34009022 <RCCEx_GetSPICLKFreq+0x396>
34008e28:	4a5d      	ldr	r2, [pc, #372]	@ (34008fa0 <RCCEx_GetSPICLKFreq+0x314>)
34008e2a:	4293      	cmp	r3, r2
34008e2c:	f200 81e5 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e30:	4a5c      	ldr	r2, [pc, #368]	@ (34008fa4 <RCCEx_GetSPICLKFreq+0x318>)
34008e32:	4293      	cmp	r3, r2
34008e34:	f000 8139 	beq.w	340090aa <RCCEx_GetSPICLKFreq+0x41e>
34008e38:	4a5a      	ldr	r2, [pc, #360]	@ (34008fa4 <RCCEx_GetSPICLKFreq+0x318>)
34008e3a:	4293      	cmp	r3, r2
34008e3c:	f200 81dd 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e40:	4a59      	ldr	r2, [pc, #356]	@ (34008fa8 <RCCEx_GetSPICLKFreq+0x31c>)
34008e42:	4293      	cmp	r3, r2
34008e44:	f000 8131 	beq.w	340090aa <RCCEx_GetSPICLKFreq+0x41e>
34008e48:	4a57      	ldr	r2, [pc, #348]	@ (34008fa8 <RCCEx_GetSPICLKFreq+0x31c>)
34008e4a:	4293      	cmp	r3, r2
34008e4c:	f200 81d5 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e50:	4a56      	ldr	r2, [pc, #344]	@ (34008fac <RCCEx_GetSPICLKFreq+0x320>)
34008e52:	4293      	cmp	r3, r2
34008e54:	f000 80e5 	beq.w	34009022 <RCCEx_GetSPICLKFreq+0x396>
34008e58:	4a54      	ldr	r2, [pc, #336]	@ (34008fac <RCCEx_GetSPICLKFreq+0x320>)
34008e5a:	4293      	cmp	r3, r2
34008e5c:	f200 81cd 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e60:	4a53      	ldr	r2, [pc, #332]	@ (34008fb0 <RCCEx_GetSPICLKFreq+0x324>)
34008e62:	4293      	cmp	r3, r2
34008e64:	f000 80dd 	beq.w	34009022 <RCCEx_GetSPICLKFreq+0x396>
34008e68:	4a51      	ldr	r2, [pc, #324]	@ (34008fb0 <RCCEx_GetSPICLKFreq+0x324>)
34008e6a:	4293      	cmp	r3, r2
34008e6c:	f200 81c5 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e70:	4a50      	ldr	r2, [pc, #320]	@ (34008fb4 <RCCEx_GetSPICLKFreq+0x328>)
34008e72:	4293      	cmp	r3, r2
34008e74:	f000 80d5 	beq.w	34009022 <RCCEx_GetSPICLKFreq+0x396>
34008e78:	4a4e      	ldr	r2, [pc, #312]	@ (34008fb4 <RCCEx_GetSPICLKFreq+0x328>)
34008e7a:	4293      	cmp	r3, r2
34008e7c:	f200 81bd 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e80:	4a4d      	ldr	r2, [pc, #308]	@ (34008fb8 <RCCEx_GetSPICLKFreq+0x32c>)
34008e82:	4293      	cmp	r3, r2
34008e84:	f000 80c8 	beq.w	34009018 <RCCEx_GetSPICLKFreq+0x38c>
34008e88:	4a4b      	ldr	r2, [pc, #300]	@ (34008fb8 <RCCEx_GetSPICLKFreq+0x32c>)
34008e8a:	4293      	cmp	r3, r2
34008e8c:	f200 81b5 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008e90:	4a4a      	ldr	r2, [pc, #296]	@ (34008fbc <RCCEx_GetSPICLKFreq+0x330>)
34008e92:	4293      	cmp	r3, r2
34008e94:	f000 80c0 	beq.w	34009018 <RCCEx_GetSPICLKFreq+0x38c>
34008e98:	4a48      	ldr	r2, [pc, #288]	@ (34008fbc <RCCEx_GetSPICLKFreq+0x330>)
34008e9a:	4293      	cmp	r3, r2
34008e9c:	f200 81ad 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008ea0:	4a47      	ldr	r2, [pc, #284]	@ (34008fc0 <RCCEx_GetSPICLKFreq+0x334>)
34008ea2:	4293      	cmp	r3, r2
34008ea4:	f000 80b8 	beq.w	34009018 <RCCEx_GetSPICLKFreq+0x38c>
34008ea8:	4a45      	ldr	r2, [pc, #276]	@ (34008fc0 <RCCEx_GetSPICLKFreq+0x334>)
34008eaa:	4293      	cmp	r3, r2
34008eac:	f200 81a5 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008eb0:	4a44      	ldr	r2, [pc, #272]	@ (34008fc4 <RCCEx_GetSPICLKFreq+0x338>)
34008eb2:	4293      	cmp	r3, r2
34008eb4:	f000 80b0 	beq.w	34009018 <RCCEx_GetSPICLKFreq+0x38c>
34008eb8:	4a42      	ldr	r2, [pc, #264]	@ (34008fc4 <RCCEx_GetSPICLKFreq+0x338>)
34008eba:	4293      	cmp	r3, r2
34008ebc:	f200 819d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008ec0:	4a41      	ldr	r2, [pc, #260]	@ (34008fc8 <RCCEx_GetSPICLKFreq+0x33c>)
34008ec2:	4293      	cmp	r3, r2
34008ec4:	f000 80a8 	beq.w	34009018 <RCCEx_GetSPICLKFreq+0x38c>
34008ec8:	4a3f      	ldr	r2, [pc, #252]	@ (34008fc8 <RCCEx_GetSPICLKFreq+0x33c>)
34008eca:	4293      	cmp	r3, r2
34008ecc:	f200 8195 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008ed0:	4a3e      	ldr	r2, [pc, #248]	@ (34008fcc <RCCEx_GetSPICLKFreq+0x340>)
34008ed2:	4293      	cmp	r3, r2
34008ed4:	f000 80a0 	beq.w	34009018 <RCCEx_GetSPICLKFreq+0x38c>
34008ed8:	4a3c      	ldr	r2, [pc, #240]	@ (34008fcc <RCCEx_GetSPICLKFreq+0x340>)
34008eda:	4293      	cmp	r3, r2
34008edc:	f200 818d 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008ee0:	4a3b      	ldr	r2, [pc, #236]	@ (34008fd0 <RCCEx_GetSPICLKFreq+0x344>)
34008ee2:	4293      	cmp	r3, r2
34008ee4:	f000 808c 	beq.w	34009000 <RCCEx_GetSPICLKFreq+0x374>
34008ee8:	4a39      	ldr	r2, [pc, #228]	@ (34008fd0 <RCCEx_GetSPICLKFreq+0x344>)
34008eea:	4293      	cmp	r3, r2
34008eec:	f200 8185 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008ef0:	4a38      	ldr	r2, [pc, #224]	@ (34008fd4 <RCCEx_GetSPICLKFreq+0x348>)
34008ef2:	4293      	cmp	r3, r2
34008ef4:	d078      	beq.n	34008fe8 <RCCEx_GetSPICLKFreq+0x35c>
34008ef6:	4a37      	ldr	r2, [pc, #220]	@ (34008fd4 <RCCEx_GetSPICLKFreq+0x348>)
34008ef8:	4293      	cmp	r3, r2
34008efa:	f200 817e 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008efe:	4a36      	ldr	r2, [pc, #216]	@ (34008fd8 <RCCEx_GetSPICLKFreq+0x34c>)
34008f00:	4293      	cmp	r3, r2
34008f02:	d071      	beq.n	34008fe8 <RCCEx_GetSPICLKFreq+0x35c>
34008f04:	4a34      	ldr	r2, [pc, #208]	@ (34008fd8 <RCCEx_GetSPICLKFreq+0x34c>)
34008f06:	4293      	cmp	r3, r2
34008f08:	f200 8177 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008f0c:	4a33      	ldr	r2, [pc, #204]	@ (34008fdc <RCCEx_GetSPICLKFreq+0x350>)
34008f0e:	4293      	cmp	r3, r2
34008f10:	d00a      	beq.n	34008f28 <RCCEx_GetSPICLKFreq+0x29c>
34008f12:	4a32      	ldr	r2, [pc, #200]	@ (34008fdc <RCCEx_GetSPICLKFreq+0x350>)
34008f14:	4293      	cmp	r3, r2
34008f16:	f200 8170 	bhi.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
34008f1a:	4a31      	ldr	r2, [pc, #196]	@ (34008fe0 <RCCEx_GetSPICLKFreq+0x354>)
34008f1c:	4293      	cmp	r3, r2
34008f1e:	d063      	beq.n	34008fe8 <RCCEx_GetSPICLKFreq+0x35c>
34008f20:	4a30      	ldr	r2, [pc, #192]	@ (34008fe4 <RCCEx_GetSPICLKFreq+0x358>)
34008f22:	4293      	cmp	r3, r2
34008f24:	f040 8169 	bne.w	340091fa <RCCEx_GetSPICLKFreq+0x56e>
  {
    case LL_RCC_SPI2_CLKSOURCE_PCLK1:
    case LL_RCC_SPI3_CLKSOURCE_PCLK1:
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008f28:	f7f8 ff86 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34008f2c:	4603      	mov	r3, r0
34008f2e:	4618      	mov	r0, r3
34008f30:	f7fd fbd4 	bl	340066dc <RCCEx_GetHCLKFreq>
34008f34:	4603      	mov	r3, r0
34008f36:	4618      	mov	r0, r3
34008f38:	f7fd fbe1 	bl	340066fe <RCCEx_GetPCLK1Freq>
34008f3c:	60f8      	str	r0, [r7, #12]
      break;
34008f3e:	e169      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>
34008f40:	07061820 	.word	0x07061820
34008f44:	07061420 	.word	0x07061420
34008f48:	07061020 	.word	0x07061020
34008f4c:	07060c20 	.word	0x07060c20
34008f50:	07060820 	.word	0x07060820
34008f54:	07060420 	.word	0x07060420
34008f58:	07051820 	.word	0x07051820
34008f5c:	07051420 	.word	0x07051420
34008f60:	07051020 	.word	0x07051020
34008f64:	07050c20 	.word	0x07050c20
34008f68:	07050820 	.word	0x07050820
34008f6c:	07050420 	.word	0x07050420
34008f70:	07041820 	.word	0x07041820
34008f74:	07041420 	.word	0x07041420
34008f78:	07041020 	.word	0x07041020
34008f7c:	07040c20 	.word	0x07040c20
34008f80:	07040820 	.word	0x07040820
34008f84:	07040420 	.word	0x07040420
34008f88:	07031820 	.word	0x07031820
34008f8c:	07031420 	.word	0x07031420
34008f90:	07031020 	.word	0x07031020
34008f94:	07030c20 	.word	0x07030c20
34008f98:	07030820 	.word	0x07030820
34008f9c:	07030420 	.word	0x07030420
34008fa0:	07021820 	.word	0x07021820
34008fa4:	07021420 	.word	0x07021420
34008fa8:	07021020 	.word	0x07021020
34008fac:	07020c20 	.word	0x07020c20
34008fb0:	07020820 	.word	0x07020820
34008fb4:	07020420 	.word	0x07020420
34008fb8:	07011820 	.word	0x07011820
34008fbc:	07011420 	.word	0x07011420
34008fc0:	07011020 	.word	0x07011020
34008fc4:	07010c20 	.word	0x07010c20
34008fc8:	07010820 	.word	0x07010820
34008fcc:	07010420 	.word	0x07010420
34008fd0:	07001820 	.word	0x07001820
34008fd4:	07001420 	.word	0x07001420
34008fd8:	07001020 	.word	0x07001020
34008fdc:	07000c20 	.word	0x07000c20
34008fe0:	07000420 	.word	0x07000420
34008fe4:	07000820 	.word	0x07000820

    case LL_RCC_SPI1_CLKSOURCE_PCLK2:
    case LL_RCC_SPI4_CLKSOURCE_PCLK2:
    case LL_RCC_SPI5_CLKSOURCE_PCLK2:
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34008fe8:	f7f8 ff26 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34008fec:	4603      	mov	r3, r0
34008fee:	4618      	mov	r0, r3
34008ff0:	f7fd fb74 	bl	340066dc <RCCEx_GetHCLKFreq>
34008ff4:	4603      	mov	r3, r0
34008ff6:	4618      	mov	r0, r3
34008ff8:	f7fd fb91 	bl	3400671e <RCCEx_GetPCLK2Freq>
34008ffc:	60f8      	str	r0, [r7, #12]
      break;
34008ffe:	e109      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI6_CLKSOURCE_PCLK4:
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009000:	f7f8 ff1a 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34009004:	4603      	mov	r3, r0
34009006:	4618      	mov	r0, r3
34009008:	f7fd fb68 	bl	340066dc <RCCEx_GetHCLKFreq>
3400900c:	4603      	mov	r3, r0
3400900e:	4618      	mov	r0, r3
34009010:	f7fd fb96 	bl	34006740 <RCCEx_GetPCLK4Freq>
34009014:	60f8      	str	r0, [r7, #12]
      break;
34009016:	e0fd      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>
    case LL_RCC_SPI2_CLKSOURCE_CLKP:
    case LL_RCC_SPI3_CLKSOURCE_CLKP:
    case LL_RCC_SPI4_CLKSOURCE_CLKP:
    case LL_RCC_SPI5_CLKSOURCE_CLKP:
    case LL_RCC_SPI6_CLKSOURCE_CLKP:
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009018:	2007      	movs	r0, #7
3400901a:	f7fd fe4b 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
3400901e:	60f8      	str	r0, [r7, #12]
      break;
34009020:	e0f8      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI1_CLKSOURCE_IC8:
    case LL_RCC_SPI2_CLKSOURCE_IC8:
    case LL_RCC_SPI3_CLKSOURCE_IC8:
    case LL_RCC_SPI6_CLKSOURCE_IC8:
      if (LL_RCC_IC8_IsEnabled() != 0U)
34009022:	f7f9 ffaf 	bl	34002f84 <LL_RCC_IC8_IsEnabled>
34009026:	4603      	mov	r3, r0
34009028:	2b00      	cmp	r3, #0
3400902a:	f000 80e8 	beq.w	340091fe <RCCEx_GetSPICLKFreq+0x572>
      {
        ic_divider = LL_RCC_IC8_GetDivider();
3400902e:	f7f9 ffcb 	bl	34002fc8 <LL_RCC_IC8_GetDivider>
34009032:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC8_GetSource())
34009034:	f7f9 ffba 	bl	34002fac <LL_RCC_IC8_GetSource>
34009038:	4603      	mov	r3, r0
3400903a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400903e:	d029      	beq.n	34009094 <RCCEx_GetSPICLKFreq+0x408>
34009040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009044:	d82f      	bhi.n	340090a6 <RCCEx_GetSPICLKFreq+0x41a>
34009046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400904a:	d01a      	beq.n	34009082 <RCCEx_GetSPICLKFreq+0x3f6>
3400904c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009050:	d829      	bhi.n	340090a6 <RCCEx_GetSPICLKFreq+0x41a>
34009052:	2b00      	cmp	r3, #0
34009054:	d003      	beq.n	3400905e <RCCEx_GetSPICLKFreq+0x3d2>
34009056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400905a:	d009      	beq.n	34009070 <RCCEx_GetSPICLKFreq+0x3e4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3400905c:	e023      	b.n	340090a6 <RCCEx_GetSPICLKFreq+0x41a>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400905e:	f7fd fa25 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34009062:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34009064:	68fa      	ldr	r2, [r7, #12]
34009066:	68bb      	ldr	r3, [r7, #8]
34009068:	fbb2 f3f3 	udiv	r3, r2, r3
3400906c:	60fb      	str	r3, [r7, #12]
            break;
3400906e:	e01b      	b.n	340090a8 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009070:	f7fd fa62 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34009074:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34009076:	68fa      	ldr	r2, [r7, #12]
34009078:	68bb      	ldr	r3, [r7, #8]
3400907a:	fbb2 f3f3 	udiv	r3, r2, r3
3400907e:	60fb      	str	r3, [r7, #12]
            break;
34009080:	e012      	b.n	340090a8 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009082:	f7fd fa9f 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34009086:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34009088:	68fa      	ldr	r2, [r7, #12]
3400908a:	68bb      	ldr	r3, [r7, #8]
3400908c:	fbb2 f3f3 	udiv	r3, r2, r3
34009090:	60fb      	str	r3, [r7, #12]
            break;
34009092:	e009      	b.n	340090a8 <RCCEx_GetSPICLKFreq+0x41c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009094:	f7fd fadc 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34009098:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
3400909a:	68fa      	ldr	r2, [r7, #12]
3400909c:	68bb      	ldr	r3, [r7, #8]
3400909e:	fbb2 f3f3 	udiv	r3, r2, r3
340090a2:	60fb      	str	r3, [r7, #12]
            break;
340090a4:	e000      	b.n	340090a8 <RCCEx_GetSPICLKFreq+0x41c>
            break;
340090a6:	bf00      	nop
        }
      }
      break;
340090a8:	e0a9      	b.n	340091fe <RCCEx_GetSPICLKFreq+0x572>
    case LL_RCC_SPI2_CLKSOURCE_IC9:
    case LL_RCC_SPI3_CLKSOURCE_IC9:
    case LL_RCC_SPI4_CLKSOURCE_IC9:
    case LL_RCC_SPI5_CLKSOURCE_IC9:
    case LL_RCC_SPI6_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
340090aa:	f7f9 ffab 	bl	34003004 <LL_RCC_IC9_IsEnabled>
340090ae:	4603      	mov	r3, r0
340090b0:	2b00      	cmp	r3, #0
340090b2:	f000 80a6 	beq.w	34009202 <RCCEx_GetSPICLKFreq+0x576>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
340090b6:	f7f9 ffc7 	bl	34003048 <LL_RCC_IC9_GetDivider>
340090ba:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
340090bc:	f7f9 ffb6 	bl	3400302c <LL_RCC_IC9_GetSource>
340090c0:	4603      	mov	r3, r0
340090c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340090c6:	d029      	beq.n	3400911c <RCCEx_GetSPICLKFreq+0x490>
340090c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340090cc:	d82f      	bhi.n	3400912e <RCCEx_GetSPICLKFreq+0x4a2>
340090ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340090d2:	d01a      	beq.n	3400910a <RCCEx_GetSPICLKFreq+0x47e>
340090d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340090d8:	d829      	bhi.n	3400912e <RCCEx_GetSPICLKFreq+0x4a2>
340090da:	2b00      	cmp	r3, #0
340090dc:	d003      	beq.n	340090e6 <RCCEx_GetSPICLKFreq+0x45a>
340090de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340090e2:	d009      	beq.n	340090f8 <RCCEx_GetSPICLKFreq+0x46c>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340090e4:	e023      	b.n	3400912e <RCCEx_GetSPICLKFreq+0x4a2>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340090e6:	f7fd f9e1 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
340090ea:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340090ec:	68fa      	ldr	r2, [r7, #12]
340090ee:	68bb      	ldr	r3, [r7, #8]
340090f0:	fbb2 f3f3 	udiv	r3, r2, r3
340090f4:	60fb      	str	r3, [r7, #12]
            break;
340090f6:	e01b      	b.n	34009130 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340090f8:	f7fd fa1e 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340090fc:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340090fe:	68fa      	ldr	r2, [r7, #12]
34009100:	68bb      	ldr	r3, [r7, #8]
34009102:	fbb2 f3f3 	udiv	r3, r2, r3
34009106:	60fb      	str	r3, [r7, #12]
            break;
34009108:	e012      	b.n	34009130 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400910a:	f7fd fa5b 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
3400910e:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34009110:	68fa      	ldr	r2, [r7, #12]
34009112:	68bb      	ldr	r3, [r7, #8]
34009114:	fbb2 f3f3 	udiv	r3, r2, r3
34009118:	60fb      	str	r3, [r7, #12]
            break;
3400911a:	e009      	b.n	34009130 <RCCEx_GetSPICLKFreq+0x4a4>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3400911c:	f7fd fa98 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34009120:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34009122:	68fa      	ldr	r2, [r7, #12]
34009124:	68bb      	ldr	r3, [r7, #8]
34009126:	fbb2 f3f3 	udiv	r3, r2, r3
3400912a:	60fb      	str	r3, [r7, #12]
            break;
3400912c:	e000      	b.n	34009130 <RCCEx_GetSPICLKFreq+0x4a4>
            break;
3400912e:	bf00      	nop
        }
      }
      break;
34009130:	e067      	b.n	34009202 <RCCEx_GetSPICLKFreq+0x576>

    case LL_RCC_SPI4_CLKSOURCE_IC14:
    case LL_RCC_SPI5_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009132:	f7fa f867 	bl	34003204 <LL_RCC_IC14_IsEnabled>
34009136:	4603      	mov	r3, r0
34009138:	2b00      	cmp	r3, #0
3400913a:	d064      	beq.n	34009206 <RCCEx_GetSPICLKFreq+0x57a>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
3400913c:	f7fa f884 	bl	34003248 <LL_RCC_IC14_GetDivider>
34009140:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
34009142:	f7fa f873 	bl	3400322c <LL_RCC_IC14_GetSource>
34009146:	4603      	mov	r3, r0
34009148:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400914c:	d029      	beq.n	340091a2 <RCCEx_GetSPICLKFreq+0x516>
3400914e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009152:	d82f      	bhi.n	340091b4 <RCCEx_GetSPICLKFreq+0x528>
34009154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009158:	d01a      	beq.n	34009190 <RCCEx_GetSPICLKFreq+0x504>
3400915a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
3400915e:	d829      	bhi.n	340091b4 <RCCEx_GetSPICLKFreq+0x528>
34009160:	2b00      	cmp	r3, #0
34009162:	d003      	beq.n	3400916c <RCCEx_GetSPICLKFreq+0x4e0>
34009164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009168:	d009      	beq.n	3400917e <RCCEx_GetSPICLKFreq+0x4f2>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            spi_frequency = spi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
3400916a:	e023      	b.n	340091b4 <RCCEx_GetSPICLKFreq+0x528>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3400916c:	f7fd f99e 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34009170:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34009172:	68fa      	ldr	r2, [r7, #12]
34009174:	68bb      	ldr	r3, [r7, #8]
34009176:	fbb2 f3f3 	udiv	r3, r2, r3
3400917a:	60fb      	str	r3, [r7, #12]
            break;
3400917c:	e01b      	b.n	340091b6 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400917e:	f7fd f9db 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34009182:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34009184:	68fa      	ldr	r2, [r7, #12]
34009186:	68bb      	ldr	r3, [r7, #8]
34009188:	fbb2 f3f3 	udiv	r3, r2, r3
3400918c:	60fb      	str	r3, [r7, #12]
            break;
3400918e:	e012      	b.n	340091b6 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009190:	f7fd fa18 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34009194:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
34009196:	68fa      	ldr	r2, [r7, #12]
34009198:	68bb      	ldr	r3, [r7, #8]
3400919a:	fbb2 f3f3 	udiv	r3, r2, r3
3400919e:	60fb      	str	r3, [r7, #12]
            break;
340091a0:	e009      	b.n	340091b6 <RCCEx_GetSPICLKFreq+0x52a>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340091a2:	f7fd fa55 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
340091a6:	60f8      	str	r0, [r7, #12]
            spi_frequency = spi_frequency / ic_divider;
340091a8:	68fa      	ldr	r2, [r7, #12]
340091aa:	68bb      	ldr	r3, [r7, #8]
340091ac:	fbb2 f3f3 	udiv	r3, r2, r3
340091b0:	60fb      	str	r3, [r7, #12]
            break;
340091b2:	e000      	b.n	340091b6 <RCCEx_GetSPICLKFreq+0x52a>
            break;
340091b4:	bf00      	nop
        }
      }
      break;
340091b6:	e026      	b.n	34009206 <RCCEx_GetSPICLKFreq+0x57a>
    case LL_RCC_SPI2_CLKSOURCE_HSI:
    case LL_RCC_SPI3_CLKSOURCE_HSI:
    case LL_RCC_SPI4_CLKSOURCE_HSI:
    case LL_RCC_SPI5_CLKSOURCE_HSI:
    case LL_RCC_SPI6_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
340091b8:	f7f8 ff00 	bl	34001fbc <LL_RCC_HSI_IsReady>
340091bc:	4603      	mov	r3, r0
340091be:	2b00      	cmp	r3, #0
340091c0:	d023      	beq.n	3400920a <RCCEx_GetSPICLKFreq+0x57e>
      {
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
340091c2:	f7f8 ff0d 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
340091c6:	4603      	mov	r3, r0
340091c8:	09db      	lsrs	r3, r3, #7
340091ca:	4a15      	ldr	r2, [pc, #84]	@ (34009220 <RCCEx_GetSPICLKFreq+0x594>)
340091cc:	fa22 f303 	lsr.w	r3, r2, r3
340091d0:	60fb      	str	r3, [r7, #12]
      }
      break;
340091d2:	e01a      	b.n	3400920a <RCCEx_GetSPICLKFreq+0x57e>
    case LL_RCC_SPI2_CLKSOURCE_MSI:
    case LL_RCC_SPI3_CLKSOURCE_MSI:
    case LL_RCC_SPI4_CLKSOURCE_MSI:
    case LL_RCC_SPI5_CLKSOURCE_MSI:
    case LL_RCC_SPI6_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
340091d4:	f7f8 ff12 	bl	34001ffc <LL_RCC_MSI_IsReady>
340091d8:	4603      	mov	r3, r0
340091da:	2b00      	cmp	r3, #0
340091dc:	d017      	beq.n	3400920e <RCCEx_GetSPICLKFreq+0x582>
      {
        spi_frequency = MSI_VALUE;
340091de:	4b11      	ldr	r3, [pc, #68]	@ (34009224 <RCCEx_GetSPICLKFreq+0x598>)
340091e0:	60fb      	str	r3, [r7, #12]
      }
      break;
340091e2:	e014      	b.n	3400920e <RCCEx_GetSPICLKFreq+0x582>

    case LL_RCC_SPI1_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI2_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI3_CLKSOURCE_I2S_CKIN:
    case LL_RCC_SPI6_CLKSOURCE_I2S_CKIN:
      spi_frequency = EXTERNAL_CLOCK_VALUE;
340091e4:	4b10      	ldr	r3, [pc, #64]	@ (34009228 <RCCEx_GetSPICLKFreq+0x59c>)
340091e6:	60fb      	str	r3, [r7, #12]
      break;
340091e8:	e014      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>

    case LL_RCC_SPI4_CLKSOURCE_HSE:
    case LL_RCC_SPI5_CLKSOURCE_HSE:
      if (LL_RCC_HSE_IsReady() != 0U)
340091ea:	f7f8 fed5 	bl	34001f98 <LL_RCC_HSE_IsReady>
340091ee:	4603      	mov	r3, r0
340091f0:	2b00      	cmp	r3, #0
340091f2:	d00e      	beq.n	34009212 <RCCEx_GetSPICLKFreq+0x586>
      {
        spi_frequency = HSE_VALUE;
340091f4:	4b0d      	ldr	r3, [pc, #52]	@ (3400922c <RCCEx_GetSPICLKFreq+0x5a0>)
340091f6:	60fb      	str	r3, [r7, #12]
      }
      break;
340091f8:	e00b      	b.n	34009212 <RCCEx_GetSPICLKFreq+0x586>

    default:
      /* Unexpected case */
      break;
340091fa:	bf00      	nop
340091fc:	e00a      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>
      break;
340091fe:	bf00      	nop
34009200:	e008      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>
      break;
34009202:	bf00      	nop
34009204:	e006      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>
      break;
34009206:	bf00      	nop
34009208:	e004      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>
      break;
3400920a:	bf00      	nop
3400920c:	e002      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>
      break;
3400920e:	bf00      	nop
34009210:	e000      	b.n	34009214 <RCCEx_GetSPICLKFreq+0x588>
      break;
34009212:	bf00      	nop
  }

  return spi_frequency;
34009214:	68fb      	ldr	r3, [r7, #12]
}
34009216:	4618      	mov	r0, r3
34009218:	3710      	adds	r7, #16
3400921a:	46bd      	mov	sp, r7
3400921c:	bd80      	pop	{r7, pc}
3400921e:	bf00      	nop
34009220:	03d09000 	.word	0x03d09000
34009224:	003d0900 	.word	0x003d0900
34009228:	00bb8000 	.word	0x00bb8000
3400922c:	02dc6c00 	.word	0x02dc6c00

34009230 <RCCEx_GetUARTCLKFreq>:
  *         @arg @ref RCCEx_UART9_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUARTCLKFreq(uint32_t UARTxSource)
{
34009230:	b580      	push	{r7, lr}
34009232:	b084      	sub	sp, #16
34009234:	af00      	add	r7, sp, #0
34009236:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34009238:	2300      	movs	r3, #0
3400923a:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3400923c:	6878      	ldr	r0, [r7, #4]
3400923e:	f7f9 fab1 	bl	340027a4 <LL_RCC_GetUARTClockSource>
34009242:	4603      	mov	r3, r0
34009244:	4aa2      	ldr	r2, [pc, #648]	@ (340094d0 <RCCEx_GetUARTCLKFreq+0x2a0>)
34009246:	4293      	cmp	r3, r2
34009248:	f000 81e8 	beq.w	3400961c <RCCEx_GetUARTCLKFreq+0x3ec>
3400924c:	4aa0      	ldr	r2, [pc, #640]	@ (340094d0 <RCCEx_GetUARTCLKFreq+0x2a0>)
3400924e:	4293      	cmp	r3, r2
34009250:	f200 8203 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009254:	4a9f      	ldr	r2, [pc, #636]	@ (340094d4 <RCCEx_GetUARTCLKFreq+0x2a4>)
34009256:	4293      	cmp	r3, r2
34009258:	f000 81e0 	beq.w	3400961c <RCCEx_GetUARTCLKFreq+0x3ec>
3400925c:	4a9d      	ldr	r2, [pc, #628]	@ (340094d4 <RCCEx_GetUARTCLKFreq+0x2a4>)
3400925e:	4293      	cmp	r3, r2
34009260:	f200 81fb 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009264:	4a9c      	ldr	r2, [pc, #624]	@ (340094d8 <RCCEx_GetUARTCLKFreq+0x2a8>)
34009266:	4293      	cmp	r3, r2
34009268:	f000 81d8 	beq.w	3400961c <RCCEx_GetUARTCLKFreq+0x3ec>
3400926c:	4a9a      	ldr	r2, [pc, #616]	@ (340094d8 <RCCEx_GetUARTCLKFreq+0x2a8>)
3400926e:	4293      	cmp	r3, r2
34009270:	f200 81f3 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009274:	4a99      	ldr	r2, [pc, #612]	@ (340094dc <RCCEx_GetUARTCLKFreq+0x2ac>)
34009276:	4293      	cmp	r3, r2
34009278:	f000 81d0 	beq.w	3400961c <RCCEx_GetUARTCLKFreq+0x3ec>
3400927c:	4a97      	ldr	r2, [pc, #604]	@ (340094dc <RCCEx_GetUARTCLKFreq+0x2ac>)
3400927e:	4293      	cmp	r3, r2
34009280:	f200 81eb 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009284:	4a96      	ldr	r2, [pc, #600]	@ (340094e0 <RCCEx_GetUARTCLKFreq+0x2b0>)
34009286:	4293      	cmp	r3, r2
34009288:	f000 81c8 	beq.w	3400961c <RCCEx_GetUARTCLKFreq+0x3ec>
3400928c:	4a94      	ldr	r2, [pc, #592]	@ (340094e0 <RCCEx_GetUARTCLKFreq+0x2b0>)
3400928e:	4293      	cmp	r3, r2
34009290:	f200 81e3 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009294:	4a93      	ldr	r2, [pc, #588]	@ (340094e4 <RCCEx_GetUARTCLKFreq+0x2b4>)
34009296:	4293      	cmp	r3, r2
34009298:	f000 81ce 	beq.w	34009638 <RCCEx_GetUARTCLKFreq+0x408>
3400929c:	4a91      	ldr	r2, [pc, #580]	@ (340094e4 <RCCEx_GetUARTCLKFreq+0x2b4>)
3400929e:	4293      	cmp	r3, r2
340092a0:	f200 81db 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340092a4:	4a90      	ldr	r2, [pc, #576]	@ (340094e8 <RCCEx_GetUARTCLKFreq+0x2b8>)
340092a6:	4293      	cmp	r3, r2
340092a8:	f000 81c6 	beq.w	34009638 <RCCEx_GetUARTCLKFreq+0x408>
340092ac:	4a8e      	ldr	r2, [pc, #568]	@ (340094e8 <RCCEx_GetUARTCLKFreq+0x2b8>)
340092ae:	4293      	cmp	r3, r2
340092b0:	f200 81d3 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340092b4:	4a8d      	ldr	r2, [pc, #564]	@ (340094ec <RCCEx_GetUARTCLKFreq+0x2bc>)
340092b6:	4293      	cmp	r3, r2
340092b8:	f000 81be 	beq.w	34009638 <RCCEx_GetUARTCLKFreq+0x408>
340092bc:	4a8b      	ldr	r2, [pc, #556]	@ (340094ec <RCCEx_GetUARTCLKFreq+0x2bc>)
340092be:	4293      	cmp	r3, r2
340092c0:	f200 81cb 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340092c4:	4a8a      	ldr	r2, [pc, #552]	@ (340094f0 <RCCEx_GetUARTCLKFreq+0x2c0>)
340092c6:	4293      	cmp	r3, r2
340092c8:	f000 81b6 	beq.w	34009638 <RCCEx_GetUARTCLKFreq+0x408>
340092cc:	4a88      	ldr	r2, [pc, #544]	@ (340094f0 <RCCEx_GetUARTCLKFreq+0x2c0>)
340092ce:	4293      	cmp	r3, r2
340092d0:	f200 81c3 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340092d4:	4a87      	ldr	r2, [pc, #540]	@ (340094f4 <RCCEx_GetUARTCLKFreq+0x2c4>)
340092d6:	4293      	cmp	r3, r2
340092d8:	f000 81ae 	beq.w	34009638 <RCCEx_GetUARTCLKFreq+0x408>
340092dc:	4a85      	ldr	r2, [pc, #532]	@ (340094f4 <RCCEx_GetUARTCLKFreq+0x2c4>)
340092de:	4293      	cmp	r3, r2
340092e0:	f200 81bb 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340092e4:	4a84      	ldr	r2, [pc, #528]	@ (340094f8 <RCCEx_GetUARTCLKFreq+0x2c8>)
340092e6:	4293      	cmp	r3, r2
340092e8:	f000 81ae 	beq.w	34009648 <RCCEx_GetUARTCLKFreq+0x418>
340092ec:	4a82      	ldr	r2, [pc, #520]	@ (340094f8 <RCCEx_GetUARTCLKFreq+0x2c8>)
340092ee:	4293      	cmp	r3, r2
340092f0:	f200 81b3 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340092f4:	4a81      	ldr	r2, [pc, #516]	@ (340094fc <RCCEx_GetUARTCLKFreq+0x2cc>)
340092f6:	4293      	cmp	r3, r2
340092f8:	f000 81a6 	beq.w	34009648 <RCCEx_GetUARTCLKFreq+0x418>
340092fc:	4a7f      	ldr	r2, [pc, #508]	@ (340094fc <RCCEx_GetUARTCLKFreq+0x2cc>)
340092fe:	4293      	cmp	r3, r2
34009300:	f200 81ab 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009304:	4a7e      	ldr	r2, [pc, #504]	@ (34009500 <RCCEx_GetUARTCLKFreq+0x2d0>)
34009306:	4293      	cmp	r3, r2
34009308:	f000 819e 	beq.w	34009648 <RCCEx_GetUARTCLKFreq+0x418>
3400930c:	4a7c      	ldr	r2, [pc, #496]	@ (34009500 <RCCEx_GetUARTCLKFreq+0x2d0>)
3400930e:	4293      	cmp	r3, r2
34009310:	f200 81a3 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009314:	4a7b      	ldr	r2, [pc, #492]	@ (34009504 <RCCEx_GetUARTCLKFreq+0x2d4>)
34009316:	4293      	cmp	r3, r2
34009318:	f000 8196 	beq.w	34009648 <RCCEx_GetUARTCLKFreq+0x418>
3400931c:	4a79      	ldr	r2, [pc, #484]	@ (34009504 <RCCEx_GetUARTCLKFreq+0x2d4>)
3400931e:	4293      	cmp	r3, r2
34009320:	f200 819b 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009324:	4a78      	ldr	r2, [pc, #480]	@ (34009508 <RCCEx_GetUARTCLKFreq+0x2d8>)
34009326:	4293      	cmp	r3, r2
34009328:	f000 818e 	beq.w	34009648 <RCCEx_GetUARTCLKFreq+0x418>
3400932c:	4a76      	ldr	r2, [pc, #472]	@ (34009508 <RCCEx_GetUARTCLKFreq+0x2d8>)
3400932e:	4293      	cmp	r3, r2
34009330:	f200 8193 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009334:	4a75      	ldr	r2, [pc, #468]	@ (3400950c <RCCEx_GetUARTCLKFreq+0x2dc>)
34009336:	4293      	cmp	r3, r2
34009338:	f000 812d 	beq.w	34009596 <RCCEx_GetUARTCLKFreq+0x366>
3400933c:	4a73      	ldr	r2, [pc, #460]	@ (3400950c <RCCEx_GetUARTCLKFreq+0x2dc>)
3400933e:	4293      	cmp	r3, r2
34009340:	f200 818b 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009344:	4a72      	ldr	r2, [pc, #456]	@ (34009510 <RCCEx_GetUARTCLKFreq+0x2e0>)
34009346:	4293      	cmp	r3, r2
34009348:	f000 8125 	beq.w	34009596 <RCCEx_GetUARTCLKFreq+0x366>
3400934c:	4a70      	ldr	r2, [pc, #448]	@ (34009510 <RCCEx_GetUARTCLKFreq+0x2e0>)
3400934e:	4293      	cmp	r3, r2
34009350:	f200 8183 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009354:	4a6f      	ldr	r2, [pc, #444]	@ (34009514 <RCCEx_GetUARTCLKFreq+0x2e4>)
34009356:	4293      	cmp	r3, r2
34009358:	f000 811d 	beq.w	34009596 <RCCEx_GetUARTCLKFreq+0x366>
3400935c:	4a6d      	ldr	r2, [pc, #436]	@ (34009514 <RCCEx_GetUARTCLKFreq+0x2e4>)
3400935e:	4293      	cmp	r3, r2
34009360:	f200 817b 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009364:	4a6c      	ldr	r2, [pc, #432]	@ (34009518 <RCCEx_GetUARTCLKFreq+0x2e8>)
34009366:	4293      	cmp	r3, r2
34009368:	f000 8115 	beq.w	34009596 <RCCEx_GetUARTCLKFreq+0x366>
3400936c:	4a6a      	ldr	r2, [pc, #424]	@ (34009518 <RCCEx_GetUARTCLKFreq+0x2e8>)
3400936e:	4293      	cmp	r3, r2
34009370:	f200 8173 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009374:	4a69      	ldr	r2, [pc, #420]	@ (3400951c <RCCEx_GetUARTCLKFreq+0x2ec>)
34009376:	4293      	cmp	r3, r2
34009378:	f000 810d 	beq.w	34009596 <RCCEx_GetUARTCLKFreq+0x366>
3400937c:	4a67      	ldr	r2, [pc, #412]	@ (3400951c <RCCEx_GetUARTCLKFreq+0x2ec>)
3400937e:	4293      	cmp	r3, r2
34009380:	f200 816b 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009384:	4a66      	ldr	r2, [pc, #408]	@ (34009520 <RCCEx_GetUARTCLKFreq+0x2f0>)
34009386:	4293      	cmp	r3, r2
34009388:	d07b      	beq.n	34009482 <RCCEx_GetUARTCLKFreq+0x252>
3400938a:	4a65      	ldr	r2, [pc, #404]	@ (34009520 <RCCEx_GetUARTCLKFreq+0x2f0>)
3400938c:	4293      	cmp	r3, r2
3400938e:	f200 8164 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009392:	4a64      	ldr	r2, [pc, #400]	@ (34009524 <RCCEx_GetUARTCLKFreq+0x2f4>)
34009394:	4293      	cmp	r3, r2
34009396:	d074      	beq.n	34009482 <RCCEx_GetUARTCLKFreq+0x252>
34009398:	4a62      	ldr	r2, [pc, #392]	@ (34009524 <RCCEx_GetUARTCLKFreq+0x2f4>)
3400939a:	4293      	cmp	r3, r2
3400939c:	f200 815d 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340093a0:	4a61      	ldr	r2, [pc, #388]	@ (34009528 <RCCEx_GetUARTCLKFreq+0x2f8>)
340093a2:	4293      	cmp	r3, r2
340093a4:	d06d      	beq.n	34009482 <RCCEx_GetUARTCLKFreq+0x252>
340093a6:	4a60      	ldr	r2, [pc, #384]	@ (34009528 <RCCEx_GetUARTCLKFreq+0x2f8>)
340093a8:	4293      	cmp	r3, r2
340093aa:	f200 8156 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340093ae:	4a5f      	ldr	r2, [pc, #380]	@ (3400952c <RCCEx_GetUARTCLKFreq+0x2fc>)
340093b0:	4293      	cmp	r3, r2
340093b2:	d066      	beq.n	34009482 <RCCEx_GetUARTCLKFreq+0x252>
340093b4:	4a5d      	ldr	r2, [pc, #372]	@ (3400952c <RCCEx_GetUARTCLKFreq+0x2fc>)
340093b6:	4293      	cmp	r3, r2
340093b8:	f200 814f 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340093bc:	4a5c      	ldr	r2, [pc, #368]	@ (34009530 <RCCEx_GetUARTCLKFreq+0x300>)
340093be:	4293      	cmp	r3, r2
340093c0:	d05f      	beq.n	34009482 <RCCEx_GetUARTCLKFreq+0x252>
340093c2:	4a5b      	ldr	r2, [pc, #364]	@ (34009530 <RCCEx_GetUARTCLKFreq+0x300>)
340093c4:	4293      	cmp	r3, r2
340093c6:	f200 8148 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340093ca:	4a5a      	ldr	r2, [pc, #360]	@ (34009534 <RCCEx_GetUARTCLKFreq+0x304>)
340093cc:	4293      	cmp	r3, r2
340093ce:	d053      	beq.n	34009478 <RCCEx_GetUARTCLKFreq+0x248>
340093d0:	4a58      	ldr	r2, [pc, #352]	@ (34009534 <RCCEx_GetUARTCLKFreq+0x304>)
340093d2:	4293      	cmp	r3, r2
340093d4:	f200 8141 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340093d8:	4a57      	ldr	r2, [pc, #348]	@ (34009538 <RCCEx_GetUARTCLKFreq+0x308>)
340093da:	4293      	cmp	r3, r2
340093dc:	d04c      	beq.n	34009478 <RCCEx_GetUARTCLKFreq+0x248>
340093de:	4a56      	ldr	r2, [pc, #344]	@ (34009538 <RCCEx_GetUARTCLKFreq+0x308>)
340093e0:	4293      	cmp	r3, r2
340093e2:	f200 813a 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340093e6:	4a55      	ldr	r2, [pc, #340]	@ (3400953c <RCCEx_GetUARTCLKFreq+0x30c>)
340093e8:	4293      	cmp	r3, r2
340093ea:	d045      	beq.n	34009478 <RCCEx_GetUARTCLKFreq+0x248>
340093ec:	4a53      	ldr	r2, [pc, #332]	@ (3400953c <RCCEx_GetUARTCLKFreq+0x30c>)
340093ee:	4293      	cmp	r3, r2
340093f0:	f200 8133 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
340093f4:	4a52      	ldr	r2, [pc, #328]	@ (34009540 <RCCEx_GetUARTCLKFreq+0x310>)
340093f6:	4293      	cmp	r3, r2
340093f8:	d03e      	beq.n	34009478 <RCCEx_GetUARTCLKFreq+0x248>
340093fa:	4a51      	ldr	r2, [pc, #324]	@ (34009540 <RCCEx_GetUARTCLKFreq+0x310>)
340093fc:	4293      	cmp	r3, r2
340093fe:	f200 812c 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009402:	4a50      	ldr	r2, [pc, #320]	@ (34009544 <RCCEx_GetUARTCLKFreq+0x314>)
34009404:	4293      	cmp	r3, r2
34009406:	d037      	beq.n	34009478 <RCCEx_GetUARTCLKFreq+0x248>
34009408:	4a4e      	ldr	r2, [pc, #312]	@ (34009544 <RCCEx_GetUARTCLKFreq+0x314>)
3400940a:	4293      	cmp	r3, r2
3400940c:	f200 8125 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
34009410:	4a4d      	ldr	r2, [pc, #308]	@ (34009548 <RCCEx_GetUARTCLKFreq+0x318>)
34009412:	4293      	cmp	r3, r2
34009414:	d018      	beq.n	34009448 <RCCEx_GetUARTCLKFreq+0x218>
34009416:	4a4c      	ldr	r2, [pc, #304]	@ (34009548 <RCCEx_GetUARTCLKFreq+0x318>)
34009418:	4293      	cmp	r3, r2
3400941a:	f200 811e 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
3400941e:	4a4b      	ldr	r2, [pc, #300]	@ (3400954c <RCCEx_GetUARTCLKFreq+0x31c>)
34009420:	4293      	cmp	r3, r2
34009422:	d011      	beq.n	34009448 <RCCEx_GetUARTCLKFreq+0x218>
34009424:	4a49      	ldr	r2, [pc, #292]	@ (3400954c <RCCEx_GetUARTCLKFreq+0x31c>)
34009426:	4293      	cmp	r3, r2
34009428:	f200 8117 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
3400942c:	4a48      	ldr	r2, [pc, #288]	@ (34009550 <RCCEx_GetUARTCLKFreq+0x320>)
3400942e:	4293      	cmp	r3, r2
34009430:	d00a      	beq.n	34009448 <RCCEx_GetUARTCLKFreq+0x218>
34009432:	4a47      	ldr	r2, [pc, #284]	@ (34009550 <RCCEx_GetUARTCLKFreq+0x320>)
34009434:	4293      	cmp	r3, r2
34009436:	f200 8110 	bhi.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
3400943a:	4a46      	ldr	r2, [pc, #280]	@ (34009554 <RCCEx_GetUARTCLKFreq+0x324>)
3400943c:	4293      	cmp	r3, r2
3400943e:	d00f      	beq.n	34009460 <RCCEx_GetUARTCLKFreq+0x230>
34009440:	4a45      	ldr	r2, [pc, #276]	@ (34009558 <RCCEx_GetUARTCLKFreq+0x328>)
34009442:	4293      	cmp	r3, r2
34009444:	f040 8109 	bne.w	3400965a <RCCEx_GetUARTCLKFreq+0x42a>
  {
    case LL_RCC_UART4_CLKSOURCE_PCLK1:
    case LL_RCC_UART5_CLKSOURCE_PCLK1:
    case LL_RCC_UART7_CLKSOURCE_PCLK1:
    case LL_RCC_UART8_CLKSOURCE_PCLK1:
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009448:	f7f8 fcf6 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
3400944c:	4603      	mov	r3, r0
3400944e:	4618      	mov	r0, r3
34009450:	f7fd f944 	bl	340066dc <RCCEx_GetHCLKFreq>
34009454:	4603      	mov	r3, r0
34009456:	4618      	mov	r0, r3
34009458:	f7fd f951 	bl	340066fe <RCCEx_GetPCLK1Freq>
3400945c:	60f8      	str	r0, [r7, #12]
      break;
3400945e:	e107      	b.n	34009670 <RCCEx_GetUARTCLKFreq+0x440>

    case LL_RCC_UART9_CLKSOURCE_PCLK2:
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34009460:	f7f8 fcea 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34009464:	4603      	mov	r3, r0
34009466:	4618      	mov	r0, r3
34009468:	f7fd f938 	bl	340066dc <RCCEx_GetHCLKFreq>
3400946c:	4603      	mov	r3, r0
3400946e:	4618      	mov	r0, r3
34009470:	f7fd f955 	bl	3400671e <RCCEx_GetPCLK2Freq>
34009474:	60f8      	str	r0, [r7, #12]
      break;
34009476:	e0fb      	b.n	34009670 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_CLKP:
    case LL_RCC_UART5_CLKSOURCE_CLKP:
    case LL_RCC_UART7_CLKSOURCE_CLKP:
    case LL_RCC_UART8_CLKSOURCE_CLKP:
    case LL_RCC_UART9_CLKSOURCE_CLKP:
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009478:	2007      	movs	r0, #7
3400947a:	f7fd fc1b 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
3400947e:	60f8      	str	r0, [r7, #12]
      break;
34009480:	e0f6      	b.n	34009670 <RCCEx_GetUARTCLKFreq+0x440>
    case LL_RCC_UART4_CLKSOURCE_IC9:
    case LL_RCC_UART5_CLKSOURCE_IC9:
    case LL_RCC_UART7_CLKSOURCE_IC9:
    case LL_RCC_UART8_CLKSOURCE_IC9:
    case LL_RCC_UART9_CLKSOURCE_IC9:
      if (LL_RCC_IC9_IsEnabled() != 0U)
34009482:	f7f9 fdbf 	bl	34003004 <LL_RCC_IC9_IsEnabled>
34009486:	4603      	mov	r3, r0
34009488:	2b00      	cmp	r3, #0
3400948a:	f000 80e8 	beq.w	3400965e <RCCEx_GetUARTCLKFreq+0x42e>
      {
        ic_divider = LL_RCC_IC9_GetDivider();
3400948e:	f7f9 fddb 	bl	34003048 <LL_RCC_IC9_GetDivider>
34009492:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
34009494:	f7f9 fdca 	bl	3400302c <LL_RCC_IC9_GetSource>
34009498:	4603      	mov	r3, r0
3400949a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3400949e:	d06f      	beq.n	34009580 <RCCEx_GetUARTCLKFreq+0x350>
340094a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340094a4:	d875      	bhi.n	34009592 <RCCEx_GetUARTCLKFreq+0x362>
340094a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340094aa:	d060      	beq.n	3400956e <RCCEx_GetUARTCLKFreq+0x33e>
340094ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340094b0:	d86f      	bhi.n	34009592 <RCCEx_GetUARTCLKFreq+0x362>
340094b2:	2b00      	cmp	r3, #0
340094b4:	d003      	beq.n	340094be <RCCEx_GetUARTCLKFreq+0x28e>
340094b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340094ba:	d04f      	beq.n	3400955c <RCCEx_GetUARTCLKFreq+0x32c>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340094bc:	e069      	b.n	34009592 <RCCEx_GetUARTCLKFreq+0x362>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340094be:	f7fc fff5 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
340094c2:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
340094c4:	68fa      	ldr	r2, [r7, #12]
340094c6:	68bb      	ldr	r3, [r7, #8]
340094c8:	fbb2 f3f3 	udiv	r3, r2, r3
340094cc:	60fb      	str	r3, [r7, #12]
            break;
340094ce:	e061      	b.n	34009594 <RCCEx_GetUARTCLKFreq+0x364>
340094d0:	07061c30 	.word	0x07061c30
340094d4:	07061830 	.word	0x07061830
340094d8:	07061030 	.word	0x07061030
340094dc:	07060c30 	.word	0x07060c30
340094e0:	07060034 	.word	0x07060034
340094e4:	07051c30 	.word	0x07051c30
340094e8:	07051830 	.word	0x07051830
340094ec:	07051030 	.word	0x07051030
340094f0:	07050c30 	.word	0x07050c30
340094f4:	07050034 	.word	0x07050034
340094f8:	07041c30 	.word	0x07041c30
340094fc:	07041830 	.word	0x07041830
34009500:	07041030 	.word	0x07041030
34009504:	07040c30 	.word	0x07040c30
34009508:	07040034 	.word	0x07040034
3400950c:	07031c30 	.word	0x07031c30
34009510:	07031830 	.word	0x07031830
34009514:	07031030 	.word	0x07031030
34009518:	07030c30 	.word	0x07030c30
3400951c:	07030034 	.word	0x07030034
34009520:	07021c30 	.word	0x07021c30
34009524:	07021830 	.word	0x07021830
34009528:	07021030 	.word	0x07021030
3400952c:	07020c30 	.word	0x07020c30
34009530:	07020034 	.word	0x07020034
34009534:	07011c30 	.word	0x07011c30
34009538:	07011830 	.word	0x07011830
3400953c:	07011030 	.word	0x07011030
34009540:	07010c30 	.word	0x07010c30
34009544:	07010034 	.word	0x07010034
34009548:	07001c30 	.word	0x07001c30
3400954c:	07001830 	.word	0x07001830
34009550:	07001030 	.word	0x07001030
34009554:	07000034 	.word	0x07000034
34009558:	07000c30 	.word	0x07000c30
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3400955c:	f7fc ffec 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34009560:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34009562:	68fa      	ldr	r2, [r7, #12]
34009564:	68bb      	ldr	r3, [r7, #8]
34009566:	fbb2 f3f3 	udiv	r3, r2, r3
3400956a:	60fb      	str	r3, [r7, #12]
            break;
3400956c:	e012      	b.n	34009594 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3400956e:	f7fd f829 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34009572:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34009574:	68fa      	ldr	r2, [r7, #12]
34009576:	68bb      	ldr	r3, [r7, #8]
34009578:	fbb2 f3f3 	udiv	r3, r2, r3
3400957c:	60fb      	str	r3, [r7, #12]
            break;
3400957e:	e009      	b.n	34009594 <RCCEx_GetUARTCLKFreq+0x364>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009580:	f7fd f866 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34009584:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
34009586:	68fa      	ldr	r2, [r7, #12]
34009588:	68bb      	ldr	r3, [r7, #8]
3400958a:	fbb2 f3f3 	udiv	r3, r2, r3
3400958e:	60fb      	str	r3, [r7, #12]
            break;
34009590:	e000      	b.n	34009594 <RCCEx_GetUARTCLKFreq+0x364>
            break;
34009592:	bf00      	nop
        }
      }
      break;
34009594:	e063      	b.n	3400965e <RCCEx_GetUARTCLKFreq+0x42e>
    case LL_RCC_UART4_CLKSOURCE_IC14:
    case LL_RCC_UART5_CLKSOURCE_IC14:
    case LL_RCC_UART7_CLKSOURCE_IC14:
    case LL_RCC_UART8_CLKSOURCE_IC14:
    case LL_RCC_UART9_CLKSOURCE_IC14:
      if (LL_RCC_IC14_IsEnabled() != 0U)
34009596:	f7f9 fe35 	bl	34003204 <LL_RCC_IC14_IsEnabled>
3400959a:	4603      	mov	r3, r0
3400959c:	2b00      	cmp	r3, #0
3400959e:	d060      	beq.n	34009662 <RCCEx_GetUARTCLKFreq+0x432>
      {
        ic_divider = LL_RCC_IC14_GetDivider();
340095a0:	f7f9 fe52 	bl	34003248 <LL_RCC_IC14_GetDivider>
340095a4:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
340095a6:	f7f9 fe41 	bl	3400322c <LL_RCC_IC14_GetSource>
340095aa:	4603      	mov	r3, r0
340095ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340095b0:	d029      	beq.n	34009606 <RCCEx_GetUARTCLKFreq+0x3d6>
340095b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340095b6:	d82f      	bhi.n	34009618 <RCCEx_GetUARTCLKFreq+0x3e8>
340095b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340095bc:	d01a      	beq.n	340095f4 <RCCEx_GetUARTCLKFreq+0x3c4>
340095be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340095c2:	d829      	bhi.n	34009618 <RCCEx_GetUARTCLKFreq+0x3e8>
340095c4:	2b00      	cmp	r3, #0
340095c6:	d003      	beq.n	340095d0 <RCCEx_GetUARTCLKFreq+0x3a0>
340095c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
340095cc:	d009      	beq.n	340095e2 <RCCEx_GetUARTCLKFreq+0x3b2>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            uart_frequency = uart_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
340095ce:	e023      	b.n	34009618 <RCCEx_GetUARTCLKFreq+0x3e8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
340095d0:	f7fc ff6c 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
340095d4:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
340095d6:	68fa      	ldr	r2, [r7, #12]
340095d8:	68bb      	ldr	r3, [r7, #8]
340095da:	fbb2 f3f3 	udiv	r3, r2, r3
340095de:	60fb      	str	r3, [r7, #12]
            break;
340095e0:	e01b      	b.n	3400961a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340095e2:	f7fc ffa9 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340095e6:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
340095e8:	68fa      	ldr	r2, [r7, #12]
340095ea:	68bb      	ldr	r3, [r7, #8]
340095ec:	fbb2 f3f3 	udiv	r3, r2, r3
340095f0:	60fb      	str	r3, [r7, #12]
            break;
340095f2:	e012      	b.n	3400961a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340095f4:	f7fc ffe6 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
340095f8:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
340095fa:	68fa      	ldr	r2, [r7, #12]
340095fc:	68bb      	ldr	r3, [r7, #8]
340095fe:	fbb2 f3f3 	udiv	r3, r2, r3
34009602:	60fb      	str	r3, [r7, #12]
            break;
34009604:	e009      	b.n	3400961a <RCCEx_GetUARTCLKFreq+0x3ea>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009606:	f7fd f823 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
3400960a:	60f8      	str	r0, [r7, #12]
            uart_frequency = uart_frequency / ic_divider;
3400960c:	68fa      	ldr	r2, [r7, #12]
3400960e:	68bb      	ldr	r3, [r7, #8]
34009610:	fbb2 f3f3 	udiv	r3, r2, r3
34009614:	60fb      	str	r3, [r7, #12]
            break;
34009616:	e000      	b.n	3400961a <RCCEx_GetUARTCLKFreq+0x3ea>
            break;
34009618:	bf00      	nop
        }
      }
      break;
3400961a:	e022      	b.n	34009662 <RCCEx_GetUARTCLKFreq+0x432>
    case LL_RCC_UART4_CLKSOURCE_HSI:
    case LL_RCC_UART5_CLKSOURCE_HSI:
    case LL_RCC_UART7_CLKSOURCE_HSI:
    case LL_RCC_UART8_CLKSOURCE_HSI:
    case LL_RCC_UART9_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
3400961c:	f7f8 fcce 	bl	34001fbc <LL_RCC_HSI_IsReady>
34009620:	4603      	mov	r3, r0
34009622:	2b00      	cmp	r3, #0
34009624:	d01f      	beq.n	34009666 <RCCEx_GetUARTCLKFreq+0x436>
      {
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009626:	f7f8 fcdb 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
3400962a:	4603      	mov	r3, r0
3400962c:	09db      	lsrs	r3, r3, #7
3400962e:	4a13      	ldr	r2, [pc, #76]	@ (3400967c <RCCEx_GetUARTCLKFreq+0x44c>)
34009630:	fa22 f303 	lsr.w	r3, r2, r3
34009634:	60fb      	str	r3, [r7, #12]
      }
      break;
34009636:	e016      	b.n	34009666 <RCCEx_GetUARTCLKFreq+0x436>
    case LL_RCC_UART4_CLKSOURCE_MSI:
    case LL_RCC_UART5_CLKSOURCE_MSI:
    case LL_RCC_UART7_CLKSOURCE_MSI:
    case LL_RCC_UART8_CLKSOURCE_MSI:
    case LL_RCC_UART9_CLKSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() != 0U)
34009638:	f7f8 fce0 	bl	34001ffc <LL_RCC_MSI_IsReady>
3400963c:	4603      	mov	r3, r0
3400963e:	2b00      	cmp	r3, #0
34009640:	d013      	beq.n	3400966a <RCCEx_GetUARTCLKFreq+0x43a>
      {
        uart_frequency = MSI_VALUE;
34009642:	4b0f      	ldr	r3, [pc, #60]	@ (34009680 <RCCEx_GetUARTCLKFreq+0x450>)
34009644:	60fb      	str	r3, [r7, #12]
      }
      break;
34009646:	e010      	b.n	3400966a <RCCEx_GetUARTCLKFreq+0x43a>
    case LL_RCC_UART4_CLKSOURCE_LSE:
    case LL_RCC_UART5_CLKSOURCE_LSE:
    case LL_RCC_UART7_CLKSOURCE_LSE:
    case LL_RCC_UART8_CLKSOURCE_LSE:
    case LL_RCC_UART9_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
34009648:	f7f8 fcf8 	bl	3400203c <LL_RCC_LSE_IsReady>
3400964c:	4603      	mov	r3, r0
3400964e:	2b00      	cmp	r3, #0
34009650:	d00d      	beq.n	3400966e <RCCEx_GetUARTCLKFreq+0x43e>
      {
        uart_frequency = LSE_VALUE;
34009652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34009656:	60fb      	str	r3, [r7, #12]
      }
      break;
34009658:	e009      	b.n	3400966e <RCCEx_GetUARTCLKFreq+0x43e>

    default:
      /* Unexpected case */
      break;
3400965a:	bf00      	nop
3400965c:	e008      	b.n	34009670 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3400965e:	bf00      	nop
34009660:	e006      	b.n	34009670 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34009662:	bf00      	nop
34009664:	e004      	b.n	34009670 <RCCEx_GetUARTCLKFreq+0x440>
      break;
34009666:	bf00      	nop
34009668:	e002      	b.n	34009670 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3400966a:	bf00      	nop
3400966c:	e000      	b.n	34009670 <RCCEx_GetUARTCLKFreq+0x440>
      break;
3400966e:	bf00      	nop
  }

  return uart_frequency;
34009670:	68fb      	ldr	r3, [r7, #12]
}
34009672:	4618      	mov	r0, r3
34009674:	3710      	adds	r7, #16
34009676:	46bd      	mov	sp, r7
34009678:	bd80      	pop	{r7, pc}
3400967a:	bf00      	nop
3400967c:	03d09000 	.word	0x03d09000
34009680:	003d0900 	.word	0x003d0900

34009684 <RCCEx_GetUSARTCLKFreq>:
  *         @arg @ref RCCEx_USART10_Clock_Source
  * @retval USART clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetUSARTCLKFreq(uint32_t USARTxSource)
{
34009684:	b580      	push	{r7, lr}
34009686:	b084      	sub	sp, #16
34009688:	af00      	add	r7, sp, #0
3400968a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
3400968c:	2300      	movs	r3, #0
3400968e:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34009690:	6878      	ldr	r0, [r7, #4]
34009692:	f7f9 f87b 	bl	3400278c <LL_RCC_GetUSARTClockSource>
34009696:	4603      	mov	r3, r0
34009698:	4aa2      	ldr	r2, [pc, #648]	@ (34009924 <RCCEx_GetUSARTCLKFreq+0x2a0>)
3400969a:	4293      	cmp	r3, r2
3400969c:	f000 81e8 	beq.w	34009a70 <RCCEx_GetUSARTCLKFreq+0x3ec>
340096a0:	4aa0      	ldr	r2, [pc, #640]	@ (34009924 <RCCEx_GetUSARTCLKFreq+0x2a0>)
340096a2:	4293      	cmp	r3, r2
340096a4:	f200 8203 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340096a8:	4a9f      	ldr	r2, [pc, #636]	@ (34009928 <RCCEx_GetUSARTCLKFreq+0x2a4>)
340096aa:	4293      	cmp	r3, r2
340096ac:	f000 81e0 	beq.w	34009a70 <RCCEx_GetUSARTCLKFreq+0x3ec>
340096b0:	4a9d      	ldr	r2, [pc, #628]	@ (34009928 <RCCEx_GetUSARTCLKFreq+0x2a4>)
340096b2:	4293      	cmp	r3, r2
340096b4:	f200 81fb 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340096b8:	4a9c      	ldr	r2, [pc, #624]	@ (3400992c <RCCEx_GetUSARTCLKFreq+0x2a8>)
340096ba:	4293      	cmp	r3, r2
340096bc:	f000 81d8 	beq.w	34009a70 <RCCEx_GetUSARTCLKFreq+0x3ec>
340096c0:	4a9a      	ldr	r2, [pc, #616]	@ (3400992c <RCCEx_GetUSARTCLKFreq+0x2a8>)
340096c2:	4293      	cmp	r3, r2
340096c4:	f200 81f3 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340096c8:	4a99      	ldr	r2, [pc, #612]	@ (34009930 <RCCEx_GetUSARTCLKFreq+0x2ac>)
340096ca:	4293      	cmp	r3, r2
340096cc:	f000 81d0 	beq.w	34009a70 <RCCEx_GetUSARTCLKFreq+0x3ec>
340096d0:	4a97      	ldr	r2, [pc, #604]	@ (34009930 <RCCEx_GetUSARTCLKFreq+0x2ac>)
340096d2:	4293      	cmp	r3, r2
340096d4:	f200 81eb 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340096d8:	4a96      	ldr	r2, [pc, #600]	@ (34009934 <RCCEx_GetUSARTCLKFreq+0x2b0>)
340096da:	4293      	cmp	r3, r2
340096dc:	f000 81c8 	beq.w	34009a70 <RCCEx_GetUSARTCLKFreq+0x3ec>
340096e0:	4a94      	ldr	r2, [pc, #592]	@ (34009934 <RCCEx_GetUSARTCLKFreq+0x2b0>)
340096e2:	4293      	cmp	r3, r2
340096e4:	f200 81e3 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340096e8:	4a93      	ldr	r2, [pc, #588]	@ (34009938 <RCCEx_GetUSARTCLKFreq+0x2b4>)
340096ea:	4293      	cmp	r3, r2
340096ec:	f000 81ce 	beq.w	34009a8c <RCCEx_GetUSARTCLKFreq+0x408>
340096f0:	4a91      	ldr	r2, [pc, #580]	@ (34009938 <RCCEx_GetUSARTCLKFreq+0x2b4>)
340096f2:	4293      	cmp	r3, r2
340096f4:	f200 81db 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340096f8:	4a90      	ldr	r2, [pc, #576]	@ (3400993c <RCCEx_GetUSARTCLKFreq+0x2b8>)
340096fa:	4293      	cmp	r3, r2
340096fc:	f000 81c6 	beq.w	34009a8c <RCCEx_GetUSARTCLKFreq+0x408>
34009700:	4a8e      	ldr	r2, [pc, #568]	@ (3400993c <RCCEx_GetUSARTCLKFreq+0x2b8>)
34009702:	4293      	cmp	r3, r2
34009704:	f200 81d3 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009708:	4a8d      	ldr	r2, [pc, #564]	@ (34009940 <RCCEx_GetUSARTCLKFreq+0x2bc>)
3400970a:	4293      	cmp	r3, r2
3400970c:	f000 81be 	beq.w	34009a8c <RCCEx_GetUSARTCLKFreq+0x408>
34009710:	4a8b      	ldr	r2, [pc, #556]	@ (34009940 <RCCEx_GetUSARTCLKFreq+0x2bc>)
34009712:	4293      	cmp	r3, r2
34009714:	f200 81cb 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009718:	4a8a      	ldr	r2, [pc, #552]	@ (34009944 <RCCEx_GetUSARTCLKFreq+0x2c0>)
3400971a:	4293      	cmp	r3, r2
3400971c:	f000 81b6 	beq.w	34009a8c <RCCEx_GetUSARTCLKFreq+0x408>
34009720:	4a88      	ldr	r2, [pc, #544]	@ (34009944 <RCCEx_GetUSARTCLKFreq+0x2c0>)
34009722:	4293      	cmp	r3, r2
34009724:	f200 81c3 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009728:	4a87      	ldr	r2, [pc, #540]	@ (34009948 <RCCEx_GetUSARTCLKFreq+0x2c4>)
3400972a:	4293      	cmp	r3, r2
3400972c:	f000 81ae 	beq.w	34009a8c <RCCEx_GetUSARTCLKFreq+0x408>
34009730:	4a85      	ldr	r2, [pc, #532]	@ (34009948 <RCCEx_GetUSARTCLKFreq+0x2c4>)
34009732:	4293      	cmp	r3, r2
34009734:	f200 81bb 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009738:	4a84      	ldr	r2, [pc, #528]	@ (3400994c <RCCEx_GetUSARTCLKFreq+0x2c8>)
3400973a:	4293      	cmp	r3, r2
3400973c:	f000 81ae 	beq.w	34009a9c <RCCEx_GetUSARTCLKFreq+0x418>
34009740:	4a82      	ldr	r2, [pc, #520]	@ (3400994c <RCCEx_GetUSARTCLKFreq+0x2c8>)
34009742:	4293      	cmp	r3, r2
34009744:	f200 81b3 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009748:	4a81      	ldr	r2, [pc, #516]	@ (34009950 <RCCEx_GetUSARTCLKFreq+0x2cc>)
3400974a:	4293      	cmp	r3, r2
3400974c:	f000 81a6 	beq.w	34009a9c <RCCEx_GetUSARTCLKFreq+0x418>
34009750:	4a7f      	ldr	r2, [pc, #508]	@ (34009950 <RCCEx_GetUSARTCLKFreq+0x2cc>)
34009752:	4293      	cmp	r3, r2
34009754:	f200 81ab 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009758:	4a7e      	ldr	r2, [pc, #504]	@ (34009954 <RCCEx_GetUSARTCLKFreq+0x2d0>)
3400975a:	4293      	cmp	r3, r2
3400975c:	f000 819e 	beq.w	34009a9c <RCCEx_GetUSARTCLKFreq+0x418>
34009760:	4a7c      	ldr	r2, [pc, #496]	@ (34009954 <RCCEx_GetUSARTCLKFreq+0x2d0>)
34009762:	4293      	cmp	r3, r2
34009764:	f200 81a3 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009768:	4a7b      	ldr	r2, [pc, #492]	@ (34009958 <RCCEx_GetUSARTCLKFreq+0x2d4>)
3400976a:	4293      	cmp	r3, r2
3400976c:	f000 8196 	beq.w	34009a9c <RCCEx_GetUSARTCLKFreq+0x418>
34009770:	4a79      	ldr	r2, [pc, #484]	@ (34009958 <RCCEx_GetUSARTCLKFreq+0x2d4>)
34009772:	4293      	cmp	r3, r2
34009774:	f200 819b 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009778:	4a78      	ldr	r2, [pc, #480]	@ (3400995c <RCCEx_GetUSARTCLKFreq+0x2d8>)
3400977a:	4293      	cmp	r3, r2
3400977c:	f000 818e 	beq.w	34009a9c <RCCEx_GetUSARTCLKFreq+0x418>
34009780:	4a76      	ldr	r2, [pc, #472]	@ (3400995c <RCCEx_GetUSARTCLKFreq+0x2d8>)
34009782:	4293      	cmp	r3, r2
34009784:	f200 8193 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009788:	4a75      	ldr	r2, [pc, #468]	@ (34009960 <RCCEx_GetUSARTCLKFreq+0x2dc>)
3400978a:	4293      	cmp	r3, r2
3400978c:	f000 812d 	beq.w	340099ea <RCCEx_GetUSARTCLKFreq+0x366>
34009790:	4a73      	ldr	r2, [pc, #460]	@ (34009960 <RCCEx_GetUSARTCLKFreq+0x2dc>)
34009792:	4293      	cmp	r3, r2
34009794:	f200 818b 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009798:	4a72      	ldr	r2, [pc, #456]	@ (34009964 <RCCEx_GetUSARTCLKFreq+0x2e0>)
3400979a:	4293      	cmp	r3, r2
3400979c:	f000 8125 	beq.w	340099ea <RCCEx_GetUSARTCLKFreq+0x366>
340097a0:	4a70      	ldr	r2, [pc, #448]	@ (34009964 <RCCEx_GetUSARTCLKFreq+0x2e0>)
340097a2:	4293      	cmp	r3, r2
340097a4:	f200 8183 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340097a8:	4a6f      	ldr	r2, [pc, #444]	@ (34009968 <RCCEx_GetUSARTCLKFreq+0x2e4>)
340097aa:	4293      	cmp	r3, r2
340097ac:	f000 811d 	beq.w	340099ea <RCCEx_GetUSARTCLKFreq+0x366>
340097b0:	4a6d      	ldr	r2, [pc, #436]	@ (34009968 <RCCEx_GetUSARTCLKFreq+0x2e4>)
340097b2:	4293      	cmp	r3, r2
340097b4:	f200 817b 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340097b8:	4a6c      	ldr	r2, [pc, #432]	@ (3400996c <RCCEx_GetUSARTCLKFreq+0x2e8>)
340097ba:	4293      	cmp	r3, r2
340097bc:	f000 8115 	beq.w	340099ea <RCCEx_GetUSARTCLKFreq+0x366>
340097c0:	4a6a      	ldr	r2, [pc, #424]	@ (3400996c <RCCEx_GetUSARTCLKFreq+0x2e8>)
340097c2:	4293      	cmp	r3, r2
340097c4:	f200 8173 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340097c8:	4a69      	ldr	r2, [pc, #420]	@ (34009970 <RCCEx_GetUSARTCLKFreq+0x2ec>)
340097ca:	4293      	cmp	r3, r2
340097cc:	f000 810d 	beq.w	340099ea <RCCEx_GetUSARTCLKFreq+0x366>
340097d0:	4a67      	ldr	r2, [pc, #412]	@ (34009970 <RCCEx_GetUSARTCLKFreq+0x2ec>)
340097d2:	4293      	cmp	r3, r2
340097d4:	f200 816b 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340097d8:	4a66      	ldr	r2, [pc, #408]	@ (34009974 <RCCEx_GetUSARTCLKFreq+0x2f0>)
340097da:	4293      	cmp	r3, r2
340097dc:	d07b      	beq.n	340098d6 <RCCEx_GetUSARTCLKFreq+0x252>
340097de:	4a65      	ldr	r2, [pc, #404]	@ (34009974 <RCCEx_GetUSARTCLKFreq+0x2f0>)
340097e0:	4293      	cmp	r3, r2
340097e2:	f200 8164 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340097e6:	4a64      	ldr	r2, [pc, #400]	@ (34009978 <RCCEx_GetUSARTCLKFreq+0x2f4>)
340097e8:	4293      	cmp	r3, r2
340097ea:	d074      	beq.n	340098d6 <RCCEx_GetUSARTCLKFreq+0x252>
340097ec:	4a62      	ldr	r2, [pc, #392]	@ (34009978 <RCCEx_GetUSARTCLKFreq+0x2f4>)
340097ee:	4293      	cmp	r3, r2
340097f0:	f200 815d 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
340097f4:	4a61      	ldr	r2, [pc, #388]	@ (3400997c <RCCEx_GetUSARTCLKFreq+0x2f8>)
340097f6:	4293      	cmp	r3, r2
340097f8:	d06d      	beq.n	340098d6 <RCCEx_GetUSARTCLKFreq+0x252>
340097fa:	4a60      	ldr	r2, [pc, #384]	@ (3400997c <RCCEx_GetUSARTCLKFreq+0x2f8>)
340097fc:	4293      	cmp	r3, r2
340097fe:	f200 8156 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009802:	4a5f      	ldr	r2, [pc, #380]	@ (34009980 <RCCEx_GetUSARTCLKFreq+0x2fc>)
34009804:	4293      	cmp	r3, r2
34009806:	d066      	beq.n	340098d6 <RCCEx_GetUSARTCLKFreq+0x252>
34009808:	4a5d      	ldr	r2, [pc, #372]	@ (34009980 <RCCEx_GetUSARTCLKFreq+0x2fc>)
3400980a:	4293      	cmp	r3, r2
3400980c:	f200 814f 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009810:	4a5c      	ldr	r2, [pc, #368]	@ (34009984 <RCCEx_GetUSARTCLKFreq+0x300>)
34009812:	4293      	cmp	r3, r2
34009814:	d05f      	beq.n	340098d6 <RCCEx_GetUSARTCLKFreq+0x252>
34009816:	4a5b      	ldr	r2, [pc, #364]	@ (34009984 <RCCEx_GetUSARTCLKFreq+0x300>)
34009818:	4293      	cmp	r3, r2
3400981a:	f200 8148 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
3400981e:	4a5a      	ldr	r2, [pc, #360]	@ (34009988 <RCCEx_GetUSARTCLKFreq+0x304>)
34009820:	4293      	cmp	r3, r2
34009822:	d053      	beq.n	340098cc <RCCEx_GetUSARTCLKFreq+0x248>
34009824:	4a58      	ldr	r2, [pc, #352]	@ (34009988 <RCCEx_GetUSARTCLKFreq+0x304>)
34009826:	4293      	cmp	r3, r2
34009828:	f200 8141 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
3400982c:	4a57      	ldr	r2, [pc, #348]	@ (3400998c <RCCEx_GetUSARTCLKFreq+0x308>)
3400982e:	4293      	cmp	r3, r2
34009830:	d04c      	beq.n	340098cc <RCCEx_GetUSARTCLKFreq+0x248>
34009832:	4a56      	ldr	r2, [pc, #344]	@ (3400998c <RCCEx_GetUSARTCLKFreq+0x308>)
34009834:	4293      	cmp	r3, r2
34009836:	f200 813a 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
3400983a:	4a55      	ldr	r2, [pc, #340]	@ (34009990 <RCCEx_GetUSARTCLKFreq+0x30c>)
3400983c:	4293      	cmp	r3, r2
3400983e:	d045      	beq.n	340098cc <RCCEx_GetUSARTCLKFreq+0x248>
34009840:	4a53      	ldr	r2, [pc, #332]	@ (34009990 <RCCEx_GetUSARTCLKFreq+0x30c>)
34009842:	4293      	cmp	r3, r2
34009844:	f200 8133 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009848:	4a52      	ldr	r2, [pc, #328]	@ (34009994 <RCCEx_GetUSARTCLKFreq+0x310>)
3400984a:	4293      	cmp	r3, r2
3400984c:	d03e      	beq.n	340098cc <RCCEx_GetUSARTCLKFreq+0x248>
3400984e:	4a51      	ldr	r2, [pc, #324]	@ (34009994 <RCCEx_GetUSARTCLKFreq+0x310>)
34009850:	4293      	cmp	r3, r2
34009852:	f200 812c 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009856:	4a50      	ldr	r2, [pc, #320]	@ (34009998 <RCCEx_GetUSARTCLKFreq+0x314>)
34009858:	4293      	cmp	r3, r2
3400985a:	d037      	beq.n	340098cc <RCCEx_GetUSARTCLKFreq+0x248>
3400985c:	4a4e      	ldr	r2, [pc, #312]	@ (34009998 <RCCEx_GetUSARTCLKFreq+0x314>)
3400985e:	4293      	cmp	r3, r2
34009860:	f200 8125 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009864:	4a4d      	ldr	r2, [pc, #308]	@ (3400999c <RCCEx_GetUSARTCLKFreq+0x318>)
34009866:	4293      	cmp	r3, r2
34009868:	d018      	beq.n	3400989c <RCCEx_GetUSARTCLKFreq+0x218>
3400986a:	4a4c      	ldr	r2, [pc, #304]	@ (3400999c <RCCEx_GetUSARTCLKFreq+0x318>)
3400986c:	4293      	cmp	r3, r2
3400986e:	f200 811e 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009872:	4a4b      	ldr	r2, [pc, #300]	@ (340099a0 <RCCEx_GetUSARTCLKFreq+0x31c>)
34009874:	4293      	cmp	r3, r2
34009876:	d01d      	beq.n	340098b4 <RCCEx_GetUSARTCLKFreq+0x230>
34009878:	4a49      	ldr	r2, [pc, #292]	@ (340099a0 <RCCEx_GetUSARTCLKFreq+0x31c>)
3400987a:	4293      	cmp	r3, r2
3400987c:	f200 8117 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
34009880:	4a48      	ldr	r2, [pc, #288]	@ (340099a4 <RCCEx_GetUSARTCLKFreq+0x320>)
34009882:	4293      	cmp	r3, r2
34009884:	d00a      	beq.n	3400989c <RCCEx_GetUSARTCLKFreq+0x218>
34009886:	4a47      	ldr	r2, [pc, #284]	@ (340099a4 <RCCEx_GetUSARTCLKFreq+0x320>)
34009888:	4293      	cmp	r3, r2
3400988a:	f200 8110 	bhi.w	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
3400988e:	4a46      	ldr	r2, [pc, #280]	@ (340099a8 <RCCEx_GetUSARTCLKFreq+0x324>)
34009890:	4293      	cmp	r3, r2
34009892:	d003      	beq.n	3400989c <RCCEx_GetUSARTCLKFreq+0x218>
34009894:	4a45      	ldr	r2, [pc, #276]	@ (340099ac <RCCEx_GetUSARTCLKFreq+0x328>)
34009896:	4293      	cmp	r3, r2
34009898:	d00c      	beq.n	340098b4 <RCCEx_GetUSARTCLKFreq+0x230>
      }
      break;

    default:
      /* Unexpected case */
      break;
3400989a:	e108      	b.n	34009aae <RCCEx_GetUSARTCLKFreq+0x42a>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3400989c:	f7f8 facc 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
340098a0:	4603      	mov	r3, r0
340098a2:	4618      	mov	r0, r3
340098a4:	f7fc ff1a 	bl	340066dc <RCCEx_GetHCLKFreq>
340098a8:	4603      	mov	r3, r0
340098aa:	4618      	mov	r0, r3
340098ac:	f7fc ff37 	bl	3400671e <RCCEx_GetPCLK2Freq>
340098b0:	60f8      	str	r0, [r7, #12]
      break;
340098b2:	e107      	b.n	34009ac4 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
340098b4:	f7f8 fac0 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
340098b8:	4603      	mov	r3, r0
340098ba:	4618      	mov	r0, r3
340098bc:	f7fc ff0e 	bl	340066dc <RCCEx_GetHCLKFreq>
340098c0:	4603      	mov	r3, r0
340098c2:	4618      	mov	r0, r3
340098c4:	f7fc ff1b 	bl	340066fe <RCCEx_GetPCLK1Freq>
340098c8:	60f8      	str	r0, [r7, #12]
      break;
340098ca:	e0fb      	b.n	34009ac4 <RCCEx_GetUSARTCLKFreq+0x440>
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
340098cc:	2007      	movs	r0, #7
340098ce:	f7fd f9f1 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
340098d2:	60f8      	str	r0, [r7, #12]
      break;
340098d4:	e0f6      	b.n	34009ac4 <RCCEx_GetUSARTCLKFreq+0x440>
      if (LL_RCC_IC9_IsEnabled() != 0U)
340098d6:	f7f9 fb95 	bl	34003004 <LL_RCC_IC9_IsEnabled>
340098da:	4603      	mov	r3, r0
340098dc:	2b00      	cmp	r3, #0
340098de:	f000 80e8 	beq.w	34009ab2 <RCCEx_GetUSARTCLKFreq+0x42e>
        ic_divider = LL_RCC_IC9_GetDivider();
340098e2:	f7f9 fbb1 	bl	34003048 <LL_RCC_IC9_GetDivider>
340098e6:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC9_GetSource())
340098e8:	f7f9 fba0 	bl	3400302c <LL_RCC_IC9_GetSource>
340098ec:	4603      	mov	r3, r0
340098ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340098f2:	d06f      	beq.n	340099d4 <RCCEx_GetUSARTCLKFreq+0x350>
340098f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
340098f8:	d875      	bhi.n	340099e6 <RCCEx_GetUSARTCLKFreq+0x362>
340098fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
340098fe:	d060      	beq.n	340099c2 <RCCEx_GetUSARTCLKFreq+0x33e>
34009900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009904:	d86f      	bhi.n	340099e6 <RCCEx_GetUSARTCLKFreq+0x362>
34009906:	2b00      	cmp	r3, #0
34009908:	d003      	beq.n	34009912 <RCCEx_GetUSARTCLKFreq+0x28e>
3400990a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400990e:	d04f      	beq.n	340099b0 <RCCEx_GetUSARTCLKFreq+0x32c>
            break;
34009910:	e069      	b.n	340099e6 <RCCEx_GetUSARTCLKFreq+0x362>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009912:	f7fc fdcb 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34009916:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34009918:	68fa      	ldr	r2, [r7, #12]
3400991a:	68bb      	ldr	r3, [r7, #8]
3400991c:	fbb2 f3f3 	udiv	r3, r2, r3
34009920:	60fb      	str	r3, [r7, #12]
            break;
34009922:	e061      	b.n	340099e8 <RCCEx_GetUSARTCLKFreq+0x364>
34009924:	07061430 	.word	0x07061430
34009928:	07060830 	.word	0x07060830
3400992c:	07060434 	.word	0x07060434
34009930:	07060430 	.word	0x07060430
34009934:	07060030 	.word	0x07060030
34009938:	07051430 	.word	0x07051430
3400993c:	07050830 	.word	0x07050830
34009940:	07050434 	.word	0x07050434
34009944:	07050430 	.word	0x07050430
34009948:	07050030 	.word	0x07050030
3400994c:	07041430 	.word	0x07041430
34009950:	07040830 	.word	0x07040830
34009954:	07040434 	.word	0x07040434
34009958:	07040430 	.word	0x07040430
3400995c:	07040030 	.word	0x07040030
34009960:	07031430 	.word	0x07031430
34009964:	07030830 	.word	0x07030830
34009968:	07030434 	.word	0x07030434
3400996c:	07030430 	.word	0x07030430
34009970:	07030030 	.word	0x07030030
34009974:	07021430 	.word	0x07021430
34009978:	07020830 	.word	0x07020830
3400997c:	07020434 	.word	0x07020434
34009980:	07020430 	.word	0x07020430
34009984:	07020030 	.word	0x07020030
34009988:	07011430 	.word	0x07011430
3400998c:	07010830 	.word	0x07010830
34009990:	07010434 	.word	0x07010434
34009994:	07010430 	.word	0x07010430
34009998:	07010030 	.word	0x07010030
3400999c:	07001430 	.word	0x07001430
340099a0:	07000830 	.word	0x07000830
340099a4:	07000434 	.word	0x07000434
340099a8:	07000030 	.word	0x07000030
340099ac:	07000430 	.word	0x07000430
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
340099b0:	f7fc fdc2 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
340099b4:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340099b6:	68fa      	ldr	r2, [r7, #12]
340099b8:	68bb      	ldr	r3, [r7, #8]
340099ba:	fbb2 f3f3 	udiv	r3, r2, r3
340099be:	60fb      	str	r3, [r7, #12]
            break;
340099c0:	e012      	b.n	340099e8 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
340099c2:	f7fc fdff 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
340099c6:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340099c8:	68fa      	ldr	r2, [r7, #12]
340099ca:	68bb      	ldr	r3, [r7, #8]
340099cc:	fbb2 f3f3 	udiv	r3, r2, r3
340099d0:	60fb      	str	r3, [r7, #12]
            break;
340099d2:	e009      	b.n	340099e8 <RCCEx_GetUSARTCLKFreq+0x364>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
340099d4:	f7fc fe3c 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
340099d8:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
340099da:	68fa      	ldr	r2, [r7, #12]
340099dc:	68bb      	ldr	r3, [r7, #8]
340099de:	fbb2 f3f3 	udiv	r3, r2, r3
340099e2:	60fb      	str	r3, [r7, #12]
            break;
340099e4:	e000      	b.n	340099e8 <RCCEx_GetUSARTCLKFreq+0x364>
            break;
340099e6:	bf00      	nop
      break;
340099e8:	e063      	b.n	34009ab2 <RCCEx_GetUSARTCLKFreq+0x42e>
      if (LL_RCC_IC14_IsEnabled() != 0U)
340099ea:	f7f9 fc0b 	bl	34003204 <LL_RCC_IC14_IsEnabled>
340099ee:	4603      	mov	r3, r0
340099f0:	2b00      	cmp	r3, #0
340099f2:	d060      	beq.n	34009ab6 <RCCEx_GetUSARTCLKFreq+0x432>
        ic_divider = LL_RCC_IC14_GetDivider();
340099f4:	f7f9 fc28 	bl	34003248 <LL_RCC_IC14_GetDivider>
340099f8:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC14_GetSource())
340099fa:	f7f9 fc17 	bl	3400322c <LL_RCC_IC14_GetSource>
340099fe:	4603      	mov	r3, r0
34009a00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009a04:	d029      	beq.n	34009a5a <RCCEx_GetUSARTCLKFreq+0x3d6>
34009a06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009a0a:	d82f      	bhi.n	34009a6c <RCCEx_GetUSARTCLKFreq+0x3e8>
34009a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009a10:	d01a      	beq.n	34009a48 <RCCEx_GetUSARTCLKFreq+0x3c4>
34009a12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009a16:	d829      	bhi.n	34009a6c <RCCEx_GetUSARTCLKFreq+0x3e8>
34009a18:	2b00      	cmp	r3, #0
34009a1a:	d003      	beq.n	34009a24 <RCCEx_GetUSARTCLKFreq+0x3a0>
34009a1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009a20:	d009      	beq.n	34009a36 <RCCEx_GetUSARTCLKFreq+0x3b2>
            break;
34009a22:	e023      	b.n	34009a6c <RCCEx_GetUSARTCLKFreq+0x3e8>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009a24:	f7fc fd42 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34009a28:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34009a2a:	68fa      	ldr	r2, [r7, #12]
34009a2c:	68bb      	ldr	r3, [r7, #8]
34009a2e:	fbb2 f3f3 	udiv	r3, r2, r3
34009a32:	60fb      	str	r3, [r7, #12]
            break;
34009a34:	e01b      	b.n	34009a6e <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009a36:	f7fc fd7f 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34009a3a:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34009a3c:	68fa      	ldr	r2, [r7, #12]
34009a3e:	68bb      	ldr	r3, [r7, #8]
34009a40:	fbb2 f3f3 	udiv	r3, r2, r3
34009a44:	60fb      	str	r3, [r7, #12]
            break;
34009a46:	e012      	b.n	34009a6e <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009a48:	f7fc fdbc 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34009a4c:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34009a4e:	68fa      	ldr	r2, [r7, #12]
34009a50:	68bb      	ldr	r3, [r7, #8]
34009a52:	fbb2 f3f3 	udiv	r3, r2, r3
34009a56:	60fb      	str	r3, [r7, #12]
            break;
34009a58:	e009      	b.n	34009a6e <RCCEx_GetUSARTCLKFreq+0x3ea>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009a5a:	f7fc fdf9 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34009a5e:	60f8      	str	r0, [r7, #12]
            usart_frequency = usart_frequency / ic_divider;
34009a60:	68fa      	ldr	r2, [r7, #12]
34009a62:	68bb      	ldr	r3, [r7, #8]
34009a64:	fbb2 f3f3 	udiv	r3, r2, r3
34009a68:	60fb      	str	r3, [r7, #12]
            break;
34009a6a:	e000      	b.n	34009a6e <RCCEx_GetUSARTCLKFreq+0x3ea>
            break;
34009a6c:	bf00      	nop
      break;
34009a6e:	e022      	b.n	34009ab6 <RCCEx_GetUSARTCLKFreq+0x432>
      if (LL_RCC_HSI_IsReady() != 0U)
34009a70:	f7f8 faa4 	bl	34001fbc <LL_RCC_HSI_IsReady>
34009a74:	4603      	mov	r3, r0
34009a76:	2b00      	cmp	r3, #0
34009a78:	d01f      	beq.n	34009aba <RCCEx_GetUSARTCLKFreq+0x436>
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34009a7a:	f7f8 fab1 	bl	34001fe0 <LL_RCC_HSI_GetDivider>
34009a7e:	4603      	mov	r3, r0
34009a80:	09db      	lsrs	r3, r3, #7
34009a82:	4a13      	ldr	r2, [pc, #76]	@ (34009ad0 <RCCEx_GetUSARTCLKFreq+0x44c>)
34009a84:	fa22 f303 	lsr.w	r3, r2, r3
34009a88:	60fb      	str	r3, [r7, #12]
      break;
34009a8a:	e016      	b.n	34009aba <RCCEx_GetUSARTCLKFreq+0x436>
      if (LL_RCC_MSI_IsReady() != 0U)
34009a8c:	f7f8 fab6 	bl	34001ffc <LL_RCC_MSI_IsReady>
34009a90:	4603      	mov	r3, r0
34009a92:	2b00      	cmp	r3, #0
34009a94:	d013      	beq.n	34009abe <RCCEx_GetUSARTCLKFreq+0x43a>
        usart_frequency = MSI_VALUE;
34009a96:	4b0f      	ldr	r3, [pc, #60]	@ (34009ad4 <RCCEx_GetUSARTCLKFreq+0x450>)
34009a98:	60fb      	str	r3, [r7, #12]
      break;
34009a9a:	e010      	b.n	34009abe <RCCEx_GetUSARTCLKFreq+0x43a>
      if (LL_RCC_LSE_IsReady() != 0U)
34009a9c:	f7f8 face 	bl	3400203c <LL_RCC_LSE_IsReady>
34009aa0:	4603      	mov	r3, r0
34009aa2:	2b00      	cmp	r3, #0
34009aa4:	d00d      	beq.n	34009ac2 <RCCEx_GetUSARTCLKFreq+0x43e>
        usart_frequency = LSE_VALUE;
34009aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
34009aaa:	60fb      	str	r3, [r7, #12]
      break;
34009aac:	e009      	b.n	34009ac2 <RCCEx_GetUSARTCLKFreq+0x43e>
      break;
34009aae:	bf00      	nop
34009ab0:	e008      	b.n	34009ac4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34009ab2:	bf00      	nop
34009ab4:	e006      	b.n	34009ac4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34009ab6:	bf00      	nop
34009ab8:	e004      	b.n	34009ac4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34009aba:	bf00      	nop
34009abc:	e002      	b.n	34009ac4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34009abe:	bf00      	nop
34009ac0:	e000      	b.n	34009ac4 <RCCEx_GetUSARTCLKFreq+0x440>
      break;
34009ac2:	bf00      	nop
  }

  return usart_frequency;
34009ac4:	68fb      	ldr	r3, [r7, #12]
}
34009ac6:	4618      	mov	r0, r3
34009ac8:	3710      	adds	r7, #16
34009aca:	46bd      	mov	sp, r7
34009acc:	bd80      	pop	{r7, pc}
34009ace:	bf00      	nop
34009ad0:	03d09000 	.word	0x03d09000
34009ad4:	003d0900 	.word	0x003d0900

34009ad8 <RCCEx_GetOTGPHYCLKFreq>:
  *         @arg @ref RCCEx_USB_OTGHS2_Clock_Source
  * @retval OTGPHY clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCLKFreq(uint32_t OTGPHYxSource)
{
34009ad8:	b580      	push	{r7, lr}
34009ada:	b084      	sub	sp, #16
34009adc:	af00      	add	r7, sp, #0
34009ade:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34009ae0:	2300      	movs	r3, #0
34009ae2:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34009ae4:	6878      	ldr	r0, [r7, #4]
34009ae6:	f7f8 fe69 	bl	340027bc <LL_RCC_GetUSBClockSource>
34009aea:	4603      	mov	r3, r0
34009aec:	4a4b      	ldr	r2, [pc, #300]	@ (34009c1c <RCCEx_GetOTGPHYCLKFreq+0x144>)
34009aee:	4293      	cmp	r3, r2
34009af0:	d035      	beq.n	34009b5e <RCCEx_GetOTGPHYCLKFreq+0x86>
34009af2:	4a4a      	ldr	r2, [pc, #296]	@ (34009c1c <RCCEx_GetOTGPHYCLKFreq+0x144>)
34009af4:	4293      	cmp	r3, r2
34009af6:	f200 8085 	bhi.w	34009c04 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34009afa:	4a49      	ldr	r2, [pc, #292]	@ (34009c20 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34009afc:	4293      	cmp	r3, r2
34009afe:	d02e      	beq.n	34009b5e <RCCEx_GetOTGPHYCLKFreq+0x86>
34009b00:	4a47      	ldr	r2, [pc, #284]	@ (34009c20 <RCCEx_GetOTGPHYCLKFreq+0x148>)
34009b02:	4293      	cmp	r3, r2
34009b04:	d87e      	bhi.n	34009c04 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34009b06:	4a47      	ldr	r2, [pc, #284]	@ (34009c24 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34009b08:	4293      	cmp	r3, r2
34009b0a:	d038      	beq.n	34009b7e <RCCEx_GetOTGPHYCLKFreq+0xa6>
34009b0c:	4a45      	ldr	r2, [pc, #276]	@ (34009c24 <RCCEx_GetOTGPHYCLKFreq+0x14c>)
34009b0e:	4293      	cmp	r3, r2
34009b10:	d878      	bhi.n	34009c04 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34009b12:	4a45      	ldr	r2, [pc, #276]	@ (34009c28 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34009b14:	4293      	cmp	r3, r2
34009b16:	d032      	beq.n	34009b7e <RCCEx_GetOTGPHYCLKFreq+0xa6>
34009b18:	4a43      	ldr	r2, [pc, #268]	@ (34009c28 <RCCEx_GetOTGPHYCLKFreq+0x150>)
34009b1a:	4293      	cmp	r3, r2
34009b1c:	d872      	bhi.n	34009c04 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34009b1e:	4a43      	ldr	r2, [pc, #268]	@ (34009c2c <RCCEx_GetOTGPHYCLKFreq+0x154>)
34009b20:	4293      	cmp	r3, r2
34009b22:	d00f      	beq.n	34009b44 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34009b24:	4a41      	ldr	r2, [pc, #260]	@ (34009c2c <RCCEx_GetOTGPHYCLKFreq+0x154>)
34009b26:	4293      	cmp	r3, r2
34009b28:	d86c      	bhi.n	34009c04 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34009b2a:	4a41      	ldr	r2, [pc, #260]	@ (34009c30 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34009b2c:	4293      	cmp	r3, r2
34009b2e:	d009      	beq.n	34009b44 <RCCEx_GetOTGPHYCLKFreq+0x6c>
34009b30:	4a3f      	ldr	r2, [pc, #252]	@ (34009c30 <RCCEx_GetOTGPHYCLKFreq+0x158>)
34009b32:	4293      	cmp	r3, r2
34009b34:	d866      	bhi.n	34009c04 <RCCEx_GetOTGPHYCLKFreq+0x12c>
34009b36:	4a3f      	ldr	r2, [pc, #252]	@ (34009c34 <RCCEx_GetOTGPHYCLKFreq+0x15c>)
34009b38:	4293      	cmp	r3, r2
34009b3a:	d008      	beq.n	34009b4e <RCCEx_GetOTGPHYCLKFreq+0x76>
34009b3c:	4a3e      	ldr	r2, [pc, #248]	@ (34009c38 <RCCEx_GetOTGPHYCLKFreq+0x160>)
34009b3e:	4293      	cmp	r3, r2
34009b40:	d005      	beq.n	34009b4e <RCCEx_GetOTGPHYCLKFreq+0x76>
      }
      break;

    default:
      /* Unexpected case */
      break;
34009b42:	e05f      	b.n	34009c04 <RCCEx_GetOTGPHYCLKFreq+0x12c>
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009b44:	2007      	movs	r0, #7
34009b46:	f7fd f8b5 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34009b4a:	60f8      	str	r0, [r7, #12]
      break;
34009b4c:	e061      	b.n	34009c12 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      if (LL_RCC_HSE_IsReady() != 0U)
34009b4e:	f7f8 fa23 	bl	34001f98 <LL_RCC_HSE_IsReady>
34009b52:	4603      	mov	r3, r0
34009b54:	2b00      	cmp	r3, #0
34009b56:	d057      	beq.n	34009c08 <RCCEx_GetOTGPHYCLKFreq+0x130>
        usb_frequency = HSE_VALUE / 2U;
34009b58:	4b38      	ldr	r3, [pc, #224]	@ (34009c3c <RCCEx_GetOTGPHYCLKFreq+0x164>)
34009b5a:	60fb      	str	r3, [r7, #12]
      break;
34009b5c:	e054      	b.n	34009c08 <RCCEx_GetOTGPHYCLKFreq+0x130>
      if (LL_RCC_HSE_IsReady() != 0U)
34009b5e:	f7f8 fa1b 	bl	34001f98 <LL_RCC_HSE_IsReady>
34009b62:	4603      	mov	r3, r0
34009b64:	2b00      	cmp	r3, #0
34009b66:	d051      	beq.n	34009c0c <RCCEx_GetOTGPHYCLKFreq+0x134>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34009b68:	f7f8 fa04 	bl	34001f74 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34009b6c:	4603      	mov	r3, r0
34009b6e:	2b00      	cmp	r3, #0
34009b70:	d102      	bne.n	34009b78 <RCCEx_GetOTGPHYCLKFreq+0xa0>
          usb_frequency = HSE_VALUE;
34009b72:	4b33      	ldr	r3, [pc, #204]	@ (34009c40 <RCCEx_GetOTGPHYCLKFreq+0x168>)
34009b74:	60fb      	str	r3, [r7, #12]
      break;
34009b76:	e049      	b.n	34009c0c <RCCEx_GetOTGPHYCLKFreq+0x134>
          usb_frequency = HSE_VALUE / 2U;
34009b78:	4b30      	ldr	r3, [pc, #192]	@ (34009c3c <RCCEx_GetOTGPHYCLKFreq+0x164>)
34009b7a:	60fb      	str	r3, [r7, #12]
      break;
34009b7c:	e046      	b.n	34009c0c <RCCEx_GetOTGPHYCLKFreq+0x134>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34009b7e:	f7f9 fb81 	bl	34003284 <LL_RCC_IC15_IsEnabled>
34009b82:	4603      	mov	r3, r0
34009b84:	2b00      	cmp	r3, #0
34009b86:	d043      	beq.n	34009c10 <RCCEx_GetOTGPHYCLKFreq+0x138>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34009b88:	f7f9 fb9e 	bl	340032c8 <LL_RCC_IC15_GetDivider>
34009b8c:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC15_GetSource())
34009b8e:	f7f9 fb8d 	bl	340032ac <LL_RCC_IC15_GetSource>
34009b92:	4603      	mov	r3, r0
34009b94:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009b98:	d029      	beq.n	34009bee <RCCEx_GetOTGPHYCLKFreq+0x116>
34009b9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009b9e:	d82f      	bhi.n	34009c00 <RCCEx_GetOTGPHYCLKFreq+0x128>
34009ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009ba4:	d01a      	beq.n	34009bdc <RCCEx_GetOTGPHYCLKFreq+0x104>
34009ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009baa:	d829      	bhi.n	34009c00 <RCCEx_GetOTGPHYCLKFreq+0x128>
34009bac:	2b00      	cmp	r3, #0
34009bae:	d003      	beq.n	34009bb8 <RCCEx_GetOTGPHYCLKFreq+0xe0>
34009bb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009bb4:	d009      	beq.n	34009bca <RCCEx_GetOTGPHYCLKFreq+0xf2>
            break;
34009bb6:	e023      	b.n	34009c00 <RCCEx_GetOTGPHYCLKFreq+0x128>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009bb8:	f7fc fc78 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34009bbc:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34009bbe:	68fa      	ldr	r2, [r7, #12]
34009bc0:	68bb      	ldr	r3, [r7, #8]
34009bc2:	fbb2 f3f3 	udiv	r3, r2, r3
34009bc6:	60fb      	str	r3, [r7, #12]
            break;
34009bc8:	e01b      	b.n	34009c02 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009bca:	f7fc fcb5 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34009bce:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34009bd0:	68fa      	ldr	r2, [r7, #12]
34009bd2:	68bb      	ldr	r3, [r7, #8]
34009bd4:	fbb2 f3f3 	udiv	r3, r2, r3
34009bd8:	60fb      	str	r3, [r7, #12]
            break;
34009bda:	e012      	b.n	34009c02 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009bdc:	f7fc fcf2 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34009be0:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34009be2:	68fa      	ldr	r2, [r7, #12]
34009be4:	68bb      	ldr	r3, [r7, #8]
34009be6:	fbb2 f3f3 	udiv	r3, r2, r3
34009bea:	60fb      	str	r3, [r7, #12]
            break;
34009bec:	e009      	b.n	34009c02 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009bee:	f7fc fd2f 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34009bf2:	60f8      	str	r0, [r7, #12]
            usb_frequency = usb_frequency / ic_divider;
34009bf4:	68fa      	ldr	r2, [r7, #12]
34009bf6:	68bb      	ldr	r3, [r7, #8]
34009bf8:	fbb2 f3f3 	udiv	r3, r2, r3
34009bfc:	60fb      	str	r3, [r7, #12]
            break;
34009bfe:	e000      	b.n	34009c02 <RCCEx_GetOTGPHYCLKFreq+0x12a>
            break;
34009c00:	bf00      	nop
      break;
34009c02:	e005      	b.n	34009c10 <RCCEx_GetOTGPHYCLKFreq+0x138>
      break;
34009c04:	bf00      	nop
34009c06:	e004      	b.n	34009c12 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34009c08:	bf00      	nop
34009c0a:	e002      	b.n	34009c12 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34009c0c:	bf00      	nop
34009c0e:	e000      	b.n	34009c12 <RCCEx_GetOTGPHYCLKFreq+0x13a>
      break;
34009c10:	bf00      	nop
  }

  return usb_frequency;
34009c12:	68fb      	ldr	r3, [r7, #12]
}
34009c14:	4618      	mov	r0, r3
34009c16:	3710      	adds	r7, #16
34009c18:	46bd      	mov	sp, r7
34009c1a:	bd80      	pop	{r7, pc}
34009c1c:	03031414 	.word	0x03031414
34009c20:	03030c14 	.word	0x03030c14
34009c24:	03021414 	.word	0x03021414
34009c28:	03020c14 	.word	0x03020c14
34009c2c:	03011414 	.word	0x03011414
34009c30:	03010c14 	.word	0x03010c14
34009c34:	03000c14 	.word	0x03000c14
34009c38:	03001414 	.word	0x03001414
34009c3c:	016e3600 	.word	0x016e3600
34009c40:	02dc6c00 	.word	0x02dc6c00

34009c44 <RCCEx_GetOTGPHYCKREFCLKFreq>:
  *         @arg @ref RCCEx_USBPHY2_Clock_Source
  * @retval OTGPHYCKREF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready or Disabled
  */
static uint32_t RCCEx_GetOTGPHYCKREFCLKFreq(uint32_t OTGPHYxCKREFSource)
{
34009c44:	b580      	push	{r7, lr}
34009c46:	b084      	sub	sp, #16
34009c48:	af00      	add	r7, sp, #0
34009c4a:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34009c4c:	2300      	movs	r3, #0
34009c4e:	60fb      	str	r3, [r7, #12]

  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
34009c50:	6878      	ldr	r0, [r7, #4]
34009c52:	f7f8 fdb3 	bl	340027bc <LL_RCC_GetUSBClockSource>
34009c56:	4603      	mov	r3, r0
34009c58:	4a1a      	ldr	r2, [pc, #104]	@ (34009cc4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34009c5a:	4293      	cmp	r3, r2
34009c5c:	d00f      	beq.n	34009c7e <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34009c5e:	4a19      	ldr	r2, [pc, #100]	@ (34009cc4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x80>)
34009c60:	4293      	cmp	r3, r2
34009c62:	d826      	bhi.n	34009cb2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34009c64:	4a18      	ldr	r2, [pc, #96]	@ (34009cc8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34009c66:	4293      	cmp	r3, r2
34009c68:	d009      	beq.n	34009c7e <RCCEx_GetOTGPHYCKREFCLKFreq+0x3a>
34009c6a:	4a17      	ldr	r2, [pc, #92]	@ (34009cc8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x84>)
34009c6c:	4293      	cmp	r3, r2
34009c6e:	d820      	bhi.n	34009cb2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
34009c70:	4a16      	ldr	r2, [pc, #88]	@ (34009ccc <RCCEx_GetOTGPHYCKREFCLKFreq+0x88>)
34009c72:	4293      	cmp	r3, r2
34009c74:	d013      	beq.n	34009c9e <RCCEx_GetOTGPHYCKREFCLKFreq+0x5a>
34009c76:	4a16      	ldr	r2, [pc, #88]	@ (34009cd0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x8c>)
34009c78:	4293      	cmp	r3, r2
34009c7a:	d015      	beq.n	34009ca8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x64>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
      break;

    default:
      /* Unexpected case */
      break;
34009c7c:	e019      	b.n	34009cb2 <RCCEx_GetOTGPHYCKREFCLKFreq+0x6e>
      if (LL_RCC_HSE_IsReady() != 0U)
34009c7e:	f7f8 f98b 	bl	34001f98 <LL_RCC_HSE_IsReady>
34009c82:	4603      	mov	r3, r0
34009c84:	2b00      	cmp	r3, #0
34009c86:	d016      	beq.n	34009cb6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34009c88:	f7f8 f974 	bl	34001f74 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
34009c8c:	4603      	mov	r3, r0
34009c8e:	2b00      	cmp	r3, #0
34009c90:	d102      	bne.n	34009c98 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>
          usb_frequency = HSE_VALUE;
34009c92:	4b10      	ldr	r3, [pc, #64]	@ (34009cd4 <RCCEx_GetOTGPHYCKREFCLKFreq+0x90>)
34009c94:	60fb      	str	r3, [r7, #12]
      break;
34009c96:	e00e      	b.n	34009cb6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
          usb_frequency = HSE_VALUE / 2U;
34009c98:	4b0f      	ldr	r3, [pc, #60]	@ (34009cd8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x94>)
34009c9a:	60fb      	str	r3, [r7, #12]
      break;
34009c9c:	e00b      	b.n	34009cb6 <RCCEx_GetOTGPHYCKREFCLKFreq+0x72>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34009c9e:	480f      	ldr	r0, [pc, #60]	@ (34009cdc <RCCEx_GetOTGPHYCKREFCLKFreq+0x98>)
34009ca0:	f7ff ff1a 	bl	34009ad8 <RCCEx_GetOTGPHYCLKFreq>
34009ca4:	60f8      	str	r0, [r7, #12]
      break;
34009ca6:	e007      	b.n	34009cb8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34009ca8:	480d      	ldr	r0, [pc, #52]	@ (34009ce0 <RCCEx_GetOTGPHYCKREFCLKFreq+0x9c>)
34009caa:	f7ff ff15 	bl	34009ad8 <RCCEx_GetOTGPHYCLKFreq>
34009cae:	60f8      	str	r0, [r7, #12]
      break;
34009cb0:	e002      	b.n	34009cb8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
34009cb2:	bf00      	nop
34009cb4:	e000      	b.n	34009cb8 <RCCEx_GetOTGPHYCKREFCLKFreq+0x74>
      break;
34009cb6:	bf00      	nop
  }

  return usb_frequency;
34009cb8:	68fb      	ldr	r3, [r7, #12]
}
34009cba:	4618      	mov	r0, r3
34009cbc:	3710      	adds	r7, #16
34009cbe:	46bd      	mov	sp, r7
34009cc0:	bd80      	pop	{r7, pc}
34009cc2:	bf00      	nop
34009cc4:	01011814 	.word	0x01011814
34009cc8:	01011014 	.word	0x01011014
34009ccc:	01001014 	.word	0x01001014
34009cd0:	01001814 	.word	0x01001814
34009cd4:	02dc6c00 	.word	0x02dc6c00
34009cd8:	016e3600 	.word	0x016e3600
34009cdc:	03000c14 	.word	0x03000c14
34009ce0:	03001414 	.word	0x03001414

34009ce4 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34009ce4:	b580      	push	{r7, lr}
34009ce6:	b084      	sub	sp, #16
34009ce8:	af00      	add	r7, sp, #0
34009cea:	6078      	str	r0, [r7, #4]
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34009cec:	2300      	movs	r3, #0
34009cee:	60fb      	str	r3, [r7, #12]
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34009cf0:	6878      	ldr	r0, [r7, #4]
34009cf2:	f7f8 fd6f 	bl	340027d4 <LL_RCC_GetXSPIClockSource>
34009cf6:	4603      	mov	r3, r0
34009cf8:	4a76      	ldr	r2, [pc, #472]	@ (34009ed4 <RCCEx_GetXSPICLKFreq+0x1f0>)
34009cfa:	4293      	cmp	r3, r2
34009cfc:	f000 809d 	beq.w	34009e3a <RCCEx_GetXSPICLKFreq+0x156>
34009d00:	4a74      	ldr	r2, [pc, #464]	@ (34009ed4 <RCCEx_GetXSPICLKFreq+0x1f0>)
34009d02:	4293      	cmp	r3, r2
34009d04:	f200 80dc 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d08:	4a73      	ldr	r2, [pc, #460]	@ (34009ed8 <RCCEx_GetXSPICLKFreq+0x1f4>)
34009d0a:	4293      	cmp	r3, r2
34009d0c:	f000 8095 	beq.w	34009e3a <RCCEx_GetXSPICLKFreq+0x156>
34009d10:	4a71      	ldr	r2, [pc, #452]	@ (34009ed8 <RCCEx_GetXSPICLKFreq+0x1f4>)
34009d12:	4293      	cmp	r3, r2
34009d14:	f200 80d4 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d18:	4a70      	ldr	r2, [pc, #448]	@ (34009edc <RCCEx_GetXSPICLKFreq+0x1f8>)
34009d1a:	4293      	cmp	r3, r2
34009d1c:	f000 808d 	beq.w	34009e3a <RCCEx_GetXSPICLKFreq+0x156>
34009d20:	4a6e      	ldr	r2, [pc, #440]	@ (34009edc <RCCEx_GetXSPICLKFreq+0x1f8>)
34009d22:	4293      	cmp	r3, r2
34009d24:	f200 80cc 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d28:	4a6d      	ldr	r2, [pc, #436]	@ (34009ee0 <RCCEx_GetXSPICLKFreq+0x1fc>)
34009d2a:	4293      	cmp	r3, r2
34009d2c:	d041      	beq.n	34009db2 <RCCEx_GetXSPICLKFreq+0xce>
34009d2e:	4a6c      	ldr	r2, [pc, #432]	@ (34009ee0 <RCCEx_GetXSPICLKFreq+0x1fc>)
34009d30:	4293      	cmp	r3, r2
34009d32:	f200 80c5 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d36:	4a6b      	ldr	r2, [pc, #428]	@ (34009ee4 <RCCEx_GetXSPICLKFreq+0x200>)
34009d38:	4293      	cmp	r3, r2
34009d3a:	d03a      	beq.n	34009db2 <RCCEx_GetXSPICLKFreq+0xce>
34009d3c:	4a69      	ldr	r2, [pc, #420]	@ (34009ee4 <RCCEx_GetXSPICLKFreq+0x200>)
34009d3e:	4293      	cmp	r3, r2
34009d40:	f200 80be 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d44:	4a68      	ldr	r2, [pc, #416]	@ (34009ee8 <RCCEx_GetXSPICLKFreq+0x204>)
34009d46:	4293      	cmp	r3, r2
34009d48:	d033      	beq.n	34009db2 <RCCEx_GetXSPICLKFreq+0xce>
34009d4a:	4a67      	ldr	r2, [pc, #412]	@ (34009ee8 <RCCEx_GetXSPICLKFreq+0x204>)
34009d4c:	4293      	cmp	r3, r2
34009d4e:	f200 80b7 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d52:	4a66      	ldr	r2, [pc, #408]	@ (34009eec <RCCEx_GetXSPICLKFreq+0x208>)
34009d54:	4293      	cmp	r3, r2
34009d56:	d027      	beq.n	34009da8 <RCCEx_GetXSPICLKFreq+0xc4>
34009d58:	4a64      	ldr	r2, [pc, #400]	@ (34009eec <RCCEx_GetXSPICLKFreq+0x208>)
34009d5a:	4293      	cmp	r3, r2
34009d5c:	f200 80b0 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d60:	4a63      	ldr	r2, [pc, #396]	@ (34009ef0 <RCCEx_GetXSPICLKFreq+0x20c>)
34009d62:	4293      	cmp	r3, r2
34009d64:	d020      	beq.n	34009da8 <RCCEx_GetXSPICLKFreq+0xc4>
34009d66:	4a62      	ldr	r2, [pc, #392]	@ (34009ef0 <RCCEx_GetXSPICLKFreq+0x20c>)
34009d68:	4293      	cmp	r3, r2
34009d6a:	f200 80a9 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d6e:	4a61      	ldr	r2, [pc, #388]	@ (34009ef4 <RCCEx_GetXSPICLKFreq+0x210>)
34009d70:	4293      	cmp	r3, r2
34009d72:	d019      	beq.n	34009da8 <RCCEx_GetXSPICLKFreq+0xc4>
34009d74:	4a5f      	ldr	r2, [pc, #380]	@ (34009ef4 <RCCEx_GetXSPICLKFreq+0x210>)
34009d76:	4293      	cmp	r3, r2
34009d78:	f200 80a2 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d7c:	4a5e      	ldr	r2, [pc, #376]	@ (34009ef8 <RCCEx_GetXSPICLKFreq+0x214>)
34009d7e:	4293      	cmp	r3, r2
34009d80:	d00a      	beq.n	34009d98 <RCCEx_GetXSPICLKFreq+0xb4>
34009d82:	4a5d      	ldr	r2, [pc, #372]	@ (34009ef8 <RCCEx_GetXSPICLKFreq+0x214>)
34009d84:	4293      	cmp	r3, r2
34009d86:	f200 809b 	bhi.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
34009d8a:	4a5c      	ldr	r2, [pc, #368]	@ (34009efc <RCCEx_GetXSPICLKFreq+0x218>)
34009d8c:	4293      	cmp	r3, r2
34009d8e:	d003      	beq.n	34009d98 <RCCEx_GetXSPICLKFreq+0xb4>
34009d90:	4a5b      	ldr	r2, [pc, #364]	@ (34009f00 <RCCEx_GetXSPICLKFreq+0x21c>)
34009d92:	4293      	cmp	r3, r2
34009d94:	f040 8094 	bne.w	34009ec0 <RCCEx_GetXSPICLKFreq+0x1dc>
  {
    case LL_RCC_XSPI1_CLKSOURCE_HCLK:
    case LL_RCC_XSPI2_CLKSOURCE_HCLK:
    case LL_RCC_XSPI3_CLKSOURCE_HCLK:
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34009d98:	f7f8 f84e 	bl	34001e38 <HAL_RCC_GetSysClockFreq>
34009d9c:	4603      	mov	r3, r0
34009d9e:	4618      	mov	r0, r3
34009da0:	f7fc fc9c 	bl	340066dc <RCCEx_GetHCLKFreq>
34009da4:	60f8      	str	r0, [r7, #12]
      break;
34009da6:	e090      	b.n	34009eca <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_CLKP:
    case LL_RCC_XSPI2_CLKSOURCE_CLKP:
    case LL_RCC_XSPI3_CLKSOURCE_CLKP:
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34009da8:	2007      	movs	r0, #7
34009daa:	f7fc ff83 	bl	34006cb4 <RCCEx_GetCLKPCLKFreq>
34009dae:	60f8      	str	r0, [r7, #12]
      break;
34009db0:	e08b      	b.n	34009eca <RCCEx_GetXSPICLKFreq+0x1e6>

    case LL_RCC_XSPI1_CLKSOURCE_IC3:
    case LL_RCC_XSPI2_CLKSOURCE_IC3:
    case LL_RCC_XSPI3_CLKSOURCE_IC3:
      if (LL_RCC_IC3_IsEnabled() != 0U)
34009db2:	f7f8 ffe7 	bl	34002d84 <LL_RCC_IC3_IsEnabled>
34009db6:	4603      	mov	r3, r0
34009db8:	2b00      	cmp	r3, #0
34009dba:	f000 8083 	beq.w	34009ec4 <RCCEx_GetXSPICLKFreq+0x1e0>
      {
        ic_divider = LL_RCC_IC3_GetDivider();
34009dbe:	f7f9 f803 	bl	34002dc8 <LL_RCC_IC3_GetDivider>
34009dc2:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC3_GetSource())
34009dc4:	f7f8 fff2 	bl	34002dac <LL_RCC_IC3_GetSource>
34009dc8:	4603      	mov	r3, r0
34009dca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009dce:	d029      	beq.n	34009e24 <RCCEx_GetXSPICLKFreq+0x140>
34009dd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009dd4:	d82f      	bhi.n	34009e36 <RCCEx_GetXSPICLKFreq+0x152>
34009dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009dda:	d01a      	beq.n	34009e12 <RCCEx_GetXSPICLKFreq+0x12e>
34009ddc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009de0:	d829      	bhi.n	34009e36 <RCCEx_GetXSPICLKFreq+0x152>
34009de2:	2b00      	cmp	r3, #0
34009de4:	d003      	beq.n	34009dee <RCCEx_GetXSPICLKFreq+0x10a>
34009de6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009dea:	d009      	beq.n	34009e00 <RCCEx_GetXSPICLKFreq+0x11c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34009dec:	e023      	b.n	34009e36 <RCCEx_GetXSPICLKFreq+0x152>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009dee:	f7fc fb5d 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34009df2:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34009df4:	68fa      	ldr	r2, [r7, #12]
34009df6:	68bb      	ldr	r3, [r7, #8]
34009df8:	fbb2 f3f3 	udiv	r3, r2, r3
34009dfc:	60fb      	str	r3, [r7, #12]
            break;
34009dfe:	e01b      	b.n	34009e38 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009e00:	f7fc fb9a 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34009e04:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34009e06:	68fa      	ldr	r2, [r7, #12]
34009e08:	68bb      	ldr	r3, [r7, #8]
34009e0a:	fbb2 f3f3 	udiv	r3, r2, r3
34009e0e:	60fb      	str	r3, [r7, #12]
            break;
34009e10:	e012      	b.n	34009e38 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009e12:	f7fc fbd7 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34009e16:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34009e18:	68fa      	ldr	r2, [r7, #12]
34009e1a:	68bb      	ldr	r3, [r7, #8]
34009e1c:	fbb2 f3f3 	udiv	r3, r2, r3
34009e20:	60fb      	str	r3, [r7, #12]
            break;
34009e22:	e009      	b.n	34009e38 <RCCEx_GetXSPICLKFreq+0x154>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009e24:	f7fc fc14 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34009e28:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34009e2a:	68fa      	ldr	r2, [r7, #12]
34009e2c:	68bb      	ldr	r3, [r7, #8]
34009e2e:	fbb2 f3f3 	udiv	r3, r2, r3
34009e32:	60fb      	str	r3, [r7, #12]
            break;
34009e34:	e000      	b.n	34009e38 <RCCEx_GetXSPICLKFreq+0x154>
            break;
34009e36:	bf00      	nop
        }
      }
      break;
34009e38:	e044      	b.n	34009ec4 <RCCEx_GetXSPICLKFreq+0x1e0>

    case LL_RCC_XSPI1_CLKSOURCE_IC4:
    case LL_RCC_XSPI2_CLKSOURCE_IC4:
    case LL_RCC_XSPI3_CLKSOURCE_IC4:
      if (LL_RCC_IC4_IsEnabled() != 0U)
34009e3a:	f7f8 ffe3 	bl	34002e04 <LL_RCC_IC4_IsEnabled>
34009e3e:	4603      	mov	r3, r0
34009e40:	2b00      	cmp	r3, #0
34009e42:	d041      	beq.n	34009ec8 <RCCEx_GetXSPICLKFreq+0x1e4>
      {
        ic_divider = LL_RCC_IC4_GetDivider();
34009e44:	f7f9 f800 	bl	34002e48 <LL_RCC_IC4_GetDivider>
34009e48:	60b8      	str	r0, [r7, #8]
        switch (LL_RCC_IC4_GetSource())
34009e4a:	f7f8 ffef 	bl	34002e2c <LL_RCC_IC4_GetSource>
34009e4e:	4603      	mov	r3, r0
34009e50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009e54:	d029      	beq.n	34009eaa <RCCEx_GetXSPICLKFreq+0x1c6>
34009e56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34009e5a:	d82f      	bhi.n	34009ebc <RCCEx_GetXSPICLKFreq+0x1d8>
34009e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009e60:	d01a      	beq.n	34009e98 <RCCEx_GetXSPICLKFreq+0x1b4>
34009e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34009e66:	d829      	bhi.n	34009ebc <RCCEx_GetXSPICLKFreq+0x1d8>
34009e68:	2b00      	cmp	r3, #0
34009e6a:	d003      	beq.n	34009e74 <RCCEx_GetXSPICLKFreq+0x190>
34009e6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34009e70:	d009      	beq.n	34009e86 <RCCEx_GetXSPICLKFreq+0x1a2>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
            xspi_frequency = xspi_frequency / ic_divider;
            break;
          default:
            /* Unexpected case */
            break;
34009e72:	e023      	b.n	34009ebc <RCCEx_GetXSPICLKFreq+0x1d8>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34009e74:	f7fc fb1a 	bl	340064ac <HAL_RCCEx_GetPLL1CLKFreq>
34009e78:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34009e7a:	68fa      	ldr	r2, [r7, #12]
34009e7c:	68bb      	ldr	r3, [r7, #8]
34009e7e:	fbb2 f3f3 	udiv	r3, r2, r3
34009e82:	60fb      	str	r3, [r7, #12]
            break;
34009e84:	e01b      	b.n	34009ebe <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34009e86:	f7fc fb57 	bl	34006538 <HAL_RCCEx_GetPLL2CLKFreq>
34009e8a:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34009e8c:	68fa      	ldr	r2, [r7, #12]
34009e8e:	68bb      	ldr	r3, [r7, #8]
34009e90:	fbb2 f3f3 	udiv	r3, r2, r3
34009e94:	60fb      	str	r3, [r7, #12]
            break;
34009e96:	e012      	b.n	34009ebe <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34009e98:	f7fc fb94 	bl	340065c4 <HAL_RCCEx_GetPLL3CLKFreq>
34009e9c:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34009e9e:	68fa      	ldr	r2, [r7, #12]
34009ea0:	68bb      	ldr	r3, [r7, #8]
34009ea2:	fbb2 f3f3 	udiv	r3, r2, r3
34009ea6:	60fb      	str	r3, [r7, #12]
            break;
34009ea8:	e009      	b.n	34009ebe <RCCEx_GetXSPICLKFreq+0x1da>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34009eaa:	f7fc fbd1 	bl	34006650 <HAL_RCCEx_GetPLL4CLKFreq>
34009eae:	60f8      	str	r0, [r7, #12]
            xspi_frequency = xspi_frequency / ic_divider;
34009eb0:	68fa      	ldr	r2, [r7, #12]
34009eb2:	68bb      	ldr	r3, [r7, #8]
34009eb4:	fbb2 f3f3 	udiv	r3, r2, r3
34009eb8:	60fb      	str	r3, [r7, #12]
            break;
34009eba:	e000      	b.n	34009ebe <RCCEx_GetXSPICLKFreq+0x1da>
            break;
34009ebc:	bf00      	nop
        }
      }
      break;
34009ebe:	e003      	b.n	34009ec8 <RCCEx_GetXSPICLKFreq+0x1e4>

    default:
      /* Nothing to do */
      break;
34009ec0:	bf00      	nop
34009ec2:	e002      	b.n	34009eca <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
34009ec4:	bf00      	nop
34009ec6:	e000      	b.n	34009eca <RCCEx_GetXSPICLKFreq+0x1e6>
      break;
34009ec8:	bf00      	nop
  }

  return xspi_frequency;
34009eca:	68fb      	ldr	r3, [r7, #12]
}
34009ecc:	4618      	mov	r0, r3
34009ece:	3710      	adds	r7, #16
34009ed0:	46bd      	mov	sp, r7
34009ed2:	bd80      	pop	{r7, pc}
34009ed4:	03030814 	.word	0x03030814
34009ed8:	03030414 	.word	0x03030414
34009edc:	03030014 	.word	0x03030014
34009ee0:	03020814 	.word	0x03020814
34009ee4:	03020414 	.word	0x03020414
34009ee8:	03020014 	.word	0x03020014
34009eec:	03010814 	.word	0x03010814
34009ef0:	03010414 	.word	0x03010414
34009ef4:	03010014 	.word	0x03010014
34009ef8:	03000814 	.word	0x03000814
34009efc:	03000014 	.word	0x03000014
34009f00:	03000414 	.word	0x03000414

34009f04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
34009f04:	b580      	push	{r7, lr}
34009f06:	b082      	sub	sp, #8
34009f08:	af00      	add	r7, sp, #0
34009f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
34009f0c:	687b      	ldr	r3, [r7, #4]
34009f0e:	2b00      	cmp	r3, #0
34009f10:	d101      	bne.n	34009f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
34009f12:	2301      	movs	r3, #1
34009f14:	e042      	b.n	34009f9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
34009f16:	687b      	ldr	r3, [r7, #4]
34009f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34009f1c:	2b00      	cmp	r3, #0
34009f1e:	d106      	bne.n	34009f2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
34009f20:	687b      	ldr	r3, [r7, #4]
34009f22:	2200      	movs	r2, #0
34009f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
34009f28:	6878      	ldr	r0, [r7, #4]
34009f2a:	f7f6 ff9d 	bl	34000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
34009f2e:	687b      	ldr	r3, [r7, #4]
34009f30:	2224      	movs	r2, #36	@ 0x24
34009f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
34009f36:	687b      	ldr	r3, [r7, #4]
34009f38:	681b      	ldr	r3, [r3, #0]
34009f3a:	681a      	ldr	r2, [r3, #0]
34009f3c:	687b      	ldr	r3, [r7, #4]
34009f3e:	681b      	ldr	r3, [r3, #0]
34009f40:	f022 0201 	bic.w	r2, r2, #1
34009f44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
34009f46:	687b      	ldr	r3, [r7, #4]
34009f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
34009f4a:	2b00      	cmp	r3, #0
34009f4c:	d002      	beq.n	34009f54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
34009f4e:	6878      	ldr	r0, [r7, #4]
34009f50:	f000 fb6a 	bl	3400a628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
34009f54:	6878      	ldr	r0, [r7, #4]
34009f56:	f000 f97b 	bl	3400a250 <UART_SetConfig>
34009f5a:	4603      	mov	r3, r0
34009f5c:	2b01      	cmp	r3, #1
34009f5e:	d101      	bne.n	34009f64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
34009f60:	2301      	movs	r3, #1
34009f62:	e01b      	b.n	34009f9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
34009f64:	687b      	ldr	r3, [r7, #4]
34009f66:	681b      	ldr	r3, [r3, #0]
34009f68:	685a      	ldr	r2, [r3, #4]
34009f6a:	687b      	ldr	r3, [r7, #4]
34009f6c:	681b      	ldr	r3, [r3, #0]
34009f6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
34009f72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
34009f74:	687b      	ldr	r3, [r7, #4]
34009f76:	681b      	ldr	r3, [r3, #0]
34009f78:	689a      	ldr	r2, [r3, #8]
34009f7a:	687b      	ldr	r3, [r7, #4]
34009f7c:	681b      	ldr	r3, [r3, #0]
34009f7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
34009f82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
34009f84:	687b      	ldr	r3, [r7, #4]
34009f86:	681b      	ldr	r3, [r3, #0]
34009f88:	681a      	ldr	r2, [r3, #0]
34009f8a:	687b      	ldr	r3, [r7, #4]
34009f8c:	681b      	ldr	r3, [r3, #0]
34009f8e:	f042 0201 	orr.w	r2, r2, #1
34009f92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
34009f94:	6878      	ldr	r0, [r7, #4]
34009f96:	f000 fbe9 	bl	3400a76c <UART_CheckIdleState>
34009f9a:	4603      	mov	r3, r0
}
34009f9c:	4618      	mov	r0, r3
34009f9e:	3708      	adds	r7, #8
34009fa0:	46bd      	mov	sp, r7
34009fa2:	bd80      	pop	{r7, pc}

34009fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
34009fa4:	b580      	push	{r7, lr}
34009fa6:	b08a      	sub	sp, #40	@ 0x28
34009fa8:	af02      	add	r7, sp, #8
34009faa:	60f8      	str	r0, [r7, #12]
34009fac:	60b9      	str	r1, [r7, #8]
34009fae:	603b      	str	r3, [r7, #0]
34009fb0:	4613      	mov	r3, r2
34009fb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
34009fb4:	68fb      	ldr	r3, [r7, #12]
34009fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
34009fba:	2b20      	cmp	r3, #32
34009fbc:	d17b      	bne.n	3400a0b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
34009fbe:	68bb      	ldr	r3, [r7, #8]
34009fc0:	2b00      	cmp	r3, #0
34009fc2:	d002      	beq.n	34009fca <HAL_UART_Transmit+0x26>
34009fc4:	88fb      	ldrh	r3, [r7, #6]
34009fc6:	2b00      	cmp	r3, #0
34009fc8:	d101      	bne.n	34009fce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
34009fca:	2301      	movs	r3, #1
34009fcc:	e074      	b.n	3400a0b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
34009fce:	68fb      	ldr	r3, [r7, #12]
34009fd0:	2200      	movs	r2, #0
34009fd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
34009fd6:	68fb      	ldr	r3, [r7, #12]
34009fd8:	2221      	movs	r2, #33	@ 0x21
34009fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
34009fde:	f7f7 fb81 	bl	340016e4 <HAL_GetTick>
34009fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
34009fe4:	68fb      	ldr	r3, [r7, #12]
34009fe6:	88fa      	ldrh	r2, [r7, #6]
34009fe8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
34009fec:	68fb      	ldr	r3, [r7, #12]
34009fee:	88fa      	ldrh	r2, [r7, #6]
34009ff0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
34009ff4:	68fb      	ldr	r3, [r7, #12]
34009ff6:	689b      	ldr	r3, [r3, #8]
34009ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
34009ffc:	d108      	bne.n	3400a010 <HAL_UART_Transmit+0x6c>
34009ffe:	68fb      	ldr	r3, [r7, #12]
3400a000:	691b      	ldr	r3, [r3, #16]
3400a002:	2b00      	cmp	r3, #0
3400a004:	d104      	bne.n	3400a010 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
3400a006:	2300      	movs	r3, #0
3400a008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
3400a00a:	68bb      	ldr	r3, [r7, #8]
3400a00c:	61bb      	str	r3, [r7, #24]
3400a00e:	e003      	b.n	3400a018 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
3400a010:	68bb      	ldr	r3, [r7, #8]
3400a012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
3400a014:	2300      	movs	r3, #0
3400a016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
3400a018:	e030      	b.n	3400a07c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
3400a01a:	683b      	ldr	r3, [r7, #0]
3400a01c:	9300      	str	r3, [sp, #0]
3400a01e:	697b      	ldr	r3, [r7, #20]
3400a020:	2200      	movs	r2, #0
3400a022:	2180      	movs	r1, #128	@ 0x80
3400a024:	68f8      	ldr	r0, [r7, #12]
3400a026:	f000 fc4b 	bl	3400a8c0 <UART_WaitOnFlagUntilTimeout>
3400a02a:	4603      	mov	r3, r0
3400a02c:	2b00      	cmp	r3, #0
3400a02e:	d005      	beq.n	3400a03c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
3400a030:	68fb      	ldr	r3, [r7, #12]
3400a032:	2220      	movs	r2, #32
3400a034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
3400a038:	2303      	movs	r3, #3
3400a03a:	e03d      	b.n	3400a0b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
3400a03c:	69fb      	ldr	r3, [r7, #28]
3400a03e:	2b00      	cmp	r3, #0
3400a040:	d10b      	bne.n	3400a05a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
3400a042:	69bb      	ldr	r3, [r7, #24]
3400a044:	881b      	ldrh	r3, [r3, #0]
3400a046:	461a      	mov	r2, r3
3400a048:	68fb      	ldr	r3, [r7, #12]
3400a04a:	681b      	ldr	r3, [r3, #0]
3400a04c:	f3c2 0208 	ubfx	r2, r2, #0, #9
3400a050:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
3400a052:	69bb      	ldr	r3, [r7, #24]
3400a054:	3302      	adds	r3, #2
3400a056:	61bb      	str	r3, [r7, #24]
3400a058:	e007      	b.n	3400a06a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
3400a05a:	69fb      	ldr	r3, [r7, #28]
3400a05c:	781a      	ldrb	r2, [r3, #0]
3400a05e:	68fb      	ldr	r3, [r7, #12]
3400a060:	681b      	ldr	r3, [r3, #0]
3400a062:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
3400a064:	69fb      	ldr	r3, [r7, #28]
3400a066:	3301      	adds	r3, #1
3400a068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
3400a06a:	68fb      	ldr	r3, [r7, #12]
3400a06c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3400a070:	b29b      	uxth	r3, r3
3400a072:	3b01      	subs	r3, #1
3400a074:	b29a      	uxth	r2, r3
3400a076:	68fb      	ldr	r3, [r7, #12]
3400a078:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
3400a07c:	68fb      	ldr	r3, [r7, #12]
3400a07e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
3400a082:	b29b      	uxth	r3, r3
3400a084:	2b00      	cmp	r3, #0
3400a086:	d1c8      	bne.n	3400a01a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
3400a088:	683b      	ldr	r3, [r7, #0]
3400a08a:	9300      	str	r3, [sp, #0]
3400a08c:	697b      	ldr	r3, [r7, #20]
3400a08e:	2200      	movs	r2, #0
3400a090:	2140      	movs	r1, #64	@ 0x40
3400a092:	68f8      	ldr	r0, [r7, #12]
3400a094:	f000 fc14 	bl	3400a8c0 <UART_WaitOnFlagUntilTimeout>
3400a098:	4603      	mov	r3, r0
3400a09a:	2b00      	cmp	r3, #0
3400a09c:	d005      	beq.n	3400a0aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
3400a09e:	68fb      	ldr	r3, [r7, #12]
3400a0a0:	2220      	movs	r2, #32
3400a0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
3400a0a6:	2303      	movs	r3, #3
3400a0a8:	e006      	b.n	3400a0b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
3400a0aa:	68fb      	ldr	r3, [r7, #12]
3400a0ac:	2220      	movs	r2, #32
3400a0ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
3400a0b2:	2300      	movs	r3, #0
3400a0b4:	e000      	b.n	3400a0b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
3400a0b6:	2302      	movs	r3, #2
  }
}
3400a0b8:	4618      	mov	r0, r3
3400a0ba:	3720      	adds	r7, #32
3400a0bc:	46bd      	mov	sp, r7
3400a0be:	bd80      	pop	{r7, pc}

3400a0c0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
3400a0c0:	b580      	push	{r7, lr}
3400a0c2:	b08a      	sub	sp, #40	@ 0x28
3400a0c4:	af02      	add	r7, sp, #8
3400a0c6:	60f8      	str	r0, [r7, #12]
3400a0c8:	60b9      	str	r1, [r7, #8]
3400a0ca:	603b      	str	r3, [r7, #0]
3400a0cc:	4613      	mov	r3, r2
3400a0ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
3400a0d0:	68fb      	ldr	r3, [r7, #12]
3400a0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
3400a0d6:	2b20      	cmp	r3, #32
3400a0d8:	f040 80b5 	bne.w	3400a246 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
3400a0dc:	68bb      	ldr	r3, [r7, #8]
3400a0de:	2b00      	cmp	r3, #0
3400a0e0:	d002      	beq.n	3400a0e8 <HAL_UART_Receive+0x28>
3400a0e2:	88fb      	ldrh	r3, [r7, #6]
3400a0e4:	2b00      	cmp	r3, #0
3400a0e6:	d101      	bne.n	3400a0ec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
3400a0e8:	2301      	movs	r3, #1
3400a0ea:	e0ad      	b.n	3400a248 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a0ec:	68fb      	ldr	r3, [r7, #12]
3400a0ee:	2200      	movs	r2, #0
3400a0f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
3400a0f4:	68fb      	ldr	r3, [r7, #12]
3400a0f6:	2222      	movs	r2, #34	@ 0x22
3400a0f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a0fc:	68fb      	ldr	r3, [r7, #12]
3400a0fe:	2200      	movs	r2, #0
3400a100:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
3400a102:	f7f7 faef 	bl	340016e4 <HAL_GetTick>
3400a106:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
3400a108:	68fb      	ldr	r3, [r7, #12]
3400a10a:	88fa      	ldrh	r2, [r7, #6]
3400a10c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
3400a110:	68fb      	ldr	r3, [r7, #12]
3400a112:	88fa      	ldrh	r2, [r7, #6]
3400a114:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
3400a118:	68fb      	ldr	r3, [r7, #12]
3400a11a:	689b      	ldr	r3, [r3, #8]
3400a11c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400a120:	d10e      	bne.n	3400a140 <HAL_UART_Receive+0x80>
3400a122:	68fb      	ldr	r3, [r7, #12]
3400a124:	691b      	ldr	r3, [r3, #16]
3400a126:	2b00      	cmp	r3, #0
3400a128:	d105      	bne.n	3400a136 <HAL_UART_Receive+0x76>
3400a12a:	68fb      	ldr	r3, [r7, #12]
3400a12c:	f240 12ff 	movw	r2, #511	@ 0x1ff
3400a130:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
3400a134:	e02d      	b.n	3400a192 <HAL_UART_Receive+0xd2>
3400a136:	68fb      	ldr	r3, [r7, #12]
3400a138:	22ff      	movs	r2, #255	@ 0xff
3400a13a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
3400a13e:	e028      	b.n	3400a192 <HAL_UART_Receive+0xd2>
3400a140:	68fb      	ldr	r3, [r7, #12]
3400a142:	689b      	ldr	r3, [r3, #8]
3400a144:	2b00      	cmp	r3, #0
3400a146:	d10d      	bne.n	3400a164 <HAL_UART_Receive+0xa4>
3400a148:	68fb      	ldr	r3, [r7, #12]
3400a14a:	691b      	ldr	r3, [r3, #16]
3400a14c:	2b00      	cmp	r3, #0
3400a14e:	d104      	bne.n	3400a15a <HAL_UART_Receive+0x9a>
3400a150:	68fb      	ldr	r3, [r7, #12]
3400a152:	22ff      	movs	r2, #255	@ 0xff
3400a154:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
3400a158:	e01b      	b.n	3400a192 <HAL_UART_Receive+0xd2>
3400a15a:	68fb      	ldr	r3, [r7, #12]
3400a15c:	227f      	movs	r2, #127	@ 0x7f
3400a15e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
3400a162:	e016      	b.n	3400a192 <HAL_UART_Receive+0xd2>
3400a164:	68fb      	ldr	r3, [r7, #12]
3400a166:	689b      	ldr	r3, [r3, #8]
3400a168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3400a16c:	d10d      	bne.n	3400a18a <HAL_UART_Receive+0xca>
3400a16e:	68fb      	ldr	r3, [r7, #12]
3400a170:	691b      	ldr	r3, [r3, #16]
3400a172:	2b00      	cmp	r3, #0
3400a174:	d104      	bne.n	3400a180 <HAL_UART_Receive+0xc0>
3400a176:	68fb      	ldr	r3, [r7, #12]
3400a178:	227f      	movs	r2, #127	@ 0x7f
3400a17a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
3400a17e:	e008      	b.n	3400a192 <HAL_UART_Receive+0xd2>
3400a180:	68fb      	ldr	r3, [r7, #12]
3400a182:	223f      	movs	r2, #63	@ 0x3f
3400a184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
3400a188:	e003      	b.n	3400a192 <HAL_UART_Receive+0xd2>
3400a18a:	68fb      	ldr	r3, [r7, #12]
3400a18c:	2200      	movs	r2, #0
3400a18e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
3400a192:	68fb      	ldr	r3, [r7, #12]
3400a194:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
3400a198:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
3400a19a:	68fb      	ldr	r3, [r7, #12]
3400a19c:	689b      	ldr	r3, [r3, #8]
3400a19e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
3400a1a2:	d108      	bne.n	3400a1b6 <HAL_UART_Receive+0xf6>
3400a1a4:	68fb      	ldr	r3, [r7, #12]
3400a1a6:	691b      	ldr	r3, [r3, #16]
3400a1a8:	2b00      	cmp	r3, #0
3400a1aa:	d104      	bne.n	3400a1b6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
3400a1ac:	2300      	movs	r3, #0
3400a1ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
3400a1b0:	68bb      	ldr	r3, [r7, #8]
3400a1b2:	61bb      	str	r3, [r7, #24]
3400a1b4:	e003      	b.n	3400a1be <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
3400a1b6:	68bb      	ldr	r3, [r7, #8]
3400a1b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
3400a1ba:	2300      	movs	r3, #0
3400a1bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
3400a1be:	e036      	b.n	3400a22e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
3400a1c0:	683b      	ldr	r3, [r7, #0]
3400a1c2:	9300      	str	r3, [sp, #0]
3400a1c4:	697b      	ldr	r3, [r7, #20]
3400a1c6:	2200      	movs	r2, #0
3400a1c8:	2120      	movs	r1, #32
3400a1ca:	68f8      	ldr	r0, [r7, #12]
3400a1cc:	f000 fb78 	bl	3400a8c0 <UART_WaitOnFlagUntilTimeout>
3400a1d0:	4603      	mov	r3, r0
3400a1d2:	2b00      	cmp	r3, #0
3400a1d4:	d005      	beq.n	3400a1e2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
3400a1d6:	68fb      	ldr	r3, [r7, #12]
3400a1d8:	2220      	movs	r2, #32
3400a1da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
3400a1de:	2303      	movs	r3, #3
3400a1e0:	e032      	b.n	3400a248 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
3400a1e2:	69fb      	ldr	r3, [r7, #28]
3400a1e4:	2b00      	cmp	r3, #0
3400a1e6:	d10c      	bne.n	3400a202 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
3400a1e8:	68fb      	ldr	r3, [r7, #12]
3400a1ea:	681b      	ldr	r3, [r3, #0]
3400a1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a1ee:	b29a      	uxth	r2, r3
3400a1f0:	8a7b      	ldrh	r3, [r7, #18]
3400a1f2:	4013      	ands	r3, r2
3400a1f4:	b29a      	uxth	r2, r3
3400a1f6:	69bb      	ldr	r3, [r7, #24]
3400a1f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
3400a1fa:	69bb      	ldr	r3, [r7, #24]
3400a1fc:	3302      	adds	r3, #2
3400a1fe:	61bb      	str	r3, [r7, #24]
3400a200:	e00c      	b.n	3400a21c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
3400a202:	68fb      	ldr	r3, [r7, #12]
3400a204:	681b      	ldr	r3, [r3, #0]
3400a206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a208:	b2da      	uxtb	r2, r3
3400a20a:	8a7b      	ldrh	r3, [r7, #18]
3400a20c:	b2db      	uxtb	r3, r3
3400a20e:	4013      	ands	r3, r2
3400a210:	b2da      	uxtb	r2, r3
3400a212:	69fb      	ldr	r3, [r7, #28]
3400a214:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
3400a216:	69fb      	ldr	r3, [r7, #28]
3400a218:	3301      	adds	r3, #1
3400a21a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
3400a21c:	68fb      	ldr	r3, [r7, #12]
3400a21e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
3400a222:	b29b      	uxth	r3, r3
3400a224:	3b01      	subs	r3, #1
3400a226:	b29a      	uxth	r2, r3
3400a228:	68fb      	ldr	r3, [r7, #12]
3400a22a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
3400a22e:	68fb      	ldr	r3, [r7, #12]
3400a230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
3400a234:	b29b      	uxth	r3, r3
3400a236:	2b00      	cmp	r3, #0
3400a238:	d1c2      	bne.n	3400a1c0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
3400a23a:	68fb      	ldr	r3, [r7, #12]
3400a23c:	2220      	movs	r2, #32
3400a23e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
3400a242:	2300      	movs	r3, #0
3400a244:	e000      	b.n	3400a248 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
3400a246:	2302      	movs	r3, #2
  }
}
3400a248:	4618      	mov	r0, r3
3400a24a:	3720      	adds	r7, #32
3400a24c:	46bd      	mov	sp, r7
3400a24e:	bd80      	pop	{r7, pc}

3400a250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
3400a250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
3400a254:	b090      	sub	sp, #64	@ 0x40
3400a256:	af00      	add	r7, sp, #0
3400a258:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint64_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
3400a25a:	2300      	movs	r3, #0
3400a25c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
3400a260:	697b      	ldr	r3, [r7, #20]
3400a262:	681b      	ldr	r3, [r3, #0]
3400a264:	4aa3      	ldr	r2, [pc, #652]	@ (3400a4f4 <UART_SetConfig+0x2a4>)
3400a266:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
3400a268:	697b      	ldr	r3, [r7, #20]
3400a26a:	689a      	ldr	r2, [r3, #8]
3400a26c:	697b      	ldr	r3, [r7, #20]
3400a26e:	691b      	ldr	r3, [r3, #16]
3400a270:	431a      	orrs	r2, r3
3400a272:	697b      	ldr	r3, [r7, #20]
3400a274:	695b      	ldr	r3, [r3, #20]
3400a276:	431a      	orrs	r2, r3
3400a278:	697b      	ldr	r3, [r7, #20]
3400a27a:	69db      	ldr	r3, [r3, #28]
3400a27c:	4313      	orrs	r3, r2
3400a27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
3400a280:	697b      	ldr	r3, [r7, #20]
3400a282:	681b      	ldr	r3, [r3, #0]
3400a284:	681a      	ldr	r2, [r3, #0]
3400a286:	4b9c      	ldr	r3, [pc, #624]	@ (3400a4f8 <UART_SetConfig+0x2a8>)
3400a288:	4013      	ands	r3, r2
3400a28a:	697a      	ldr	r2, [r7, #20]
3400a28c:	6812      	ldr	r2, [r2, #0]
3400a28e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3400a290:	430b      	orrs	r3, r1
3400a292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
3400a294:	697b      	ldr	r3, [r7, #20]
3400a296:	681b      	ldr	r3, [r3, #0]
3400a298:	685b      	ldr	r3, [r3, #4]
3400a29a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
3400a29e:	697b      	ldr	r3, [r7, #20]
3400a2a0:	68da      	ldr	r2, [r3, #12]
3400a2a2:	697b      	ldr	r3, [r7, #20]
3400a2a4:	681b      	ldr	r3, [r3, #0]
3400a2a6:	430a      	orrs	r2, r1
3400a2a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
3400a2aa:	697b      	ldr	r3, [r7, #20]
3400a2ac:	699b      	ldr	r3, [r3, #24]
3400a2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
3400a2b0:	697b      	ldr	r3, [r7, #20]
3400a2b2:	681b      	ldr	r3, [r3, #0]
3400a2b4:	4a8f      	ldr	r2, [pc, #572]	@ (3400a4f4 <UART_SetConfig+0x2a4>)
3400a2b6:	4293      	cmp	r3, r2
3400a2b8:	d009      	beq.n	3400a2ce <UART_SetConfig+0x7e>
3400a2ba:	697b      	ldr	r3, [r7, #20]
3400a2bc:	681b      	ldr	r3, [r3, #0]
3400a2be:	4a8f      	ldr	r2, [pc, #572]	@ (3400a4fc <UART_SetConfig+0x2ac>)
3400a2c0:	4293      	cmp	r3, r2
3400a2c2:	d004      	beq.n	3400a2ce <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
3400a2c4:	697b      	ldr	r3, [r7, #20]
3400a2c6:	6a1b      	ldr	r3, [r3, #32]
3400a2c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
3400a2ca:	4313      	orrs	r3, r2
3400a2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
3400a2ce:	697b      	ldr	r3, [r7, #20]
3400a2d0:	681b      	ldr	r3, [r3, #0]
3400a2d2:	689b      	ldr	r3, [r3, #8]
3400a2d4:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
3400a2d8:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
3400a2dc:	697a      	ldr	r2, [r7, #20]
3400a2de:	6812      	ldr	r2, [r2, #0]
3400a2e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3400a2e2:	430b      	orrs	r3, r1
3400a2e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
3400a2e6:	697b      	ldr	r3, [r7, #20]
3400a2e8:	681b      	ldr	r3, [r3, #0]
3400a2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
3400a2ec:	f023 010f 	bic.w	r1, r3, #15
3400a2f0:	697b      	ldr	r3, [r7, #20]
3400a2f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
3400a2f4:	697b      	ldr	r3, [r7, #20]
3400a2f6:	681b      	ldr	r3, [r3, #0]
3400a2f8:	430a      	orrs	r2, r1
3400a2fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
3400a2fc:	697b      	ldr	r3, [r7, #20]
3400a2fe:	681b      	ldr	r3, [r3, #0]
3400a300:	4a7f      	ldr	r2, [pc, #508]	@ (3400a500 <UART_SetConfig+0x2b0>)
3400a302:	4293      	cmp	r3, r2
3400a304:	d106      	bne.n	3400a314 <UART_SetConfig+0xc4>
3400a306:	f04f 0200 	mov.w	r2, #0
3400a30a:	f44f 7380 	mov.w	r3, #256	@ 0x100
3400a30e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a312:	e07d      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a314:	697b      	ldr	r3, [r7, #20]
3400a316:	681b      	ldr	r3, [r3, #0]
3400a318:	4a7a      	ldr	r2, [pc, #488]	@ (3400a504 <UART_SetConfig+0x2b4>)
3400a31a:	4293      	cmp	r3, r2
3400a31c:	d106      	bne.n	3400a32c <UART_SetConfig+0xdc>
3400a31e:	f04f 0200 	mov.w	r2, #0
3400a322:	f44f 7300 	mov.w	r3, #512	@ 0x200
3400a326:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a32a:	e071      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a32c:	697b      	ldr	r3, [r7, #20]
3400a32e:	681b      	ldr	r3, [r3, #0]
3400a330:	4a75      	ldr	r2, [pc, #468]	@ (3400a508 <UART_SetConfig+0x2b8>)
3400a332:	4293      	cmp	r3, r2
3400a334:	d106      	bne.n	3400a344 <UART_SetConfig+0xf4>
3400a336:	f04f 0200 	mov.w	r2, #0
3400a33a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400a33e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a342:	e065      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a344:	697b      	ldr	r3, [r7, #20]
3400a346:	681b      	ldr	r3, [r3, #0]
3400a348:	4a70      	ldr	r2, [pc, #448]	@ (3400a50c <UART_SetConfig+0x2bc>)
3400a34a:	4293      	cmp	r3, r2
3400a34c:	d106      	bne.n	3400a35c <UART_SetConfig+0x10c>
3400a34e:	f04f 0200 	mov.w	r2, #0
3400a352:	f44f 6300 	mov.w	r3, #2048	@ 0x800
3400a356:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a35a:	e059      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a35c:	697b      	ldr	r3, [r7, #20]
3400a35e:	681b      	ldr	r3, [r3, #0]
3400a360:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3400a364:	d106      	bne.n	3400a374 <UART_SetConfig+0x124>
3400a366:	f04f 0200 	mov.w	r2, #0
3400a36a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
3400a36e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a372:	e04d      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a374:	697b      	ldr	r3, [r7, #20]
3400a376:	681b      	ldr	r3, [r3, #0]
3400a378:	4a65      	ldr	r2, [pc, #404]	@ (3400a510 <UART_SetConfig+0x2c0>)
3400a37a:	4293      	cmp	r3, r2
3400a37c:	d106      	bne.n	3400a38c <UART_SetConfig+0x13c>
3400a37e:	f04f 0200 	mov.w	r2, #0
3400a382:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3400a386:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a38a:	e041      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a38c:	697b      	ldr	r3, [r7, #20]
3400a38e:	681b      	ldr	r3, [r3, #0]
3400a390:	4a60      	ldr	r2, [pc, #384]	@ (3400a514 <UART_SetConfig+0x2c4>)
3400a392:	4293      	cmp	r3, r2
3400a394:	d106      	bne.n	3400a3a4 <UART_SetConfig+0x154>
3400a396:	f04f 0200 	mov.w	r2, #0
3400a39a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3400a39e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a3a2:	e035      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a3a4:	697b      	ldr	r3, [r7, #20]
3400a3a6:	681b      	ldr	r3, [r3, #0]
3400a3a8:	4a5b      	ldr	r2, [pc, #364]	@ (3400a518 <UART_SetConfig+0x2c8>)
3400a3aa:	4293      	cmp	r3, r2
3400a3ac:	d106      	bne.n	3400a3bc <UART_SetConfig+0x16c>
3400a3ae:	f04f 0200 	mov.w	r2, #0
3400a3b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3400a3b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a3ba:	e029      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a3bc:	697b      	ldr	r3, [r7, #20]
3400a3be:	681b      	ldr	r3, [r3, #0]
3400a3c0:	4a56      	ldr	r2, [pc, #344]	@ (3400a51c <UART_SetConfig+0x2cc>)
3400a3c2:	4293      	cmp	r3, r2
3400a3c4:	d106      	bne.n	3400a3d4 <UART_SetConfig+0x184>
3400a3c6:	f04f 0200 	mov.w	r2, #0
3400a3ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
3400a3ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a3d2:	e01d      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a3d4:	697b      	ldr	r3, [r7, #20]
3400a3d6:	681b      	ldr	r3, [r3, #0]
3400a3d8:	4a51      	ldr	r2, [pc, #324]	@ (3400a520 <UART_SetConfig+0x2d0>)
3400a3da:	4293      	cmp	r3, r2
3400a3dc:	d106      	bne.n	3400a3ec <UART_SetConfig+0x19c>
3400a3de:	f04f 0200 	mov.w	r2, #0
3400a3e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
3400a3e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a3ea:	e011      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a3ec:	697b      	ldr	r3, [r7, #20]
3400a3ee:	681b      	ldr	r3, [r3, #0]
3400a3f0:	4a40      	ldr	r2, [pc, #256]	@ (3400a4f4 <UART_SetConfig+0x2a4>)
3400a3f2:	4293      	cmp	r3, r2
3400a3f4:	d106      	bne.n	3400a404 <UART_SetConfig+0x1b4>
3400a3f6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
3400a3fa:	f04f 0300 	mov.w	r3, #0
3400a3fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
3400a402:	e005      	b.n	3400a410 <UART_SetConfig+0x1c0>
3400a404:	f04f 0200 	mov.w	r2, #0
3400a408:	f04f 0300 	mov.w	r3, #0
3400a40c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
3400a410:	697b      	ldr	r3, [r7, #20]
3400a412:	681b      	ldr	r3, [r3, #0]
3400a414:	4a37      	ldr	r2, [pc, #220]	@ (3400a4f4 <UART_SetConfig+0x2a4>)
3400a416:	4293      	cmp	r3, r2
3400a418:	d005      	beq.n	3400a426 <UART_SetConfig+0x1d6>
3400a41a:	697b      	ldr	r3, [r7, #20]
3400a41c:	681b      	ldr	r3, [r3, #0]
3400a41e:	4a37      	ldr	r2, [pc, #220]	@ (3400a4fc <UART_SetConfig+0x2ac>)
3400a420:	4293      	cmp	r3, r2
3400a422:	f040 8081 	bne.w	3400a528 <UART_SetConfig+0x2d8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a426:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3400a42a:	f7fb fba3 	bl	34005b74 <HAL_RCCEx_GetPeriphCLKFreq>
3400a42e:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* If proper clock source reported */
    if (pclk != 0U)
3400a430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400a432:	2b00      	cmp	r3, #0
3400a434:	f000 80e0 	beq.w	3400a5f8 <UART_SetConfig+0x3a8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
3400a438:	697b      	ldr	r3, [r7, #20]
3400a43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a43c:	4a39      	ldr	r2, [pc, #228]	@ (3400a524 <UART_SetConfig+0x2d4>)
3400a43e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3400a442:	461a      	mov	r2, r3
3400a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400a446:	fbb3 f3f2 	udiv	r3, r3, r2
3400a44a:	61fb      	str	r3, [r7, #28]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a44c:	697b      	ldr	r3, [r7, #20]
3400a44e:	685a      	ldr	r2, [r3, #4]
3400a450:	4613      	mov	r3, r2
3400a452:	005b      	lsls	r3, r3, #1
3400a454:	4413      	add	r3, r2
3400a456:	69fa      	ldr	r2, [r7, #28]
3400a458:	429a      	cmp	r2, r3
3400a45a:	d305      	bcc.n	3400a468 <UART_SetConfig+0x218>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
3400a45c:	697b      	ldr	r3, [r7, #20]
3400a45e:	685b      	ldr	r3, [r3, #4]
3400a460:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
3400a462:	69fa      	ldr	r2, [r7, #28]
3400a464:	429a      	cmp	r2, r3
3400a466:	d903      	bls.n	3400a470 <UART_SetConfig+0x220>
      {
        ret = HAL_ERROR;
3400a468:	2301      	movs	r3, #1
3400a46a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3400a46e:	e040      	b.n	3400a4f2 <UART_SetConfig+0x2a2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400a472:	2200      	movs	r2, #0
3400a474:	60bb      	str	r3, [r7, #8]
3400a476:	60fa      	str	r2, [r7, #12]
3400a478:	697b      	ldr	r3, [r7, #20]
3400a47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a47c:	4a29      	ldr	r2, [pc, #164]	@ (3400a524 <UART_SetConfig+0x2d4>)
3400a47e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3400a482:	b29b      	uxth	r3, r3
3400a484:	2200      	movs	r2, #0
3400a486:	603b      	str	r3, [r7, #0]
3400a488:	607a      	str	r2, [r7, #4]
3400a48a:	e9d7 2300 	ldrd	r2, r3, [r7]
3400a48e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
3400a492:	f7f6 f98d 	bl	340007b0 <__aeabi_uldivmod>
3400a496:	4602      	mov	r2, r0
3400a498:	460b      	mov	r3, r1
3400a49a:	ea52 230f 	orrs.w	r3, r2, pc, lsl #8
3400a49e:	6979      	ldr	r1, [r7, #20]
3400a4a0:	6849      	ldr	r1, [r1, #4]
3400a4a2:	0849      	lsrs	r1, r1, #1
3400a4a4:	2000      	movs	r0, #0
3400a4a6:	460c      	mov	r4, r1
3400a4a8:	4605      	mov	r5, r0
3400a4aa:	eb12 0804 	adds.w	r8, r2, r4
3400a4ae:	eb43 0905 	adc.w	r9, r3, r5
3400a4b2:	697b      	ldr	r3, [r7, #20]
3400a4b4:	685b      	ldr	r3, [r3, #4]
3400a4b6:	2200      	movs	r2, #0
3400a4b8:	469a      	mov	sl, r3
3400a4ba:	4693      	mov	fp, r2
3400a4bc:	4652      	mov	r2, sl
3400a4be:	465b      	mov	r3, fp
3400a4c0:	4640      	mov	r0, r8
3400a4c2:	4649      	mov	r1, r9
3400a4c4:	f7f6 f974 	bl	340007b0 <__aeabi_uldivmod>
3400a4c8:	4602      	mov	r2, r0
3400a4ca:	460b      	mov	r3, r1
3400a4cc:	4613      	mov	r3, r2
3400a4ce:	627b      	str	r3, [r7, #36]	@ 0x24
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
3400a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a4d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
3400a4d6:	d308      	bcc.n	3400a4ea <UART_SetConfig+0x29a>
3400a4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a4da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400a4de:	d204      	bcs.n	3400a4ea <UART_SetConfig+0x29a>
        {
          huart->Instance->BRR = usartdiv;
3400a4e0:	697b      	ldr	r3, [r7, #20]
3400a4e2:	681b      	ldr	r3, [r3, #0]
3400a4e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
3400a4e6:	60da      	str	r2, [r3, #12]
3400a4e8:	e003      	b.n	3400a4f2 <UART_SetConfig+0x2a2>
        }
        else
        {
          ret = HAL_ERROR;
3400a4ea:	2301      	movs	r3, #1
3400a4ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (pclk != 0U)
3400a4f0:	e082      	b.n	3400a5f8 <UART_SetConfig+0x3a8>
3400a4f2:	e081      	b.n	3400a5f8 <UART_SetConfig+0x3a8>
3400a4f4:	56000c00 	.word	0x56000c00
3400a4f8:	cfff69f3 	.word	0xcfff69f3
3400a4fc:	46000c00 	.word	0x46000c00
3400a500:	52001000 	.word	0x52001000
3400a504:	50004400 	.word	0x50004400
3400a508:	50004800 	.word	0x50004800
3400a50c:	50004c00 	.word	0x50004c00
3400a510:	52001400 	.word	0x52001400
3400a514:	50007800 	.word	0x50007800
3400a518:	50007c00 	.word	0x50007c00
3400a51c:	52001800 	.word	0x52001800
3400a520:	52001c00 	.word	0x52001c00
3400a524:	3400d220 	.word	0x3400d220
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
3400a528:	697b      	ldr	r3, [r7, #20]
3400a52a:	69db      	ldr	r3, [r3, #28]
3400a52c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
3400a530:	d138      	bne.n	3400a5a4 <UART_SetConfig+0x354>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a532:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3400a536:	f7fb fb1d 	bl	34005b74 <HAL_RCCEx_GetPeriphCLKFreq>
3400a53a:	62b8      	str	r0, [r7, #40]	@ 0x28

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
3400a53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400a53e:	2b00      	cmp	r3, #0
3400a540:	d05a      	beq.n	3400a5f8 <UART_SetConfig+0x3a8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a542:	697b      	ldr	r3, [r7, #20]
3400a544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a546:	4a37      	ldr	r2, [pc, #220]	@ (3400a624 <UART_SetConfig+0x3d4>)
3400a548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3400a54c:	461a      	mov	r2, r3
3400a54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400a550:	fbb3 f3f2 	udiv	r3, r3, r2
3400a554:	005a      	lsls	r2, r3, #1
3400a556:	697b      	ldr	r3, [r7, #20]
3400a558:	685b      	ldr	r3, [r3, #4]
3400a55a:	085b      	lsrs	r3, r3, #1
3400a55c:	441a      	add	r2, r3
3400a55e:	697b      	ldr	r3, [r7, #20]
3400a560:	685b      	ldr	r3, [r3, #4]
3400a562:	fbb2 f3f3 	udiv	r3, r2, r3
3400a566:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a56a:	2b0f      	cmp	r3, #15
3400a56c:	d916      	bls.n	3400a59c <UART_SetConfig+0x34c>
3400a56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400a574:	d212      	bcs.n	3400a59c <UART_SetConfig+0x34c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3400a576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a578:	b29b      	uxth	r3, r3
3400a57a:	f023 030f 	bic.w	r3, r3, #15
3400a57e:	847b      	strh	r3, [r7, #34]	@ 0x22
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3400a580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a582:	085b      	lsrs	r3, r3, #1
3400a584:	b29b      	uxth	r3, r3
3400a586:	f003 0307 	and.w	r3, r3, #7
3400a58a:	b29a      	uxth	r2, r3
3400a58c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
3400a58e:	4313      	orrs	r3, r2
3400a590:	847b      	strh	r3, [r7, #34]	@ 0x22
        huart->Instance->BRR = brrtemp;
3400a592:	697b      	ldr	r3, [r7, #20]
3400a594:	681b      	ldr	r3, [r3, #0]
3400a596:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
3400a598:	60da      	str	r2, [r3, #12]
3400a59a:	e02d      	b.n	3400a5f8 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3400a59c:	2301      	movs	r3, #1
3400a59e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
3400a5a2:	e029      	b.n	3400a5f8 <UART_SetConfig+0x3a8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
3400a5a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
3400a5a8:	f7fb fae4 	bl	34005b74 <HAL_RCCEx_GetPeriphCLKFreq>
3400a5ac:	62b8      	str	r0, [r7, #40]	@ 0x28

    if (pclk != 0U)
3400a5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400a5b0:	2b00      	cmp	r3, #0
3400a5b2:	d021      	beq.n	3400a5f8 <UART_SetConfig+0x3a8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
3400a5b4:	697b      	ldr	r3, [r7, #20]
3400a5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
3400a5b8:	4a1a      	ldr	r2, [pc, #104]	@ (3400a624 <UART_SetConfig+0x3d4>)
3400a5ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
3400a5be:	461a      	mov	r2, r3
3400a5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400a5c2:	fbb3 f2f2 	udiv	r2, r3, r2
3400a5c6:	697b      	ldr	r3, [r7, #20]
3400a5c8:	685b      	ldr	r3, [r3, #4]
3400a5ca:	085b      	lsrs	r3, r3, #1
3400a5cc:	441a      	add	r2, r3
3400a5ce:	697b      	ldr	r3, [r7, #20]
3400a5d0:	685b      	ldr	r3, [r3, #4]
3400a5d2:	fbb2 f3f3 	udiv	r3, r2, r3
3400a5d6:	627b      	str	r3, [r7, #36]	@ 0x24
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3400a5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a5da:	2b0f      	cmp	r3, #15
3400a5dc:	d909      	bls.n	3400a5f2 <UART_SetConfig+0x3a2>
3400a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a5e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
3400a5e4:	d205      	bcs.n	3400a5f2 <UART_SetConfig+0x3a2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
3400a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a5e8:	b29a      	uxth	r2, r3
3400a5ea:	697b      	ldr	r3, [r7, #20]
3400a5ec:	681b      	ldr	r3, [r3, #0]
3400a5ee:	60da      	str	r2, [r3, #12]
3400a5f0:	e002      	b.n	3400a5f8 <UART_SetConfig+0x3a8>
      }
      else
      {
        ret = HAL_ERROR;
3400a5f2:	2301      	movs	r3, #1
3400a5f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
3400a5f8:	697b      	ldr	r3, [r7, #20]
3400a5fa:	2201      	movs	r2, #1
3400a5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
3400a600:	697b      	ldr	r3, [r7, #20]
3400a602:	2201      	movs	r2, #1
3400a604:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
3400a608:	697b      	ldr	r3, [r7, #20]
3400a60a:	2200      	movs	r2, #0
3400a60c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
3400a60e:	697b      	ldr	r3, [r7, #20]
3400a610:	2200      	movs	r2, #0
3400a612:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
3400a614:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
3400a618:	4618      	mov	r0, r3
3400a61a:	3740      	adds	r7, #64	@ 0x40
3400a61c:	46bd      	mov	sp, r7
3400a61e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
3400a622:	bf00      	nop
3400a624:	3400d220 	.word	0x3400d220

3400a628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
3400a628:	b480      	push	{r7}
3400a62a:	b083      	sub	sp, #12
3400a62c:	af00      	add	r7, sp, #0
3400a62e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3400a630:	687b      	ldr	r3, [r7, #4]
3400a632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a634:	f003 0308 	and.w	r3, r3, #8
3400a638:	2b00      	cmp	r3, #0
3400a63a:	d00a      	beq.n	3400a652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3400a63c:	687b      	ldr	r3, [r7, #4]
3400a63e:	681b      	ldr	r3, [r3, #0]
3400a640:	685b      	ldr	r3, [r3, #4]
3400a642:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
3400a646:	687b      	ldr	r3, [r7, #4]
3400a648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
3400a64a:	687b      	ldr	r3, [r7, #4]
3400a64c:	681b      	ldr	r3, [r3, #0]
3400a64e:	430a      	orrs	r2, r1
3400a650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3400a652:	687b      	ldr	r3, [r7, #4]
3400a654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a656:	f003 0301 	and.w	r3, r3, #1
3400a65a:	2b00      	cmp	r3, #0
3400a65c:	d00a      	beq.n	3400a674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3400a65e:	687b      	ldr	r3, [r7, #4]
3400a660:	681b      	ldr	r3, [r3, #0]
3400a662:	685b      	ldr	r3, [r3, #4]
3400a664:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
3400a668:	687b      	ldr	r3, [r7, #4]
3400a66a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
3400a66c:	687b      	ldr	r3, [r7, #4]
3400a66e:	681b      	ldr	r3, [r3, #0]
3400a670:	430a      	orrs	r2, r1
3400a672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3400a674:	687b      	ldr	r3, [r7, #4]
3400a676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a678:	f003 0302 	and.w	r3, r3, #2
3400a67c:	2b00      	cmp	r3, #0
3400a67e:	d00a      	beq.n	3400a696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3400a680:	687b      	ldr	r3, [r7, #4]
3400a682:	681b      	ldr	r3, [r3, #0]
3400a684:	685b      	ldr	r3, [r3, #4]
3400a686:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
3400a68a:	687b      	ldr	r3, [r7, #4]
3400a68c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
3400a68e:	687b      	ldr	r3, [r7, #4]
3400a690:	681b      	ldr	r3, [r3, #0]
3400a692:	430a      	orrs	r2, r1
3400a694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3400a696:	687b      	ldr	r3, [r7, #4]
3400a698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a69a:	f003 0304 	and.w	r3, r3, #4
3400a69e:	2b00      	cmp	r3, #0
3400a6a0:	d00a      	beq.n	3400a6b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3400a6a2:	687b      	ldr	r3, [r7, #4]
3400a6a4:	681b      	ldr	r3, [r3, #0]
3400a6a6:	685b      	ldr	r3, [r3, #4]
3400a6a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
3400a6ac:	687b      	ldr	r3, [r7, #4]
3400a6ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
3400a6b0:	687b      	ldr	r3, [r7, #4]
3400a6b2:	681b      	ldr	r3, [r3, #0]
3400a6b4:	430a      	orrs	r2, r1
3400a6b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3400a6b8:	687b      	ldr	r3, [r7, #4]
3400a6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a6bc:	f003 0310 	and.w	r3, r3, #16
3400a6c0:	2b00      	cmp	r3, #0
3400a6c2:	d00a      	beq.n	3400a6da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3400a6c4:	687b      	ldr	r3, [r7, #4]
3400a6c6:	681b      	ldr	r3, [r3, #0]
3400a6c8:	689b      	ldr	r3, [r3, #8]
3400a6ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
3400a6ce:	687b      	ldr	r3, [r7, #4]
3400a6d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
3400a6d2:	687b      	ldr	r3, [r7, #4]
3400a6d4:	681b      	ldr	r3, [r3, #0]
3400a6d6:	430a      	orrs	r2, r1
3400a6d8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3400a6da:	687b      	ldr	r3, [r7, #4]
3400a6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a6de:	f003 0320 	and.w	r3, r3, #32
3400a6e2:	2b00      	cmp	r3, #0
3400a6e4:	d00a      	beq.n	3400a6fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3400a6e6:	687b      	ldr	r3, [r7, #4]
3400a6e8:	681b      	ldr	r3, [r3, #0]
3400a6ea:	689b      	ldr	r3, [r3, #8]
3400a6ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
3400a6f0:	687b      	ldr	r3, [r7, #4]
3400a6f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
3400a6f4:	687b      	ldr	r3, [r7, #4]
3400a6f6:	681b      	ldr	r3, [r3, #0]
3400a6f8:	430a      	orrs	r2, r1
3400a6fa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3400a6fc:	687b      	ldr	r3, [r7, #4]
3400a6fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
3400a704:	2b00      	cmp	r3, #0
3400a706:	d01a      	beq.n	3400a73e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3400a708:	687b      	ldr	r3, [r7, #4]
3400a70a:	681b      	ldr	r3, [r3, #0]
3400a70c:	685b      	ldr	r3, [r3, #4]
3400a70e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
3400a712:	687b      	ldr	r3, [r7, #4]
3400a714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
3400a716:	687b      	ldr	r3, [r7, #4]
3400a718:	681b      	ldr	r3, [r3, #0]
3400a71a:	430a      	orrs	r2, r1
3400a71c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3400a71e:	687b      	ldr	r3, [r7, #4]
3400a720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
3400a722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
3400a726:	d10a      	bne.n	3400a73e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3400a728:	687b      	ldr	r3, [r7, #4]
3400a72a:	681b      	ldr	r3, [r3, #0]
3400a72c:	685b      	ldr	r3, [r3, #4]
3400a72e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
3400a732:	687b      	ldr	r3, [r7, #4]
3400a734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
3400a736:	687b      	ldr	r3, [r7, #4]
3400a738:	681b      	ldr	r3, [r3, #0]
3400a73a:	430a      	orrs	r2, r1
3400a73c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3400a73e:	687b      	ldr	r3, [r7, #4]
3400a740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
3400a742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
3400a746:	2b00      	cmp	r3, #0
3400a748:	d00a      	beq.n	3400a760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3400a74a:	687b      	ldr	r3, [r7, #4]
3400a74c:	681b      	ldr	r3, [r3, #0]
3400a74e:	685b      	ldr	r3, [r3, #4]
3400a750:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
3400a754:	687b      	ldr	r3, [r7, #4]
3400a756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
3400a758:	687b      	ldr	r3, [r7, #4]
3400a75a:	681b      	ldr	r3, [r3, #0]
3400a75c:	430a      	orrs	r2, r1
3400a75e:	605a      	str	r2, [r3, #4]
  }
}
3400a760:	bf00      	nop
3400a762:	370c      	adds	r7, #12
3400a764:	46bd      	mov	sp, r7
3400a766:	f85d 7b04 	ldr.w	r7, [sp], #4
3400a76a:	4770      	bx	lr

3400a76c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
3400a76c:	b580      	push	{r7, lr}
3400a76e:	b098      	sub	sp, #96	@ 0x60
3400a770:	af02      	add	r7, sp, #8
3400a772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
3400a774:	687b      	ldr	r3, [r7, #4]
3400a776:	2200      	movs	r2, #0
3400a778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
3400a77c:	f7f6 ffb2 	bl	340016e4 <HAL_GetTick>
3400a780:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3400a782:	687b      	ldr	r3, [r7, #4]
3400a784:	681b      	ldr	r3, [r3, #0]
3400a786:	681b      	ldr	r3, [r3, #0]
3400a788:	f003 0308 	and.w	r3, r3, #8
3400a78c:	2b08      	cmp	r3, #8
3400a78e:	d12f      	bne.n	3400a7f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a790:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a794:	9300      	str	r3, [sp, #0]
3400a796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3400a798:	2200      	movs	r2, #0
3400a79a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
3400a79e:	6878      	ldr	r0, [r7, #4]
3400a7a0:	f000 f88e 	bl	3400a8c0 <UART_WaitOnFlagUntilTimeout>
3400a7a4:	4603      	mov	r3, r0
3400a7a6:	2b00      	cmp	r3, #0
3400a7a8:	d022      	beq.n	3400a7f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
3400a7aa:	687b      	ldr	r3, [r7, #4]
3400a7ac:	681b      	ldr	r3, [r3, #0]
3400a7ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3400a7b2:	e853 3f00 	ldrex	r3, [r3]
3400a7b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
3400a7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3400a7ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
3400a7be:	653b      	str	r3, [r7, #80]	@ 0x50
3400a7c0:	687b      	ldr	r3, [r7, #4]
3400a7c2:	681b      	ldr	r3, [r3, #0]
3400a7c4:	461a      	mov	r2, r3
3400a7c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
3400a7c8:	647b      	str	r3, [r7, #68]	@ 0x44
3400a7ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a7cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
3400a7ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
3400a7d0:	e841 2300 	strex	r3, r2, [r1]
3400a7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
3400a7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
3400a7d8:	2b00      	cmp	r3, #0
3400a7da:	d1e6      	bne.n	3400a7aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
3400a7dc:	687b      	ldr	r3, [r7, #4]
3400a7de:	2220      	movs	r2, #32
3400a7e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
3400a7e4:	687b      	ldr	r3, [r7, #4]
3400a7e6:	2200      	movs	r2, #0
3400a7e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3400a7ec:	2303      	movs	r3, #3
3400a7ee:	e063      	b.n	3400a8b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3400a7f0:	687b      	ldr	r3, [r7, #4]
3400a7f2:	681b      	ldr	r3, [r3, #0]
3400a7f4:	681b      	ldr	r3, [r3, #0]
3400a7f6:	f003 0304 	and.w	r3, r3, #4
3400a7fa:	2b04      	cmp	r3, #4
3400a7fc:	d149      	bne.n	3400a892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3400a7fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3400a802:	9300      	str	r3, [sp, #0]
3400a804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
3400a806:	2200      	movs	r2, #0
3400a808:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
3400a80c:	6878      	ldr	r0, [r7, #4]
3400a80e:	f000 f857 	bl	3400a8c0 <UART_WaitOnFlagUntilTimeout>
3400a812:	4603      	mov	r3, r0
3400a814:	2b00      	cmp	r3, #0
3400a816:	d03c      	beq.n	3400a892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a818:	687b      	ldr	r3, [r7, #4]
3400a81a:	681b      	ldr	r3, [r3, #0]
3400a81c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400a820:	e853 3f00 	ldrex	r3, [r3]
3400a824:	623b      	str	r3, [r7, #32]
   return(result);
3400a826:	6a3b      	ldr	r3, [r7, #32]
3400a828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3400a82c:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400a82e:	687b      	ldr	r3, [r7, #4]
3400a830:	681b      	ldr	r3, [r3, #0]
3400a832:	461a      	mov	r2, r3
3400a834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3400a836:	633b      	str	r3, [r7, #48]	@ 0x30
3400a838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a83a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
3400a83c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
3400a83e:	e841 2300 	strex	r3, r2, [r1]
3400a842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
3400a844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
3400a846:	2b00      	cmp	r3, #0
3400a848:	d1e6      	bne.n	3400a818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3400a84a:	687b      	ldr	r3, [r7, #4]
3400a84c:	681b      	ldr	r3, [r3, #0]
3400a84e:	3308      	adds	r3, #8
3400a850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a852:	693b      	ldr	r3, [r7, #16]
3400a854:	e853 3f00 	ldrex	r3, [r3]
3400a858:	60fb      	str	r3, [r7, #12]
   return(result);
3400a85a:	68fb      	ldr	r3, [r7, #12]
3400a85c:	f023 0301 	bic.w	r3, r3, #1
3400a860:	64bb      	str	r3, [r7, #72]	@ 0x48
3400a862:	687b      	ldr	r3, [r7, #4]
3400a864:	681b      	ldr	r3, [r3, #0]
3400a866:	3308      	adds	r3, #8
3400a868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3400a86a:	61fa      	str	r2, [r7, #28]
3400a86c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a86e:	69b9      	ldr	r1, [r7, #24]
3400a870:	69fa      	ldr	r2, [r7, #28]
3400a872:	e841 2300 	strex	r3, r2, [r1]
3400a876:	617b      	str	r3, [r7, #20]
   return(result);
3400a878:	697b      	ldr	r3, [r7, #20]
3400a87a:	2b00      	cmp	r3, #0
3400a87c:	d1e5      	bne.n	3400a84a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
3400a87e:	687b      	ldr	r3, [r7, #4]
3400a880:	2220      	movs	r2, #32
3400a882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
3400a886:	687b      	ldr	r3, [r7, #4]
3400a888:	2200      	movs	r2, #0
3400a88a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
3400a88e:	2303      	movs	r3, #3
3400a890:	e012      	b.n	3400a8b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
3400a892:	687b      	ldr	r3, [r7, #4]
3400a894:	2220      	movs	r2, #32
3400a896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3400a89a:	687b      	ldr	r3, [r7, #4]
3400a89c:	2220      	movs	r2, #32
3400a89e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400a8a2:	687b      	ldr	r3, [r7, #4]
3400a8a4:	2200      	movs	r2, #0
3400a8a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
3400a8a8:	687b      	ldr	r3, [r7, #4]
3400a8aa:	2200      	movs	r2, #0
3400a8ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
3400a8ae:	687b      	ldr	r3, [r7, #4]
3400a8b0:	2200      	movs	r2, #0
3400a8b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3400a8b6:	2300      	movs	r3, #0
}
3400a8b8:	4618      	mov	r0, r3
3400a8ba:	3758      	adds	r7, #88	@ 0x58
3400a8bc:	46bd      	mov	sp, r7
3400a8be:	bd80      	pop	{r7, pc}

3400a8c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
3400a8c0:	b580      	push	{r7, lr}
3400a8c2:	b084      	sub	sp, #16
3400a8c4:	af00      	add	r7, sp, #0
3400a8c6:	60f8      	str	r0, [r7, #12]
3400a8c8:	60b9      	str	r1, [r7, #8]
3400a8ca:	603b      	str	r3, [r7, #0]
3400a8cc:	4613      	mov	r3, r2
3400a8ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3400a8d0:	e04f      	b.n	3400a972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
3400a8d2:	69bb      	ldr	r3, [r7, #24]
3400a8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
3400a8d8:	d04b      	beq.n	3400a972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3400a8da:	f7f6 ff03 	bl	340016e4 <HAL_GetTick>
3400a8de:	4602      	mov	r2, r0
3400a8e0:	683b      	ldr	r3, [r7, #0]
3400a8e2:	1ad3      	subs	r3, r2, r3
3400a8e4:	69ba      	ldr	r2, [r7, #24]
3400a8e6:	429a      	cmp	r2, r3
3400a8e8:	d302      	bcc.n	3400a8f0 <UART_WaitOnFlagUntilTimeout+0x30>
3400a8ea:	69bb      	ldr	r3, [r7, #24]
3400a8ec:	2b00      	cmp	r3, #0
3400a8ee:	d101      	bne.n	3400a8f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
3400a8f0:	2303      	movs	r3, #3
3400a8f2:	e04e      	b.n	3400a992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3400a8f4:	68fb      	ldr	r3, [r7, #12]
3400a8f6:	681b      	ldr	r3, [r3, #0]
3400a8f8:	681b      	ldr	r3, [r3, #0]
3400a8fa:	f003 0304 	and.w	r3, r3, #4
3400a8fe:	2b00      	cmp	r3, #0
3400a900:	d037      	beq.n	3400a972 <UART_WaitOnFlagUntilTimeout+0xb2>
3400a902:	68bb      	ldr	r3, [r7, #8]
3400a904:	2b80      	cmp	r3, #128	@ 0x80
3400a906:	d034      	beq.n	3400a972 <UART_WaitOnFlagUntilTimeout+0xb2>
3400a908:	68bb      	ldr	r3, [r7, #8]
3400a90a:	2b40      	cmp	r3, #64	@ 0x40
3400a90c:	d031      	beq.n	3400a972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3400a90e:	68fb      	ldr	r3, [r7, #12]
3400a910:	681b      	ldr	r3, [r3, #0]
3400a912:	69db      	ldr	r3, [r3, #28]
3400a914:	f003 0308 	and.w	r3, r3, #8
3400a918:	2b08      	cmp	r3, #8
3400a91a:	d110      	bne.n	3400a93e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3400a91c:	68fb      	ldr	r3, [r7, #12]
3400a91e:	681b      	ldr	r3, [r3, #0]
3400a920:	2208      	movs	r2, #8
3400a922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3400a924:	68f8      	ldr	r0, [r7, #12]
3400a926:	f000 f838 	bl	3400a99a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
3400a92a:	68fb      	ldr	r3, [r7, #12]
3400a92c:	2208      	movs	r2, #8
3400a92e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3400a932:	68fb      	ldr	r3, [r7, #12]
3400a934:	2200      	movs	r2, #0
3400a936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
3400a93a:	2301      	movs	r3, #1
3400a93c:	e029      	b.n	3400a992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3400a93e:	68fb      	ldr	r3, [r7, #12]
3400a940:	681b      	ldr	r3, [r3, #0]
3400a942:	69db      	ldr	r3, [r3, #28]
3400a944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
3400a948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
3400a94c:	d111      	bne.n	3400a972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3400a94e:	68fb      	ldr	r3, [r7, #12]
3400a950:	681b      	ldr	r3, [r3, #0]
3400a952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
3400a956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
3400a958:	68f8      	ldr	r0, [r7, #12]
3400a95a:	f000 f81e 	bl	3400a99a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
3400a95e:	68fb      	ldr	r3, [r7, #12]
3400a960:	2220      	movs	r2, #32
3400a962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
3400a966:	68fb      	ldr	r3, [r7, #12]
3400a968:	2200      	movs	r2, #0
3400a96a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
3400a96e:	2303      	movs	r3, #3
3400a970:	e00f      	b.n	3400a992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3400a972:	68fb      	ldr	r3, [r7, #12]
3400a974:	681b      	ldr	r3, [r3, #0]
3400a976:	69da      	ldr	r2, [r3, #28]
3400a978:	68bb      	ldr	r3, [r7, #8]
3400a97a:	4013      	ands	r3, r2
3400a97c:	68ba      	ldr	r2, [r7, #8]
3400a97e:	429a      	cmp	r2, r3
3400a980:	bf0c      	ite	eq
3400a982:	2301      	moveq	r3, #1
3400a984:	2300      	movne	r3, #0
3400a986:	b2db      	uxtb	r3, r3
3400a988:	461a      	mov	r2, r3
3400a98a:	79fb      	ldrb	r3, [r7, #7]
3400a98c:	429a      	cmp	r2, r3
3400a98e:	d0a0      	beq.n	3400a8d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
3400a990:	2300      	movs	r3, #0
}
3400a992:	4618      	mov	r0, r3
3400a994:	3710      	adds	r7, #16
3400a996:	46bd      	mov	sp, r7
3400a998:	bd80      	pop	{r7, pc}

3400a99a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
3400a99a:	b480      	push	{r7}
3400a99c:	b095      	sub	sp, #84	@ 0x54
3400a99e:	af00      	add	r7, sp, #0
3400a9a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3400a9a2:	687b      	ldr	r3, [r7, #4]
3400a9a4:	681b      	ldr	r3, [r3, #0]
3400a9a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
3400a9aa:	e853 3f00 	ldrex	r3, [r3]
3400a9ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
3400a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
3400a9b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
3400a9b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
3400a9b8:	687b      	ldr	r3, [r7, #4]
3400a9ba:	681b      	ldr	r3, [r3, #0]
3400a9bc:	461a      	mov	r2, r3
3400a9be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
3400a9c0:	643b      	str	r3, [r7, #64]	@ 0x40
3400a9c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a9c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
3400a9c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
3400a9c8:	e841 2300 	strex	r3, r2, [r1]
3400a9cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
3400a9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
3400a9d0:	2b00      	cmp	r3, #0
3400a9d2:	d1e6      	bne.n	3400a9a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3400a9d4:	687b      	ldr	r3, [r7, #4]
3400a9d6:	681b      	ldr	r3, [r3, #0]
3400a9d8:	3308      	adds	r3, #8
3400a9da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400a9dc:	6a3b      	ldr	r3, [r7, #32]
3400a9de:	e853 3f00 	ldrex	r3, [r3]
3400a9e2:	61fb      	str	r3, [r7, #28]
   return(result);
3400a9e4:	69fb      	ldr	r3, [r7, #28]
3400a9e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
3400a9ea:	f023 0301 	bic.w	r3, r3, #1
3400a9ee:	64bb      	str	r3, [r7, #72]	@ 0x48
3400a9f0:	687b      	ldr	r3, [r7, #4]
3400a9f2:	681b      	ldr	r3, [r3, #0]
3400a9f4:	3308      	adds	r3, #8
3400a9f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
3400a9f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
3400a9fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400a9fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
3400a9fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
3400aa00:	e841 2300 	strex	r3, r2, [r1]
3400aa04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
3400aa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
3400aa08:	2b00      	cmp	r3, #0
3400aa0a:	d1e3      	bne.n	3400a9d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
3400aa0c:	687b      	ldr	r3, [r7, #4]
3400aa0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
3400aa10:	2b01      	cmp	r3, #1
3400aa12:	d118      	bne.n	3400aa46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
3400aa14:	687b      	ldr	r3, [r7, #4]
3400aa16:	681b      	ldr	r3, [r3, #0]
3400aa18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
3400aa1a:	68fb      	ldr	r3, [r7, #12]
3400aa1c:	e853 3f00 	ldrex	r3, [r3]
3400aa20:	60bb      	str	r3, [r7, #8]
   return(result);
3400aa22:	68bb      	ldr	r3, [r7, #8]
3400aa24:	f023 0310 	bic.w	r3, r3, #16
3400aa28:	647b      	str	r3, [r7, #68]	@ 0x44
3400aa2a:	687b      	ldr	r3, [r7, #4]
3400aa2c:	681b      	ldr	r3, [r3, #0]
3400aa2e:	461a      	mov	r2, r3
3400aa30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
3400aa32:	61bb      	str	r3, [r7, #24]
3400aa34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3400aa36:	6979      	ldr	r1, [r7, #20]
3400aa38:	69ba      	ldr	r2, [r7, #24]
3400aa3a:	e841 2300 	strex	r3, r2, [r1]
3400aa3e:	613b      	str	r3, [r7, #16]
   return(result);
3400aa40:	693b      	ldr	r3, [r7, #16]
3400aa42:	2b00      	cmp	r3, #0
3400aa44:	d1e6      	bne.n	3400aa14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
3400aa46:	687b      	ldr	r3, [r7, #4]
3400aa48:	2220      	movs	r2, #32
3400aa4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
3400aa4e:	687b      	ldr	r3, [r7, #4]
3400aa50:	2200      	movs	r2, #0
3400aa52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
3400aa54:	687b      	ldr	r3, [r7, #4]
3400aa56:	2200      	movs	r2, #0
3400aa58:	675a      	str	r2, [r3, #116]	@ 0x74
}
3400aa5a:	bf00      	nop
3400aa5c:	3754      	adds	r7, #84	@ 0x54
3400aa5e:	46bd      	mov	sp, r7
3400aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
3400aa64:	4770      	bx	lr

3400aa66 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
3400aa66:	b480      	push	{r7}
3400aa68:	b085      	sub	sp, #20
3400aa6a:	af00      	add	r7, sp, #0
3400aa6c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
3400aa6e:	687b      	ldr	r3, [r7, #4]
3400aa70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3400aa74:	2b01      	cmp	r3, #1
3400aa76:	d101      	bne.n	3400aa7c <HAL_UARTEx_DisableFifoMode+0x16>
3400aa78:	2302      	movs	r3, #2
3400aa7a:	e027      	b.n	3400aacc <HAL_UARTEx_DisableFifoMode+0x66>
3400aa7c:	687b      	ldr	r3, [r7, #4]
3400aa7e:	2201      	movs	r2, #1
3400aa80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3400aa84:	687b      	ldr	r3, [r7, #4]
3400aa86:	2224      	movs	r2, #36	@ 0x24
3400aa88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3400aa8c:	687b      	ldr	r3, [r7, #4]
3400aa8e:	681b      	ldr	r3, [r3, #0]
3400aa90:	681b      	ldr	r3, [r3, #0]
3400aa92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3400aa94:	687b      	ldr	r3, [r7, #4]
3400aa96:	681b      	ldr	r3, [r3, #0]
3400aa98:	681a      	ldr	r2, [r3, #0]
3400aa9a:	687b      	ldr	r3, [r7, #4]
3400aa9c:	681b      	ldr	r3, [r3, #0]
3400aa9e:	f022 0201 	bic.w	r2, r2, #1
3400aaa2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
3400aaa4:	68fb      	ldr	r3, [r7, #12]
3400aaa6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
3400aaaa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
3400aaac:	687b      	ldr	r3, [r7, #4]
3400aaae:	2200      	movs	r2, #0
3400aab0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3400aab2:	687b      	ldr	r3, [r7, #4]
3400aab4:	681b      	ldr	r3, [r3, #0]
3400aab6:	68fa      	ldr	r2, [r7, #12]
3400aab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3400aaba:	687b      	ldr	r3, [r7, #4]
3400aabc:	2220      	movs	r2, #32
3400aabe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3400aac2:	687b      	ldr	r3, [r7, #4]
3400aac4:	2200      	movs	r2, #0
3400aac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3400aaca:	2300      	movs	r3, #0
}
3400aacc:	4618      	mov	r0, r3
3400aace:	3714      	adds	r7, #20
3400aad0:	46bd      	mov	sp, r7
3400aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
3400aad6:	4770      	bx	lr

3400aad8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3400aad8:	b580      	push	{r7, lr}
3400aada:	b084      	sub	sp, #16
3400aadc:	af00      	add	r7, sp, #0
3400aade:	6078      	str	r0, [r7, #4]
3400aae0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3400aae2:	687b      	ldr	r3, [r7, #4]
3400aae4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3400aae8:	2b01      	cmp	r3, #1
3400aaea:	d101      	bne.n	3400aaf0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
3400aaec:	2302      	movs	r3, #2
3400aaee:	e02d      	b.n	3400ab4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
3400aaf0:	687b      	ldr	r3, [r7, #4]
3400aaf2:	2201      	movs	r2, #1
3400aaf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3400aaf8:	687b      	ldr	r3, [r7, #4]
3400aafa:	2224      	movs	r2, #36	@ 0x24
3400aafc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3400ab00:	687b      	ldr	r3, [r7, #4]
3400ab02:	681b      	ldr	r3, [r3, #0]
3400ab04:	681b      	ldr	r3, [r3, #0]
3400ab06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3400ab08:	687b      	ldr	r3, [r7, #4]
3400ab0a:	681b      	ldr	r3, [r3, #0]
3400ab0c:	681a      	ldr	r2, [r3, #0]
3400ab0e:	687b      	ldr	r3, [r7, #4]
3400ab10:	681b      	ldr	r3, [r3, #0]
3400ab12:	f022 0201 	bic.w	r2, r2, #1
3400ab16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
3400ab18:	687b      	ldr	r3, [r7, #4]
3400ab1a:	681b      	ldr	r3, [r3, #0]
3400ab1c:	689b      	ldr	r3, [r3, #8]
3400ab1e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
3400ab22:	687b      	ldr	r3, [r7, #4]
3400ab24:	681b      	ldr	r3, [r3, #0]
3400ab26:	683a      	ldr	r2, [r7, #0]
3400ab28:	430a      	orrs	r2, r1
3400ab2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3400ab2c:	6878      	ldr	r0, [r7, #4]
3400ab2e:	f000 f84f 	bl	3400abd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3400ab32:	687b      	ldr	r3, [r7, #4]
3400ab34:	681b      	ldr	r3, [r3, #0]
3400ab36:	68fa      	ldr	r2, [r7, #12]
3400ab38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3400ab3a:	687b      	ldr	r3, [r7, #4]
3400ab3c:	2220      	movs	r2, #32
3400ab3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3400ab42:	687b      	ldr	r3, [r7, #4]
3400ab44:	2200      	movs	r2, #0
3400ab46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3400ab4a:	2300      	movs	r3, #0
}
3400ab4c:	4618      	mov	r0, r3
3400ab4e:	3710      	adds	r7, #16
3400ab50:	46bd      	mov	sp, r7
3400ab52:	bd80      	pop	{r7, pc}

3400ab54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
3400ab54:	b580      	push	{r7, lr}
3400ab56:	b084      	sub	sp, #16
3400ab58:	af00      	add	r7, sp, #0
3400ab5a:	6078      	str	r0, [r7, #4]
3400ab5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
3400ab5e:	687b      	ldr	r3, [r7, #4]
3400ab60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
3400ab64:	2b01      	cmp	r3, #1
3400ab66:	d101      	bne.n	3400ab6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
3400ab68:	2302      	movs	r3, #2
3400ab6a:	e02d      	b.n	3400abc8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
3400ab6c:	687b      	ldr	r3, [r7, #4]
3400ab6e:	2201      	movs	r2, #1
3400ab70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
3400ab74:	687b      	ldr	r3, [r7, #4]
3400ab76:	2224      	movs	r2, #36	@ 0x24
3400ab78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
3400ab7c:	687b      	ldr	r3, [r7, #4]
3400ab7e:	681b      	ldr	r3, [r3, #0]
3400ab80:	681b      	ldr	r3, [r3, #0]
3400ab82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
3400ab84:	687b      	ldr	r3, [r7, #4]
3400ab86:	681b      	ldr	r3, [r3, #0]
3400ab88:	681a      	ldr	r2, [r3, #0]
3400ab8a:	687b      	ldr	r3, [r7, #4]
3400ab8c:	681b      	ldr	r3, [r3, #0]
3400ab8e:	f022 0201 	bic.w	r2, r2, #1
3400ab92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
3400ab94:	687b      	ldr	r3, [r7, #4]
3400ab96:	681b      	ldr	r3, [r3, #0]
3400ab98:	689b      	ldr	r3, [r3, #8]
3400ab9a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
3400ab9e:	687b      	ldr	r3, [r7, #4]
3400aba0:	681b      	ldr	r3, [r3, #0]
3400aba2:	683a      	ldr	r2, [r7, #0]
3400aba4:	430a      	orrs	r2, r1
3400aba6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
3400aba8:	6878      	ldr	r0, [r7, #4]
3400abaa:	f000 f811 	bl	3400abd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
3400abae:	687b      	ldr	r3, [r7, #4]
3400abb0:	681b      	ldr	r3, [r3, #0]
3400abb2:	68fa      	ldr	r2, [r7, #12]
3400abb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
3400abb6:	687b      	ldr	r3, [r7, #4]
3400abb8:	2220      	movs	r2, #32
3400abba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
3400abbe:	687b      	ldr	r3, [r7, #4]
3400abc0:	2200      	movs	r2, #0
3400abc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
3400abc6:	2300      	movs	r3, #0
}
3400abc8:	4618      	mov	r0, r3
3400abca:	3710      	adds	r7, #16
3400abcc:	46bd      	mov	sp, r7
3400abce:	bd80      	pop	{r7, pc}

3400abd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
3400abd0:	b480      	push	{r7}
3400abd2:	b085      	sub	sp, #20
3400abd4:	af00      	add	r7, sp, #0
3400abd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
3400abd8:	687b      	ldr	r3, [r7, #4]
3400abda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
3400abdc:	2b00      	cmp	r3, #0
3400abde:	d108      	bne.n	3400abf2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
3400abe0:	687b      	ldr	r3, [r7, #4]
3400abe2:	2201      	movs	r2, #1
3400abe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
3400abe8:	687b      	ldr	r3, [r7, #4]
3400abea:	2201      	movs	r2, #1
3400abec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
3400abf0:	e031      	b.n	3400ac56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
3400abf2:	2310      	movs	r3, #16
3400abf4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
3400abf6:	2310      	movs	r3, #16
3400abf8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
3400abfa:	687b      	ldr	r3, [r7, #4]
3400abfc:	681b      	ldr	r3, [r3, #0]
3400abfe:	689b      	ldr	r3, [r3, #8]
3400ac00:	0e5b      	lsrs	r3, r3, #25
3400ac02:	b2db      	uxtb	r3, r3
3400ac04:	f003 0307 	and.w	r3, r3, #7
3400ac08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
3400ac0a:	687b      	ldr	r3, [r7, #4]
3400ac0c:	681b      	ldr	r3, [r3, #0]
3400ac0e:	689b      	ldr	r3, [r3, #8]
3400ac10:	0f5b      	lsrs	r3, r3, #29
3400ac12:	b2db      	uxtb	r3, r3
3400ac14:	f003 0307 	and.w	r3, r3, #7
3400ac18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3400ac1a:	7bbb      	ldrb	r3, [r7, #14]
3400ac1c:	7b3a      	ldrb	r2, [r7, #12]
3400ac1e:	4911      	ldr	r1, [pc, #68]	@ (3400ac64 <UARTEx_SetNbDataToProcess+0x94>)
3400ac20:	5c8a      	ldrb	r2, [r1, r2]
3400ac22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
3400ac26:	7b3a      	ldrb	r2, [r7, #12]
3400ac28:	490f      	ldr	r1, [pc, #60]	@ (3400ac68 <UARTEx_SetNbDataToProcess+0x98>)
3400ac2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3400ac2c:	fb93 f3f2 	sdiv	r3, r3, r2
3400ac30:	b29a      	uxth	r2, r3
3400ac32:	687b      	ldr	r3, [r7, #4]
3400ac34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3400ac38:	7bfb      	ldrb	r3, [r7, #15]
3400ac3a:	7b7a      	ldrb	r2, [r7, #13]
3400ac3c:	4909      	ldr	r1, [pc, #36]	@ (3400ac64 <UARTEx_SetNbDataToProcess+0x94>)
3400ac3e:	5c8a      	ldrb	r2, [r1, r2]
3400ac40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
3400ac44:	7b7a      	ldrb	r2, [r7, #13]
3400ac46:	4908      	ldr	r1, [pc, #32]	@ (3400ac68 <UARTEx_SetNbDataToProcess+0x98>)
3400ac48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3400ac4a:	fb93 f3f2 	sdiv	r3, r3, r2
3400ac4e:	b29a      	uxth	r2, r3
3400ac50:	687b      	ldr	r3, [r7, #4]
3400ac52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
3400ac56:	bf00      	nop
3400ac58:	3714      	adds	r7, #20
3400ac5a:	46bd      	mov	sp, r7
3400ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
3400ac60:	4770      	bx	lr
3400ac62:	bf00      	nop
3400ac64:	3400d238 	.word	0x3400d238
3400ac68:	3400d240 	.word	0x3400d240

3400ac6c <__NVIC_SystemReset>:
{
3400ac6c:	b480      	push	{r7}
3400ac6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
3400ac70:	f3bf 8f4f 	dsb	sy
}
3400ac74:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
3400ac76:	4b06      	ldr	r3, [pc, #24]	@ (3400ac90 <__NVIC_SystemReset+0x24>)
3400ac78:	68db      	ldr	r3, [r3, #12]
3400ac7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
3400ac7e:	4904      	ldr	r1, [pc, #16]	@ (3400ac90 <__NVIC_SystemReset+0x24>)
3400ac80:	4b04      	ldr	r3, [pc, #16]	@ (3400ac94 <__NVIC_SystemReset+0x28>)
3400ac82:	4313      	orrs	r3, r2
3400ac84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
3400ac86:	f3bf 8f4f 	dsb	sy
}
3400ac8a:	bf00      	nop
    __NOP();
3400ac8c:	bf00      	nop
3400ac8e:	e7fd      	b.n	3400ac8c <__NVIC_SystemReset+0x20>
3400ac90:	e000ed00 	.word	0xe000ed00
3400ac94:	05fa0004 	.word	0x05fa0004

3400ac98 <MX_ExpressLink_Init>:
char * response;

uint32_t loops = NLOOPS;

void MX_ExpressLink_Init(void)
{
3400ac98:	b580      	push	{r7, lr}
3400ac9a:	b082      	sub	sp, #8
3400ac9c:	af00      	add	r7, sp, #0
  ExpressLink_event_t event;

#if EXPRESSLINK_DEBUG
    printf("[INFO] Starting Hello World\r\n");
3400ac9e:	4843      	ldr	r0, [pc, #268]	@ (3400adac <MX_ExpressLink_Init+0x114>)
3400aca0:	f000 fd76 	bl	3400b790 <puts>
#endif

  /* Detect if a ExpressLink module is present */
  do
  {
    HAL_Delay(ExpressLink_BOOT_DELAY);
3400aca4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
3400aca8:	f7f6 fd28 	bl	340016fc <HAL_Delay>
    response = ExpressLink_Test();
3400acac:	f000 f9b0 	bl	3400b010 <ExpressLink_Test>
3400acb0:	4603      	mov	r3, r0
3400acb2:	4a3f      	ldr	r2, [pc, #252]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400acb4:	6013      	str	r3, [r2, #0]

    if(strstr(response, "OK") == NULL)
3400acb6:	4b3e      	ldr	r3, [pc, #248]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400acb8:	681b      	ldr	r3, [r3, #0]
3400acba:	493e      	ldr	r1, [pc, #248]	@ (3400adb4 <MX_ExpressLink_Init+0x11c>)
3400acbc:	4618      	mov	r0, r3
3400acbe:	f000 fe83 	bl	3400b9c8 <strstr>
3400acc2:	4603      	mov	r3, r0
3400acc4:	2b00      	cmp	r3, #0
3400acc6:	d102      	bne.n	3400acce <MX_ExpressLink_Init+0x36>
    {
  	  printf("[ERRR] Please make sure the ExpressLink module is plugged in and turned on!\r\n");
3400acc8:	483b      	ldr	r0, [pc, #236]	@ (3400adb8 <MX_ExpressLink_Init+0x120>)
3400acca:	f000 fd61 	bl	3400b790 <puts>
    }
  }while(strstr(response, "OK") == NULL);
3400acce:	4b38      	ldr	r3, [pc, #224]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400acd0:	681b      	ldr	r3, [r3, #0]
3400acd2:	4938      	ldr	r1, [pc, #224]	@ (3400adb4 <MX_ExpressLink_Init+0x11c>)
3400acd4:	4618      	mov	r0, r3
3400acd6:	f000 fe77 	bl	3400b9c8 <strstr>
3400acda:	4603      	mov	r3, r0
3400acdc:	2b00      	cmp	r3, #0
3400acde:	d0e1      	beq.n	3400aca4 <MX_ExpressLink_Init+0xc>

#if EXPRESSLINK_DEBUG
    printf("[INFO] Resetting ExpressLink module\r\n");
3400ace0:	4836      	ldr	r0, [pc, #216]	@ (3400adbc <MX_ExpressLink_Init+0x124>)
3400ace2:	f000 fd55 	bl	3400b790 <puts>
#endif
  /* Reset the module */
  ExpressLink_Reset();
3400ace6:	f000 f99f 	bl	3400b028 <ExpressLink_Reset>

  do
  {
    event = ExpressLink_GetEvent(); /* Get event  */
3400acea:	463b      	mov	r3, r7
3400acec:	4618      	mov	r0, r3
3400acee:	f000 faaf 	bl	3400b250 <ExpressLink_GetEvent>
   } while ((event.id == EXPRESSLINK_EVENT_ERROR) || (event.id == EXPRESSLINK_EVENT_NONE));
3400acf2:	683b      	ldr	r3, [r7, #0]
3400acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
3400acf8:	d0f7      	beq.n	3400acea <MX_ExpressLink_Init+0x52>
3400acfa:	683b      	ldr	r3, [r7, #0]
3400acfc:	2b00      	cmp	r3, #0
3400acfe:	d0f4      	beq.n	3400acea <MX_ExpressLink_Init+0x52>

  ExpressLink_SetState(EXPRESSLINK_STATE_READY);
3400ad00:	2001      	movs	r0, #1
3400ad02:	f000 f9e5 	bl	3400b0d0 <ExpressLink_SetState>

  /* Chack if it is a Wi-Fi or cellular module */
  response = ExpressLink_GetAPN();
3400ad06:	482e      	ldr	r0, [pc, #184]	@ (3400adc0 <MX_ExpressLink_Init+0x128>)
3400ad08:	f000 fa7a 	bl	3400b200 <ExpressLink_GetConf>
3400ad0c:	4603      	mov	r3, r0
3400ad0e:	4a28      	ldr	r2, [pc, #160]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400ad10:	6013      	str	r3, [r2, #0]

  /* If Wi-Fi then set SSID and password */
  if(strstr(response, "OK") == NULL)
3400ad12:	4b27      	ldr	r3, [pc, #156]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400ad14:	681b      	ldr	r3, [r3, #0]
3400ad16:	4927      	ldr	r1, [pc, #156]	@ (3400adb4 <MX_ExpressLink_Init+0x11c>)
3400ad18:	4618      	mov	r0, r3
3400ad1a:	f000 fe55 	bl	3400b9c8 <strstr>
3400ad1e:	4603      	mov	r3, r0
3400ad20:	2b00      	cmp	r3, #0
3400ad22:	d109      	bne.n	3400ad38 <MX_ExpressLink_Init+0xa0>
  {
#if EXPRESSLINK_DEBUG
    printf("[INFO] Wi-Fi\r\n");
3400ad24:	4827      	ldr	r0, [pc, #156]	@ (3400adc4 <MX_ExpressLink_Init+0x12c>)
3400ad26:	f000 fd33 	bl	3400b790 <puts>
#endif
    /* Set Wi-Fi SSID and password */
    ExpressLink_SetSSID      ((char *)&EXPRESSLINK_WIFI_SSID);
3400ad2a:	4827      	ldr	r0, [pc, #156]	@ (3400adc8 <MX_ExpressLink_Init+0x130>)
3400ad2c:	f000 fa14 	bl	3400b158 <ExpressLink_SetSSID>
    ExpressLink_SetPassphrase((char *)&EXPRESSLINK_WIFI_PASSWORD);
3400ad30:	4826      	ldr	r0, [pc, #152]	@ (3400adcc <MX_ExpressLink_Init+0x134>)
3400ad32:	f000 fa29 	bl	3400b188 <ExpressLink_SetPassphrase>
3400ad36:	e002      	b.n	3400ad3e <MX_ExpressLink_Init+0xa6>
  }
  else
  {
#if EXPRESSLINK_DEBUG
    printf("[INFO] Cellular\r\n");
3400ad38:	4825      	ldr	r0, [pc, #148]	@ (3400add0 <MX_ExpressLink_Init+0x138>)
3400ad3a:	f000 fd29 	bl	3400b790 <puts>
#endif
  }

  ExpressLink_SetCustomName("STM32-EL-MX");
3400ad3e:	4825      	ldr	r0, [pc, #148]	@ (3400add4 <MX_ExpressLink_Init+0x13c>)
3400ad40:	f000 fa3a 	bl	3400b1b8 <ExpressLink_SetCustomName>

  /* Set AWS IoT Core endpoint */
  ExpressLink_SetEndpoint  ((char *)&EXPRESSLINK_AWS_IOT_ENDPOINT);
3400ad44:	4824      	ldr	r0, [pc, #144]	@ (3400add8 <MX_ExpressLink_Init+0x140>)
3400ad46:	f000 f9d3 	bl	3400b0f0 <ExpressLink_SetEndpoint>

  /* Connect to AWS */
  response = ExpressLink_Connect();
3400ad4a:	f000 f98b 	bl	3400b064 <ExpressLink_Connect>
3400ad4e:	4603      	mov	r3, r0
3400ad50:	4a17      	ldr	r2, [pc, #92]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400ad52:	6013      	str	r3, [r2, #0]

  if(strcmp(response,"OK 1 CONNECTED\r\n") != 0)
3400ad54:	4b16      	ldr	r3, [pc, #88]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400ad56:	681b      	ldr	r3, [r3, #0]
3400ad58:	4920      	ldr	r1, [pc, #128]	@ (3400addc <MX_ExpressLink_Init+0x144>)
3400ad5a:	4618      	mov	r0, r3
3400ad5c:	f7f5 fd16 	bl	3400078c <strcmp>
3400ad60:	4603      	mov	r3, r0
3400ad62:	2b00      	cmp	r3, #0
3400ad64:	d00a      	beq.n	3400ad7c <MX_ExpressLink_Init+0xe4>
  {
#if EXPRESSLINK_DEBUG
    printf("[ERROR] %s", response);
3400ad66:	4b12      	ldr	r3, [pc, #72]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400ad68:	681b      	ldr	r3, [r3, #0]
3400ad6a:	4619      	mov	r1, r3
3400ad6c:	481c      	ldr	r0, [pc, #112]	@ (3400ade0 <MX_ExpressLink_Init+0x148>)
3400ad6e:	f000 fca7 	bl	3400b6c0 <iprintf>
#endif

    ExpressLink_SetState(EXPRESSLINK_STATE_ERROR);
3400ad72:	2020      	movs	r0, #32
3400ad74:	f000 f9ac 	bl	3400b0d0 <ExpressLink_SetState>

    NVIC_SystemReset();
3400ad78:	f7ff ff78 	bl	3400ac6c <__NVIC_SystemReset>
  }

#if EXPRESSLINK_DEBUG
  printf("[INFO] Connected to AWS\r\n");
3400ad7c:	4819      	ldr	r0, [pc, #100]	@ (3400ade4 <MX_ExpressLink_Init+0x14c>)
3400ad7e:	f000 fd07 	bl	3400b790 <puts>
#endif

  ExpressLink_SetState(EXPRESSLINK_STATE_CONNECTED);
3400ad82:	2004      	movs	r0, #4
3400ad84:	f000 f9a4 	bl	3400b0d0 <ExpressLink_SetState>

  /* Get the thing name */
  response = ExpressLink_GetThingName();
3400ad88:	f000 fa52 	bl	3400b230 <ExpressLink_GetThingName>
3400ad8c:	4603      	mov	r3, r0
3400ad8e:	4a08      	ldr	r2, [pc, #32]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400ad90:	6013      	str	r3, [r2, #0]

  response = ExpressLink_SetTopic     (TOPIC_INDEX    , response      );
3400ad92:	4b07      	ldr	r3, [pc, #28]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400ad94:	681b      	ldr	r3, [r3, #0]
3400ad96:	4619      	mov	r1, r3
3400ad98:	2001      	movs	r0, #1
3400ad9a:	f000 f9c1 	bl	3400b120 <ExpressLink_SetTopic>
3400ad9e:	4603      	mov	r3, r0
3400ada0:	4a03      	ldr	r2, [pc, #12]	@ (3400adb0 <MX_ExpressLink_Init+0x118>)
3400ada2:	6013      	str	r3, [r2, #0]
}
3400ada4:	bf00      	nop
3400ada6:	3708      	adds	r7, #8
3400ada8:	46bd      	mov	sp, r7
3400adaa:	bd80      	pop	{r7, pc}
3400adac:	3400c8a0 	.word	0x3400c8a0
3400adb0:	3400d574 	.word	0x3400d574
3400adb4:	3400c8c0 	.word	0x3400c8c0
3400adb8:	3400c8c4 	.word	0x3400c8c4
3400adbc:	3400c914 	.word	0x3400c914
3400adc0:	3400c93c 	.word	0x3400c93c
3400adc4:	3400c940 	.word	0x3400c940
3400adc8:	3400c950 	.word	0x3400c950
3400adcc:	3400c95c 	.word	0x3400c95c
3400add0:	3400c968 	.word	0x3400c968
3400add4:	3400c97c 	.word	0x3400c97c
3400add8:	3400c988 	.word	0x3400c988
3400addc:	3400c9b8 	.word	0x3400c9b8
3400ade0:	3400c9cc 	.word	0x3400c9cc
3400ade4:	3400c9d8 	.word	0x3400c9d8

3400ade8 <MX_ExpressLink_Process>:

void MX_ExpressLink_Process(void)
{
3400ade8:	b580      	push	{r7, lr}
3400adea:	b082      	sub	sp, #8
3400adec:	af00      	add	r7, sp, #0
  ExpressLink_EventCallback(ExpressLink_GetEvent());
3400adee:	463b      	mov	r3, r7
3400adf0:	4618      	mov	r0, r3
3400adf2:	f000 fa2d 	bl	3400b250 <ExpressLink_GetEvent>
3400adf6:	463b      	mov	r3, r7
3400adf8:	e893 0003 	ldmia.w	r3, {r0, r1}
3400adfc:	f000 f82e 	bl	3400ae5c <ExpressLink_EventCallback>

  if (ExpressLink_GetState() != EXPRESSLINK_STATE_CONNECTED)
3400ae00:	f000 f9f2 	bl	3400b1e8 <ExpressLink_GetState>
3400ae04:	4603      	mov	r3, r0
3400ae06:	2b04      	cmp	r3, #4
3400ae08:	d003      	beq.n	3400ae12 <MX_ExpressLink_Process+0x2a>
  {
    ExpressLink_Disonnect();
3400ae0a:	f000 f939 	bl	3400b080 <ExpressLink_Disonnect>
    NVIC_SystemReset();
3400ae0e:	f7ff ff2d 	bl	3400ac6c <__NVIC_SystemReset>
  }

#if EXPRESSLINK_DEBUG
  printf("[INFO] Sending MQTT message\r\n");
3400ae12:	480e      	ldr	r0, [pc, #56]	@ (3400ae4c <MX_ExpressLink_Process+0x64>)
3400ae14:	f000 fcbc 	bl	3400b790 <puts>
#endif

  ExpressLink_SendMessage(TOPIC_INDEX, "Hello world!");
3400ae18:	490d      	ldr	r1, [pc, #52]	@ (3400ae50 <MX_ExpressLink_Process+0x68>)
3400ae1a:	2001      	movs	r0, #1
3400ae1c:	f000 f93c 	bl	3400b098 <ExpressLink_SendMessage>

  if(loops-- == 0)
3400ae20:	4b0c      	ldr	r3, [pc, #48]	@ (3400ae54 <MX_ExpressLink_Process+0x6c>)
3400ae22:	681b      	ldr	r3, [r3, #0]
3400ae24:	1e5a      	subs	r2, r3, #1
3400ae26:	490b      	ldr	r1, [pc, #44]	@ (3400ae54 <MX_ExpressLink_Process+0x6c>)
3400ae28:	600a      	str	r2, [r1, #0]
3400ae2a:	2b00      	cmp	r3, #0
3400ae2c:	d106      	bne.n	3400ae3c <MX_ExpressLink_Process+0x54>
  {
    ExpressLink_Disonnect();
3400ae2e:	f000 f927 	bl	3400b080 <ExpressLink_Disonnect>

#if EXPRESSLINK_DEBUG
    printf("[INFO] End of demo\r\n");
3400ae32:	4809      	ldr	r0, [pc, #36]	@ (3400ae58 <MX_ExpressLink_Process+0x70>)
3400ae34:	f000 fcac 	bl	3400b790 <puts>
#endif

    while(1);
3400ae38:	bf00      	nop
3400ae3a:	e7fd      	b.n	3400ae38 <MX_ExpressLink_Process+0x50>
  }

  HAL_Delay(MQTT_PUBLISH_TIME_BETWEEN_MS);
3400ae3c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
3400ae40:	f7f6 fc5c 	bl	340016fc <HAL_Delay>
}
3400ae44:	bf00      	nop
3400ae46:	3708      	adds	r7, #8
3400ae48:	46bd      	mov	sp, r7
3400ae4a:	bd80      	pop	{r7, pc}
3400ae4c:	3400c9f4 	.word	0x3400c9f4
3400ae50:	3400ca14 	.word	0x3400ca14
3400ae54:	3400d398 	.word	0x3400d398
3400ae58:	3400ca24 	.word	0x3400ca24

3400ae5c <ExpressLink_EventCallback>:
 * @brief Handle the ExpressLink Event. This is a weak function and can be
 * redefined
 * @retval None
 */
__weak void ExpressLink_EventCallback(ExpressLink_event_t event)
{
3400ae5c:	b580      	push	{r7, lr}
3400ae5e:	b082      	sub	sp, #8
3400ae60:	af00      	add	r7, sp, #0
3400ae62:	463b      	mov	r3, r7
3400ae64:	e883 0003 	stmia.w	r3, {r0, r1}
  switch (event.id)
3400ae68:	683b      	ldr	r3, [r7, #0]
3400ae6a:	2b1b      	cmp	r3, #27
3400ae6c:	f200 80a1 	bhi.w	3400afb2 <ExpressLink_EventCallback+0x156>
3400ae70:	a201      	add	r2, pc, #4	@ (adr r2, 3400ae78 <ExpressLink_EventCallback+0x1c>)
3400ae72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
3400ae76:	bf00      	nop
3400ae78:	3400afbf 	.word	0x3400afbf
3400ae7c:	3400aee9 	.word	0x3400aee9
3400ae80:	3400aef5 	.word	0x3400aef5
3400ae84:	3400af03 	.word	0x3400af03
3400ae88:	3400af11 	.word	0x3400af11
3400ae8c:	3400af1f 	.word	0x3400af1f
3400ae90:	3400af27 	.word	0x3400af27
3400ae94:	3400af33 	.word	0x3400af33
3400ae98:	3400af3b 	.word	0x3400af3b
3400ae9c:	3400af47 	.word	0x3400af47
3400aea0:	3400afb3 	.word	0x3400afb3
3400aea4:	3400afb3 	.word	0x3400afb3
3400aea8:	3400afb3 	.word	0x3400afb3
3400aeac:	3400afb3 	.word	0x3400afb3
3400aeb0:	3400afb3 	.word	0x3400afb3
3400aeb4:	3400afb3 	.word	0x3400afb3
3400aeb8:	3400afb3 	.word	0x3400afb3
3400aebc:	3400afb3 	.word	0x3400afb3
3400aec0:	3400afb3 	.word	0x3400afb3
3400aec4:	3400afb3 	.word	0x3400afb3
3400aec8:	3400af53 	.word	0x3400af53
3400aecc:	3400af5f 	.word	0x3400af5f
3400aed0:	3400af6b 	.word	0x3400af6b
3400aed4:	3400af77 	.word	0x3400af77
3400aed8:	3400af83 	.word	0x3400af83
3400aedc:	3400af8f 	.word	0x3400af8f
3400aee0:	3400af9b 	.word	0x3400af9b
3400aee4:	3400afa7 	.word	0x3400afa7
  case EXPRESSLINK_EVENT_NONE:
    break;

  case EXPRESSLINK_EVENT_MESSAGE:
#if EXPRESSLINK_DEBUG
    printf("[INFO] Message receiced on topic %d\r\n", (int)event.param);
3400aee8:	687b      	ldr	r3, [r7, #4]
3400aeea:	4619      	mov	r1, r3
3400aeec:	4836      	ldr	r0, [pc, #216]	@ (3400afc8 <ExpressLink_EventCallback+0x16c>)
3400aeee:	f000 fbe7 	bl	3400b6c0 <iprintf>
#endif
    break;
3400aef2:	e065      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_STARTUP:
  {
#if EXPRESSLINK_DEBUG      
      printf("[INFO] Module started\r\n");
3400aef4:	4835      	ldr	r0, [pc, #212]	@ (3400afcc <ExpressLink_EventCallback+0x170>)
3400aef6:	f000 fc4b 	bl	3400b790 <puts>
#endif

    ExpressLink_SetState(EXPRESSLINK_STATE_READY);
3400aefa:	2001      	movs	r0, #1
3400aefc:	f000 f8e8 	bl	3400b0d0 <ExpressLink_SetState>
  }
    break;
3400af00:	e05e      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_CONLOST:
  {
#if EXPRESSLINK_DEBUG
      printf("[ERROR] Connection lost\r\n");
3400af02:	4833      	ldr	r0, [pc, #204]	@ (3400afd0 <ExpressLink_EventCallback+0x174>)
3400af04:	f000 fc44 	bl	3400b790 <puts>
#endif
    ExpressLink_SetState(EXPRESSLINK_STATE_ERROR);
3400af08:	2020      	movs	r0, #32
3400af0a:	f000 f8e1 	bl	3400b0d0 <ExpressLink_SetState>
  }
    break;
3400af0e:	e057      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_OVERRUN:
  {
#if EXPRESSLINK_DEBUG
      printf("[ERROR] Overrun error\r\n");
3400af10:	4830      	ldr	r0, [pc, #192]	@ (3400afd4 <ExpressLink_EventCallback+0x178>)
3400af12:	f000 fc3d 	bl	3400b790 <puts>
#endif

    ExpressLink_SetState(EXPRESSLINK_STATE_ERROR);
3400af16:	2020      	movs	r0, #32
3400af18:	f000 f8da 	bl	3400b0d0 <ExpressLink_SetState>
  }
    break;
3400af1c:	e050      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_OTA:
#if EXPRESSLINK_DEBUG
    printf("[INFO] OTA received\r\n");
3400af1e:	482e      	ldr	r0, [pc, #184]	@ (3400afd8 <ExpressLink_EventCallback+0x17c>)
3400af20:	f000 fc36 	bl	3400b790 <puts>
#endif
    break;
3400af24:	e04c      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_CONNECT:
#if EXPRESSLINK_DEBUG
    printf("[INFO] Connect event with Connection Hint %d\r\n", (int)event.param);
3400af26:	687b      	ldr	r3, [r7, #4]
3400af28:	4619      	mov	r1, r3
3400af2a:	482c      	ldr	r0, [pc, #176]	@ (3400afdc <ExpressLink_EventCallback+0x180>)
3400af2c:	f000 fbc8 	bl	3400b6c0 <iprintf>
#endif
    break;
3400af30:	e046      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_CONFMODE:
#if EXPRESSLINK_DEBUG
    printf("[INFO] Conf mode\r\n");
3400af32:	482b      	ldr	r0, [pc, #172]	@ (3400afe0 <ExpressLink_EventCallback+0x184>)
3400af34:	f000 fc2c 	bl	3400b790 <puts>
#endif
    break;
3400af38:	e042      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SUBACK:
#if EXPRESSLINK_DEBUG
    printf("[INFO] A subscription was accepted. Topic Index %d\r\n", (int)event.param);
3400af3a:	687b      	ldr	r3, [r7, #4]
3400af3c:	4619      	mov	r1, r3
3400af3e:	4829      	ldr	r0, [pc, #164]	@ (3400afe4 <ExpressLink_EventCallback+0x188>)
3400af40:	f000 fbbe 	bl	3400b6c0 <iprintf>
#endif    
    break;
3400af44:	e03c      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SUBNACK:
#if EXPRESSLINK_DEBUG
    printf("[INFO] A subscription was rejected. Topic Index %d\r\n", (int)event.param);
3400af46:	687b      	ldr	r3, [r7, #4]
3400af48:	4619      	mov	r1, r3
3400af4a:	4827      	ldr	r0, [pc, #156]	@ (3400afe8 <ExpressLink_EventCallback+0x18c>)
3400af4c:	f000 fbb8 	bl	3400b6c0 <iprintf>
#endif     
    break;
3400af50:	e036      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SHADOW_INIT:
#if EXPRESSLINK_DEBUG
    printf("[INFO] Shadow[Shadow Index] interface was initialized successfully. Topic Index %d\r\n", (int)event.param);
3400af52:	687b      	ldr	r3, [r7, #4]
3400af54:	4619      	mov	r1, r3
3400af56:	4825      	ldr	r0, [pc, #148]	@ (3400afec <ExpressLink_EventCallback+0x190>)
3400af58:	f000 fbb2 	bl	3400b6c0 <iprintf>
#endif       
    break;
3400af5c:	e030      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SHADOW_INIT_FAILED:
#if EXPRESSLINK_DEBUG
    printf("[INFO] The SHADOW[Shadow Index] interface initialization failed. Topic Index %d\r\n", (int)event.param);
3400af5e:	687b      	ldr	r3, [r7, #4]
3400af60:	4619      	mov	r1, r3
3400af62:	4823      	ldr	r0, [pc, #140]	@ (3400aff0 <ExpressLink_EventCallback+0x194>)
3400af64:	f000 fbac 	bl	3400b6c0 <iprintf>
#endif 
    break;
3400af68:	e02a      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SHADOW_INIT_DOC:
#if EXPRESSLINK_DEBUG
    printf("[INFO] A Shadow document was received. Topic Index %d\r\n", (int)event.param);
3400af6a:	687b      	ldr	r3, [r7, #4]
3400af6c:	4619      	mov	r1, r3
3400af6e:	4821      	ldr	r0, [pc, #132]	@ (3400aff4 <ExpressLink_EventCallback+0x198>)
3400af70:	f000 fba6 	bl	3400b6c0 <iprintf>
#endif    
    break;
3400af74:	e024      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SHADOW_UPDATE:
#if EXPRESSLINK_DEBUG
    printf("[INFO] A Shadow update result was received. Topic Index %d\r\n", (int)event.param);
3400af76:	687b      	ldr	r3, [r7, #4]
3400af78:	4619      	mov	r1, r3
3400af7a:	481f      	ldr	r0, [pc, #124]	@ (3400aff8 <ExpressLink_EventCallback+0x19c>)
3400af7c:	f000 fba0 	bl	3400b6c0 <iprintf>
#endif     
    break;
3400af80:	e01e      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SHADOW_DELTA:
#if EXPRESSLINK_DEBUG
    printf("[INFO] A Shadow delta update was received. Topic Index %d\r\n", (int)event.param);
3400af82:	687b      	ldr	r3, [r7, #4]
3400af84:	4619      	mov	r1, r3
3400af86:	481d      	ldr	r0, [pc, #116]	@ (3400affc <ExpressLink_EventCallback+0x1a0>)
3400af88:	f000 fb9a 	bl	3400b6c0 <iprintf>
#endif    
    break;
3400af8c:	e018      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SHADOW_DELETE:
#if EXPRESSLINK_DEBUG
    printf("[INFO] A Shadow delete result was received. Topic Index %d\r\n", (int)event.param);
3400af8e:	687b      	ldr	r3, [r7, #4]
3400af90:	4619      	mov	r1, r3
3400af92:	481b      	ldr	r0, [pc, #108]	@ (3400b000 <ExpressLink_EventCallback+0x1a4>)
3400af94:	f000 fb94 	bl	3400b6c0 <iprintf>
#endif       
    break;
3400af98:	e012      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SHADOW_SUBACK:
#if EXPRESSLINK_DEBUG
    printf("[INFO] A Shadow delta subscription was accepted. Topic Index %d\r\n", (int)event.param);
3400af9a:	687b      	ldr	r3, [r7, #4]
3400af9c:	4619      	mov	r1, r3
3400af9e:	4819      	ldr	r0, [pc, #100]	@ (3400b004 <ExpressLink_EventCallback+0x1a8>)
3400afa0:	f000 fb8e 	bl	3400b6c0 <iprintf>
#endif      
    break;
3400afa4:	e00c      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  case EXPRESSLINK_EVENT_SHADOW_SUBNACK:
#if EXPRESSLINK_DEBUG
    printf("[INFO] A Shadow delta subscription was rejected. Topic Index %d\r\n", (int)event.param);
3400afa6:	687b      	ldr	r3, [r7, #4]
3400afa8:	4619      	mov	r1, r3
3400afaa:	4817      	ldr	r0, [pc, #92]	@ (3400b008 <ExpressLink_EventCallback+0x1ac>)
3400afac:	f000 fb88 	bl	3400b6c0 <iprintf>
#endif       
    break;
3400afb0:	e006      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>

  default:
#if EXPRESSLINK_DEBUG
    printf("[INFO] Other event received: %d\r\n", (int)event.id);
3400afb2:	683b      	ldr	r3, [r7, #0]
3400afb4:	4619      	mov	r1, r3
3400afb6:	4815      	ldr	r0, [pc, #84]	@ (3400b00c <ExpressLink_EventCallback+0x1b0>)
3400afb8:	f000 fb82 	bl	3400b6c0 <iprintf>
#endif
    break;
3400afbc:	e000      	b.n	3400afc0 <ExpressLink_EventCallback+0x164>
    break;
3400afbe:	bf00      	nop
  }
}
3400afc0:	bf00      	nop
3400afc2:	3708      	adds	r7, #8
3400afc4:	46bd      	mov	sp, r7
3400afc6:	bd80      	pop	{r7, pc}
3400afc8:	3400ca38 	.word	0x3400ca38
3400afcc:	3400ca60 	.word	0x3400ca60
3400afd0:	3400ca78 	.word	0x3400ca78
3400afd4:	3400ca94 	.word	0x3400ca94
3400afd8:	3400caac 	.word	0x3400caac
3400afdc:	3400cac4 	.word	0x3400cac4
3400afe0:	3400caf4 	.word	0x3400caf4
3400afe4:	3400cb08 	.word	0x3400cb08
3400afe8:	3400cb40 	.word	0x3400cb40
3400afec:	3400cb78 	.word	0x3400cb78
3400aff0:	3400cbd0 	.word	0x3400cbd0
3400aff4:	3400cc24 	.word	0x3400cc24
3400aff8:	3400cc5c 	.word	0x3400cc5c
3400affc:	3400cc9c 	.word	0x3400cc9c
3400b000:	3400ccd8 	.word	0x3400ccd8
3400b004:	3400cd18 	.word	0x3400cd18
3400b008:	3400cd5c 	.word	0x3400cd5c
3400b00c:	3400cda0 	.word	0x3400cda0

3400b010 <ExpressLink_Test>:
/**
 * @brief Check ExpressLink module
 * @retval The ExpressLink Module response
 */
char* ExpressLink_Test(void)
{
3400b010:	b580      	push	{r7, lr}
3400b012:	af00      	add	r7, sp, #0
  return expresslink_execute_command("AT\n", ExpressLink_COMMAND_TIMEOUT);
3400b014:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b018:	4802      	ldr	r0, [pc, #8]	@ (3400b024 <ExpressLink_Test+0x14>)
3400b01a:	f000 f97b 	bl	3400b314 <expresslink_execute_command>
3400b01e:	4603      	mov	r3, r0
}
3400b020:	4618      	mov	r0, r3
3400b022:	bd80      	pop	{r7, pc}
3400b024:	3400cdc4 	.word	0x3400cdc4

3400b028 <ExpressLink_Reset>:
/**
 * @brief Reset the ExpressLink Module
 * @retval None
 */
void ExpressLink_Reset(void)
{
3400b028:	b580      	push	{r7, lr}
3400b02a:	af00      	add	r7, sp, #0
  if (strcmp(expresslink_execute_command("AT+RESET\n", ExpressLink_COMMAND_TIMEOUT), "OK\r\n") == 0)
3400b02c:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b030:	4809      	ldr	r0, [pc, #36]	@ (3400b058 <ExpressLink_Reset+0x30>)
3400b032:	f000 f96f 	bl	3400b314 <expresslink_execute_command>
3400b036:	4603      	mov	r3, r0
3400b038:	4908      	ldr	r1, [pc, #32]	@ (3400b05c <ExpressLink_Reset+0x34>)
3400b03a:	4618      	mov	r0, r3
3400b03c:	f7f5 fba6 	bl	3400078c <strcmp>
3400b040:	4603      	mov	r3, r0
3400b042:	2b00      	cmp	r3, #0
3400b044:	d103      	bne.n	3400b04e <ExpressLink_Reset+0x26>
  {
    state = EXPRESSLINK_STATE_INIT;
3400b046:	4b06      	ldr	r3, [pc, #24]	@ (3400b060 <ExpressLink_Reset+0x38>)
3400b048:	2200      	movs	r2, #0
3400b04a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    state = EXPRESSLINK_STATE_ERROR;
  }
}
3400b04c:	e002      	b.n	3400b054 <ExpressLink_Reset+0x2c>
    state = EXPRESSLINK_STATE_ERROR;
3400b04e:	4b04      	ldr	r3, [pc, #16]	@ (3400b060 <ExpressLink_Reset+0x38>)
3400b050:	2220      	movs	r2, #32
3400b052:	701a      	strb	r2, [r3, #0]
}
3400b054:	bf00      	nop
3400b056:	bd80      	pop	{r7, pc}
3400b058:	3400cdc8 	.word	0x3400cdc8
3400b05c:	3400cdd4 	.word	0x3400cdd4
3400b060:	3400d578 	.word	0x3400d578

3400b064 <ExpressLink_Connect>:
/**
 * @brief Ask the ExpressLink Module to connect to AWS
 * @retval The ExpressLink Module response
 */
char* ExpressLink_Connect(void)
{
3400b064:	b580      	push	{r7, lr}
3400b066:	af00      	add	r7, sp, #0
  return expresslink_execute_command("AT+CONNECT\n", 10 * ExpressLink_COMMAND_TIMEOUT);
3400b068:	4903      	ldr	r1, [pc, #12]	@ (3400b078 <ExpressLink_Connect+0x14>)
3400b06a:	4804      	ldr	r0, [pc, #16]	@ (3400b07c <ExpressLink_Connect+0x18>)
3400b06c:	f000 f952 	bl	3400b314 <expresslink_execute_command>
3400b070:	4603      	mov	r3, r0
}
3400b072:	4618      	mov	r0, r3
3400b074:	bd80      	pop	{r7, pc}
3400b076:	bf00      	nop
3400b078:	000186a0 	.word	0x000186a0
3400b07c:	3400cddc 	.word	0x3400cddc

3400b080 <ExpressLink_Disonnect>:
/**
 * @brief Ask the ExpressLink Module to disconnect from AWS
 * @retval The ExpressLink Module response
 */
char* ExpressLink_Disonnect(void)
{
3400b080:	b580      	push	{r7, lr}
3400b082:	af00      	add	r7, sp, #0
  return expresslink_execute_command("AT+DISCONNECT\n", ExpressLink_COMMAND_TIMEOUT);
3400b084:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b088:	4802      	ldr	r0, [pc, #8]	@ (3400b094 <ExpressLink_Disonnect+0x14>)
3400b08a:	f000 f943 	bl	3400b314 <expresslink_execute_command>
3400b08e:	4603      	mov	r3, r0
}
3400b090:	4618      	mov	r0, r3
3400b092:	bd80      	pop	{r7, pc}
3400b094:	3400cdf8 	.word	0x3400cdf8

3400b098 <ExpressLink_SendMessage>:
/**
 * @brief Send a message on the specified topic
 * @retval The ExpressLink Module response
 */
char* ExpressLink_SendMessage(int topicNumber, char *message)
{
3400b098:	b580      	push	{r7, lr}
3400b09a:	b084      	sub	sp, #16
3400b09c:	af02      	add	r7, sp, #8
3400b09e:	6078      	str	r0, [r7, #4]
3400b0a0:	6039      	str	r1, [r7, #0]
  snprintf(command, EXPRESSLINK_TX_BUFFER_SIZE, "AT+SEND%d %s\n", topicNumber, message);
3400b0a2:	683b      	ldr	r3, [r7, #0]
3400b0a4:	9300      	str	r3, [sp, #0]
3400b0a6:	687b      	ldr	r3, [r7, #4]
3400b0a8:	4a07      	ldr	r2, [pc, #28]	@ (3400b0c8 <ExpressLink_SendMessage+0x30>)
3400b0aa:	2180      	movs	r1, #128	@ 0x80
3400b0ac:	4807      	ldr	r0, [pc, #28]	@ (3400b0cc <ExpressLink_SendMessage+0x34>)
3400b0ae:	f000 fb77 	bl	3400b7a0 <sniprintf>

  return expresslink_execute_command(command, ExpressLink_COMMAND_TIMEOUT);
3400b0b2:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b0b6:	4805      	ldr	r0, [pc, #20]	@ (3400b0cc <ExpressLink_SendMessage+0x34>)
3400b0b8:	f000 f92c 	bl	3400b314 <expresslink_execute_command>
3400b0bc:	4603      	mov	r3, r0
}
3400b0be:	4618      	mov	r0, r3
3400b0c0:	3708      	adds	r7, #8
3400b0c2:	46bd      	mov	sp, r7
3400b0c4:	bd80      	pop	{r7, pc}
3400b0c6:	bf00      	nop
3400b0c8:	3400ce18 	.word	0x3400ce18
3400b0cc:	3400d57c 	.word	0x3400d57c

3400b0d0 <ExpressLink_SetState>:
/**
 * @brief Set the module state
 * @retval None
 */
void ExpressLink_SetState(ExpressLink_state_t NewState)
{
3400b0d0:	b480      	push	{r7}
3400b0d2:	b083      	sub	sp, #12
3400b0d4:	af00      	add	r7, sp, #0
3400b0d6:	4603      	mov	r3, r0
3400b0d8:	71fb      	strb	r3, [r7, #7]
  state = NewState;
3400b0da:	4a04      	ldr	r2, [pc, #16]	@ (3400b0ec <ExpressLink_SetState+0x1c>)
3400b0dc:	79fb      	ldrb	r3, [r7, #7]
3400b0de:	7013      	strb	r3, [r2, #0]
}
3400b0e0:	bf00      	nop
3400b0e2:	370c      	adds	r7, #12
3400b0e4:	46bd      	mov	sp, r7
3400b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b0ea:	4770      	bx	lr
3400b0ec:	3400d578 	.word	0x3400d578

3400b0f0 <ExpressLink_SetEndpoint>:
/**
 * @brief Set AWS IoT Core endpoint
 * @retval The ExpressLink Module response
 */
char* ExpressLink_SetEndpoint(char *endpoint)
{
3400b0f0:	b580      	push	{r7, lr}
3400b0f2:	b082      	sub	sp, #8
3400b0f4:	af00      	add	r7, sp, #0
3400b0f6:	6078      	str	r0, [r7, #4]
  snprintf(command, EXPRESSLINK_TX_BUFFER_SIZE, "AT+CONF Endpoint=%s\n", endpoint);
3400b0f8:	687b      	ldr	r3, [r7, #4]
3400b0fa:	4a07      	ldr	r2, [pc, #28]	@ (3400b118 <ExpressLink_SetEndpoint+0x28>)
3400b0fc:	2180      	movs	r1, #128	@ 0x80
3400b0fe:	4807      	ldr	r0, [pc, #28]	@ (3400b11c <ExpressLink_SetEndpoint+0x2c>)
3400b100:	f000 fb4e 	bl	3400b7a0 <sniprintf>

  return expresslink_execute_command(command, ExpressLink_COMMAND_TIMEOUT);
3400b104:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b108:	4804      	ldr	r0, [pc, #16]	@ (3400b11c <ExpressLink_SetEndpoint+0x2c>)
3400b10a:	f000 f903 	bl	3400b314 <expresslink_execute_command>
3400b10e:	4603      	mov	r3, r0
}
3400b110:	4618      	mov	r0, r3
3400b112:	3708      	adds	r7, #8
3400b114:	46bd      	mov	sp, r7
3400b116:	bd80      	pop	{r7, pc}
3400b118:	3400ced4 	.word	0x3400ced4
3400b11c:	3400d57c 	.word	0x3400d57c

3400b120 <ExpressLink_SetTopic>:
/**
 * @brief Set a topic
 * @retval The ExpressLink Module response
 */
char* ExpressLink_SetTopic(int topicNumber, char *topic)
{
3400b120:	b580      	push	{r7, lr}
3400b122:	b084      	sub	sp, #16
3400b124:	af02      	add	r7, sp, #8
3400b126:	6078      	str	r0, [r7, #4]
3400b128:	6039      	str	r1, [r7, #0]
  snprintf(command, EXPRESSLINK_TX_BUFFER_SIZE, "AT+CONF Topic%d=%s\n", topicNumber, topic);
3400b12a:	683b      	ldr	r3, [r7, #0]
3400b12c:	9300      	str	r3, [sp, #0]
3400b12e:	687b      	ldr	r3, [r7, #4]
3400b130:	4a07      	ldr	r2, [pc, #28]	@ (3400b150 <ExpressLink_SetTopic+0x30>)
3400b132:	2180      	movs	r1, #128	@ 0x80
3400b134:	4807      	ldr	r0, [pc, #28]	@ (3400b154 <ExpressLink_SetTopic+0x34>)
3400b136:	f000 fb33 	bl	3400b7a0 <sniprintf>

  return expresslink_execute_command(command, ExpressLink_COMMAND_TIMEOUT);
3400b13a:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b13e:	4805      	ldr	r0, [pc, #20]	@ (3400b154 <ExpressLink_SetTopic+0x34>)
3400b140:	f000 f8e8 	bl	3400b314 <expresslink_execute_command>
3400b144:	4603      	mov	r3, r0
}
3400b146:	4618      	mov	r0, r3
3400b148:	3708      	adds	r7, #8
3400b14a:	46bd      	mov	sp, r7
3400b14c:	bd80      	pop	{r7, pc}
3400b14e:	bf00      	nop
3400b150:	3400ceec 	.word	0x3400ceec
3400b154:	3400d57c 	.word	0x3400d57c

3400b158 <ExpressLink_SetSSID>:
/**
 * @brief Set the Wi-Fi SSID
 * @retval The ExpressLink Module response
 */
char* ExpressLink_SetSSID(char *ssid)
{
3400b158:	b580      	push	{r7, lr}
3400b15a:	b082      	sub	sp, #8
3400b15c:	af00      	add	r7, sp, #0
3400b15e:	6078      	str	r0, [r7, #4]
  snprintf(command, EXPRESSLINK_TX_BUFFER_SIZE, "AT+CONF SSID=%s\n", ssid);
3400b160:	687b      	ldr	r3, [r7, #4]
3400b162:	4a07      	ldr	r2, [pc, #28]	@ (3400b180 <ExpressLink_SetSSID+0x28>)
3400b164:	2180      	movs	r1, #128	@ 0x80
3400b166:	4807      	ldr	r0, [pc, #28]	@ (3400b184 <ExpressLink_SetSSID+0x2c>)
3400b168:	f000 fb1a 	bl	3400b7a0 <sniprintf>

  return expresslink_execute_command(command, ExpressLink_COMMAND_TIMEOUT);
3400b16c:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b170:	4804      	ldr	r0, [pc, #16]	@ (3400b184 <ExpressLink_SetSSID+0x2c>)
3400b172:	f000 f8cf 	bl	3400b314 <expresslink_execute_command>
3400b176:	4603      	mov	r3, r0
}
3400b178:	4618      	mov	r0, r3
3400b17a:	3708      	adds	r7, #8
3400b17c:	46bd      	mov	sp, r7
3400b17e:	bd80      	pop	{r7, pc}
3400b180:	3400cf00 	.word	0x3400cf00
3400b184:	3400d57c 	.word	0x3400d57c

3400b188 <ExpressLink_SetPassphrase>:
/**
 * @brief Set the Wi-Fi password
 * @retval The ExpressLink Module response
 */
char* ExpressLink_SetPassphrase(char *passphrase)
{
3400b188:	b580      	push	{r7, lr}
3400b18a:	b082      	sub	sp, #8
3400b18c:	af00      	add	r7, sp, #0
3400b18e:	6078      	str	r0, [r7, #4]
  snprintf(command, EXPRESSLINK_TX_BUFFER_SIZE, "AT+CONF Passphrase=%s\n", passphrase);
3400b190:	687b      	ldr	r3, [r7, #4]
3400b192:	4a07      	ldr	r2, [pc, #28]	@ (3400b1b0 <ExpressLink_SetPassphrase+0x28>)
3400b194:	2180      	movs	r1, #128	@ 0x80
3400b196:	4807      	ldr	r0, [pc, #28]	@ (3400b1b4 <ExpressLink_SetPassphrase+0x2c>)
3400b198:	f000 fb02 	bl	3400b7a0 <sniprintf>

  return expresslink_execute_command(command, ExpressLink_COMMAND_TIMEOUT);
3400b19c:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b1a0:	4804      	ldr	r0, [pc, #16]	@ (3400b1b4 <ExpressLink_SetPassphrase+0x2c>)
3400b1a2:	f000 f8b7 	bl	3400b314 <expresslink_execute_command>
3400b1a6:	4603      	mov	r3, r0
}
3400b1a8:	4618      	mov	r0, r3
3400b1aa:	3708      	adds	r7, #8
3400b1ac:	46bd      	mov	sp, r7
3400b1ae:	bd80      	pop	{r7, pc}
3400b1b0:	3400cf14 	.word	0x3400cf14
3400b1b4:	3400d57c 	.word	0x3400d57c

3400b1b8 <ExpressLink_SetCustomName>:
/**
 * @brief Set the CustomName
 * @retval The ExpressLink Module response
 */
char* ExpressLink_SetCustomName(char *CustomName)
{
3400b1b8:	b580      	push	{r7, lr}
3400b1ba:	b082      	sub	sp, #8
3400b1bc:	af00      	add	r7, sp, #0
3400b1be:	6078      	str	r0, [r7, #4]
  snprintf(command, EXPRESSLINK_TX_BUFFER_SIZE, "AT+CONF CustomName=%s\n", CustomName);
3400b1c0:	687b      	ldr	r3, [r7, #4]
3400b1c2:	4a07      	ldr	r2, [pc, #28]	@ (3400b1e0 <ExpressLink_SetCustomName+0x28>)
3400b1c4:	2180      	movs	r1, #128	@ 0x80
3400b1c6:	4807      	ldr	r0, [pc, #28]	@ (3400b1e4 <ExpressLink_SetCustomName+0x2c>)
3400b1c8:	f000 faea 	bl	3400b7a0 <sniprintf>

  return expresslink_execute_command(command, ExpressLink_COMMAND_TIMEOUT);
3400b1cc:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b1d0:	4804      	ldr	r0, [pc, #16]	@ (3400b1e4 <ExpressLink_SetCustomName+0x2c>)
3400b1d2:	f000 f89f 	bl	3400b314 <expresslink_execute_command>
3400b1d6:	4603      	mov	r3, r0
}
3400b1d8:	4618      	mov	r0, r3
3400b1da:	3708      	adds	r7, #8
3400b1dc:	46bd      	mov	sp, r7
3400b1de:	bd80      	pop	{r7, pc}
3400b1e0:	3400cf78 	.word	0x3400cf78
3400b1e4:	3400d57c 	.word	0x3400d57c

3400b1e8 <ExpressLink_GetState>:
/**
 * @brief Get the module state
 * @retval The module state
 */
ExpressLink_state_t ExpressLink_GetState()
{
3400b1e8:	b480      	push	{r7}
3400b1ea:	af00      	add	r7, sp, #0
  return state;
3400b1ec:	4b03      	ldr	r3, [pc, #12]	@ (3400b1fc <ExpressLink_GetState+0x14>)
3400b1ee:	781b      	ldrb	r3, [r3, #0]
3400b1f0:	b2db      	uxtb	r3, r3
}
3400b1f2:	4618      	mov	r0, r3
3400b1f4:	46bd      	mov	sp, r7
3400b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
3400b1fa:	4770      	bx	lr
3400b1fc:	3400d578 	.word	0x3400d578

3400b200 <ExpressLink_GetConf>:
/**
 * @brief Get a specific configuration value from the module
 * @retval The ExpressLink Module response
 */
char* ExpressLink_GetConf(char *conf)
{
3400b200:	b580      	push	{r7, lr}
3400b202:	b082      	sub	sp, #8
3400b204:	af00      	add	r7, sp, #0
3400b206:	6078      	str	r0, [r7, #4]
  snprintf(command, EXPRESSLINK_TX_BUFFER_SIZE, "AT+CONF? %s\n", conf);
3400b208:	687b      	ldr	r3, [r7, #4]
3400b20a:	4a07      	ldr	r2, [pc, #28]	@ (3400b228 <ExpressLink_GetConf+0x28>)
3400b20c:	2180      	movs	r1, #128	@ 0x80
3400b20e:	4807      	ldr	r0, [pc, #28]	@ (3400b22c <ExpressLink_GetConf+0x2c>)
3400b210:	f000 fac6 	bl	3400b7a0 <sniprintf>

  return expresslink_execute_command(command, ExpressLink_COMMAND_TIMEOUT);
3400b214:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b218:	4804      	ldr	r0, [pc, #16]	@ (3400b22c <ExpressLink_GetConf+0x2c>)
3400b21a:	f000 f87b 	bl	3400b314 <expresslink_execute_command>
3400b21e:	4603      	mov	r3, r0
}
3400b220:	4618      	mov	r0, r3
3400b222:	3708      	adds	r7, #8
3400b224:	46bd      	mov	sp, r7
3400b226:	bd80      	pop	{r7, pc}
3400b228:	3400d1cc 	.word	0x3400d1cc
3400b22c:	3400d57c 	.word	0x3400d57c

3400b230 <ExpressLink_GetThingName>:
/**
 * @brief Get the thing name from the module
 * @retval The ExpressLink Module response
 */
char* ExpressLink_GetThingName(void)
{
3400b230:	b580      	push	{r7, lr}
3400b232:	b082      	sub	sp, #8
3400b234:	af00      	add	r7, sp, #0
  char *res;

  res = ExpressLink_GetConf((char*) &"ThingName");
3400b236:	4805      	ldr	r0, [pc, #20]	@ (3400b24c <ExpressLink_GetThingName+0x1c>)
3400b238:	f7ff ffe2 	bl	3400b200 <ExpressLink_GetConf>
3400b23c:	6078      	str	r0, [r7, #4]

  return &res[3];
3400b23e:	687b      	ldr	r3, [r7, #4]
3400b240:	3303      	adds	r3, #3
}
3400b242:	4618      	mov	r0, r3
3400b244:	3708      	adds	r7, #8
3400b246:	46bd      	mov	sp, r7
3400b248:	bd80      	pop	{r7, pc}
3400b24a:	bf00      	nop
3400b24c:	3400d1dc 	.word	0x3400d1dc

3400b250 <ExpressLink_GetEvent>:
/**
 * @brief Get the latest event.
 * @retval The event number
 */
ExpressLink_event_t ExpressLink_GetEvent(void)
{
3400b250:	b580      	push	{r7, lr}
3400b252:	b084      	sub	sp, #16
3400b254:	af00      	add	r7, sp, #0
3400b256:	6078      	str	r0, [r7, #4]
  
  static ExpressLink_event_t event;

  event.id = EXPRESSLINK_EVENT_NONE;
3400b258:	4b29      	ldr	r3, [pc, #164]	@ (3400b300 <ExpressLink_GetEvent+0xb0>)
3400b25a:	2200      	movs	r2, #0
3400b25c:	601a      	str	r2, [r3, #0]
  val = HAL_GPIO_ReadPin(ExpressLink_EVENT_GPIO_Port, ExpressLink_EVENT_Pin);

  if (GPIO_PIN_RESET != val)
#endif
  {
    res = expresslink_execute_command("AT+EVENT?\n", ExpressLink_COMMAND_TIMEOUT);
3400b25e:	f242 7110 	movw	r1, #10000	@ 0x2710
3400b262:	4828      	ldr	r0, [pc, #160]	@ (3400b304 <ExpressLink_GetEvent+0xb4>)
3400b264:	f000 f856 	bl	3400b314 <expresslink_execute_command>
3400b268:	60f8      	str	r0, [r7, #12]
    
    if(strstr(res, "ERROR") != NULL)
3400b26a:	4927      	ldr	r1, [pc, #156]	@ (3400b308 <ExpressLink_GetEvent+0xb8>)
3400b26c:	68f8      	ldr	r0, [r7, #12]
3400b26e:	f000 fbab 	bl	3400b9c8 <strstr>
3400b272:	4603      	mov	r3, r0
3400b274:	2b00      	cmp	r3, #0
3400b276:	d004      	beq.n	3400b282 <ExpressLink_GetEvent+0x32>
    {
      event.id = EXPRESSLINK_EVENT_ERROR;
3400b278:	4b21      	ldr	r3, [pc, #132]	@ (3400b300 <ExpressLink_GetEvent+0xb0>)
3400b27a:	f04f 32ff 	mov.w	r2, #4294967295
3400b27e:	601a      	str	r2, [r3, #0]
3400b280:	e011      	b.n	3400b2a6 <ExpressLink_GetEvent+0x56>
    }
    else if (strcmp(res, "OK") == 0)
3400b282:	4922      	ldr	r1, [pc, #136]	@ (3400b30c <ExpressLink_GetEvent+0xbc>)
3400b284:	68f8      	ldr	r0, [r7, #12]
3400b286:	f7f5 fa81 	bl	3400078c <strcmp>
3400b28a:	4603      	mov	r3, r0
3400b28c:	2b00      	cmp	r3, #0
3400b28e:	d103      	bne.n	3400b298 <ExpressLink_GetEvent+0x48>
    {
      event.id = EXPRESSLINK_EVENT_NONE;
3400b290:	4b1b      	ldr	r3, [pc, #108]	@ (3400b300 <ExpressLink_GetEvent+0xb0>)
3400b292:	2200      	movs	r2, #0
3400b294:	601a      	str	r2, [r3, #0]
3400b296:	e006      	b.n	3400b2a6 <ExpressLink_GetEvent+0x56>
    }
    else
    {
      event.id = (ExpressLink_event_id_t) get_int(res);
3400b298:	68f8      	ldr	r0, [r7, #12]
3400b29a:	f000 f88d 	bl	3400b3b8 <get_int>
3400b29e:	4603      	mov	r3, r0
3400b2a0:	461a      	mov	r2, r3
3400b2a2:	4b17      	ldr	r3, [pc, #92]	@ (3400b300 <ExpressLink_GetEvent+0xb0>)
3400b2a4:	601a      	str	r2, [r3, #0]
    }

    switch (event.id)
3400b2a6:	4b16      	ldr	r3, [pc, #88]	@ (3400b300 <ExpressLink_GetEvent+0xb0>)
3400b2a8:	681b      	ldr	r3, [r3, #0]
3400b2aa:	2b1b      	cmp	r3, #27
3400b2ac:	bf8c      	ite	hi
3400b2ae:	2201      	movhi	r2, #1
3400b2b0:	2200      	movls	r2, #0
3400b2b2:	b2d2      	uxtb	r2, r2
3400b2b4:	2a00      	cmp	r2, #0
3400b2b6:	d115      	bne.n	3400b2e4 <ExpressLink_GetEvent+0x94>
3400b2b8:	4a15      	ldr	r2, [pc, #84]	@ (3400b310 <ExpressLink_GetEvent+0xc0>)
3400b2ba:	fa22 f303 	lsr.w	r3, r2, r3
3400b2be:	f003 0301 	and.w	r3, r3, #1
3400b2c2:	2b00      	cmp	r3, #0
3400b2c4:	bf14      	ite	ne
3400b2c6:	2301      	movne	r3, #1
3400b2c8:	2300      	moveq	r3, #0
3400b2ca:	b2db      	uxtb	r3, r3
3400b2cc:	2b00      	cmp	r3, #0
3400b2ce:	d009      	beq.n	3400b2e4 <ExpressLink_GetEvent+0x94>
    case EXPRESSLINK_EVENT_SHADOW_UPDATE:
    case EXPRESSLINK_EVENT_SHADOW_DELTA:
    case EXPRESSLINK_EVENT_SHADOW_DELETE:
    case EXPRESSLINK_EVENT_SHADOW_SUBACK:
    case EXPRESSLINK_EVENT_SHADOW_SUBNACK:
      event.param = (ExpressLink_event_id_t) get_int(&res[5]);
3400b2d0:	68fb      	ldr	r3, [r7, #12]
3400b2d2:	3305      	adds	r3, #5
3400b2d4:	4618      	mov	r0, r3
3400b2d6:	f000 f86f 	bl	3400b3b8 <get_int>
3400b2da:	4603      	mov	r3, r0
3400b2dc:	461a      	mov	r2, r3
3400b2de:	4b08      	ldr	r3, [pc, #32]	@ (3400b300 <ExpressLink_GetEvent+0xb0>)
3400b2e0:	605a      	str	r2, [r3, #4]
      break;
3400b2e2:	e003      	b.n	3400b2ec <ExpressLink_GetEvent+0x9c>

    default:
      event.param = 0;
3400b2e4:	4b06      	ldr	r3, [pc, #24]	@ (3400b300 <ExpressLink_GetEvent+0xb0>)
3400b2e6:	2200      	movs	r2, #0
3400b2e8:	605a      	str	r2, [r3, #4]
      break;
3400b2ea:	bf00      	nop
    }
  }

  return event;
3400b2ec:	687b      	ldr	r3, [r7, #4]
3400b2ee:	4a04      	ldr	r2, [pc, #16]	@ (3400b300 <ExpressLink_GetEvent+0xb0>)
3400b2f0:	e892 0003 	ldmia.w	r2, {r0, r1}
3400b2f4:	e883 0003 	stmia.w	r3, {r0, r1}
}
3400b2f8:	6878      	ldr	r0, [r7, #4]
3400b2fa:	3710      	adds	r7, #16
3400b2fc:	46bd      	mov	sp, r7
3400b2fe:	bd80      	pop	{r7, pc}
3400b300:	3400d67c 	.word	0x3400d67c
3400b304:	3400d1fc 	.word	0x3400d1fc
3400b308:	3400d208 	.word	0x3400d208
3400b30c:	3400d210 	.word	0x3400d210
3400b310:	0ff00342 	.word	0x0ff00342

3400b314 <expresslink_execute_command>:
/**
 * @brief Send a command to the module
 * @retval The ExpressLink Module response
 */
char* expresslink_execute_command(char *command, unsigned long timeout_ms)
{
3400b314:	b580      	push	{r7, lr}
3400b316:	b086      	sub	sp, #24
3400b318:	af00      	add	r7, sp, #0
3400b31a:	6078      	str	r0, [r7, #4]
3400b31c:	6039      	str	r1, [r7, #0]
  int i = 0;
3400b31e:	2300      	movs	r3, #0
3400b320:	617b      	str	r3, [r7, #20]
  int command_size = strlen(command);
3400b322:	6878      	ldr	r0, [r7, #4]
3400b324:	f7f5 fa3c 	bl	340007a0 <strlen>
3400b328:	4603      	mov	r3, r0
3400b32a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef USART_STATUS = HAL_OK;
3400b32c:	2300      	movs	r3, #0
3400b32e:	73fb      	strb	r3, [r7, #15]

  memset(response, 0, EXPRESSLINK_RX_BUFFER_SIZE);
3400b330:	2280      	movs	r2, #128	@ 0x80
3400b332:	2100      	movs	r1, #0
3400b334:	481c      	ldr	r0, [pc, #112]	@ (3400b3a8 <expresslink_execute_command+0x94>)
3400b336:	f000 fb3f 	bl	3400b9b8 <memset>

#if EXPRESSLINK_DEBUG
  printf("%s", command);
3400b33a:	6879      	ldr	r1, [r7, #4]
3400b33c:	481b      	ldr	r0, [pc, #108]	@ (3400b3ac <expresslink_execute_command+0x98>)
3400b33e:	f000 f9bf 	bl	3400b6c0 <iprintf>
#endif

  HAL_UART_Transmit(&EXPRESSLINK_USART_HANDLER, (uint8_t* )command, command_size, timeout_ms);
3400b342:	693b      	ldr	r3, [r7, #16]
3400b344:	b29a      	uxth	r2, r3
3400b346:	683b      	ldr	r3, [r7, #0]
3400b348:	6879      	ldr	r1, [r7, #4]
3400b34a:	4819      	ldr	r0, [pc, #100]	@ (3400b3b0 <expresslink_execute_command+0x9c>)
3400b34c:	f7fe fe2a 	bl	34009fa4 <HAL_UART_Transmit>

  do
  {
    USART_STATUS = HAL_UART_Receive(&EXPRESSLINK_USART_HANDLER, (uint8_t* )&response[i], 1, timeout_ms);
3400b350:	697b      	ldr	r3, [r7, #20]
3400b352:	4a15      	ldr	r2, [pc, #84]	@ (3400b3a8 <expresslink_execute_command+0x94>)
3400b354:	1899      	adds	r1, r3, r2
3400b356:	683b      	ldr	r3, [r7, #0]
3400b358:	2201      	movs	r2, #1
3400b35a:	4815      	ldr	r0, [pc, #84]	@ (3400b3b0 <expresslink_execute_command+0x9c>)
3400b35c:	f7fe feb0 	bl	3400a0c0 <HAL_UART_Receive>
3400b360:	4603      	mov	r3, r0
3400b362:	73fb      	strb	r3, [r7, #15]
    i++;
3400b364:	697b      	ldr	r3, [r7, #20]
3400b366:	3301      	adds	r3, #1
3400b368:	617b      	str	r3, [r7, #20]
  } while ((response[i - 1] != '\n') && (USART_STATUS != HAL_TIMEOUT));
3400b36a:	697b      	ldr	r3, [r7, #20]
3400b36c:	3b01      	subs	r3, #1
3400b36e:	4a0e      	ldr	r2, [pc, #56]	@ (3400b3a8 <expresslink_execute_command+0x94>)
3400b370:	5cd3      	ldrb	r3, [r2, r3]
3400b372:	2b0a      	cmp	r3, #10
3400b374:	d002      	beq.n	3400b37c <expresslink_execute_command+0x68>
3400b376:	7bfb      	ldrb	r3, [r7, #15]
3400b378:	2b03      	cmp	r3, #3
3400b37a:	d1e9      	bne.n	3400b350 <expresslink_execute_command+0x3c>

  if(USART_STATUS == HAL_TIMEOUT)
3400b37c:	7bfb      	ldrb	r3, [r7, #15]
3400b37e:	2b03      	cmp	r3, #3
3400b380:	d109      	bne.n	3400b396 <expresslink_execute_command+0x82>
  {
    memset  (response, 0, EXPRESSLINK_RX_BUFFER_SIZE);
3400b382:	2280      	movs	r2, #128	@ 0x80
3400b384:	2100      	movs	r1, #0
3400b386:	4808      	ldr	r0, [pc, #32]	@ (3400b3a8 <expresslink_execute_command+0x94>)
3400b388:	f000 fb16 	bl	3400b9b8 <memset>
    snprintf(response, EXPRESSLINK_TX_BUFFER_SIZE, "ERROR\r\n");
3400b38c:	4a09      	ldr	r2, [pc, #36]	@ (3400b3b4 <expresslink_execute_command+0xa0>)
3400b38e:	2180      	movs	r1, #128	@ 0x80
3400b390:	4805      	ldr	r0, [pc, #20]	@ (3400b3a8 <expresslink_execute_command+0x94>)
3400b392:	f000 fa05 	bl	3400b7a0 <sniprintf>
  }

#if (EXPRESSLINK_DEBUG == EXPRESSLINK_LOG_LEVEL_2)
  printf("%s", response);
3400b396:	4904      	ldr	r1, [pc, #16]	@ (3400b3a8 <expresslink_execute_command+0x94>)
3400b398:	4804      	ldr	r0, [pc, #16]	@ (3400b3ac <expresslink_execute_command+0x98>)
3400b39a:	f000 f991 	bl	3400b6c0 <iprintf>
#endif
  return response;
3400b39e:	4b02      	ldr	r3, [pc, #8]	@ (3400b3a8 <expresslink_execute_command+0x94>)
}
3400b3a0:	4618      	mov	r0, r3
3400b3a2:	3718      	adds	r7, #24
3400b3a4:	46bd      	mov	sp, r7
3400b3a6:	bd80      	pop	{r7, pc}
3400b3a8:	3400d5fc 	.word	0x3400d5fc
3400b3ac:	3400d214 	.word	0x3400d214
3400b3b0:	3400d4d0 	.word	0x3400d4d0
3400b3b4:	3400d218 	.word	0x3400d218

3400b3b8 <get_int>:
/**
 * @brief Get an int from a string
 * @retval The int value
 */
static int get_int(char *string)
{
3400b3b8:	b580      	push	{r7, lr}
3400b3ba:	b084      	sub	sp, #16
3400b3bc:	af00      	add	r7, sp, #0
3400b3be:	6078      	str	r0, [r7, #4]
  int val = 0;
3400b3c0:	2300      	movs	r3, #0
3400b3c2:	60fb      	str	r3, [r7, #12]

  while (*string)
3400b3c4:	e015      	b.n	3400b3f2 <get_int+0x3a>
  {
    if (isdigit((int )*string))
3400b3c6:	687b      	ldr	r3, [r7, #4]
3400b3c8:	781b      	ldrb	r3, [r3, #0]
3400b3ca:	3301      	adds	r3, #1
3400b3cc:	4a0d      	ldr	r2, [pc, #52]	@ (3400b404 <get_int+0x4c>)
3400b3ce:	4413      	add	r3, r2
3400b3d0:	781b      	ldrb	r3, [r3, #0]
3400b3d2:	f003 0304 	and.w	r3, r3, #4
3400b3d6:	2b00      	cmp	r3, #0
3400b3d8:	d008      	beq.n	3400b3ec <get_int+0x34>
    {
      val = (int) strtol(string, &string, 10);
3400b3da:	687b      	ldr	r3, [r7, #4]
3400b3dc:	1d39      	adds	r1, r7, #4
3400b3de:	220a      	movs	r2, #10
3400b3e0:	4618      	mov	r0, r3
3400b3e2:	f000 f8a1 	bl	3400b528 <strtol>
3400b3e6:	60f8      	str	r0, [r7, #12]

      return val;
3400b3e8:	68fb      	ldr	r3, [r7, #12]
3400b3ea:	e007      	b.n	3400b3fc <get_int+0x44>
    }
    else
    {
      string++;
3400b3ec:	687b      	ldr	r3, [r7, #4]
3400b3ee:	3301      	adds	r3, #1
3400b3f0:	607b      	str	r3, [r7, #4]
  while (*string)
3400b3f2:	687b      	ldr	r3, [r7, #4]
3400b3f4:	781b      	ldrb	r3, [r3, #0]
3400b3f6:	2b00      	cmp	r3, #0
3400b3f8:	d1e5      	bne.n	3400b3c6 <get_int+0xe>
    }
  }

  return val;
3400b3fa:	68fb      	ldr	r3, [r7, #12]
}
3400b3fc:	4618      	mov	r0, r3
3400b3fe:	3710      	adds	r7, #16
3400b400:	46bd      	mov	sp, r7
3400b402:	bd80      	pop	{r7, pc}
3400b404:	3400d248 	.word	0x3400d248

3400b408 <_write>:
#ifdef __ICCARM__
int __write(int file, char *ptr, int len)
#else
int _write(int file, char *ptr, int len)
#endif
{
3400b408:	b580      	push	{r7, lr}
3400b40a:	b084      	sub	sp, #16
3400b40c:	af00      	add	r7, sp, #0
3400b40e:	60f8      	str	r0, [r7, #12]
3400b410:	60b9      	str	r1, [r7, #8]
3400b412:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&STDOUT_UART_HANDLER,(uint8_t *)ptr, len, 0xFFFFFFFF);
3400b414:	687b      	ldr	r3, [r7, #4]
3400b416:	b29a      	uxth	r2, r3
3400b418:	f04f 33ff 	mov.w	r3, #4294967295
3400b41c:	68b9      	ldr	r1, [r7, #8]
3400b41e:	4804      	ldr	r0, [pc, #16]	@ (3400b430 <_write+0x28>)
3400b420:	f7fe fdc0 	bl	34009fa4 <HAL_UART_Transmit>
  
  return len;
3400b424:	687b      	ldr	r3, [r7, #4]
}
3400b426:	4618      	mov	r0, r3
3400b428:	3710      	adds	r7, #16
3400b42a:	46bd      	mov	sp, r7
3400b42c:	bd80      	pop	{r7, pc}
3400b42e:	bf00      	nop
3400b430:	3400d43c 	.word	0x3400d43c

3400b434 <_strtol_l.constprop.0>:
3400b434:	2b24      	cmp	r3, #36	@ 0x24
3400b436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400b43a:	4686      	mov	lr, r0
3400b43c:	4690      	mov	r8, r2
3400b43e:	d801      	bhi.n	3400b444 <_strtol_l.constprop.0+0x10>
3400b440:	2b01      	cmp	r3, #1
3400b442:	d106      	bne.n	3400b452 <_strtol_l.constprop.0+0x1e>
3400b444:	f000 fb1c 	bl	3400ba80 <__errno>
3400b448:	2316      	movs	r3, #22
3400b44a:	6003      	str	r3, [r0, #0]
3400b44c:	2000      	movs	r0, #0
3400b44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400b452:	460d      	mov	r5, r1
3400b454:	4833      	ldr	r0, [pc, #204]	@ (3400b524 <_strtol_l.constprop.0+0xf0>)
3400b456:	462a      	mov	r2, r5
3400b458:	f815 4b01 	ldrb.w	r4, [r5], #1
3400b45c:	5d06      	ldrb	r6, [r0, r4]
3400b45e:	f016 0608 	ands.w	r6, r6, #8
3400b462:	d1f8      	bne.n	3400b456 <_strtol_l.constprop.0+0x22>
3400b464:	2c2d      	cmp	r4, #45	@ 0x2d
3400b466:	d12d      	bne.n	3400b4c4 <_strtol_l.constprop.0+0x90>
3400b468:	782c      	ldrb	r4, [r5, #0]
3400b46a:	2601      	movs	r6, #1
3400b46c:	1c95      	adds	r5, r2, #2
3400b46e:	f033 0210 	bics.w	r2, r3, #16
3400b472:	d109      	bne.n	3400b488 <_strtol_l.constprop.0+0x54>
3400b474:	2c30      	cmp	r4, #48	@ 0x30
3400b476:	d12a      	bne.n	3400b4ce <_strtol_l.constprop.0+0x9a>
3400b478:	782a      	ldrb	r2, [r5, #0]
3400b47a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
3400b47e:	2a58      	cmp	r2, #88	@ 0x58
3400b480:	d125      	bne.n	3400b4ce <_strtol_l.constprop.0+0x9a>
3400b482:	786c      	ldrb	r4, [r5, #1]
3400b484:	2310      	movs	r3, #16
3400b486:	3502      	adds	r5, #2
3400b488:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
3400b48c:	2200      	movs	r2, #0
3400b48e:	f10c 3cff 	add.w	ip, ip, #4294967295
3400b492:	4610      	mov	r0, r2
3400b494:	fbbc f9f3 	udiv	r9, ip, r3
3400b498:	fb03 ca19 	mls	sl, r3, r9, ip
3400b49c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
3400b4a0:	2f09      	cmp	r7, #9
3400b4a2:	d81b      	bhi.n	3400b4dc <_strtol_l.constprop.0+0xa8>
3400b4a4:	463c      	mov	r4, r7
3400b4a6:	42a3      	cmp	r3, r4
3400b4a8:	dd27      	ble.n	3400b4fa <_strtol_l.constprop.0+0xc6>
3400b4aa:	1c57      	adds	r7, r2, #1
3400b4ac:	d007      	beq.n	3400b4be <_strtol_l.constprop.0+0x8a>
3400b4ae:	4581      	cmp	r9, r0
3400b4b0:	d320      	bcc.n	3400b4f4 <_strtol_l.constprop.0+0xc0>
3400b4b2:	d101      	bne.n	3400b4b8 <_strtol_l.constprop.0+0x84>
3400b4b4:	45a2      	cmp	sl, r4
3400b4b6:	db1d      	blt.n	3400b4f4 <_strtol_l.constprop.0+0xc0>
3400b4b8:	fb00 4003 	mla	r0, r0, r3, r4
3400b4bc:	2201      	movs	r2, #1
3400b4be:	f815 4b01 	ldrb.w	r4, [r5], #1
3400b4c2:	e7eb      	b.n	3400b49c <_strtol_l.constprop.0+0x68>
3400b4c4:	2c2b      	cmp	r4, #43	@ 0x2b
3400b4c6:	bf04      	itt	eq
3400b4c8:	782c      	ldrbeq	r4, [r5, #0]
3400b4ca:	1c95      	addeq	r5, r2, #2
3400b4cc:	e7cf      	b.n	3400b46e <_strtol_l.constprop.0+0x3a>
3400b4ce:	2b00      	cmp	r3, #0
3400b4d0:	d1da      	bne.n	3400b488 <_strtol_l.constprop.0+0x54>
3400b4d2:	2c30      	cmp	r4, #48	@ 0x30
3400b4d4:	bf0c      	ite	eq
3400b4d6:	2308      	moveq	r3, #8
3400b4d8:	230a      	movne	r3, #10
3400b4da:	e7d5      	b.n	3400b488 <_strtol_l.constprop.0+0x54>
3400b4dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
3400b4e0:	2f19      	cmp	r7, #25
3400b4e2:	d801      	bhi.n	3400b4e8 <_strtol_l.constprop.0+0xb4>
3400b4e4:	3c37      	subs	r4, #55	@ 0x37
3400b4e6:	e7de      	b.n	3400b4a6 <_strtol_l.constprop.0+0x72>
3400b4e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
3400b4ec:	2f19      	cmp	r7, #25
3400b4ee:	d804      	bhi.n	3400b4fa <_strtol_l.constprop.0+0xc6>
3400b4f0:	3c57      	subs	r4, #87	@ 0x57
3400b4f2:	e7d8      	b.n	3400b4a6 <_strtol_l.constprop.0+0x72>
3400b4f4:	f04f 32ff 	mov.w	r2, #4294967295
3400b4f8:	e7e1      	b.n	3400b4be <_strtol_l.constprop.0+0x8a>
3400b4fa:	1c53      	adds	r3, r2, #1
3400b4fc:	d108      	bne.n	3400b510 <_strtol_l.constprop.0+0xdc>
3400b4fe:	2322      	movs	r3, #34	@ 0x22
3400b500:	4660      	mov	r0, ip
3400b502:	f8ce 3000 	str.w	r3, [lr]
3400b506:	f1b8 0f00 	cmp.w	r8, #0
3400b50a:	d0a0      	beq.n	3400b44e <_strtol_l.constprop.0+0x1a>
3400b50c:	1e69      	subs	r1, r5, #1
3400b50e:	e006      	b.n	3400b51e <_strtol_l.constprop.0+0xea>
3400b510:	b106      	cbz	r6, 3400b514 <_strtol_l.constprop.0+0xe0>
3400b512:	4240      	negs	r0, r0
3400b514:	f1b8 0f00 	cmp.w	r8, #0
3400b518:	d099      	beq.n	3400b44e <_strtol_l.constprop.0+0x1a>
3400b51a:	2a00      	cmp	r2, #0
3400b51c:	d1f6      	bne.n	3400b50c <_strtol_l.constprop.0+0xd8>
3400b51e:	f8c8 1000 	str.w	r1, [r8]
3400b522:	e794      	b.n	3400b44e <_strtol_l.constprop.0+0x1a>
3400b524:	3400d249 	.word	0x3400d249

3400b528 <strtol>:
3400b528:	4613      	mov	r3, r2
3400b52a:	460a      	mov	r2, r1
3400b52c:	4601      	mov	r1, r0
3400b52e:	4802      	ldr	r0, [pc, #8]	@ (3400b538 <strtol+0x10>)
3400b530:	6800      	ldr	r0, [r0, #0]
3400b532:	f7ff bf7f 	b.w	3400b434 <_strtol_l.constprop.0>
3400b536:	bf00      	nop
3400b538:	3400d3a8 	.word	0x3400d3a8

3400b53c <std>:
3400b53c:	2300      	movs	r3, #0
3400b53e:	b510      	push	{r4, lr}
3400b540:	4604      	mov	r4, r0
3400b542:	6083      	str	r3, [r0, #8]
3400b544:	8181      	strh	r1, [r0, #12]
3400b546:	4619      	mov	r1, r3
3400b548:	6643      	str	r3, [r0, #100]	@ 0x64
3400b54a:	81c2      	strh	r2, [r0, #14]
3400b54c:	2208      	movs	r2, #8
3400b54e:	6183      	str	r3, [r0, #24]
3400b550:	e9c0 3300 	strd	r3, r3, [r0]
3400b554:	e9c0 3304 	strd	r3, r3, [r0, #16]
3400b558:	305c      	adds	r0, #92	@ 0x5c
3400b55a:	f000 fa2d 	bl	3400b9b8 <memset>
3400b55e:	4b0d      	ldr	r3, [pc, #52]	@ (3400b594 <std+0x58>)
3400b560:	6224      	str	r4, [r4, #32]
3400b562:	6263      	str	r3, [r4, #36]	@ 0x24
3400b564:	4b0c      	ldr	r3, [pc, #48]	@ (3400b598 <std+0x5c>)
3400b566:	62a3      	str	r3, [r4, #40]	@ 0x28
3400b568:	4b0c      	ldr	r3, [pc, #48]	@ (3400b59c <std+0x60>)
3400b56a:	62e3      	str	r3, [r4, #44]	@ 0x2c
3400b56c:	4b0c      	ldr	r3, [pc, #48]	@ (3400b5a0 <std+0x64>)
3400b56e:	6323      	str	r3, [r4, #48]	@ 0x30
3400b570:	4b0c      	ldr	r3, [pc, #48]	@ (3400b5a4 <std+0x68>)
3400b572:	429c      	cmp	r4, r3
3400b574:	d006      	beq.n	3400b584 <std+0x48>
3400b576:	f103 0268 	add.w	r2, r3, #104	@ 0x68
3400b57a:	4294      	cmp	r4, r2
3400b57c:	d002      	beq.n	3400b584 <std+0x48>
3400b57e:	33d0      	adds	r3, #208	@ 0xd0
3400b580:	429c      	cmp	r4, r3
3400b582:	d105      	bne.n	3400b590 <std+0x54>
3400b584:	f104 0058 	add.w	r0, r4, #88	@ 0x58
3400b588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400b58c:	f000 baa2 	b.w	3400bad4 <__retarget_lock_init_recursive>
3400b590:	bd10      	pop	{r4, pc}
3400b592:	bf00      	nop
3400b594:	3400b809 	.word	0x3400b809
3400b598:	3400b82b 	.word	0x3400b82b
3400b59c:	3400b863 	.word	0x3400b863
3400b5a0:	3400b887 	.word	0x3400b887
3400b5a4:	3400d684 	.word	0x3400d684

3400b5a8 <stdio_exit_handler>:
3400b5a8:	4a02      	ldr	r2, [pc, #8]	@ (3400b5b4 <stdio_exit_handler+0xc>)
3400b5aa:	4903      	ldr	r1, [pc, #12]	@ (3400b5b8 <stdio_exit_handler+0x10>)
3400b5ac:	4803      	ldr	r0, [pc, #12]	@ (3400b5bc <stdio_exit_handler+0x14>)
3400b5ae:	f000 b869 	b.w	3400b684 <_fwalk_sglue>
3400b5b2:	bf00      	nop
3400b5b4:	3400d39c 	.word	0x3400d39c
3400b5b8:	3400c62d 	.word	0x3400c62d
3400b5bc:	3400d3ac 	.word	0x3400d3ac

3400b5c0 <cleanup_stdio>:
3400b5c0:	6841      	ldr	r1, [r0, #4]
3400b5c2:	4b0c      	ldr	r3, [pc, #48]	@ (3400b5f4 <cleanup_stdio+0x34>)
3400b5c4:	4299      	cmp	r1, r3
3400b5c6:	b510      	push	{r4, lr}
3400b5c8:	4604      	mov	r4, r0
3400b5ca:	d001      	beq.n	3400b5d0 <cleanup_stdio+0x10>
3400b5cc:	f001 f82e 	bl	3400c62c <_fflush_r>
3400b5d0:	68a1      	ldr	r1, [r4, #8]
3400b5d2:	4b09      	ldr	r3, [pc, #36]	@ (3400b5f8 <cleanup_stdio+0x38>)
3400b5d4:	4299      	cmp	r1, r3
3400b5d6:	d002      	beq.n	3400b5de <cleanup_stdio+0x1e>
3400b5d8:	4620      	mov	r0, r4
3400b5da:	f001 f827 	bl	3400c62c <_fflush_r>
3400b5de:	68e1      	ldr	r1, [r4, #12]
3400b5e0:	4b06      	ldr	r3, [pc, #24]	@ (3400b5fc <cleanup_stdio+0x3c>)
3400b5e2:	4299      	cmp	r1, r3
3400b5e4:	d004      	beq.n	3400b5f0 <cleanup_stdio+0x30>
3400b5e6:	4620      	mov	r0, r4
3400b5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400b5ec:	f001 b81e 	b.w	3400c62c <_fflush_r>
3400b5f0:	bd10      	pop	{r4, pc}
3400b5f2:	bf00      	nop
3400b5f4:	3400d684 	.word	0x3400d684
3400b5f8:	3400d6ec 	.word	0x3400d6ec
3400b5fc:	3400d754 	.word	0x3400d754

3400b600 <global_stdio_init.part.0>:
3400b600:	b510      	push	{r4, lr}
3400b602:	4b0b      	ldr	r3, [pc, #44]	@ (3400b630 <global_stdio_init.part.0+0x30>)
3400b604:	2104      	movs	r1, #4
3400b606:	4c0b      	ldr	r4, [pc, #44]	@ (3400b634 <global_stdio_init.part.0+0x34>)
3400b608:	4a0b      	ldr	r2, [pc, #44]	@ (3400b638 <global_stdio_init.part.0+0x38>)
3400b60a:	4620      	mov	r0, r4
3400b60c:	601a      	str	r2, [r3, #0]
3400b60e:	2200      	movs	r2, #0
3400b610:	f7ff ff94 	bl	3400b53c <std>
3400b614:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3400b618:	2201      	movs	r2, #1
3400b61a:	2109      	movs	r1, #9
3400b61c:	f7ff ff8e 	bl	3400b53c <std>
3400b620:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
3400b624:	2202      	movs	r2, #2
3400b626:	2112      	movs	r1, #18
3400b628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400b62c:	f7ff bf86 	b.w	3400b53c <std>
3400b630:	3400d7bc 	.word	0x3400d7bc
3400b634:	3400d684 	.word	0x3400d684
3400b638:	3400b5a9 	.word	0x3400b5a9

3400b63c <__sfp_lock_acquire>:
3400b63c:	4801      	ldr	r0, [pc, #4]	@ (3400b644 <__sfp_lock_acquire+0x8>)
3400b63e:	f000 ba4a 	b.w	3400bad6 <__retarget_lock_acquire_recursive>
3400b642:	bf00      	nop
3400b644:	3400d7c5 	.word	0x3400d7c5

3400b648 <__sfp_lock_release>:
3400b648:	4801      	ldr	r0, [pc, #4]	@ (3400b650 <__sfp_lock_release+0x8>)
3400b64a:	f000 ba45 	b.w	3400bad8 <__retarget_lock_release_recursive>
3400b64e:	bf00      	nop
3400b650:	3400d7c5 	.word	0x3400d7c5

3400b654 <__sinit>:
3400b654:	b510      	push	{r4, lr}
3400b656:	4604      	mov	r4, r0
3400b658:	f7ff fff0 	bl	3400b63c <__sfp_lock_acquire>
3400b65c:	6a23      	ldr	r3, [r4, #32]
3400b65e:	b11b      	cbz	r3, 3400b668 <__sinit+0x14>
3400b660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3400b664:	f7ff bff0 	b.w	3400b648 <__sfp_lock_release>
3400b668:	4b04      	ldr	r3, [pc, #16]	@ (3400b67c <__sinit+0x28>)
3400b66a:	6223      	str	r3, [r4, #32]
3400b66c:	4b04      	ldr	r3, [pc, #16]	@ (3400b680 <__sinit+0x2c>)
3400b66e:	681b      	ldr	r3, [r3, #0]
3400b670:	2b00      	cmp	r3, #0
3400b672:	d1f5      	bne.n	3400b660 <__sinit+0xc>
3400b674:	f7ff ffc4 	bl	3400b600 <global_stdio_init.part.0>
3400b678:	e7f2      	b.n	3400b660 <__sinit+0xc>
3400b67a:	bf00      	nop
3400b67c:	3400b5c1 	.word	0x3400b5c1
3400b680:	3400d7bc 	.word	0x3400d7bc

3400b684 <_fwalk_sglue>:
3400b684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400b688:	4607      	mov	r7, r0
3400b68a:	4688      	mov	r8, r1
3400b68c:	4614      	mov	r4, r2
3400b68e:	2600      	movs	r6, #0
3400b690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
3400b694:	f1b9 0901 	subs.w	r9, r9, #1
3400b698:	d505      	bpl.n	3400b6a6 <_fwalk_sglue+0x22>
3400b69a:	6824      	ldr	r4, [r4, #0]
3400b69c:	2c00      	cmp	r4, #0
3400b69e:	d1f7      	bne.n	3400b690 <_fwalk_sglue+0xc>
3400b6a0:	4630      	mov	r0, r6
3400b6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400b6a6:	89ab      	ldrh	r3, [r5, #12]
3400b6a8:	2b01      	cmp	r3, #1
3400b6aa:	d907      	bls.n	3400b6bc <_fwalk_sglue+0x38>
3400b6ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
3400b6b0:	3301      	adds	r3, #1
3400b6b2:	d003      	beq.n	3400b6bc <_fwalk_sglue+0x38>
3400b6b4:	4629      	mov	r1, r5
3400b6b6:	4638      	mov	r0, r7
3400b6b8:	47c0      	blx	r8
3400b6ba:	4306      	orrs	r6, r0
3400b6bc:	3568      	adds	r5, #104	@ 0x68
3400b6be:	e7e9      	b.n	3400b694 <_fwalk_sglue+0x10>

3400b6c0 <iprintf>:
3400b6c0:	b40f      	push	{r0, r1, r2, r3}
3400b6c2:	b507      	push	{r0, r1, r2, lr}
3400b6c4:	4906      	ldr	r1, [pc, #24]	@ (3400b6e0 <iprintf+0x20>)
3400b6c6:	ab04      	add	r3, sp, #16
3400b6c8:	6808      	ldr	r0, [r1, #0]
3400b6ca:	f853 2b04 	ldr.w	r2, [r3], #4
3400b6ce:	6881      	ldr	r1, [r0, #8]
3400b6d0:	9301      	str	r3, [sp, #4]
3400b6d2:	f000 fc7d 	bl	3400bfd0 <_vfiprintf_r>
3400b6d6:	b003      	add	sp, #12
3400b6d8:	f85d eb04 	ldr.w	lr, [sp], #4
3400b6dc:	b004      	add	sp, #16
3400b6de:	4770      	bx	lr
3400b6e0:	3400d3a8 	.word	0x3400d3a8

3400b6e4 <_puts_r>:
3400b6e4:	6a03      	ldr	r3, [r0, #32]
3400b6e6:	b570      	push	{r4, r5, r6, lr}
3400b6e8:	4605      	mov	r5, r0
3400b6ea:	460e      	mov	r6, r1
3400b6ec:	6884      	ldr	r4, [r0, #8]
3400b6ee:	b90b      	cbnz	r3, 3400b6f4 <_puts_r+0x10>
3400b6f0:	f7ff ffb0 	bl	3400b654 <__sinit>
3400b6f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400b6f6:	07db      	lsls	r3, r3, #31
3400b6f8:	d405      	bmi.n	3400b706 <_puts_r+0x22>
3400b6fa:	89a3      	ldrh	r3, [r4, #12]
3400b6fc:	0598      	lsls	r0, r3, #22
3400b6fe:	d402      	bmi.n	3400b706 <_puts_r+0x22>
3400b700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400b702:	f000 f9e8 	bl	3400bad6 <__retarget_lock_acquire_recursive>
3400b706:	89a3      	ldrh	r3, [r4, #12]
3400b708:	0719      	lsls	r1, r3, #28
3400b70a:	d502      	bpl.n	3400b712 <_puts_r+0x2e>
3400b70c:	6923      	ldr	r3, [r4, #16]
3400b70e:	2b00      	cmp	r3, #0
3400b710:	d135      	bne.n	3400b77e <_puts_r+0x9a>
3400b712:	4621      	mov	r1, r4
3400b714:	4628      	mov	r0, r5
3400b716:	f000 f8f9 	bl	3400b90c <__swsetup_r>
3400b71a:	b380      	cbz	r0, 3400b77e <_puts_r+0x9a>
3400b71c:	f04f 35ff 	mov.w	r5, #4294967295
3400b720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400b722:	07da      	lsls	r2, r3, #31
3400b724:	d405      	bmi.n	3400b732 <_puts_r+0x4e>
3400b726:	89a3      	ldrh	r3, [r4, #12]
3400b728:	059b      	lsls	r3, r3, #22
3400b72a:	d402      	bmi.n	3400b732 <_puts_r+0x4e>
3400b72c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400b72e:	f000 f9d3 	bl	3400bad8 <__retarget_lock_release_recursive>
3400b732:	4628      	mov	r0, r5
3400b734:	bd70      	pop	{r4, r5, r6, pc}
3400b736:	2b00      	cmp	r3, #0
3400b738:	da04      	bge.n	3400b744 <_puts_r+0x60>
3400b73a:	69a2      	ldr	r2, [r4, #24]
3400b73c:	429a      	cmp	r2, r3
3400b73e:	dc17      	bgt.n	3400b770 <_puts_r+0x8c>
3400b740:	290a      	cmp	r1, #10
3400b742:	d015      	beq.n	3400b770 <_puts_r+0x8c>
3400b744:	6823      	ldr	r3, [r4, #0]
3400b746:	1c5a      	adds	r2, r3, #1
3400b748:	6022      	str	r2, [r4, #0]
3400b74a:	7019      	strb	r1, [r3, #0]
3400b74c:	68a3      	ldr	r3, [r4, #8]
3400b74e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
3400b752:	3b01      	subs	r3, #1
3400b754:	60a3      	str	r3, [r4, #8]
3400b756:	2900      	cmp	r1, #0
3400b758:	d1ed      	bne.n	3400b736 <_puts_r+0x52>
3400b75a:	2b00      	cmp	r3, #0
3400b75c:	da11      	bge.n	3400b782 <_puts_r+0x9e>
3400b75e:	4622      	mov	r2, r4
3400b760:	210a      	movs	r1, #10
3400b762:	4628      	mov	r0, r5
3400b764:	f000 f893 	bl	3400b88e <__swbuf_r>
3400b768:	3001      	adds	r0, #1
3400b76a:	d0d7      	beq.n	3400b71c <_puts_r+0x38>
3400b76c:	250a      	movs	r5, #10
3400b76e:	e7d7      	b.n	3400b720 <_puts_r+0x3c>
3400b770:	4622      	mov	r2, r4
3400b772:	4628      	mov	r0, r5
3400b774:	f000 f88b 	bl	3400b88e <__swbuf_r>
3400b778:	3001      	adds	r0, #1
3400b77a:	d1e7      	bne.n	3400b74c <_puts_r+0x68>
3400b77c:	e7ce      	b.n	3400b71c <_puts_r+0x38>
3400b77e:	3e01      	subs	r6, #1
3400b780:	e7e4      	b.n	3400b74c <_puts_r+0x68>
3400b782:	6823      	ldr	r3, [r4, #0]
3400b784:	1c5a      	adds	r2, r3, #1
3400b786:	6022      	str	r2, [r4, #0]
3400b788:	220a      	movs	r2, #10
3400b78a:	701a      	strb	r2, [r3, #0]
3400b78c:	e7ee      	b.n	3400b76c <_puts_r+0x88>
	...

3400b790 <puts>:
3400b790:	4b02      	ldr	r3, [pc, #8]	@ (3400b79c <puts+0xc>)
3400b792:	4601      	mov	r1, r0
3400b794:	6818      	ldr	r0, [r3, #0]
3400b796:	f7ff bfa5 	b.w	3400b6e4 <_puts_r>
3400b79a:	bf00      	nop
3400b79c:	3400d3a8 	.word	0x3400d3a8

3400b7a0 <sniprintf>:
3400b7a0:	b40c      	push	{r2, r3}
3400b7a2:	4b18      	ldr	r3, [pc, #96]	@ (3400b804 <sniprintf+0x64>)
3400b7a4:	b530      	push	{r4, r5, lr}
3400b7a6:	1e0c      	subs	r4, r1, #0
3400b7a8:	b09d      	sub	sp, #116	@ 0x74
3400b7aa:	681d      	ldr	r5, [r3, #0]
3400b7ac:	da08      	bge.n	3400b7c0 <sniprintf+0x20>
3400b7ae:	238b      	movs	r3, #139	@ 0x8b
3400b7b0:	f04f 30ff 	mov.w	r0, #4294967295
3400b7b4:	602b      	str	r3, [r5, #0]
3400b7b6:	b01d      	add	sp, #116	@ 0x74
3400b7b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
3400b7bc:	b002      	add	sp, #8
3400b7be:	4770      	bx	lr
3400b7c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
3400b7c4:	9002      	str	r0, [sp, #8]
3400b7c6:	9006      	str	r0, [sp, #24]
3400b7c8:	a902      	add	r1, sp, #8
3400b7ca:	f8ad 3014 	strh.w	r3, [sp, #20]
3400b7ce:	bf14      	ite	ne
3400b7d0:	f104 33ff 	addne.w	r3, r4, #4294967295
3400b7d4:	4623      	moveq	r3, r4
3400b7d6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
3400b7d8:	4628      	mov	r0, r5
3400b7da:	9304      	str	r3, [sp, #16]
3400b7dc:	9307      	str	r3, [sp, #28]
3400b7de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
3400b7e2:	f8ad 3016 	strh.w	r3, [sp, #22]
3400b7e6:	ab21      	add	r3, sp, #132	@ 0x84
3400b7e8:	9301      	str	r3, [sp, #4]
3400b7ea:	f000 facb 	bl	3400bd84 <_svfiprintf_r>
3400b7ee:	1c43      	adds	r3, r0, #1
3400b7f0:	bfbc      	itt	lt
3400b7f2:	238b      	movlt	r3, #139	@ 0x8b
3400b7f4:	602b      	strlt	r3, [r5, #0]
3400b7f6:	2c00      	cmp	r4, #0
3400b7f8:	d0dd      	beq.n	3400b7b6 <sniprintf+0x16>
3400b7fa:	9b02      	ldr	r3, [sp, #8]
3400b7fc:	2200      	movs	r2, #0
3400b7fe:	701a      	strb	r2, [r3, #0]
3400b800:	e7d9      	b.n	3400b7b6 <sniprintf+0x16>
3400b802:	bf00      	nop
3400b804:	3400d3a8 	.word	0x3400d3a8

3400b808 <__sread>:
3400b808:	b510      	push	{r4, lr}
3400b80a:	460c      	mov	r4, r1
3400b80c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400b810:	f000 f912 	bl	3400ba38 <_read_r>
3400b814:	2800      	cmp	r0, #0
3400b816:	bfab      	itete	ge
3400b818:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3400b81a:	89a3      	ldrhlt	r3, [r4, #12]
3400b81c:	181b      	addge	r3, r3, r0
3400b81e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
3400b822:	bfac      	ite	ge
3400b824:	6563      	strge	r3, [r4, #84]	@ 0x54
3400b826:	81a3      	strhlt	r3, [r4, #12]
3400b828:	bd10      	pop	{r4, pc}

3400b82a <__swrite>:
3400b82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400b82e:	461f      	mov	r7, r3
3400b830:	898b      	ldrh	r3, [r1, #12]
3400b832:	4605      	mov	r5, r0
3400b834:	460c      	mov	r4, r1
3400b836:	05db      	lsls	r3, r3, #23
3400b838:	4616      	mov	r6, r2
3400b83a:	d505      	bpl.n	3400b848 <__swrite+0x1e>
3400b83c:	2302      	movs	r3, #2
3400b83e:	2200      	movs	r2, #0
3400b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400b844:	f000 f8e6 	bl	3400ba14 <_lseek_r>
3400b848:	89a3      	ldrh	r3, [r4, #12]
3400b84a:	4632      	mov	r2, r6
3400b84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400b850:	4628      	mov	r0, r5
3400b852:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
3400b856:	81a3      	strh	r3, [r4, #12]
3400b858:	463b      	mov	r3, r7
3400b85a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400b85e:	f000 b8fd 	b.w	3400ba5c <_write_r>

3400b862 <__sseek>:
3400b862:	b510      	push	{r4, lr}
3400b864:	460c      	mov	r4, r1
3400b866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400b86a:	f000 f8d3 	bl	3400ba14 <_lseek_r>
3400b86e:	1c43      	adds	r3, r0, #1
3400b870:	89a3      	ldrh	r3, [r4, #12]
3400b872:	bf15      	itete	ne
3400b874:	6560      	strne	r0, [r4, #84]	@ 0x54
3400b876:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
3400b87a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
3400b87e:	81a3      	strheq	r3, [r4, #12]
3400b880:	bf18      	it	ne
3400b882:	81a3      	strhne	r3, [r4, #12]
3400b884:	bd10      	pop	{r4, pc}

3400b886 <__sclose>:
3400b886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400b88a:	f000 b8b3 	b.w	3400b9f4 <_close_r>

3400b88e <__swbuf_r>:
3400b88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400b890:	460e      	mov	r6, r1
3400b892:	4614      	mov	r4, r2
3400b894:	4605      	mov	r5, r0
3400b896:	b118      	cbz	r0, 3400b8a0 <__swbuf_r+0x12>
3400b898:	6a03      	ldr	r3, [r0, #32]
3400b89a:	b90b      	cbnz	r3, 3400b8a0 <__swbuf_r+0x12>
3400b89c:	f7ff feda 	bl	3400b654 <__sinit>
3400b8a0:	69a3      	ldr	r3, [r4, #24]
3400b8a2:	60a3      	str	r3, [r4, #8]
3400b8a4:	89a3      	ldrh	r3, [r4, #12]
3400b8a6:	071a      	lsls	r2, r3, #28
3400b8a8:	d501      	bpl.n	3400b8ae <__swbuf_r+0x20>
3400b8aa:	6923      	ldr	r3, [r4, #16]
3400b8ac:	b943      	cbnz	r3, 3400b8c0 <__swbuf_r+0x32>
3400b8ae:	4621      	mov	r1, r4
3400b8b0:	4628      	mov	r0, r5
3400b8b2:	f000 f82b 	bl	3400b90c <__swsetup_r>
3400b8b6:	b118      	cbz	r0, 3400b8c0 <__swbuf_r+0x32>
3400b8b8:	f04f 37ff 	mov.w	r7, #4294967295
3400b8bc:	4638      	mov	r0, r7
3400b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3400b8c0:	6823      	ldr	r3, [r4, #0]
3400b8c2:	b2f6      	uxtb	r6, r6
3400b8c4:	6922      	ldr	r2, [r4, #16]
3400b8c6:	4637      	mov	r7, r6
3400b8c8:	1a98      	subs	r0, r3, r2
3400b8ca:	6963      	ldr	r3, [r4, #20]
3400b8cc:	4283      	cmp	r3, r0
3400b8ce:	dc05      	bgt.n	3400b8dc <__swbuf_r+0x4e>
3400b8d0:	4621      	mov	r1, r4
3400b8d2:	4628      	mov	r0, r5
3400b8d4:	f000 feaa 	bl	3400c62c <_fflush_r>
3400b8d8:	2800      	cmp	r0, #0
3400b8da:	d1ed      	bne.n	3400b8b8 <__swbuf_r+0x2a>
3400b8dc:	68a3      	ldr	r3, [r4, #8]
3400b8de:	3b01      	subs	r3, #1
3400b8e0:	60a3      	str	r3, [r4, #8]
3400b8e2:	6823      	ldr	r3, [r4, #0]
3400b8e4:	1c5a      	adds	r2, r3, #1
3400b8e6:	6022      	str	r2, [r4, #0]
3400b8e8:	701e      	strb	r6, [r3, #0]
3400b8ea:	1c43      	adds	r3, r0, #1
3400b8ec:	6962      	ldr	r2, [r4, #20]
3400b8ee:	429a      	cmp	r2, r3
3400b8f0:	d004      	beq.n	3400b8fc <__swbuf_r+0x6e>
3400b8f2:	89a3      	ldrh	r3, [r4, #12]
3400b8f4:	07db      	lsls	r3, r3, #31
3400b8f6:	d5e1      	bpl.n	3400b8bc <__swbuf_r+0x2e>
3400b8f8:	2e0a      	cmp	r6, #10
3400b8fa:	d1df      	bne.n	3400b8bc <__swbuf_r+0x2e>
3400b8fc:	4621      	mov	r1, r4
3400b8fe:	4628      	mov	r0, r5
3400b900:	f000 fe94 	bl	3400c62c <_fflush_r>
3400b904:	2800      	cmp	r0, #0
3400b906:	d0d9      	beq.n	3400b8bc <__swbuf_r+0x2e>
3400b908:	e7d6      	b.n	3400b8b8 <__swbuf_r+0x2a>
	...

3400b90c <__swsetup_r>:
3400b90c:	b538      	push	{r3, r4, r5, lr}
3400b90e:	4b29      	ldr	r3, [pc, #164]	@ (3400b9b4 <__swsetup_r+0xa8>)
3400b910:	4605      	mov	r5, r0
3400b912:	460c      	mov	r4, r1
3400b914:	6818      	ldr	r0, [r3, #0]
3400b916:	b118      	cbz	r0, 3400b920 <__swsetup_r+0x14>
3400b918:	6a03      	ldr	r3, [r0, #32]
3400b91a:	b90b      	cbnz	r3, 3400b920 <__swsetup_r+0x14>
3400b91c:	f7ff fe9a 	bl	3400b654 <__sinit>
3400b920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400b924:	0719      	lsls	r1, r3, #28
3400b926:	d422      	bmi.n	3400b96e <__swsetup_r+0x62>
3400b928:	06da      	lsls	r2, r3, #27
3400b92a:	d407      	bmi.n	3400b93c <__swsetup_r+0x30>
3400b92c:	2209      	movs	r2, #9
3400b92e:	602a      	str	r2, [r5, #0]
3400b930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400b934:	f04f 30ff 	mov.w	r0, #4294967295
3400b938:	81a3      	strh	r3, [r4, #12]
3400b93a:	e033      	b.n	3400b9a4 <__swsetup_r+0x98>
3400b93c:	0758      	lsls	r0, r3, #29
3400b93e:	d512      	bpl.n	3400b966 <__swsetup_r+0x5a>
3400b940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400b942:	b141      	cbz	r1, 3400b956 <__swsetup_r+0x4a>
3400b944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400b948:	4299      	cmp	r1, r3
3400b94a:	d002      	beq.n	3400b952 <__swsetup_r+0x46>
3400b94c:	4628      	mov	r0, r5
3400b94e:	f000 f8c5 	bl	3400badc <_free_r>
3400b952:	2300      	movs	r3, #0
3400b954:	6363      	str	r3, [r4, #52]	@ 0x34
3400b956:	89a3      	ldrh	r3, [r4, #12]
3400b958:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3400b95c:	81a3      	strh	r3, [r4, #12]
3400b95e:	2300      	movs	r3, #0
3400b960:	6063      	str	r3, [r4, #4]
3400b962:	6923      	ldr	r3, [r4, #16]
3400b964:	6023      	str	r3, [r4, #0]
3400b966:	89a3      	ldrh	r3, [r4, #12]
3400b968:	f043 0308 	orr.w	r3, r3, #8
3400b96c:	81a3      	strh	r3, [r4, #12]
3400b96e:	6923      	ldr	r3, [r4, #16]
3400b970:	b94b      	cbnz	r3, 3400b986 <__swsetup_r+0x7a>
3400b972:	89a3      	ldrh	r3, [r4, #12]
3400b974:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3400b978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3400b97c:	d003      	beq.n	3400b986 <__swsetup_r+0x7a>
3400b97e:	4621      	mov	r1, r4
3400b980:	4628      	mov	r0, r5
3400b982:	f000 fea0 	bl	3400c6c6 <__smakebuf_r>
3400b986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400b98a:	f013 0201 	ands.w	r2, r3, #1
3400b98e:	d00a      	beq.n	3400b9a6 <__swsetup_r+0x9a>
3400b990:	2200      	movs	r2, #0
3400b992:	60a2      	str	r2, [r4, #8]
3400b994:	6962      	ldr	r2, [r4, #20]
3400b996:	4252      	negs	r2, r2
3400b998:	61a2      	str	r2, [r4, #24]
3400b99a:	6922      	ldr	r2, [r4, #16]
3400b99c:	b942      	cbnz	r2, 3400b9b0 <__swsetup_r+0xa4>
3400b99e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3400b9a2:	d1c5      	bne.n	3400b930 <__swsetup_r+0x24>
3400b9a4:	bd38      	pop	{r3, r4, r5, pc}
3400b9a6:	0799      	lsls	r1, r3, #30
3400b9a8:	bf58      	it	pl
3400b9aa:	6962      	ldrpl	r2, [r4, #20]
3400b9ac:	60a2      	str	r2, [r4, #8]
3400b9ae:	e7f4      	b.n	3400b99a <__swsetup_r+0x8e>
3400b9b0:	2000      	movs	r0, #0
3400b9b2:	e7f7      	b.n	3400b9a4 <__swsetup_r+0x98>
3400b9b4:	3400d3a8 	.word	0x3400d3a8

3400b9b8 <memset>:
3400b9b8:	4402      	add	r2, r0
3400b9ba:	4603      	mov	r3, r0
3400b9bc:	4293      	cmp	r3, r2
3400b9be:	d100      	bne.n	3400b9c2 <memset+0xa>
3400b9c0:	4770      	bx	lr
3400b9c2:	f803 1b01 	strb.w	r1, [r3], #1
3400b9c6:	e7f9      	b.n	3400b9bc <memset+0x4>

3400b9c8 <strstr>:
3400b9c8:	780a      	ldrb	r2, [r1, #0]
3400b9ca:	b570      	push	{r4, r5, r6, lr}
3400b9cc:	b96a      	cbnz	r2, 3400b9ea <strstr+0x22>
3400b9ce:	bd70      	pop	{r4, r5, r6, pc}
3400b9d0:	429a      	cmp	r2, r3
3400b9d2:	d109      	bne.n	3400b9e8 <strstr+0x20>
3400b9d4:	460c      	mov	r4, r1
3400b9d6:	4605      	mov	r5, r0
3400b9d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
3400b9dc:	2b00      	cmp	r3, #0
3400b9de:	d0f6      	beq.n	3400b9ce <strstr+0x6>
3400b9e0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
3400b9e4:	429e      	cmp	r6, r3
3400b9e6:	d0f7      	beq.n	3400b9d8 <strstr+0x10>
3400b9e8:	3001      	adds	r0, #1
3400b9ea:	7803      	ldrb	r3, [r0, #0]
3400b9ec:	2b00      	cmp	r3, #0
3400b9ee:	d1ef      	bne.n	3400b9d0 <strstr+0x8>
3400b9f0:	4618      	mov	r0, r3
3400b9f2:	e7ec      	b.n	3400b9ce <strstr+0x6>

3400b9f4 <_close_r>:
3400b9f4:	b538      	push	{r3, r4, r5, lr}
3400b9f6:	2300      	movs	r3, #0
3400b9f8:	4d05      	ldr	r5, [pc, #20]	@ (3400ba10 <_close_r+0x1c>)
3400b9fa:	4604      	mov	r4, r0
3400b9fc:	4608      	mov	r0, r1
3400b9fe:	602b      	str	r3, [r5, #0]
3400ba00:	f7f5 fb48 	bl	34001094 <_close>
3400ba04:	1c43      	adds	r3, r0, #1
3400ba06:	d102      	bne.n	3400ba0e <_close_r+0x1a>
3400ba08:	682b      	ldr	r3, [r5, #0]
3400ba0a:	b103      	cbz	r3, 3400ba0e <_close_r+0x1a>
3400ba0c:	6023      	str	r3, [r4, #0]
3400ba0e:	bd38      	pop	{r3, r4, r5, pc}
3400ba10:	3400d7c0 	.word	0x3400d7c0

3400ba14 <_lseek_r>:
3400ba14:	b538      	push	{r3, r4, r5, lr}
3400ba16:	4604      	mov	r4, r0
3400ba18:	4d06      	ldr	r5, [pc, #24]	@ (3400ba34 <_lseek_r+0x20>)
3400ba1a:	4608      	mov	r0, r1
3400ba1c:	4611      	mov	r1, r2
3400ba1e:	2200      	movs	r2, #0
3400ba20:	602a      	str	r2, [r5, #0]
3400ba22:	461a      	mov	r2, r3
3400ba24:	f7f5 fb5d 	bl	340010e2 <_lseek>
3400ba28:	1c43      	adds	r3, r0, #1
3400ba2a:	d102      	bne.n	3400ba32 <_lseek_r+0x1e>
3400ba2c:	682b      	ldr	r3, [r5, #0]
3400ba2e:	b103      	cbz	r3, 3400ba32 <_lseek_r+0x1e>
3400ba30:	6023      	str	r3, [r4, #0]
3400ba32:	bd38      	pop	{r3, r4, r5, pc}
3400ba34:	3400d7c0 	.word	0x3400d7c0

3400ba38 <_read_r>:
3400ba38:	b538      	push	{r3, r4, r5, lr}
3400ba3a:	4604      	mov	r4, r0
3400ba3c:	4d06      	ldr	r5, [pc, #24]	@ (3400ba58 <_read_r+0x20>)
3400ba3e:	4608      	mov	r0, r1
3400ba40:	4611      	mov	r1, r2
3400ba42:	2200      	movs	r2, #0
3400ba44:	602a      	str	r2, [r5, #0]
3400ba46:	461a      	mov	r2, r3
3400ba48:	f7f5 fb07 	bl	3400105a <_read>
3400ba4c:	1c43      	adds	r3, r0, #1
3400ba4e:	d102      	bne.n	3400ba56 <_read_r+0x1e>
3400ba50:	682b      	ldr	r3, [r5, #0]
3400ba52:	b103      	cbz	r3, 3400ba56 <_read_r+0x1e>
3400ba54:	6023      	str	r3, [r4, #0]
3400ba56:	bd38      	pop	{r3, r4, r5, pc}
3400ba58:	3400d7c0 	.word	0x3400d7c0

3400ba5c <_write_r>:
3400ba5c:	b538      	push	{r3, r4, r5, lr}
3400ba5e:	4604      	mov	r4, r0
3400ba60:	4d06      	ldr	r5, [pc, #24]	@ (3400ba7c <_write_r+0x20>)
3400ba62:	4608      	mov	r0, r1
3400ba64:	4611      	mov	r1, r2
3400ba66:	2200      	movs	r2, #0
3400ba68:	602a      	str	r2, [r5, #0]
3400ba6a:	461a      	mov	r2, r3
3400ba6c:	f7ff fccc 	bl	3400b408 <_write>
3400ba70:	1c43      	adds	r3, r0, #1
3400ba72:	d102      	bne.n	3400ba7a <_write_r+0x1e>
3400ba74:	682b      	ldr	r3, [r5, #0]
3400ba76:	b103      	cbz	r3, 3400ba7a <_write_r+0x1e>
3400ba78:	6023      	str	r3, [r4, #0]
3400ba7a:	bd38      	pop	{r3, r4, r5, pc}
3400ba7c:	3400d7c0 	.word	0x3400d7c0

3400ba80 <__errno>:
3400ba80:	4b01      	ldr	r3, [pc, #4]	@ (3400ba88 <__errno+0x8>)
3400ba82:	6818      	ldr	r0, [r3, #0]
3400ba84:	4770      	bx	lr
3400ba86:	bf00      	nop
3400ba88:	3400d3a8 	.word	0x3400d3a8

3400ba8c <__libc_init_array>:
3400ba8c:	b570      	push	{r4, r5, r6, lr}
3400ba8e:	4d0d      	ldr	r5, [pc, #52]	@ (3400bac4 <__libc_init_array+0x38>)
3400ba90:	2600      	movs	r6, #0
3400ba92:	4c0d      	ldr	r4, [pc, #52]	@ (3400bac8 <__libc_init_array+0x3c>)
3400ba94:	1b64      	subs	r4, r4, r5
3400ba96:	10a4      	asrs	r4, r4, #2
3400ba98:	42a6      	cmp	r6, r4
3400ba9a:	d109      	bne.n	3400bab0 <__libc_init_array+0x24>
3400ba9c:	4d0b      	ldr	r5, [pc, #44]	@ (3400bacc <__libc_init_array+0x40>)
3400ba9e:	2600      	movs	r6, #0
3400baa0:	4c0b      	ldr	r4, [pc, #44]	@ (3400bad0 <__libc_init_array+0x44>)
3400baa2:	f000 feeb 	bl	3400c87c <_init>
3400baa6:	1b64      	subs	r4, r4, r5
3400baa8:	10a4      	asrs	r4, r4, #2
3400baaa:	42a6      	cmp	r6, r4
3400baac:	d105      	bne.n	3400baba <__libc_init_array+0x2e>
3400baae:	bd70      	pop	{r4, r5, r6, pc}
3400bab0:	f855 3b04 	ldr.w	r3, [r5], #4
3400bab4:	3601      	adds	r6, #1
3400bab6:	4798      	blx	r3
3400bab8:	e7ee      	b.n	3400ba98 <__libc_init_array+0xc>
3400baba:	f855 3b04 	ldr.w	r3, [r5], #4
3400babe:	3601      	adds	r6, #1
3400bac0:	4798      	blx	r3
3400bac2:	e7f2      	b.n	3400baaa <__libc_init_array+0x1e>
3400bac4:	3400d384 	.word	0x3400d384
3400bac8:	3400d384 	.word	0x3400d384
3400bacc:	3400d384 	.word	0x3400d384
3400bad0:	3400d388 	.word	0x3400d388

3400bad4 <__retarget_lock_init_recursive>:
3400bad4:	4770      	bx	lr

3400bad6 <__retarget_lock_acquire_recursive>:
3400bad6:	4770      	bx	lr

3400bad8 <__retarget_lock_release_recursive>:
3400bad8:	4770      	bx	lr
	...

3400badc <_free_r>:
3400badc:	b538      	push	{r3, r4, r5, lr}
3400bade:	4605      	mov	r5, r0
3400bae0:	2900      	cmp	r1, #0
3400bae2:	d041      	beq.n	3400bb68 <_free_r+0x8c>
3400bae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400bae8:	1f0c      	subs	r4, r1, #4
3400baea:	2b00      	cmp	r3, #0
3400baec:	bfb8      	it	lt
3400baee:	18e4      	addlt	r4, r4, r3
3400baf0:	f000 f8e0 	bl	3400bcb4 <__malloc_lock>
3400baf4:	4a1d      	ldr	r2, [pc, #116]	@ (3400bb6c <_free_r+0x90>)
3400baf6:	6813      	ldr	r3, [r2, #0]
3400baf8:	b933      	cbnz	r3, 3400bb08 <_free_r+0x2c>
3400bafa:	6063      	str	r3, [r4, #4]
3400bafc:	6014      	str	r4, [r2, #0]
3400bafe:	4628      	mov	r0, r5
3400bb00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3400bb04:	f000 b8dc 	b.w	3400bcc0 <__malloc_unlock>
3400bb08:	42a3      	cmp	r3, r4
3400bb0a:	d908      	bls.n	3400bb1e <_free_r+0x42>
3400bb0c:	6820      	ldr	r0, [r4, #0]
3400bb0e:	1821      	adds	r1, r4, r0
3400bb10:	428b      	cmp	r3, r1
3400bb12:	bf01      	itttt	eq
3400bb14:	6819      	ldreq	r1, [r3, #0]
3400bb16:	685b      	ldreq	r3, [r3, #4]
3400bb18:	1809      	addeq	r1, r1, r0
3400bb1a:	6021      	streq	r1, [r4, #0]
3400bb1c:	e7ed      	b.n	3400bafa <_free_r+0x1e>
3400bb1e:	461a      	mov	r2, r3
3400bb20:	685b      	ldr	r3, [r3, #4]
3400bb22:	b10b      	cbz	r3, 3400bb28 <_free_r+0x4c>
3400bb24:	42a3      	cmp	r3, r4
3400bb26:	d9fa      	bls.n	3400bb1e <_free_r+0x42>
3400bb28:	6811      	ldr	r1, [r2, #0]
3400bb2a:	1850      	adds	r0, r2, r1
3400bb2c:	42a0      	cmp	r0, r4
3400bb2e:	d10b      	bne.n	3400bb48 <_free_r+0x6c>
3400bb30:	6820      	ldr	r0, [r4, #0]
3400bb32:	4401      	add	r1, r0
3400bb34:	1850      	adds	r0, r2, r1
3400bb36:	6011      	str	r1, [r2, #0]
3400bb38:	4283      	cmp	r3, r0
3400bb3a:	d1e0      	bne.n	3400bafe <_free_r+0x22>
3400bb3c:	6818      	ldr	r0, [r3, #0]
3400bb3e:	685b      	ldr	r3, [r3, #4]
3400bb40:	4408      	add	r0, r1
3400bb42:	6053      	str	r3, [r2, #4]
3400bb44:	6010      	str	r0, [r2, #0]
3400bb46:	e7da      	b.n	3400bafe <_free_r+0x22>
3400bb48:	d902      	bls.n	3400bb50 <_free_r+0x74>
3400bb4a:	230c      	movs	r3, #12
3400bb4c:	602b      	str	r3, [r5, #0]
3400bb4e:	e7d6      	b.n	3400bafe <_free_r+0x22>
3400bb50:	6820      	ldr	r0, [r4, #0]
3400bb52:	1821      	adds	r1, r4, r0
3400bb54:	428b      	cmp	r3, r1
3400bb56:	bf02      	ittt	eq
3400bb58:	6819      	ldreq	r1, [r3, #0]
3400bb5a:	685b      	ldreq	r3, [r3, #4]
3400bb5c:	1809      	addeq	r1, r1, r0
3400bb5e:	6063      	str	r3, [r4, #4]
3400bb60:	bf08      	it	eq
3400bb62:	6021      	streq	r1, [r4, #0]
3400bb64:	6054      	str	r4, [r2, #4]
3400bb66:	e7ca      	b.n	3400bafe <_free_r+0x22>
3400bb68:	bd38      	pop	{r3, r4, r5, pc}
3400bb6a:	bf00      	nop
3400bb6c:	3400d7cc 	.word	0x3400d7cc

3400bb70 <sbrk_aligned>:
3400bb70:	b570      	push	{r4, r5, r6, lr}
3400bb72:	4e0f      	ldr	r6, [pc, #60]	@ (3400bbb0 <sbrk_aligned+0x40>)
3400bb74:	460c      	mov	r4, r1
3400bb76:	4605      	mov	r5, r0
3400bb78:	6831      	ldr	r1, [r6, #0]
3400bb7a:	b911      	cbnz	r1, 3400bb82 <sbrk_aligned+0x12>
3400bb7c:	f000 fe1c 	bl	3400c7b8 <_sbrk_r>
3400bb80:	6030      	str	r0, [r6, #0]
3400bb82:	4621      	mov	r1, r4
3400bb84:	4628      	mov	r0, r5
3400bb86:	f000 fe17 	bl	3400c7b8 <_sbrk_r>
3400bb8a:	1c43      	adds	r3, r0, #1
3400bb8c:	d103      	bne.n	3400bb96 <sbrk_aligned+0x26>
3400bb8e:	f04f 34ff 	mov.w	r4, #4294967295
3400bb92:	4620      	mov	r0, r4
3400bb94:	bd70      	pop	{r4, r5, r6, pc}
3400bb96:	1cc4      	adds	r4, r0, #3
3400bb98:	f024 0403 	bic.w	r4, r4, #3
3400bb9c:	42a0      	cmp	r0, r4
3400bb9e:	d0f8      	beq.n	3400bb92 <sbrk_aligned+0x22>
3400bba0:	1a21      	subs	r1, r4, r0
3400bba2:	4628      	mov	r0, r5
3400bba4:	f000 fe08 	bl	3400c7b8 <_sbrk_r>
3400bba8:	3001      	adds	r0, #1
3400bbaa:	d1f2      	bne.n	3400bb92 <sbrk_aligned+0x22>
3400bbac:	e7ef      	b.n	3400bb8e <sbrk_aligned+0x1e>
3400bbae:	bf00      	nop
3400bbb0:	3400d7c8 	.word	0x3400d7c8

3400bbb4 <_malloc_r>:
3400bbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3400bbb8:	1ccd      	adds	r5, r1, #3
3400bbba:	4606      	mov	r6, r0
3400bbbc:	f025 0503 	bic.w	r5, r5, #3
3400bbc0:	3508      	adds	r5, #8
3400bbc2:	2d0c      	cmp	r5, #12
3400bbc4:	bf38      	it	cc
3400bbc6:	250c      	movcc	r5, #12
3400bbc8:	2d00      	cmp	r5, #0
3400bbca:	db01      	blt.n	3400bbd0 <_malloc_r+0x1c>
3400bbcc:	42a9      	cmp	r1, r5
3400bbce:	d904      	bls.n	3400bbda <_malloc_r+0x26>
3400bbd0:	230c      	movs	r3, #12
3400bbd2:	6033      	str	r3, [r6, #0]
3400bbd4:	2000      	movs	r0, #0
3400bbd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3400bbda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3400bcb0 <_malloc_r+0xfc>
3400bbde:	f000 f869 	bl	3400bcb4 <__malloc_lock>
3400bbe2:	f8d8 3000 	ldr.w	r3, [r8]
3400bbe6:	461c      	mov	r4, r3
3400bbe8:	bb44      	cbnz	r4, 3400bc3c <_malloc_r+0x88>
3400bbea:	4629      	mov	r1, r5
3400bbec:	4630      	mov	r0, r6
3400bbee:	f7ff ffbf 	bl	3400bb70 <sbrk_aligned>
3400bbf2:	1c43      	adds	r3, r0, #1
3400bbf4:	4604      	mov	r4, r0
3400bbf6:	d158      	bne.n	3400bcaa <_malloc_r+0xf6>
3400bbf8:	f8d8 4000 	ldr.w	r4, [r8]
3400bbfc:	4627      	mov	r7, r4
3400bbfe:	2f00      	cmp	r7, #0
3400bc00:	d143      	bne.n	3400bc8a <_malloc_r+0xd6>
3400bc02:	2c00      	cmp	r4, #0
3400bc04:	d04b      	beq.n	3400bc9e <_malloc_r+0xea>
3400bc06:	6823      	ldr	r3, [r4, #0]
3400bc08:	4639      	mov	r1, r7
3400bc0a:	4630      	mov	r0, r6
3400bc0c:	eb04 0903 	add.w	r9, r4, r3
3400bc10:	f000 fdd2 	bl	3400c7b8 <_sbrk_r>
3400bc14:	4581      	cmp	r9, r0
3400bc16:	d142      	bne.n	3400bc9e <_malloc_r+0xea>
3400bc18:	6821      	ldr	r1, [r4, #0]
3400bc1a:	4630      	mov	r0, r6
3400bc1c:	1a6d      	subs	r5, r5, r1
3400bc1e:	4629      	mov	r1, r5
3400bc20:	f7ff ffa6 	bl	3400bb70 <sbrk_aligned>
3400bc24:	3001      	adds	r0, #1
3400bc26:	d03a      	beq.n	3400bc9e <_malloc_r+0xea>
3400bc28:	6823      	ldr	r3, [r4, #0]
3400bc2a:	442b      	add	r3, r5
3400bc2c:	6023      	str	r3, [r4, #0]
3400bc2e:	f8d8 3000 	ldr.w	r3, [r8]
3400bc32:	685a      	ldr	r2, [r3, #4]
3400bc34:	bb62      	cbnz	r2, 3400bc90 <_malloc_r+0xdc>
3400bc36:	f8c8 7000 	str.w	r7, [r8]
3400bc3a:	e00f      	b.n	3400bc5c <_malloc_r+0xa8>
3400bc3c:	6822      	ldr	r2, [r4, #0]
3400bc3e:	1b52      	subs	r2, r2, r5
3400bc40:	d420      	bmi.n	3400bc84 <_malloc_r+0xd0>
3400bc42:	2a0b      	cmp	r2, #11
3400bc44:	d917      	bls.n	3400bc76 <_malloc_r+0xc2>
3400bc46:	1961      	adds	r1, r4, r5
3400bc48:	42a3      	cmp	r3, r4
3400bc4a:	6025      	str	r5, [r4, #0]
3400bc4c:	bf18      	it	ne
3400bc4e:	6059      	strne	r1, [r3, #4]
3400bc50:	6863      	ldr	r3, [r4, #4]
3400bc52:	bf08      	it	eq
3400bc54:	f8c8 1000 	streq.w	r1, [r8]
3400bc58:	5162      	str	r2, [r4, r5]
3400bc5a:	604b      	str	r3, [r1, #4]
3400bc5c:	4630      	mov	r0, r6
3400bc5e:	f000 f82f 	bl	3400bcc0 <__malloc_unlock>
3400bc62:	f104 000b 	add.w	r0, r4, #11
3400bc66:	1d23      	adds	r3, r4, #4
3400bc68:	f020 0007 	bic.w	r0, r0, #7
3400bc6c:	1ac2      	subs	r2, r0, r3
3400bc6e:	bf1c      	itt	ne
3400bc70:	1a1b      	subne	r3, r3, r0
3400bc72:	50a3      	strne	r3, [r4, r2]
3400bc74:	e7af      	b.n	3400bbd6 <_malloc_r+0x22>
3400bc76:	6862      	ldr	r2, [r4, #4]
3400bc78:	42a3      	cmp	r3, r4
3400bc7a:	bf0c      	ite	eq
3400bc7c:	f8c8 2000 	streq.w	r2, [r8]
3400bc80:	605a      	strne	r2, [r3, #4]
3400bc82:	e7eb      	b.n	3400bc5c <_malloc_r+0xa8>
3400bc84:	4623      	mov	r3, r4
3400bc86:	6864      	ldr	r4, [r4, #4]
3400bc88:	e7ae      	b.n	3400bbe8 <_malloc_r+0x34>
3400bc8a:	463c      	mov	r4, r7
3400bc8c:	687f      	ldr	r7, [r7, #4]
3400bc8e:	e7b6      	b.n	3400bbfe <_malloc_r+0x4a>
3400bc90:	461a      	mov	r2, r3
3400bc92:	685b      	ldr	r3, [r3, #4]
3400bc94:	42a3      	cmp	r3, r4
3400bc96:	d1fb      	bne.n	3400bc90 <_malloc_r+0xdc>
3400bc98:	2300      	movs	r3, #0
3400bc9a:	6053      	str	r3, [r2, #4]
3400bc9c:	e7de      	b.n	3400bc5c <_malloc_r+0xa8>
3400bc9e:	230c      	movs	r3, #12
3400bca0:	4630      	mov	r0, r6
3400bca2:	6033      	str	r3, [r6, #0]
3400bca4:	f000 f80c 	bl	3400bcc0 <__malloc_unlock>
3400bca8:	e794      	b.n	3400bbd4 <_malloc_r+0x20>
3400bcaa:	6005      	str	r5, [r0, #0]
3400bcac:	e7d6      	b.n	3400bc5c <_malloc_r+0xa8>
3400bcae:	bf00      	nop
3400bcb0:	3400d7cc 	.word	0x3400d7cc

3400bcb4 <__malloc_lock>:
3400bcb4:	4801      	ldr	r0, [pc, #4]	@ (3400bcbc <__malloc_lock+0x8>)
3400bcb6:	f7ff bf0e 	b.w	3400bad6 <__retarget_lock_acquire_recursive>
3400bcba:	bf00      	nop
3400bcbc:	3400d7c4 	.word	0x3400d7c4

3400bcc0 <__malloc_unlock>:
3400bcc0:	4801      	ldr	r0, [pc, #4]	@ (3400bcc8 <__malloc_unlock+0x8>)
3400bcc2:	f7ff bf09 	b.w	3400bad8 <__retarget_lock_release_recursive>
3400bcc6:	bf00      	nop
3400bcc8:	3400d7c4 	.word	0x3400d7c4

3400bccc <__ssputs_r>:
3400bccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400bcd0:	461f      	mov	r7, r3
3400bcd2:	688e      	ldr	r6, [r1, #8]
3400bcd4:	4682      	mov	sl, r0
3400bcd6:	460c      	mov	r4, r1
3400bcd8:	42be      	cmp	r6, r7
3400bcda:	4690      	mov	r8, r2
3400bcdc:	680b      	ldr	r3, [r1, #0]
3400bcde:	d82d      	bhi.n	3400bd3c <__ssputs_r+0x70>
3400bce0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3400bce4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
3400bce8:	d026      	beq.n	3400bd38 <__ssputs_r+0x6c>
3400bcea:	6965      	ldr	r5, [r4, #20]
3400bcec:	6909      	ldr	r1, [r1, #16]
3400bcee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3400bcf2:	eba3 0901 	sub.w	r9, r3, r1
3400bcf6:	1c7b      	adds	r3, r7, #1
3400bcf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
3400bcfc:	444b      	add	r3, r9
3400bcfe:	106d      	asrs	r5, r5, #1
3400bd00:	429d      	cmp	r5, r3
3400bd02:	bf38      	it	cc
3400bd04:	461d      	movcc	r5, r3
3400bd06:	0553      	lsls	r3, r2, #21
3400bd08:	d527      	bpl.n	3400bd5a <__ssputs_r+0x8e>
3400bd0a:	4629      	mov	r1, r5
3400bd0c:	f7ff ff52 	bl	3400bbb4 <_malloc_r>
3400bd10:	4606      	mov	r6, r0
3400bd12:	b360      	cbz	r0, 3400bd6e <__ssputs_r+0xa2>
3400bd14:	464a      	mov	r2, r9
3400bd16:	6921      	ldr	r1, [r4, #16]
3400bd18:	f000 fd6c 	bl	3400c7f4 <memcpy>
3400bd1c:	89a3      	ldrh	r3, [r4, #12]
3400bd1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
3400bd22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3400bd26:	81a3      	strh	r3, [r4, #12]
3400bd28:	6126      	str	r6, [r4, #16]
3400bd2a:	444e      	add	r6, r9
3400bd2c:	6165      	str	r5, [r4, #20]
3400bd2e:	eba5 0509 	sub.w	r5, r5, r9
3400bd32:	6026      	str	r6, [r4, #0]
3400bd34:	463e      	mov	r6, r7
3400bd36:	60a5      	str	r5, [r4, #8]
3400bd38:	42be      	cmp	r6, r7
3400bd3a:	d900      	bls.n	3400bd3e <__ssputs_r+0x72>
3400bd3c:	463e      	mov	r6, r7
3400bd3e:	4632      	mov	r2, r6
3400bd40:	4641      	mov	r1, r8
3400bd42:	6820      	ldr	r0, [r4, #0]
3400bd44:	f000 fcfb 	bl	3400c73e <memmove>
3400bd48:	68a3      	ldr	r3, [r4, #8]
3400bd4a:	2000      	movs	r0, #0
3400bd4c:	1b9b      	subs	r3, r3, r6
3400bd4e:	60a3      	str	r3, [r4, #8]
3400bd50:	6823      	ldr	r3, [r4, #0]
3400bd52:	4433      	add	r3, r6
3400bd54:	6023      	str	r3, [r4, #0]
3400bd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400bd5a:	462a      	mov	r2, r5
3400bd5c:	f000 fd57 	bl	3400c80e <_realloc_r>
3400bd60:	4606      	mov	r6, r0
3400bd62:	2800      	cmp	r0, #0
3400bd64:	d1e0      	bne.n	3400bd28 <__ssputs_r+0x5c>
3400bd66:	6921      	ldr	r1, [r4, #16]
3400bd68:	4650      	mov	r0, sl
3400bd6a:	f7ff feb7 	bl	3400badc <_free_r>
3400bd6e:	230c      	movs	r3, #12
3400bd70:	f04f 30ff 	mov.w	r0, #4294967295
3400bd74:	f8ca 3000 	str.w	r3, [sl]
3400bd78:	89a3      	ldrh	r3, [r4, #12]
3400bd7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400bd7e:	81a3      	strh	r3, [r4, #12]
3400bd80:	e7e9      	b.n	3400bd56 <__ssputs_r+0x8a>
	...

3400bd84 <_svfiprintf_r>:
3400bd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400bd88:	4698      	mov	r8, r3
3400bd8a:	898b      	ldrh	r3, [r1, #12]
3400bd8c:	b09d      	sub	sp, #116	@ 0x74
3400bd8e:	4607      	mov	r7, r0
3400bd90:	061b      	lsls	r3, r3, #24
3400bd92:	460d      	mov	r5, r1
3400bd94:	4614      	mov	r4, r2
3400bd96:	d510      	bpl.n	3400bdba <_svfiprintf_r+0x36>
3400bd98:	690b      	ldr	r3, [r1, #16]
3400bd9a:	b973      	cbnz	r3, 3400bdba <_svfiprintf_r+0x36>
3400bd9c:	2140      	movs	r1, #64	@ 0x40
3400bd9e:	f7ff ff09 	bl	3400bbb4 <_malloc_r>
3400bda2:	6028      	str	r0, [r5, #0]
3400bda4:	6128      	str	r0, [r5, #16]
3400bda6:	b930      	cbnz	r0, 3400bdb6 <_svfiprintf_r+0x32>
3400bda8:	230c      	movs	r3, #12
3400bdaa:	603b      	str	r3, [r7, #0]
3400bdac:	f04f 30ff 	mov.w	r0, #4294967295
3400bdb0:	b01d      	add	sp, #116	@ 0x74
3400bdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400bdb6:	2340      	movs	r3, #64	@ 0x40
3400bdb8:	616b      	str	r3, [r5, #20]
3400bdba:	2300      	movs	r3, #0
3400bdbc:	f8cd 800c 	str.w	r8, [sp, #12]
3400bdc0:	f04f 0901 	mov.w	r9, #1
3400bdc4:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 3400bf68 <_svfiprintf_r+0x1e4>
3400bdc8:	9309      	str	r3, [sp, #36]	@ 0x24
3400bdca:	2320      	movs	r3, #32
3400bdcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3400bdd0:	2330      	movs	r3, #48	@ 0x30
3400bdd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3400bdd6:	4623      	mov	r3, r4
3400bdd8:	469a      	mov	sl, r3
3400bdda:	f813 2b01 	ldrb.w	r2, [r3], #1
3400bdde:	b10a      	cbz	r2, 3400bde4 <_svfiprintf_r+0x60>
3400bde0:	2a25      	cmp	r2, #37	@ 0x25
3400bde2:	d1f9      	bne.n	3400bdd8 <_svfiprintf_r+0x54>
3400bde4:	ebba 0b04 	subs.w	fp, sl, r4
3400bde8:	d00b      	beq.n	3400be02 <_svfiprintf_r+0x7e>
3400bdea:	465b      	mov	r3, fp
3400bdec:	4622      	mov	r2, r4
3400bdee:	4629      	mov	r1, r5
3400bdf0:	4638      	mov	r0, r7
3400bdf2:	f7ff ff6b 	bl	3400bccc <__ssputs_r>
3400bdf6:	3001      	adds	r0, #1
3400bdf8:	f000 80a7 	beq.w	3400bf4a <_svfiprintf_r+0x1c6>
3400bdfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400bdfe:	445a      	add	r2, fp
3400be00:	9209      	str	r2, [sp, #36]	@ 0x24
3400be02:	f89a 3000 	ldrb.w	r3, [sl]
3400be06:	2b00      	cmp	r3, #0
3400be08:	f000 809f 	beq.w	3400bf4a <_svfiprintf_r+0x1c6>
3400be0c:	2300      	movs	r3, #0
3400be0e:	f04f 32ff 	mov.w	r2, #4294967295
3400be12:	f10a 0a01 	add.w	sl, sl, #1
3400be16:	9304      	str	r3, [sp, #16]
3400be18:	9307      	str	r3, [sp, #28]
3400be1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3400be1e:	931a      	str	r3, [sp, #104]	@ 0x68
3400be20:	e9cd 2305 	strd	r2, r3, [sp, #20]
3400be24:	4654      	mov	r4, sl
3400be26:	2205      	movs	r2, #5
3400be28:	484f      	ldr	r0, [pc, #316]	@ (3400bf68 <_svfiprintf_r+0x1e4>)
3400be2a:	f814 1b01 	ldrb.w	r1, [r4], #1
3400be2e:	f000 fcd3 	bl	3400c7d8 <memchr>
3400be32:	9a04      	ldr	r2, [sp, #16]
3400be34:	b9d8      	cbnz	r0, 3400be6e <_svfiprintf_r+0xea>
3400be36:	06d0      	lsls	r0, r2, #27
3400be38:	bf44      	itt	mi
3400be3a:	2320      	movmi	r3, #32
3400be3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3400be40:	0711      	lsls	r1, r2, #28
3400be42:	bf44      	itt	mi
3400be44:	232b      	movmi	r3, #43	@ 0x2b
3400be46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3400be4a:	f89a 3000 	ldrb.w	r3, [sl]
3400be4e:	2b2a      	cmp	r3, #42	@ 0x2a
3400be50:	d015      	beq.n	3400be7e <_svfiprintf_r+0xfa>
3400be52:	9a07      	ldr	r2, [sp, #28]
3400be54:	4654      	mov	r4, sl
3400be56:	2000      	movs	r0, #0
3400be58:	f04f 0c0a 	mov.w	ip, #10
3400be5c:	4621      	mov	r1, r4
3400be5e:	f811 3b01 	ldrb.w	r3, [r1], #1
3400be62:	3b30      	subs	r3, #48	@ 0x30
3400be64:	2b09      	cmp	r3, #9
3400be66:	d94b      	bls.n	3400bf00 <_svfiprintf_r+0x17c>
3400be68:	b1b0      	cbz	r0, 3400be98 <_svfiprintf_r+0x114>
3400be6a:	9207      	str	r2, [sp, #28]
3400be6c:	e014      	b.n	3400be98 <_svfiprintf_r+0x114>
3400be6e:	eba0 0308 	sub.w	r3, r0, r8
3400be72:	46a2      	mov	sl, r4
3400be74:	fa09 f303 	lsl.w	r3, r9, r3
3400be78:	4313      	orrs	r3, r2
3400be7a:	9304      	str	r3, [sp, #16]
3400be7c:	e7d2      	b.n	3400be24 <_svfiprintf_r+0xa0>
3400be7e:	9b03      	ldr	r3, [sp, #12]
3400be80:	1d19      	adds	r1, r3, #4
3400be82:	681b      	ldr	r3, [r3, #0]
3400be84:	2b00      	cmp	r3, #0
3400be86:	9103      	str	r1, [sp, #12]
3400be88:	bfbb      	ittet	lt
3400be8a:	425b      	neglt	r3, r3
3400be8c:	f042 0202 	orrlt.w	r2, r2, #2
3400be90:	9307      	strge	r3, [sp, #28]
3400be92:	9307      	strlt	r3, [sp, #28]
3400be94:	bfb8      	it	lt
3400be96:	9204      	strlt	r2, [sp, #16]
3400be98:	7823      	ldrb	r3, [r4, #0]
3400be9a:	2b2e      	cmp	r3, #46	@ 0x2e
3400be9c:	d10a      	bne.n	3400beb4 <_svfiprintf_r+0x130>
3400be9e:	7863      	ldrb	r3, [r4, #1]
3400bea0:	2b2a      	cmp	r3, #42	@ 0x2a
3400bea2:	d132      	bne.n	3400bf0a <_svfiprintf_r+0x186>
3400bea4:	9b03      	ldr	r3, [sp, #12]
3400bea6:	3402      	adds	r4, #2
3400bea8:	1d1a      	adds	r2, r3, #4
3400beaa:	681b      	ldr	r3, [r3, #0]
3400beac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3400beb0:	9203      	str	r2, [sp, #12]
3400beb2:	9305      	str	r3, [sp, #20]
3400beb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 3400bf78 <_svfiprintf_r+0x1f4>
3400beb8:	2203      	movs	r2, #3
3400beba:	7821      	ldrb	r1, [r4, #0]
3400bebc:	4650      	mov	r0, sl
3400bebe:	f000 fc8b 	bl	3400c7d8 <memchr>
3400bec2:	b138      	cbz	r0, 3400bed4 <_svfiprintf_r+0x150>
3400bec4:	eba0 000a 	sub.w	r0, r0, sl
3400bec8:	2240      	movs	r2, #64	@ 0x40
3400beca:	9b04      	ldr	r3, [sp, #16]
3400becc:	3401      	adds	r4, #1
3400bece:	4082      	lsls	r2, r0
3400bed0:	4313      	orrs	r3, r2
3400bed2:	9304      	str	r3, [sp, #16]
3400bed4:	f814 1b01 	ldrb.w	r1, [r4], #1
3400bed8:	2206      	movs	r2, #6
3400beda:	4824      	ldr	r0, [pc, #144]	@ (3400bf6c <_svfiprintf_r+0x1e8>)
3400bedc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3400bee0:	f000 fc7a 	bl	3400c7d8 <memchr>
3400bee4:	2800      	cmp	r0, #0
3400bee6:	d036      	beq.n	3400bf56 <_svfiprintf_r+0x1d2>
3400bee8:	4b21      	ldr	r3, [pc, #132]	@ (3400bf70 <_svfiprintf_r+0x1ec>)
3400beea:	bb1b      	cbnz	r3, 3400bf34 <_svfiprintf_r+0x1b0>
3400beec:	9b03      	ldr	r3, [sp, #12]
3400beee:	3307      	adds	r3, #7
3400bef0:	f023 0307 	bic.w	r3, r3, #7
3400bef4:	3308      	adds	r3, #8
3400bef6:	9303      	str	r3, [sp, #12]
3400bef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400befa:	4433      	add	r3, r6
3400befc:	9309      	str	r3, [sp, #36]	@ 0x24
3400befe:	e76a      	b.n	3400bdd6 <_svfiprintf_r+0x52>
3400bf00:	fb0c 3202 	mla	r2, ip, r2, r3
3400bf04:	460c      	mov	r4, r1
3400bf06:	2001      	movs	r0, #1
3400bf08:	e7a8      	b.n	3400be5c <_svfiprintf_r+0xd8>
3400bf0a:	2300      	movs	r3, #0
3400bf0c:	3401      	adds	r4, #1
3400bf0e:	f04f 0c0a 	mov.w	ip, #10
3400bf12:	4619      	mov	r1, r3
3400bf14:	9305      	str	r3, [sp, #20]
3400bf16:	4620      	mov	r0, r4
3400bf18:	f810 2b01 	ldrb.w	r2, [r0], #1
3400bf1c:	3a30      	subs	r2, #48	@ 0x30
3400bf1e:	2a09      	cmp	r2, #9
3400bf20:	d903      	bls.n	3400bf2a <_svfiprintf_r+0x1a6>
3400bf22:	2b00      	cmp	r3, #0
3400bf24:	d0c6      	beq.n	3400beb4 <_svfiprintf_r+0x130>
3400bf26:	9105      	str	r1, [sp, #20]
3400bf28:	e7c4      	b.n	3400beb4 <_svfiprintf_r+0x130>
3400bf2a:	fb0c 2101 	mla	r1, ip, r1, r2
3400bf2e:	4604      	mov	r4, r0
3400bf30:	2301      	movs	r3, #1
3400bf32:	e7f0      	b.n	3400bf16 <_svfiprintf_r+0x192>
3400bf34:	ab03      	add	r3, sp, #12
3400bf36:	462a      	mov	r2, r5
3400bf38:	a904      	add	r1, sp, #16
3400bf3a:	4638      	mov	r0, r7
3400bf3c:	9300      	str	r3, [sp, #0]
3400bf3e:	4b0d      	ldr	r3, [pc, #52]	@ (3400bf74 <_svfiprintf_r+0x1f0>)
3400bf40:	f3af 8000 	nop.w
3400bf44:	1c42      	adds	r2, r0, #1
3400bf46:	4606      	mov	r6, r0
3400bf48:	d1d6      	bne.n	3400bef8 <_svfiprintf_r+0x174>
3400bf4a:	89ab      	ldrh	r3, [r5, #12]
3400bf4c:	065b      	lsls	r3, r3, #25
3400bf4e:	f53f af2d 	bmi.w	3400bdac <_svfiprintf_r+0x28>
3400bf52:	9809      	ldr	r0, [sp, #36]	@ 0x24
3400bf54:	e72c      	b.n	3400bdb0 <_svfiprintf_r+0x2c>
3400bf56:	ab03      	add	r3, sp, #12
3400bf58:	462a      	mov	r2, r5
3400bf5a:	a904      	add	r1, sp, #16
3400bf5c:	4638      	mov	r0, r7
3400bf5e:	9300      	str	r3, [sp, #0]
3400bf60:	4b04      	ldr	r3, [pc, #16]	@ (3400bf74 <_svfiprintf_r+0x1f0>)
3400bf62:	f000 f9bf 	bl	3400c2e4 <_printf_i>
3400bf66:	e7ed      	b.n	3400bf44 <_svfiprintf_r+0x1c0>
3400bf68:	3400d349 	.word	0x3400d349
3400bf6c:	3400d353 	.word	0x3400d353
3400bf70:	00000000 	.word	0x00000000
3400bf74:	3400bccd 	.word	0x3400bccd
3400bf78:	3400d34f 	.word	0x3400d34f

3400bf7c <__sfputc_r>:
3400bf7c:	6893      	ldr	r3, [r2, #8]
3400bf7e:	3b01      	subs	r3, #1
3400bf80:	2b00      	cmp	r3, #0
3400bf82:	6093      	str	r3, [r2, #8]
3400bf84:	b410      	push	{r4}
3400bf86:	da08      	bge.n	3400bf9a <__sfputc_r+0x1e>
3400bf88:	6994      	ldr	r4, [r2, #24]
3400bf8a:	42a3      	cmp	r3, r4
3400bf8c:	db01      	blt.n	3400bf92 <__sfputc_r+0x16>
3400bf8e:	290a      	cmp	r1, #10
3400bf90:	d103      	bne.n	3400bf9a <__sfputc_r+0x1e>
3400bf92:	f85d 4b04 	ldr.w	r4, [sp], #4
3400bf96:	f7ff bc7a 	b.w	3400b88e <__swbuf_r>
3400bf9a:	6813      	ldr	r3, [r2, #0]
3400bf9c:	1c58      	adds	r0, r3, #1
3400bf9e:	6010      	str	r0, [r2, #0]
3400bfa0:	4608      	mov	r0, r1
3400bfa2:	7019      	strb	r1, [r3, #0]
3400bfa4:	f85d 4b04 	ldr.w	r4, [sp], #4
3400bfa8:	4770      	bx	lr

3400bfaa <__sfputs_r>:
3400bfaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400bfac:	4606      	mov	r6, r0
3400bfae:	460f      	mov	r7, r1
3400bfb0:	4614      	mov	r4, r2
3400bfb2:	18d5      	adds	r5, r2, r3
3400bfb4:	42ac      	cmp	r4, r5
3400bfb6:	d101      	bne.n	3400bfbc <__sfputs_r+0x12>
3400bfb8:	2000      	movs	r0, #0
3400bfba:	e007      	b.n	3400bfcc <__sfputs_r+0x22>
3400bfbc:	463a      	mov	r2, r7
3400bfbe:	f814 1b01 	ldrb.w	r1, [r4], #1
3400bfc2:	4630      	mov	r0, r6
3400bfc4:	f7ff ffda 	bl	3400bf7c <__sfputc_r>
3400bfc8:	1c43      	adds	r3, r0, #1
3400bfca:	d1f3      	bne.n	3400bfb4 <__sfputs_r+0xa>
3400bfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

3400bfd0 <_vfiprintf_r>:
3400bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3400bfd4:	460d      	mov	r5, r1
3400bfd6:	b09d      	sub	sp, #116	@ 0x74
3400bfd8:	4614      	mov	r4, r2
3400bfda:	4698      	mov	r8, r3
3400bfdc:	4606      	mov	r6, r0
3400bfde:	b118      	cbz	r0, 3400bfe8 <_vfiprintf_r+0x18>
3400bfe0:	6a03      	ldr	r3, [r0, #32]
3400bfe2:	b90b      	cbnz	r3, 3400bfe8 <_vfiprintf_r+0x18>
3400bfe4:	f7ff fb36 	bl	3400b654 <__sinit>
3400bfe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400bfea:	07d9      	lsls	r1, r3, #31
3400bfec:	d405      	bmi.n	3400bffa <_vfiprintf_r+0x2a>
3400bfee:	89ab      	ldrh	r3, [r5, #12]
3400bff0:	059a      	lsls	r2, r3, #22
3400bff2:	d402      	bmi.n	3400bffa <_vfiprintf_r+0x2a>
3400bff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400bff6:	f7ff fd6e 	bl	3400bad6 <__retarget_lock_acquire_recursive>
3400bffa:	89ab      	ldrh	r3, [r5, #12]
3400bffc:	071b      	lsls	r3, r3, #28
3400bffe:	d501      	bpl.n	3400c004 <_vfiprintf_r+0x34>
3400c000:	692b      	ldr	r3, [r5, #16]
3400c002:	b99b      	cbnz	r3, 3400c02c <_vfiprintf_r+0x5c>
3400c004:	4629      	mov	r1, r5
3400c006:	4630      	mov	r0, r6
3400c008:	f7ff fc80 	bl	3400b90c <__swsetup_r>
3400c00c:	b170      	cbz	r0, 3400c02c <_vfiprintf_r+0x5c>
3400c00e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400c010:	07dc      	lsls	r4, r3, #31
3400c012:	d504      	bpl.n	3400c01e <_vfiprintf_r+0x4e>
3400c014:	f04f 30ff 	mov.w	r0, #4294967295
3400c018:	b01d      	add	sp, #116	@ 0x74
3400c01a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3400c01e:	89ab      	ldrh	r3, [r5, #12]
3400c020:	0598      	lsls	r0, r3, #22
3400c022:	d4f7      	bmi.n	3400c014 <_vfiprintf_r+0x44>
3400c024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400c026:	f7ff fd57 	bl	3400bad8 <__retarget_lock_release_recursive>
3400c02a:	e7f3      	b.n	3400c014 <_vfiprintf_r+0x44>
3400c02c:	2300      	movs	r3, #0
3400c02e:	f8cd 800c 	str.w	r8, [sp, #12]
3400c032:	f04f 0901 	mov.w	r9, #1
3400c036:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3400c1ec <_vfiprintf_r+0x21c>
3400c03a:	9309      	str	r3, [sp, #36]	@ 0x24
3400c03c:	2320      	movs	r3, #32
3400c03e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3400c042:	2330      	movs	r3, #48	@ 0x30
3400c044:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3400c048:	4623      	mov	r3, r4
3400c04a:	469a      	mov	sl, r3
3400c04c:	f813 2b01 	ldrb.w	r2, [r3], #1
3400c050:	b10a      	cbz	r2, 3400c056 <_vfiprintf_r+0x86>
3400c052:	2a25      	cmp	r2, #37	@ 0x25
3400c054:	d1f9      	bne.n	3400c04a <_vfiprintf_r+0x7a>
3400c056:	ebba 0b04 	subs.w	fp, sl, r4
3400c05a:	d00b      	beq.n	3400c074 <_vfiprintf_r+0xa4>
3400c05c:	465b      	mov	r3, fp
3400c05e:	4622      	mov	r2, r4
3400c060:	4629      	mov	r1, r5
3400c062:	4630      	mov	r0, r6
3400c064:	f7ff ffa1 	bl	3400bfaa <__sfputs_r>
3400c068:	3001      	adds	r0, #1
3400c06a:	f000 80a7 	beq.w	3400c1bc <_vfiprintf_r+0x1ec>
3400c06e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3400c070:	445a      	add	r2, fp
3400c072:	9209      	str	r2, [sp, #36]	@ 0x24
3400c074:	f89a 3000 	ldrb.w	r3, [sl]
3400c078:	2b00      	cmp	r3, #0
3400c07a:	f000 809f 	beq.w	3400c1bc <_vfiprintf_r+0x1ec>
3400c07e:	2300      	movs	r3, #0
3400c080:	f04f 32ff 	mov.w	r2, #4294967295
3400c084:	f10a 0a01 	add.w	sl, sl, #1
3400c088:	9304      	str	r3, [sp, #16]
3400c08a:	9307      	str	r3, [sp, #28]
3400c08c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3400c090:	931a      	str	r3, [sp, #104]	@ 0x68
3400c092:	e9cd 2305 	strd	r2, r3, [sp, #20]
3400c096:	4654      	mov	r4, sl
3400c098:	2205      	movs	r2, #5
3400c09a:	4854      	ldr	r0, [pc, #336]	@ (3400c1ec <_vfiprintf_r+0x21c>)
3400c09c:	f814 1b01 	ldrb.w	r1, [r4], #1
3400c0a0:	f000 fb9a 	bl	3400c7d8 <memchr>
3400c0a4:	9a04      	ldr	r2, [sp, #16]
3400c0a6:	b9d8      	cbnz	r0, 3400c0e0 <_vfiprintf_r+0x110>
3400c0a8:	06d1      	lsls	r1, r2, #27
3400c0aa:	bf44      	itt	mi
3400c0ac:	2320      	movmi	r3, #32
3400c0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3400c0b2:	0713      	lsls	r3, r2, #28
3400c0b4:	bf44      	itt	mi
3400c0b6:	232b      	movmi	r3, #43	@ 0x2b
3400c0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3400c0bc:	f89a 3000 	ldrb.w	r3, [sl]
3400c0c0:	2b2a      	cmp	r3, #42	@ 0x2a
3400c0c2:	d015      	beq.n	3400c0f0 <_vfiprintf_r+0x120>
3400c0c4:	9a07      	ldr	r2, [sp, #28]
3400c0c6:	4654      	mov	r4, sl
3400c0c8:	2000      	movs	r0, #0
3400c0ca:	f04f 0c0a 	mov.w	ip, #10
3400c0ce:	4621      	mov	r1, r4
3400c0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
3400c0d4:	3b30      	subs	r3, #48	@ 0x30
3400c0d6:	2b09      	cmp	r3, #9
3400c0d8:	d94b      	bls.n	3400c172 <_vfiprintf_r+0x1a2>
3400c0da:	b1b0      	cbz	r0, 3400c10a <_vfiprintf_r+0x13a>
3400c0dc:	9207      	str	r2, [sp, #28]
3400c0de:	e014      	b.n	3400c10a <_vfiprintf_r+0x13a>
3400c0e0:	eba0 0308 	sub.w	r3, r0, r8
3400c0e4:	46a2      	mov	sl, r4
3400c0e6:	fa09 f303 	lsl.w	r3, r9, r3
3400c0ea:	4313      	orrs	r3, r2
3400c0ec:	9304      	str	r3, [sp, #16]
3400c0ee:	e7d2      	b.n	3400c096 <_vfiprintf_r+0xc6>
3400c0f0:	9b03      	ldr	r3, [sp, #12]
3400c0f2:	1d19      	adds	r1, r3, #4
3400c0f4:	681b      	ldr	r3, [r3, #0]
3400c0f6:	2b00      	cmp	r3, #0
3400c0f8:	9103      	str	r1, [sp, #12]
3400c0fa:	bfbb      	ittet	lt
3400c0fc:	425b      	neglt	r3, r3
3400c0fe:	f042 0202 	orrlt.w	r2, r2, #2
3400c102:	9307      	strge	r3, [sp, #28]
3400c104:	9307      	strlt	r3, [sp, #28]
3400c106:	bfb8      	it	lt
3400c108:	9204      	strlt	r2, [sp, #16]
3400c10a:	7823      	ldrb	r3, [r4, #0]
3400c10c:	2b2e      	cmp	r3, #46	@ 0x2e
3400c10e:	d10a      	bne.n	3400c126 <_vfiprintf_r+0x156>
3400c110:	7863      	ldrb	r3, [r4, #1]
3400c112:	2b2a      	cmp	r3, #42	@ 0x2a
3400c114:	d132      	bne.n	3400c17c <_vfiprintf_r+0x1ac>
3400c116:	9b03      	ldr	r3, [sp, #12]
3400c118:	3402      	adds	r4, #2
3400c11a:	1d1a      	adds	r2, r3, #4
3400c11c:	681b      	ldr	r3, [r3, #0]
3400c11e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3400c122:	9203      	str	r2, [sp, #12]
3400c124:	9305      	str	r3, [sp, #20]
3400c126:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3400c1fc <_vfiprintf_r+0x22c>
3400c12a:	2203      	movs	r2, #3
3400c12c:	7821      	ldrb	r1, [r4, #0]
3400c12e:	4650      	mov	r0, sl
3400c130:	f000 fb52 	bl	3400c7d8 <memchr>
3400c134:	b138      	cbz	r0, 3400c146 <_vfiprintf_r+0x176>
3400c136:	eba0 000a 	sub.w	r0, r0, sl
3400c13a:	2240      	movs	r2, #64	@ 0x40
3400c13c:	9b04      	ldr	r3, [sp, #16]
3400c13e:	3401      	adds	r4, #1
3400c140:	4082      	lsls	r2, r0
3400c142:	4313      	orrs	r3, r2
3400c144:	9304      	str	r3, [sp, #16]
3400c146:	f814 1b01 	ldrb.w	r1, [r4], #1
3400c14a:	2206      	movs	r2, #6
3400c14c:	4828      	ldr	r0, [pc, #160]	@ (3400c1f0 <_vfiprintf_r+0x220>)
3400c14e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3400c152:	f000 fb41 	bl	3400c7d8 <memchr>
3400c156:	2800      	cmp	r0, #0
3400c158:	d03f      	beq.n	3400c1da <_vfiprintf_r+0x20a>
3400c15a:	4b26      	ldr	r3, [pc, #152]	@ (3400c1f4 <_vfiprintf_r+0x224>)
3400c15c:	bb1b      	cbnz	r3, 3400c1a6 <_vfiprintf_r+0x1d6>
3400c15e:	9b03      	ldr	r3, [sp, #12]
3400c160:	3307      	adds	r3, #7
3400c162:	f023 0307 	bic.w	r3, r3, #7
3400c166:	3308      	adds	r3, #8
3400c168:	9303      	str	r3, [sp, #12]
3400c16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3400c16c:	443b      	add	r3, r7
3400c16e:	9309      	str	r3, [sp, #36]	@ 0x24
3400c170:	e76a      	b.n	3400c048 <_vfiprintf_r+0x78>
3400c172:	fb0c 3202 	mla	r2, ip, r2, r3
3400c176:	460c      	mov	r4, r1
3400c178:	2001      	movs	r0, #1
3400c17a:	e7a8      	b.n	3400c0ce <_vfiprintf_r+0xfe>
3400c17c:	2300      	movs	r3, #0
3400c17e:	3401      	adds	r4, #1
3400c180:	f04f 0c0a 	mov.w	ip, #10
3400c184:	4619      	mov	r1, r3
3400c186:	9305      	str	r3, [sp, #20]
3400c188:	4620      	mov	r0, r4
3400c18a:	f810 2b01 	ldrb.w	r2, [r0], #1
3400c18e:	3a30      	subs	r2, #48	@ 0x30
3400c190:	2a09      	cmp	r2, #9
3400c192:	d903      	bls.n	3400c19c <_vfiprintf_r+0x1cc>
3400c194:	2b00      	cmp	r3, #0
3400c196:	d0c6      	beq.n	3400c126 <_vfiprintf_r+0x156>
3400c198:	9105      	str	r1, [sp, #20]
3400c19a:	e7c4      	b.n	3400c126 <_vfiprintf_r+0x156>
3400c19c:	fb0c 2101 	mla	r1, ip, r1, r2
3400c1a0:	4604      	mov	r4, r0
3400c1a2:	2301      	movs	r3, #1
3400c1a4:	e7f0      	b.n	3400c188 <_vfiprintf_r+0x1b8>
3400c1a6:	ab03      	add	r3, sp, #12
3400c1a8:	462a      	mov	r2, r5
3400c1aa:	a904      	add	r1, sp, #16
3400c1ac:	4630      	mov	r0, r6
3400c1ae:	9300      	str	r3, [sp, #0]
3400c1b0:	4b11      	ldr	r3, [pc, #68]	@ (3400c1f8 <_vfiprintf_r+0x228>)
3400c1b2:	f3af 8000 	nop.w
3400c1b6:	4607      	mov	r7, r0
3400c1b8:	1c78      	adds	r0, r7, #1
3400c1ba:	d1d6      	bne.n	3400c16a <_vfiprintf_r+0x19a>
3400c1bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3400c1be:	07d9      	lsls	r1, r3, #31
3400c1c0:	d405      	bmi.n	3400c1ce <_vfiprintf_r+0x1fe>
3400c1c2:	89ab      	ldrh	r3, [r5, #12]
3400c1c4:	059a      	lsls	r2, r3, #22
3400c1c6:	d402      	bmi.n	3400c1ce <_vfiprintf_r+0x1fe>
3400c1c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3400c1ca:	f7ff fc85 	bl	3400bad8 <__retarget_lock_release_recursive>
3400c1ce:	89ab      	ldrh	r3, [r5, #12]
3400c1d0:	065b      	lsls	r3, r3, #25
3400c1d2:	f53f af1f 	bmi.w	3400c014 <_vfiprintf_r+0x44>
3400c1d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
3400c1d8:	e71e      	b.n	3400c018 <_vfiprintf_r+0x48>
3400c1da:	ab03      	add	r3, sp, #12
3400c1dc:	462a      	mov	r2, r5
3400c1de:	a904      	add	r1, sp, #16
3400c1e0:	4630      	mov	r0, r6
3400c1e2:	9300      	str	r3, [sp, #0]
3400c1e4:	4b04      	ldr	r3, [pc, #16]	@ (3400c1f8 <_vfiprintf_r+0x228>)
3400c1e6:	f000 f87d 	bl	3400c2e4 <_printf_i>
3400c1ea:	e7e4      	b.n	3400c1b6 <_vfiprintf_r+0x1e6>
3400c1ec:	3400d349 	.word	0x3400d349
3400c1f0:	3400d353 	.word	0x3400d353
3400c1f4:	00000000 	.word	0x00000000
3400c1f8:	3400bfab 	.word	0x3400bfab
3400c1fc:	3400d34f 	.word	0x3400d34f

3400c200 <_printf_common>:
3400c200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3400c204:	4616      	mov	r6, r2
3400c206:	4698      	mov	r8, r3
3400c208:	688a      	ldr	r2, [r1, #8]
3400c20a:	4607      	mov	r7, r0
3400c20c:	690b      	ldr	r3, [r1, #16]
3400c20e:	460c      	mov	r4, r1
3400c210:	f8dd 9020 	ldr.w	r9, [sp, #32]
3400c214:	4293      	cmp	r3, r2
3400c216:	bfb8      	it	lt
3400c218:	4613      	movlt	r3, r2
3400c21a:	6033      	str	r3, [r6, #0]
3400c21c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
3400c220:	b10a      	cbz	r2, 3400c226 <_printf_common+0x26>
3400c222:	3301      	adds	r3, #1
3400c224:	6033      	str	r3, [r6, #0]
3400c226:	6823      	ldr	r3, [r4, #0]
3400c228:	0699      	lsls	r1, r3, #26
3400c22a:	bf42      	ittt	mi
3400c22c:	6833      	ldrmi	r3, [r6, #0]
3400c22e:	3302      	addmi	r3, #2
3400c230:	6033      	strmi	r3, [r6, #0]
3400c232:	6825      	ldr	r5, [r4, #0]
3400c234:	f015 0506 	ands.w	r5, r5, #6
3400c238:	d106      	bne.n	3400c248 <_printf_common+0x48>
3400c23a:	f104 0a19 	add.w	sl, r4, #25
3400c23e:	68e3      	ldr	r3, [r4, #12]
3400c240:	6832      	ldr	r2, [r6, #0]
3400c242:	1a9b      	subs	r3, r3, r2
3400c244:	42ab      	cmp	r3, r5
3400c246:	dc2b      	bgt.n	3400c2a0 <_printf_common+0xa0>
3400c248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
3400c24c:	6822      	ldr	r2, [r4, #0]
3400c24e:	3b00      	subs	r3, #0
3400c250:	bf18      	it	ne
3400c252:	2301      	movne	r3, #1
3400c254:	0692      	lsls	r2, r2, #26
3400c256:	d430      	bmi.n	3400c2ba <_printf_common+0xba>
3400c258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
3400c25c:	4641      	mov	r1, r8
3400c25e:	4638      	mov	r0, r7
3400c260:	47c8      	blx	r9
3400c262:	3001      	adds	r0, #1
3400c264:	d023      	beq.n	3400c2ae <_printf_common+0xae>
3400c266:	6823      	ldr	r3, [r4, #0]
3400c268:	341a      	adds	r4, #26
3400c26a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
3400c26e:	f003 0306 	and.w	r3, r3, #6
3400c272:	2b04      	cmp	r3, #4
3400c274:	bf0a      	itet	eq
3400c276:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
3400c27a:	2500      	movne	r5, #0
3400c27c:	6833      	ldreq	r3, [r6, #0]
3400c27e:	f04f 0600 	mov.w	r6, #0
3400c282:	bf08      	it	eq
3400c284:	1aed      	subeq	r5, r5, r3
3400c286:	f854 3c12 	ldr.w	r3, [r4, #-18]
3400c28a:	bf08      	it	eq
3400c28c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
3400c290:	4293      	cmp	r3, r2
3400c292:	bfc4      	itt	gt
3400c294:	1a9b      	subgt	r3, r3, r2
3400c296:	18ed      	addgt	r5, r5, r3
3400c298:	42b5      	cmp	r5, r6
3400c29a:	d11a      	bne.n	3400c2d2 <_printf_common+0xd2>
3400c29c:	2000      	movs	r0, #0
3400c29e:	e008      	b.n	3400c2b2 <_printf_common+0xb2>
3400c2a0:	2301      	movs	r3, #1
3400c2a2:	4652      	mov	r2, sl
3400c2a4:	4641      	mov	r1, r8
3400c2a6:	4638      	mov	r0, r7
3400c2a8:	47c8      	blx	r9
3400c2aa:	3001      	adds	r0, #1
3400c2ac:	d103      	bne.n	3400c2b6 <_printf_common+0xb6>
3400c2ae:	f04f 30ff 	mov.w	r0, #4294967295
3400c2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400c2b6:	3501      	adds	r5, #1
3400c2b8:	e7c1      	b.n	3400c23e <_printf_common+0x3e>
3400c2ba:	18e1      	adds	r1, r4, r3
3400c2bc:	1c5a      	adds	r2, r3, #1
3400c2be:	2030      	movs	r0, #48	@ 0x30
3400c2c0:	3302      	adds	r3, #2
3400c2c2:	4422      	add	r2, r4
3400c2c4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
3400c2c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
3400c2cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
3400c2d0:	e7c2      	b.n	3400c258 <_printf_common+0x58>
3400c2d2:	2301      	movs	r3, #1
3400c2d4:	4622      	mov	r2, r4
3400c2d6:	4641      	mov	r1, r8
3400c2d8:	4638      	mov	r0, r7
3400c2da:	47c8      	blx	r9
3400c2dc:	3001      	adds	r0, #1
3400c2de:	d0e6      	beq.n	3400c2ae <_printf_common+0xae>
3400c2e0:	3601      	adds	r6, #1
3400c2e2:	e7d9      	b.n	3400c298 <_printf_common+0x98>

3400c2e4 <_printf_i>:
3400c2e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
3400c2e8:	7e0f      	ldrb	r7, [r1, #24]
3400c2ea:	4691      	mov	r9, r2
3400c2ec:	4680      	mov	r8, r0
3400c2ee:	460c      	mov	r4, r1
3400c2f0:	2f78      	cmp	r7, #120	@ 0x78
3400c2f2:	469a      	mov	sl, r3
3400c2f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
3400c2f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
3400c2fa:	d807      	bhi.n	3400c30c <_printf_i+0x28>
3400c2fc:	2f62      	cmp	r7, #98	@ 0x62
3400c2fe:	d80a      	bhi.n	3400c316 <_printf_i+0x32>
3400c300:	2f00      	cmp	r7, #0
3400c302:	f000 80d2 	beq.w	3400c4aa <_printf_i+0x1c6>
3400c306:	2f58      	cmp	r7, #88	@ 0x58
3400c308:	f000 80b9 	beq.w	3400c47e <_printf_i+0x19a>
3400c30c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400c310:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
3400c314:	e03a      	b.n	3400c38c <_printf_i+0xa8>
3400c316:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
3400c31a:	2b15      	cmp	r3, #21
3400c31c:	d8f6      	bhi.n	3400c30c <_printf_i+0x28>
3400c31e:	a101      	add	r1, pc, #4	@ (adr r1, 3400c324 <_printf_i+0x40>)
3400c320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
3400c324:	3400c37d 	.word	0x3400c37d
3400c328:	3400c391 	.word	0x3400c391
3400c32c:	3400c30d 	.word	0x3400c30d
3400c330:	3400c30d 	.word	0x3400c30d
3400c334:	3400c30d 	.word	0x3400c30d
3400c338:	3400c30d 	.word	0x3400c30d
3400c33c:	3400c391 	.word	0x3400c391
3400c340:	3400c30d 	.word	0x3400c30d
3400c344:	3400c30d 	.word	0x3400c30d
3400c348:	3400c30d 	.word	0x3400c30d
3400c34c:	3400c30d 	.word	0x3400c30d
3400c350:	3400c491 	.word	0x3400c491
3400c354:	3400c3bb 	.word	0x3400c3bb
3400c358:	3400c44b 	.word	0x3400c44b
3400c35c:	3400c30d 	.word	0x3400c30d
3400c360:	3400c30d 	.word	0x3400c30d
3400c364:	3400c4b3 	.word	0x3400c4b3
3400c368:	3400c30d 	.word	0x3400c30d
3400c36c:	3400c3bb 	.word	0x3400c3bb
3400c370:	3400c30d 	.word	0x3400c30d
3400c374:	3400c30d 	.word	0x3400c30d
3400c378:	3400c453 	.word	0x3400c453
3400c37c:	6833      	ldr	r3, [r6, #0]
3400c37e:	1d1a      	adds	r2, r3, #4
3400c380:	681b      	ldr	r3, [r3, #0]
3400c382:	6032      	str	r2, [r6, #0]
3400c384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
3400c388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
3400c38c:	2301      	movs	r3, #1
3400c38e:	e09d      	b.n	3400c4cc <_printf_i+0x1e8>
3400c390:	6833      	ldr	r3, [r6, #0]
3400c392:	6820      	ldr	r0, [r4, #0]
3400c394:	1d19      	adds	r1, r3, #4
3400c396:	6031      	str	r1, [r6, #0]
3400c398:	0606      	lsls	r6, r0, #24
3400c39a:	d501      	bpl.n	3400c3a0 <_printf_i+0xbc>
3400c39c:	681d      	ldr	r5, [r3, #0]
3400c39e:	e003      	b.n	3400c3a8 <_printf_i+0xc4>
3400c3a0:	0645      	lsls	r5, r0, #25
3400c3a2:	d5fb      	bpl.n	3400c39c <_printf_i+0xb8>
3400c3a4:	f9b3 5000 	ldrsh.w	r5, [r3]
3400c3a8:	2d00      	cmp	r5, #0
3400c3aa:	da03      	bge.n	3400c3b4 <_printf_i+0xd0>
3400c3ac:	232d      	movs	r3, #45	@ 0x2d
3400c3ae:	426d      	negs	r5, r5
3400c3b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400c3b4:	4859      	ldr	r0, [pc, #356]	@ (3400c51c <_printf_i+0x238>)
3400c3b6:	230a      	movs	r3, #10
3400c3b8:	e011      	b.n	3400c3de <_printf_i+0xfa>
3400c3ba:	6821      	ldr	r1, [r4, #0]
3400c3bc:	6833      	ldr	r3, [r6, #0]
3400c3be:	0608      	lsls	r0, r1, #24
3400c3c0:	f853 5b04 	ldr.w	r5, [r3], #4
3400c3c4:	d402      	bmi.n	3400c3cc <_printf_i+0xe8>
3400c3c6:	0649      	lsls	r1, r1, #25
3400c3c8:	bf48      	it	mi
3400c3ca:	b2ad      	uxthmi	r5, r5
3400c3cc:	2f6f      	cmp	r7, #111	@ 0x6f
3400c3ce:	6033      	str	r3, [r6, #0]
3400c3d0:	4852      	ldr	r0, [pc, #328]	@ (3400c51c <_printf_i+0x238>)
3400c3d2:	bf14      	ite	ne
3400c3d4:	230a      	movne	r3, #10
3400c3d6:	2308      	moveq	r3, #8
3400c3d8:	2100      	movs	r1, #0
3400c3da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
3400c3de:	6866      	ldr	r6, [r4, #4]
3400c3e0:	2e00      	cmp	r6, #0
3400c3e2:	60a6      	str	r6, [r4, #8]
3400c3e4:	bfa2      	ittt	ge
3400c3e6:	6821      	ldrge	r1, [r4, #0]
3400c3e8:	f021 0104 	bicge.w	r1, r1, #4
3400c3ec:	6021      	strge	r1, [r4, #0]
3400c3ee:	b90d      	cbnz	r5, 3400c3f4 <_printf_i+0x110>
3400c3f0:	2e00      	cmp	r6, #0
3400c3f2:	d04b      	beq.n	3400c48c <_printf_i+0x1a8>
3400c3f4:	4616      	mov	r6, r2
3400c3f6:	fbb5 f1f3 	udiv	r1, r5, r3
3400c3fa:	fb03 5711 	mls	r7, r3, r1, r5
3400c3fe:	5dc7      	ldrb	r7, [r0, r7]
3400c400:	f806 7d01 	strb.w	r7, [r6, #-1]!
3400c404:	462f      	mov	r7, r5
3400c406:	460d      	mov	r5, r1
3400c408:	42bb      	cmp	r3, r7
3400c40a:	d9f4      	bls.n	3400c3f6 <_printf_i+0x112>
3400c40c:	2b08      	cmp	r3, #8
3400c40e:	d10b      	bne.n	3400c428 <_printf_i+0x144>
3400c410:	6823      	ldr	r3, [r4, #0]
3400c412:	07df      	lsls	r7, r3, #31
3400c414:	d508      	bpl.n	3400c428 <_printf_i+0x144>
3400c416:	6923      	ldr	r3, [r4, #16]
3400c418:	6861      	ldr	r1, [r4, #4]
3400c41a:	4299      	cmp	r1, r3
3400c41c:	bfde      	ittt	le
3400c41e:	2330      	movle	r3, #48	@ 0x30
3400c420:	f806 3c01 	strble.w	r3, [r6, #-1]
3400c424:	f106 36ff 	addle.w	r6, r6, #4294967295
3400c428:	1b92      	subs	r2, r2, r6
3400c42a:	6122      	str	r2, [r4, #16]
3400c42c:	464b      	mov	r3, r9
3400c42e:	aa03      	add	r2, sp, #12
3400c430:	4621      	mov	r1, r4
3400c432:	4640      	mov	r0, r8
3400c434:	f8cd a000 	str.w	sl, [sp]
3400c438:	f7ff fee2 	bl	3400c200 <_printf_common>
3400c43c:	3001      	adds	r0, #1
3400c43e:	d14a      	bne.n	3400c4d6 <_printf_i+0x1f2>
3400c440:	f04f 30ff 	mov.w	r0, #4294967295
3400c444:	b004      	add	sp, #16
3400c446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3400c44a:	6823      	ldr	r3, [r4, #0]
3400c44c:	f043 0320 	orr.w	r3, r3, #32
3400c450:	6023      	str	r3, [r4, #0]
3400c452:	2778      	movs	r7, #120	@ 0x78
3400c454:	4832      	ldr	r0, [pc, #200]	@ (3400c520 <_printf_i+0x23c>)
3400c456:	6823      	ldr	r3, [r4, #0]
3400c458:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
3400c45c:	061f      	lsls	r7, r3, #24
3400c45e:	6831      	ldr	r1, [r6, #0]
3400c460:	f851 5b04 	ldr.w	r5, [r1], #4
3400c464:	d402      	bmi.n	3400c46c <_printf_i+0x188>
3400c466:	065f      	lsls	r7, r3, #25
3400c468:	bf48      	it	mi
3400c46a:	b2ad      	uxthmi	r5, r5
3400c46c:	6031      	str	r1, [r6, #0]
3400c46e:	07d9      	lsls	r1, r3, #31
3400c470:	bf44      	itt	mi
3400c472:	f043 0320 	orrmi.w	r3, r3, #32
3400c476:	6023      	strmi	r3, [r4, #0]
3400c478:	b11d      	cbz	r5, 3400c482 <_printf_i+0x19e>
3400c47a:	2310      	movs	r3, #16
3400c47c:	e7ac      	b.n	3400c3d8 <_printf_i+0xf4>
3400c47e:	4827      	ldr	r0, [pc, #156]	@ (3400c51c <_printf_i+0x238>)
3400c480:	e7e9      	b.n	3400c456 <_printf_i+0x172>
3400c482:	6823      	ldr	r3, [r4, #0]
3400c484:	f023 0320 	bic.w	r3, r3, #32
3400c488:	6023      	str	r3, [r4, #0]
3400c48a:	e7f6      	b.n	3400c47a <_printf_i+0x196>
3400c48c:	4616      	mov	r6, r2
3400c48e:	e7bd      	b.n	3400c40c <_printf_i+0x128>
3400c490:	6833      	ldr	r3, [r6, #0]
3400c492:	6825      	ldr	r5, [r4, #0]
3400c494:	1d18      	adds	r0, r3, #4
3400c496:	6961      	ldr	r1, [r4, #20]
3400c498:	6030      	str	r0, [r6, #0]
3400c49a:	062e      	lsls	r6, r5, #24
3400c49c:	681b      	ldr	r3, [r3, #0]
3400c49e:	d501      	bpl.n	3400c4a4 <_printf_i+0x1c0>
3400c4a0:	6019      	str	r1, [r3, #0]
3400c4a2:	e002      	b.n	3400c4aa <_printf_i+0x1c6>
3400c4a4:	0668      	lsls	r0, r5, #25
3400c4a6:	d5fb      	bpl.n	3400c4a0 <_printf_i+0x1bc>
3400c4a8:	8019      	strh	r1, [r3, #0]
3400c4aa:	2300      	movs	r3, #0
3400c4ac:	4616      	mov	r6, r2
3400c4ae:	6123      	str	r3, [r4, #16]
3400c4b0:	e7bc      	b.n	3400c42c <_printf_i+0x148>
3400c4b2:	6833      	ldr	r3, [r6, #0]
3400c4b4:	2100      	movs	r1, #0
3400c4b6:	1d1a      	adds	r2, r3, #4
3400c4b8:	6032      	str	r2, [r6, #0]
3400c4ba:	681e      	ldr	r6, [r3, #0]
3400c4bc:	6862      	ldr	r2, [r4, #4]
3400c4be:	4630      	mov	r0, r6
3400c4c0:	f000 f98a 	bl	3400c7d8 <memchr>
3400c4c4:	b108      	cbz	r0, 3400c4ca <_printf_i+0x1e6>
3400c4c6:	1b80      	subs	r0, r0, r6
3400c4c8:	6060      	str	r0, [r4, #4]
3400c4ca:	6863      	ldr	r3, [r4, #4]
3400c4cc:	6123      	str	r3, [r4, #16]
3400c4ce:	2300      	movs	r3, #0
3400c4d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
3400c4d4:	e7aa      	b.n	3400c42c <_printf_i+0x148>
3400c4d6:	6923      	ldr	r3, [r4, #16]
3400c4d8:	4632      	mov	r2, r6
3400c4da:	4649      	mov	r1, r9
3400c4dc:	4640      	mov	r0, r8
3400c4de:	47d0      	blx	sl
3400c4e0:	3001      	adds	r0, #1
3400c4e2:	d0ad      	beq.n	3400c440 <_printf_i+0x15c>
3400c4e4:	6823      	ldr	r3, [r4, #0]
3400c4e6:	079b      	lsls	r3, r3, #30
3400c4e8:	d413      	bmi.n	3400c512 <_printf_i+0x22e>
3400c4ea:	68e0      	ldr	r0, [r4, #12]
3400c4ec:	9b03      	ldr	r3, [sp, #12]
3400c4ee:	4298      	cmp	r0, r3
3400c4f0:	bfb8      	it	lt
3400c4f2:	4618      	movlt	r0, r3
3400c4f4:	e7a6      	b.n	3400c444 <_printf_i+0x160>
3400c4f6:	2301      	movs	r3, #1
3400c4f8:	4632      	mov	r2, r6
3400c4fa:	4649      	mov	r1, r9
3400c4fc:	4640      	mov	r0, r8
3400c4fe:	47d0      	blx	sl
3400c500:	3001      	adds	r0, #1
3400c502:	d09d      	beq.n	3400c440 <_printf_i+0x15c>
3400c504:	3501      	adds	r5, #1
3400c506:	68e3      	ldr	r3, [r4, #12]
3400c508:	9903      	ldr	r1, [sp, #12]
3400c50a:	1a5b      	subs	r3, r3, r1
3400c50c:	42ab      	cmp	r3, r5
3400c50e:	dcf2      	bgt.n	3400c4f6 <_printf_i+0x212>
3400c510:	e7eb      	b.n	3400c4ea <_printf_i+0x206>
3400c512:	2500      	movs	r5, #0
3400c514:	f104 0619 	add.w	r6, r4, #25
3400c518:	e7f5      	b.n	3400c506 <_printf_i+0x222>
3400c51a:	bf00      	nop
3400c51c:	3400d35a 	.word	0x3400d35a
3400c520:	3400d36b 	.word	0x3400d36b

3400c524 <__sflush_r>:
3400c524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3400c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400c52c:	0716      	lsls	r6, r2, #28
3400c52e:	4605      	mov	r5, r0
3400c530:	460c      	mov	r4, r1
3400c532:	d454      	bmi.n	3400c5de <__sflush_r+0xba>
3400c534:	684b      	ldr	r3, [r1, #4]
3400c536:	2b00      	cmp	r3, #0
3400c538:	dc02      	bgt.n	3400c540 <__sflush_r+0x1c>
3400c53a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3400c53c:	2b00      	cmp	r3, #0
3400c53e:	dd48      	ble.n	3400c5d2 <__sflush_r+0xae>
3400c540:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400c542:	2e00      	cmp	r6, #0
3400c544:	d045      	beq.n	3400c5d2 <__sflush_r+0xae>
3400c546:	2300      	movs	r3, #0
3400c548:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3400c54c:	682f      	ldr	r7, [r5, #0]
3400c54e:	6a21      	ldr	r1, [r4, #32]
3400c550:	602b      	str	r3, [r5, #0]
3400c552:	d030      	beq.n	3400c5b6 <__sflush_r+0x92>
3400c554:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3400c556:	89a3      	ldrh	r3, [r4, #12]
3400c558:	0759      	lsls	r1, r3, #29
3400c55a:	d505      	bpl.n	3400c568 <__sflush_r+0x44>
3400c55c:	6863      	ldr	r3, [r4, #4]
3400c55e:	1ad2      	subs	r2, r2, r3
3400c560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3400c562:	b10b      	cbz	r3, 3400c568 <__sflush_r+0x44>
3400c564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3400c566:	1ad2      	subs	r2, r2, r3
3400c568:	2300      	movs	r3, #0
3400c56a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3400c56c:	6a21      	ldr	r1, [r4, #32]
3400c56e:	4628      	mov	r0, r5
3400c570:	47b0      	blx	r6
3400c572:	1c43      	adds	r3, r0, #1
3400c574:	89a3      	ldrh	r3, [r4, #12]
3400c576:	d106      	bne.n	3400c586 <__sflush_r+0x62>
3400c578:	6829      	ldr	r1, [r5, #0]
3400c57a:	291d      	cmp	r1, #29
3400c57c:	d82b      	bhi.n	3400c5d6 <__sflush_r+0xb2>
3400c57e:	4a2a      	ldr	r2, [pc, #168]	@ (3400c628 <__sflush_r+0x104>)
3400c580:	410a      	asrs	r2, r1
3400c582:	07d6      	lsls	r6, r2, #31
3400c584:	d427      	bmi.n	3400c5d6 <__sflush_r+0xb2>
3400c586:	2200      	movs	r2, #0
3400c588:	04d9      	lsls	r1, r3, #19
3400c58a:	6062      	str	r2, [r4, #4]
3400c58c:	6922      	ldr	r2, [r4, #16]
3400c58e:	6022      	str	r2, [r4, #0]
3400c590:	d504      	bpl.n	3400c59c <__sflush_r+0x78>
3400c592:	1c42      	adds	r2, r0, #1
3400c594:	d101      	bne.n	3400c59a <__sflush_r+0x76>
3400c596:	682b      	ldr	r3, [r5, #0]
3400c598:	b903      	cbnz	r3, 3400c59c <__sflush_r+0x78>
3400c59a:	6560      	str	r0, [r4, #84]	@ 0x54
3400c59c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3400c59e:	602f      	str	r7, [r5, #0]
3400c5a0:	b1b9      	cbz	r1, 3400c5d2 <__sflush_r+0xae>
3400c5a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3400c5a6:	4299      	cmp	r1, r3
3400c5a8:	d002      	beq.n	3400c5b0 <__sflush_r+0x8c>
3400c5aa:	4628      	mov	r0, r5
3400c5ac:	f7ff fa96 	bl	3400badc <_free_r>
3400c5b0:	2300      	movs	r3, #0
3400c5b2:	6363      	str	r3, [r4, #52]	@ 0x34
3400c5b4:	e00d      	b.n	3400c5d2 <__sflush_r+0xae>
3400c5b6:	2301      	movs	r3, #1
3400c5b8:	4628      	mov	r0, r5
3400c5ba:	47b0      	blx	r6
3400c5bc:	4602      	mov	r2, r0
3400c5be:	1c50      	adds	r0, r2, #1
3400c5c0:	d1c9      	bne.n	3400c556 <__sflush_r+0x32>
3400c5c2:	682b      	ldr	r3, [r5, #0]
3400c5c4:	2b00      	cmp	r3, #0
3400c5c6:	d0c6      	beq.n	3400c556 <__sflush_r+0x32>
3400c5c8:	2b1d      	cmp	r3, #29
3400c5ca:	d001      	beq.n	3400c5d0 <__sflush_r+0xac>
3400c5cc:	2b16      	cmp	r3, #22
3400c5ce:	d11d      	bne.n	3400c60c <__sflush_r+0xe8>
3400c5d0:	602f      	str	r7, [r5, #0]
3400c5d2:	2000      	movs	r0, #0
3400c5d4:	e021      	b.n	3400c61a <__sflush_r+0xf6>
3400c5d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400c5da:	b21b      	sxth	r3, r3
3400c5dc:	e01a      	b.n	3400c614 <__sflush_r+0xf0>
3400c5de:	690f      	ldr	r7, [r1, #16]
3400c5e0:	2f00      	cmp	r7, #0
3400c5e2:	d0f6      	beq.n	3400c5d2 <__sflush_r+0xae>
3400c5e4:	0793      	lsls	r3, r2, #30
3400c5e6:	680e      	ldr	r6, [r1, #0]
3400c5e8:	600f      	str	r7, [r1, #0]
3400c5ea:	bf0c      	ite	eq
3400c5ec:	694b      	ldreq	r3, [r1, #20]
3400c5ee:	2300      	movne	r3, #0
3400c5f0:	eba6 0807 	sub.w	r8, r6, r7
3400c5f4:	608b      	str	r3, [r1, #8]
3400c5f6:	f1b8 0f00 	cmp.w	r8, #0
3400c5fa:	ddea      	ble.n	3400c5d2 <__sflush_r+0xae>
3400c5fc:	4643      	mov	r3, r8
3400c5fe:	463a      	mov	r2, r7
3400c600:	6a21      	ldr	r1, [r4, #32]
3400c602:	4628      	mov	r0, r5
3400c604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3400c606:	47b0      	blx	r6
3400c608:	2800      	cmp	r0, #0
3400c60a:	dc08      	bgt.n	3400c61e <__sflush_r+0xfa>
3400c60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400c610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3400c614:	f04f 30ff 	mov.w	r0, #4294967295
3400c618:	81a3      	strh	r3, [r4, #12]
3400c61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400c61e:	4407      	add	r7, r0
3400c620:	eba8 0800 	sub.w	r8, r8, r0
3400c624:	e7e7      	b.n	3400c5f6 <__sflush_r+0xd2>
3400c626:	bf00      	nop
3400c628:	dfbffffe 	.word	0xdfbffffe

3400c62c <_fflush_r>:
3400c62c:	b538      	push	{r3, r4, r5, lr}
3400c62e:	690b      	ldr	r3, [r1, #16]
3400c630:	4605      	mov	r5, r0
3400c632:	460c      	mov	r4, r1
3400c634:	b913      	cbnz	r3, 3400c63c <_fflush_r+0x10>
3400c636:	2500      	movs	r5, #0
3400c638:	4628      	mov	r0, r5
3400c63a:	bd38      	pop	{r3, r4, r5, pc}
3400c63c:	b118      	cbz	r0, 3400c646 <_fflush_r+0x1a>
3400c63e:	6a03      	ldr	r3, [r0, #32]
3400c640:	b90b      	cbnz	r3, 3400c646 <_fflush_r+0x1a>
3400c642:	f7ff f807 	bl	3400b654 <__sinit>
3400c646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400c64a:	2b00      	cmp	r3, #0
3400c64c:	d0f3      	beq.n	3400c636 <_fflush_r+0xa>
3400c64e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3400c650:	07d0      	lsls	r0, r2, #31
3400c652:	d404      	bmi.n	3400c65e <_fflush_r+0x32>
3400c654:	0599      	lsls	r1, r3, #22
3400c656:	d402      	bmi.n	3400c65e <_fflush_r+0x32>
3400c658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400c65a:	f7ff fa3c 	bl	3400bad6 <__retarget_lock_acquire_recursive>
3400c65e:	4628      	mov	r0, r5
3400c660:	4621      	mov	r1, r4
3400c662:	f7ff ff5f 	bl	3400c524 <__sflush_r>
3400c666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3400c668:	4605      	mov	r5, r0
3400c66a:	07da      	lsls	r2, r3, #31
3400c66c:	d4e4      	bmi.n	3400c638 <_fflush_r+0xc>
3400c66e:	89a3      	ldrh	r3, [r4, #12]
3400c670:	059b      	lsls	r3, r3, #22
3400c672:	d4e1      	bmi.n	3400c638 <_fflush_r+0xc>
3400c674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3400c676:	f7ff fa2f 	bl	3400bad8 <__retarget_lock_release_recursive>
3400c67a:	e7dd      	b.n	3400c638 <_fflush_r+0xc>

3400c67c <__swhatbuf_r>:
3400c67c:	b570      	push	{r4, r5, r6, lr}
3400c67e:	460c      	mov	r4, r1
3400c680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3400c684:	b096      	sub	sp, #88	@ 0x58
3400c686:	4615      	mov	r5, r2
3400c688:	2900      	cmp	r1, #0
3400c68a:	461e      	mov	r6, r3
3400c68c:	da0c      	bge.n	3400c6a8 <__swhatbuf_r+0x2c>
3400c68e:	89a3      	ldrh	r3, [r4, #12]
3400c690:	2100      	movs	r1, #0
3400c692:	f013 0f80 	tst.w	r3, #128	@ 0x80
3400c696:	bf14      	ite	ne
3400c698:	2340      	movne	r3, #64	@ 0x40
3400c69a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3400c69e:	2000      	movs	r0, #0
3400c6a0:	6031      	str	r1, [r6, #0]
3400c6a2:	602b      	str	r3, [r5, #0]
3400c6a4:	b016      	add	sp, #88	@ 0x58
3400c6a6:	bd70      	pop	{r4, r5, r6, pc}
3400c6a8:	466a      	mov	r2, sp
3400c6aa:	f000 f863 	bl	3400c774 <_fstat_r>
3400c6ae:	2800      	cmp	r0, #0
3400c6b0:	dbed      	blt.n	3400c68e <__swhatbuf_r+0x12>
3400c6b2:	9901      	ldr	r1, [sp, #4]
3400c6b4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3400c6b8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3400c6bc:	4259      	negs	r1, r3
3400c6be:	4159      	adcs	r1, r3
3400c6c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3400c6c4:	e7eb      	b.n	3400c69e <__swhatbuf_r+0x22>

3400c6c6 <__smakebuf_r>:
3400c6c6:	898b      	ldrh	r3, [r1, #12]
3400c6c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3400c6ca:	079d      	lsls	r5, r3, #30
3400c6cc:	4606      	mov	r6, r0
3400c6ce:	460c      	mov	r4, r1
3400c6d0:	d507      	bpl.n	3400c6e2 <__smakebuf_r+0x1c>
3400c6d2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3400c6d6:	6023      	str	r3, [r4, #0]
3400c6d8:	6123      	str	r3, [r4, #16]
3400c6da:	2301      	movs	r3, #1
3400c6dc:	6163      	str	r3, [r4, #20]
3400c6de:	b003      	add	sp, #12
3400c6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
3400c6e2:	ab01      	add	r3, sp, #4
3400c6e4:	466a      	mov	r2, sp
3400c6e6:	f7ff ffc9 	bl	3400c67c <__swhatbuf_r>
3400c6ea:	9f00      	ldr	r7, [sp, #0]
3400c6ec:	4605      	mov	r5, r0
3400c6ee:	4630      	mov	r0, r6
3400c6f0:	4639      	mov	r1, r7
3400c6f2:	f7ff fa5f 	bl	3400bbb4 <_malloc_r>
3400c6f6:	b948      	cbnz	r0, 3400c70c <__smakebuf_r+0x46>
3400c6f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3400c6fc:	059a      	lsls	r2, r3, #22
3400c6fe:	d4ee      	bmi.n	3400c6de <__smakebuf_r+0x18>
3400c700:	f023 0303 	bic.w	r3, r3, #3
3400c704:	f043 0302 	orr.w	r3, r3, #2
3400c708:	81a3      	strh	r3, [r4, #12]
3400c70a:	e7e2      	b.n	3400c6d2 <__smakebuf_r+0xc>
3400c70c:	89a3      	ldrh	r3, [r4, #12]
3400c70e:	6020      	str	r0, [r4, #0]
3400c710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3400c714:	81a3      	strh	r3, [r4, #12]
3400c716:	9b01      	ldr	r3, [sp, #4]
3400c718:	e9c4 0704 	strd	r0, r7, [r4, #16]
3400c71c:	b15b      	cbz	r3, 3400c736 <__smakebuf_r+0x70>
3400c71e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3400c722:	4630      	mov	r0, r6
3400c724:	f000 f838 	bl	3400c798 <_isatty_r>
3400c728:	b128      	cbz	r0, 3400c736 <__smakebuf_r+0x70>
3400c72a:	89a3      	ldrh	r3, [r4, #12]
3400c72c:	f023 0303 	bic.w	r3, r3, #3
3400c730:	f043 0301 	orr.w	r3, r3, #1
3400c734:	81a3      	strh	r3, [r4, #12]
3400c736:	89a3      	ldrh	r3, [r4, #12]
3400c738:	431d      	orrs	r5, r3
3400c73a:	81a5      	strh	r5, [r4, #12]
3400c73c:	e7cf      	b.n	3400c6de <__smakebuf_r+0x18>

3400c73e <memmove>:
3400c73e:	4288      	cmp	r0, r1
3400c740:	b510      	push	{r4, lr}
3400c742:	eb01 0402 	add.w	r4, r1, r2
3400c746:	d902      	bls.n	3400c74e <memmove+0x10>
3400c748:	4284      	cmp	r4, r0
3400c74a:	4623      	mov	r3, r4
3400c74c:	d807      	bhi.n	3400c75e <memmove+0x20>
3400c74e:	1e43      	subs	r3, r0, #1
3400c750:	42a1      	cmp	r1, r4
3400c752:	d008      	beq.n	3400c766 <memmove+0x28>
3400c754:	f811 2b01 	ldrb.w	r2, [r1], #1
3400c758:	f803 2f01 	strb.w	r2, [r3, #1]!
3400c75c:	e7f8      	b.n	3400c750 <memmove+0x12>
3400c75e:	4402      	add	r2, r0
3400c760:	4601      	mov	r1, r0
3400c762:	428a      	cmp	r2, r1
3400c764:	d100      	bne.n	3400c768 <memmove+0x2a>
3400c766:	bd10      	pop	{r4, pc}
3400c768:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
3400c76c:	f802 4d01 	strb.w	r4, [r2, #-1]!
3400c770:	e7f7      	b.n	3400c762 <memmove+0x24>
	...

3400c774 <_fstat_r>:
3400c774:	b538      	push	{r3, r4, r5, lr}
3400c776:	2300      	movs	r3, #0
3400c778:	4d06      	ldr	r5, [pc, #24]	@ (3400c794 <_fstat_r+0x20>)
3400c77a:	4604      	mov	r4, r0
3400c77c:	4608      	mov	r0, r1
3400c77e:	4611      	mov	r1, r2
3400c780:	602b      	str	r3, [r5, #0]
3400c782:	f7f4 fc93 	bl	340010ac <_fstat>
3400c786:	1c43      	adds	r3, r0, #1
3400c788:	d102      	bne.n	3400c790 <_fstat_r+0x1c>
3400c78a:	682b      	ldr	r3, [r5, #0]
3400c78c:	b103      	cbz	r3, 3400c790 <_fstat_r+0x1c>
3400c78e:	6023      	str	r3, [r4, #0]
3400c790:	bd38      	pop	{r3, r4, r5, pc}
3400c792:	bf00      	nop
3400c794:	3400d7c0 	.word	0x3400d7c0

3400c798 <_isatty_r>:
3400c798:	b538      	push	{r3, r4, r5, lr}
3400c79a:	2300      	movs	r3, #0
3400c79c:	4d05      	ldr	r5, [pc, #20]	@ (3400c7b4 <_isatty_r+0x1c>)
3400c79e:	4604      	mov	r4, r0
3400c7a0:	4608      	mov	r0, r1
3400c7a2:	602b      	str	r3, [r5, #0]
3400c7a4:	f7f4 fc92 	bl	340010cc <_isatty>
3400c7a8:	1c43      	adds	r3, r0, #1
3400c7aa:	d102      	bne.n	3400c7b2 <_isatty_r+0x1a>
3400c7ac:	682b      	ldr	r3, [r5, #0]
3400c7ae:	b103      	cbz	r3, 3400c7b2 <_isatty_r+0x1a>
3400c7b0:	6023      	str	r3, [r4, #0]
3400c7b2:	bd38      	pop	{r3, r4, r5, pc}
3400c7b4:	3400d7c0 	.word	0x3400d7c0

3400c7b8 <_sbrk_r>:
3400c7b8:	b538      	push	{r3, r4, r5, lr}
3400c7ba:	2300      	movs	r3, #0
3400c7bc:	4d05      	ldr	r5, [pc, #20]	@ (3400c7d4 <_sbrk_r+0x1c>)
3400c7be:	4604      	mov	r4, r0
3400c7c0:	4608      	mov	r0, r1
3400c7c2:	602b      	str	r3, [r5, #0]
3400c7c4:	f7f4 fc9a 	bl	340010fc <_sbrk>
3400c7c8:	1c43      	adds	r3, r0, #1
3400c7ca:	d102      	bne.n	3400c7d2 <_sbrk_r+0x1a>
3400c7cc:	682b      	ldr	r3, [r5, #0]
3400c7ce:	b103      	cbz	r3, 3400c7d2 <_sbrk_r+0x1a>
3400c7d0:	6023      	str	r3, [r4, #0]
3400c7d2:	bd38      	pop	{r3, r4, r5, pc}
3400c7d4:	3400d7c0 	.word	0x3400d7c0

3400c7d8 <memchr>:
3400c7d8:	b2c9      	uxtb	r1, r1
3400c7da:	4603      	mov	r3, r0
3400c7dc:	4402      	add	r2, r0
3400c7de:	b510      	push	{r4, lr}
3400c7e0:	4293      	cmp	r3, r2
3400c7e2:	4618      	mov	r0, r3
3400c7e4:	d101      	bne.n	3400c7ea <memchr+0x12>
3400c7e6:	2000      	movs	r0, #0
3400c7e8:	e003      	b.n	3400c7f2 <memchr+0x1a>
3400c7ea:	7804      	ldrb	r4, [r0, #0]
3400c7ec:	3301      	adds	r3, #1
3400c7ee:	428c      	cmp	r4, r1
3400c7f0:	d1f6      	bne.n	3400c7e0 <memchr+0x8>
3400c7f2:	bd10      	pop	{r4, pc}

3400c7f4 <memcpy>:
3400c7f4:	440a      	add	r2, r1
3400c7f6:	1e43      	subs	r3, r0, #1
3400c7f8:	4291      	cmp	r1, r2
3400c7fa:	d100      	bne.n	3400c7fe <memcpy+0xa>
3400c7fc:	4770      	bx	lr
3400c7fe:	b510      	push	{r4, lr}
3400c800:	f811 4b01 	ldrb.w	r4, [r1], #1
3400c804:	4291      	cmp	r1, r2
3400c806:	f803 4f01 	strb.w	r4, [r3, #1]!
3400c80a:	d1f9      	bne.n	3400c800 <memcpy+0xc>
3400c80c:	bd10      	pop	{r4, pc}

3400c80e <_realloc_r>:
3400c80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3400c812:	4680      	mov	r8, r0
3400c814:	4615      	mov	r5, r2
3400c816:	460c      	mov	r4, r1
3400c818:	b921      	cbnz	r1, 3400c824 <_realloc_r+0x16>
3400c81a:	4611      	mov	r1, r2
3400c81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3400c820:	f7ff b9c8 	b.w	3400bbb4 <_malloc_r>
3400c824:	b92a      	cbnz	r2, 3400c832 <_realloc_r+0x24>
3400c826:	f7ff f959 	bl	3400badc <_free_r>
3400c82a:	2400      	movs	r4, #0
3400c82c:	4620      	mov	r0, r4
3400c82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3400c832:	f000 f81a 	bl	3400c86a <_malloc_usable_size_r>
3400c836:	4285      	cmp	r5, r0
3400c838:	4606      	mov	r6, r0
3400c83a:	d802      	bhi.n	3400c842 <_realloc_r+0x34>
3400c83c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
3400c840:	d8f4      	bhi.n	3400c82c <_realloc_r+0x1e>
3400c842:	4629      	mov	r1, r5
3400c844:	4640      	mov	r0, r8
3400c846:	f7ff f9b5 	bl	3400bbb4 <_malloc_r>
3400c84a:	4607      	mov	r7, r0
3400c84c:	2800      	cmp	r0, #0
3400c84e:	d0ec      	beq.n	3400c82a <_realloc_r+0x1c>
3400c850:	42b5      	cmp	r5, r6
3400c852:	462a      	mov	r2, r5
3400c854:	4621      	mov	r1, r4
3400c856:	bf28      	it	cs
3400c858:	4632      	movcs	r2, r6
3400c85a:	f7ff ffcb 	bl	3400c7f4 <memcpy>
3400c85e:	4621      	mov	r1, r4
3400c860:	4640      	mov	r0, r8
3400c862:	463c      	mov	r4, r7
3400c864:	f7ff f93a 	bl	3400badc <_free_r>
3400c868:	e7e0      	b.n	3400c82c <_realloc_r+0x1e>

3400c86a <_malloc_usable_size_r>:
3400c86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
3400c86e:	1f18      	subs	r0, r3, #4
3400c870:	2b00      	cmp	r3, #0
3400c872:	bfbc      	itt	lt
3400c874:	580b      	ldrlt	r3, [r1, r0]
3400c876:	18c0      	addlt	r0, r0, r3
3400c878:	4770      	bx	lr
	...

3400c87c <_init>:
3400c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400c87e:	bf00      	nop
3400c880:	bcf8      	pop	{r3, r4, r5, r6, r7}
3400c882:	bc08      	pop	{r3}
3400c884:	469e      	mov	lr, r3
3400c886:	4770      	bx	lr

3400c888 <_fini>:
3400c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3400c88a:	bf00      	nop
3400c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
3400c88e:	bc08      	pop	{r3}
3400c890:	469e      	mov	lr, r3
3400c892:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3400d400 <SECURE_SystemCoreClockUpdate>:
3400d400:	e97f e97f 	sg
3400d404:	f7f4 b8ca 	b.w	3400159c <__acle_se_SECURE_SystemCoreClockUpdate>

3400d408 <SECURE_RegisterCallback>:
3400d408:	e97f e97f 	sg
3400d40c:	f7f3 bcb8 	b.w	34000d80 <__acle_se_SECURE_RegisterCallback>
	...
